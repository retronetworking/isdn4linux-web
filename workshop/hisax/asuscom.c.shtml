<HTML>

<!-- Generated by c2html-1.0, Copyright 1998 by Dave Whittington -->
<HEAD>
<TITLE>asuscom.c</TITLE>
<!--#include virtual="/ssi/js.shtml" -->
<!--#include virtual="/ssi/buttondefs.shtml" -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<TABLE WIDTH="100%">
<TR>
<TD ALIGN=LEFT WIDTH="90"><!--#include virtual="/ssi/b_home.shtml" --></TD>
<TD ALIGN=RIGHT WIDTH="90"><!--#include virtual="/ssi/b_index.shtml" --></TD>
</TR>
</TABLE>
<CENTER><H1>asuscom.c</H1></CENTER>

<HR>
<PRE>
<FONT COLOR=#0000FF>/* $Id$

 * asuscom.c     low level stuff for ASUSCOM NETWORK INC. ISDNLink cards
 *
 * Author     Karsten Keil (keil@temic-ech.spacenet.de)
 *
 * Thanks to  ASUSCOM NETWORK INC. Taiwan and  Dynalink NL for informations
 *
 *
 * $Log$
 * Revision 1.3  1998/04/15 16:46:53  keil
 * new init code
 *
 * Revision 1.2  1998/02/02 13:27:06  keil
 * New
 *
 *
 */</FONT>

<FONT COLOR=#A521F7>#define</FONT> <A NAME="__NO_VERSION__">__NO_VERSION__</A>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hisax.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isac.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hscx.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isdnl1.h"</FONT>

<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *CardType[];

<FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *Asuscom_revision = <FONT COLOR="#FF0000">"$Revision$"</FONT>;

<FONT COLOR=#A521F7>#define</FONT> <A NAME="byteout">byteout</A>(addr,val) outb(val,addr)
<FONT COLOR=#A521F7>#define</FONT> <A NAME="bytein">bytein</A>(addr) inb(addr)

<FONT COLOR=#A521F7>#define</FONT> <A NAME="ASUS_ISAC">ASUS_ISAC</A>	0
<FONT COLOR=#A521F7>#define</FONT> <A NAME="ASUS_HSCX">ASUS_HSCX</A>	1
<FONT COLOR=#A521F7>#define</FONT> <A NAME="ASUS_ADR">ASUS_ADR</A>	2
<FONT COLOR=#A521F7>#define</FONT> <A NAME="ASUS_CTRL_U7">ASUS_CTRL_U7</A>	3
<FONT COLOR=#A521F7>#define</FONT> <A NAME="ASUS_CTRL_POTS">ASUS_CTRL_POTS</A>	5

<FONT COLOR=#0000FF>/* CARD_ADR (Write) */</FONT>
<FONT COLOR=#A521F7>#define</FONT> <A NAME="ASUS_RESET">ASUS_RESET</A>      0x80	<FONT COLOR=#0000FF>/* Bit 7 Reset-Leitung */</FONT>

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> u_char
<A HREF="#readreg">readreg</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> ale, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char off)
{
	<FONT COLOR="#298C52">register</FONT> u_char ret;
	<FONT COLOR="#298C52">long</FONT> flags;

	save_flags(flags);
	cli();
	<A HREF="#byteout">byteout</A>(ale, off);
	ret = <A HREF="#bytein">bytein</A>(adr);
	restore_flags(flags);
	<FONT COLOR="#298C52">return</FONT> (ret);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#readfifo">readfifo</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> ale, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char off, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	<FONT COLOR=#0000FF>/* fifo read without cli because it's allready done  */</FONT>

	<A HREF="#byteout">byteout</A>(ale, off);
	insb(adr, data, size);
}


<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#writereg">writereg</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> ale, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char off, u_char data)
{
	<FONT COLOR="#298C52">long</FONT> flags;

	save_flags(flags);
	cli();
	<A HREF="#byteout">byteout</A>(ale, off);
	<A HREF="#byteout">byteout</A>(adr, data);
	restore_flags(flags);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#writefifo">writefifo</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> ale, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char off, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	<FONT COLOR=#0000FF>/* fifo write without cli because it's allready done  */</FONT>
	<A HREF="#byteout">byteout</A>(ale, off);
	outsb(adr, data, size);
}

<FONT COLOR=#0000FF>/* Interface functions */</FONT>

<FONT COLOR="#298C52">static</FONT> u_char
<A NAME="ReadISAC">ReadISAC</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char offset)
{
	<FONT COLOR="#298C52">return</FONT> (<A HREF="#readreg">readreg</A>(cs-&gt;hw.asus.adr, cs-&gt;hw.asus.isac, offset));
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#WriteISAC">WriteISAC</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char offset, u_char value)
{
	<A HREF="#writereg">writereg</A>(cs-&gt;hw.asus.adr, cs-&gt;hw.asus.isac, offset, value);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#ReadISACfifo">ReadISACfifo</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	<A HREF="#readfifo">readfifo</A>(cs-&gt;hw.asus.adr, cs-&gt;hw.asus.isac, 0, data, size);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#WriteISACfifo">WriteISACfifo</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	<A HREF="#writefifo">writefifo</A>(cs-&gt;hw.asus.adr, cs-&gt;hw.asus.isac, 0, data, size);
}

<FONT COLOR="#298C52">static</FONT> u_char
<A HREF="#ReadHSCX">ReadHSCX</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> hscx, u_char offset)
{
	<FONT COLOR="#298C52">return</FONT> (<A HREF="#readreg">readreg</A>(cs-&gt;hw.asus.adr,
			cs-&gt;hw.asus.hscx, offset + (hscx ? 0x40 : 0)));
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#WriteHSCX">WriteHSCX</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> hscx, u_char offset, u_char value)
{
	<A HREF="#writereg">writereg</A>(cs-&gt;hw.asus.adr,
		 cs-&gt;hw.asus.hscx, offset + (hscx ? 0x40 : 0), value);
}

<FONT COLOR=#0000FF>/*
 * fast interrupt HSCX stuff goes here
 */</FONT>

<FONT COLOR=#A521F7>#define</FONT> <A HREF="#READHSCX">READHSCX</A>(cs, nr, reg) <A HREF="#readreg">readreg</A>(cs-&gt;hw.asus.adr, \
		cs-&gt;hw.asus.hscx, reg + (nr ? 0x40 : 0))
<FONT COLOR=#A521F7>#define</FONT> <A HREF="#WRITEHSCX">WRITEHSCX</A>(cs, nr, reg, data) <A HREF="#writereg">writereg</A>(cs-&gt;hw.asus.adr, \
		cs-&gt;hw.asus.hscx, reg + (nr ? 0x40 : 0), data)

<FONT COLOR=#A521F7>#define</FONT> <A HREF="#READHSCXFIFO" NAME="READHSCXFIFO">READHSCXFIFO</A>(cs, nr, ptr, cnt) <A HREF="#readfifo">readfifo</A>(cs-&gt;hw.asus.adr, \
		cs-&gt;hw.asus.hscx, (nr ? 0x40 : 0), ptr, cnt)

<FONT COLOR=#A521F7>#define</FONT> <A HREF="#WRITEHSCXFIFO">WRITEHSCXFIFO</A>(cs, nr, ptr, cnt) <A HREF="#writefifo">writefifo</A>(cs-&gt;hw.asus.adr, \
		cs-&gt;hw.asus.hscx, (nr ? 0x40 : 0), ptr, cnt)

<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hscx_irq.c"</FONT>

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#asuscom_interrupt" NAME="asuscom_interrupt">asuscom_interrupt</A>(<FONT COLOR="#298C52">int</FONT> intno, <FONT COLOR="#298C52">void</FONT> *dev_id, <FONT COLOR="#298C52">struct</FONT> pt_regs *regs)
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = dev_id;
	u_char val, stat = 0;

	<FONT COLOR="#298C52">if</FONT> (!cs) {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"ISDNLink: Spurious interrupt!\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT>;
	}
	val = <A HREF="#readreg">readreg</A>(cs-&gt;hw.asus.adr, cs-&gt;hw.asus.hscx, <A HREF="hscx.h.shtml#HSCX_ISTA">HSCX_ISTA</A> + 0x40);
      Start_HSCX:
	<FONT COLOR="#298C52">if</FONT> (val) {
		<A HREF="hscx_irq.c.shtml#hscx_int_main">hscx_int_main</A>(cs, val);
		stat |= 1;
	}
	val = <A HREF="#readreg">readreg</A>(cs-&gt;hw.asus.adr, cs-&gt;hw.asus.isac, <A HREF="isac.h.shtml#ISAC_ISTA">ISAC_ISTA</A>);
      Start_ISAC:
	<FONT COLOR="#298C52">if</FONT> (val) {
		<A HREF="isac.c.shtml#isac_interrupt">isac_interrupt</A>(cs, val);
		stat |= 2;
	}
	val = <A HREF="#readreg">readreg</A>(cs-&gt;hw.asus.adr, cs-&gt;hw.asus.hscx, <A HREF="hscx.h.shtml#HSCX_ISTA">HSCX_ISTA</A> + 0x40);
	<FONT COLOR="#298C52">if</FONT> (val) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>)
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"HSCX IntStat after IntRoutine"</FONT>);
		<FONT COLOR="#298C52">goto</FONT> Start_HSCX;
	}
	val = <A HREF="#readreg">readreg</A>(cs-&gt;hw.asus.adr, cs-&gt;hw.asus.isac, <A HREF="isac.h.shtml#ISAC_ISTA">ISAC_ISTA</A>);
	<FONT COLOR="#298C52">if</FONT> (val) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_ISAC">L1_DEB_ISAC</A>)
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"ISAC IntStat after IntRoutine"</FONT>);
		<FONT COLOR="#298C52">goto</FONT> Start_ISAC;
	}
	<FONT COLOR="#298C52">if</FONT> (stat &amp; 1) {
		<A HREF="#writereg">writereg</A>(cs-&gt;hw.asus.adr, cs-&gt;hw.asus.hscx, <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A>, 0xFF);
		<A HREF="#writereg">writereg</A>(cs-&gt;hw.asus.adr, cs-&gt;hw.asus.hscx, <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A> + 0x40, 0xFF);
		<A HREF="#writereg">writereg</A>(cs-&gt;hw.asus.adr, cs-&gt;hw.asus.hscx, <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A>, 0x0);
		<A HREF="#writereg">writereg</A>(cs-&gt;hw.asus.adr, cs-&gt;hw.asus.hscx, <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A> + 0x40, 0x0);
	}
	<FONT COLOR="#298C52">if</FONT> (stat &amp; 2) {
		<A HREF="#writereg">writereg</A>(cs-&gt;hw.asus.adr, cs-&gt;hw.asus.isac, <A HREF="isac.h.shtml#ISAC_MASK">ISAC_MASK</A>, 0xFF);
		<A HREF="#writereg">writereg</A>(cs-&gt;hw.asus.adr, cs-&gt;hw.asus.isac, <A HREF="isac.h.shtml#ISAC_MASK">ISAC_MASK</A>, 0x0);
	}
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="release_io_asuscom">release_io_asuscom</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">int</FONT> bytecnt = 8;

	<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.asus.cfg_reg)
		release_region(cs-&gt;hw.asus.cfg_reg, bytecnt);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="reset_asuscom">reset_asuscom</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">long</FONT> flags;

	<A HREF="#byteout">byteout</A>(cs-&gt;hw.asus.adr, <A HREF="#ASUS_RESET">ASUS_RESET</A>);	<FONT COLOR=#0000FF>/* Reset On */</FONT>
	save_flags(flags);
	sti();
	current-&gt;state = TASK_INTERRUPTIBLE;
	current-&gt;timeout = jiffies + 1;
	schedule();
	<A HREF="#byteout">byteout</A>(cs-&gt;hw.asus.adr, 0);	<FONT COLOR=#0000FF>/* Reset Off */</FONT>
	current-&gt;state = TASK_INTERRUPTIBLE;
	current-&gt;timeout = jiffies + 1;
	schedule();
	restore_flags(flags);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
<A HREF="#Asus_card_msg" NAME="Asus_card_msg">Asus_card_msg</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> mt, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">switch</FONT> (mt) {
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_RESET">CARD_RESET</A>:
			<A HREF="#reset_asuscom">reset_asuscom</A>(cs);
			<FONT COLOR="#298C52">return</FONT>(0);
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_RELEASE">CARD_RELEASE</A>:
			<A HREF="#release_io_asuscom">release_io_asuscom</A>(cs);
			<FONT COLOR="#298C52">return</FONT>(0);
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_SETIRQ">CARD_SETIRQ</A>:
			<FONT COLOR="#298C52">return</FONT>(request_irq(cs-&gt;irq, &amp;<A HREF="#asuscom_interrupt">asuscom_interrupt</A>,
					<A HREF="hisax.h.shtml#I4L_IRQ_FLAG">I4L_IRQ_FLAG</A>, <FONT COLOR="#FF0000">"HiSax"</FONT>, cs));
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_INIT">CARD_INIT</A>:
			inithscxisac(cs, 3);
			<FONT COLOR="#298C52">return</FONT>(0);
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_TEST">CARD_TEST</A>:
			<FONT COLOR="#298C52">return</FONT>(0);
	}
	<FONT COLOR="#298C52">return</FONT>(0);
}

<A NAME="__initfunc">__initfunc</A>(<FONT COLOR="#298C52">int</FONT>
setup_asuscom(<FONT COLOR="#298C52">struct</FONT> IsdnCard *card))
{
	<FONT COLOR="#298C52">int</FONT> bytecnt;
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = card-&gt;cs;
	<FONT COLOR="#298C52">char</FONT> tmp[64];

	strcpy(tmp, Asuscom_revision);
	printk(KERN_INFO <FONT COLOR="#FF0000">"HiSax: Asuscom ISDNLink driver Rev. %s\n"</FONT>, HiSax_getrev(tmp));
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;typ != <A HREF="hisax.h.shtml#ISDN_CTYPE_ASUSCOM">ISDN_CTYPE_ASUSCOM</A>)
		<FONT COLOR="#298C52">return</FONT> (0);

	bytecnt = 8;
	cs-&gt;hw.asus.cfg_reg = card-&gt;para[1];
	cs-&gt;irq = card-&gt;para[0];
	cs-&gt;hw.asus.adr = cs-&gt;hw.asus.cfg_reg + <A HREF="#ASUS_ADR">ASUS_ADR</A>;
	cs-&gt;hw.asus.isac = cs-&gt;hw.asus.cfg_reg + <A HREF="#ASUS_ISAC">ASUS_ISAC</A>;
	cs-&gt;hw.asus.hscx = cs-&gt;hw.asus.cfg_reg + <A HREF="#ASUS_HSCX">ASUS_HSCX</A>;
	cs-&gt;hw.asus.u7 = cs-&gt;hw.asus.cfg_reg + <A HREF="#ASUS_CTRL_U7">ASUS_CTRL_U7</A>;
	cs-&gt;hw.asus.pots = cs-&gt;hw.asus.cfg_reg + <A HREF="#ASUS_CTRL_POTS">ASUS_CTRL_POTS</A>;

	<FONT COLOR="#298C52">if</FONT> (check_region((cs-&gt;hw.asus.cfg_reg), bytecnt)) {
		printk(KERN_WARNING
		       <FONT COLOR="#FF0000">"HiSax: %s config port %x-%x already in use\n"</FONT>,
		       CardType[card-&gt;typ],
		       cs-&gt;hw.asus.cfg_reg,
		       cs-&gt;hw.asus.cfg_reg + bytecnt);
		<FONT COLOR="#298C52">return</FONT> (0);
	} <FONT COLOR="#298C52">else</FONT> {
		request_region(cs-&gt;hw.asus.cfg_reg, bytecnt, <FONT COLOR="#FF0000">"asuscom isdn"</FONT>);
	}

	printk(KERN_INFO
	       <FONT COLOR="#FF0000">"ISDNLink: defined at 0x%x IRQ %d\n"</FONT>,
	       cs-&gt;hw.asus.cfg_reg,
	       cs-&gt;irq);
	printk(KERN_INFO <FONT COLOR="#FF0000">"ISDNLink: resetting card\n"</FONT>);
	<A HREF="#reset_asuscom">reset_asuscom</A>(cs);
	cs-&gt;readisac = &amp;<A HREF="#ReadISAC">ReadISAC</A>;
	cs-&gt;writeisac = &amp;<A HREF="#WriteISAC">WriteISAC</A>;
	cs-&gt;readisacfifo = &amp;<A HREF="#ReadISACfifo">ReadISACfifo</A>;
	cs-&gt;writeisacfifo = &amp;<A HREF="#WriteISACfifo">WriteISACfifo</A>;
	cs-&gt;BC_Read_Reg = &amp;<A HREF="#ReadHSCX">ReadHSCX</A>;
	cs-&gt;BC_Write_Reg = &amp;<A HREF="#WriteHSCX">WriteHSCX</A>;
	cs-&gt;BC_Send_Data = &amp;<A HREF="hscx_irq.c.shtml#hscx_fill_fifo">hscx_fill_fifo</A>;
	cs-&gt;cardmsg = &amp;<A HREF="#Asus_card_msg">Asus_card_msg</A>;
	<A HREF="isac.c.shtml#ISACVersion">ISACVersion</A>(cs, <FONT COLOR="#FF0000">"ISDNLink:"</FONT>);
	<FONT COLOR="#298C52">if</FONT> (HscxVersion(cs, <FONT COLOR="#FF0000">"ISDNLink:"</FONT>)) {
		printk(KERN_WARNING
		     <FONT COLOR="#FF0000">"ISDNLink: wrong HSCX versions check IO address\n"</FONT>);
		<A HREF="#release_io_asuscom">release_io_asuscom</A>(cs);
		<FONT COLOR="#298C52">return</FONT> (0);
	}
	<FONT COLOR="#298C52">return</FONT> (1);
}
</BODY>

</HTML>
