<HTML>

<!-- Generated by c2html-1.0, Copyright 1998 by Dave Whittington -->
<HEAD>
<TITLE>isdnl2.c</TITLE>
<!--#include virtual="/ssi/js.shtml" -->
<!--#include virtual="/ssi/buttondefs.shtml" -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<TABLE WIDTH="100%">
<TR>
<TD ALIGN=LEFT WIDTH="90"><!--#include virtual="/ssi/b_home.shtml" --></TD>
<TD ALIGN=RIGHT WIDTH="90"><!--#include virtual="/ssi/b_index.shtml" --></TD>
</TR>
</TABLE>
<CENTER><H1>isdnl2.c</H1></CENTER>

<HR>
<PRE>
<FONT COLOR=#0000FF>/* $Id$

 * Author       Karsten Keil (keil@temic-ech.spacenet.de)
 *              based on the teles driver from Jan den Ouden
 *
 * Thanks to    Jan den Ouden
 *              Fritz Elfert
 *
 * $Log$
 * Revision 2.12  1998/05/25 14:10:12  keil
 * HiSax 3.0
 * X.75 and leased are working again.
 *
 * Revision 2.11  1998/05/25 12:58:08  keil
 * HiSax golden code from certification, Don't use !!!
 * No leased lines, no X75, but many changes.
 *
 * Revision 2.9  1998/04/10 10:35:30  paul
 * fixed (silly?) warnings from egcs on Alpha.
 *
 * Revision 2.8  1998/03/07 22:57:04  tsbogend
 * made HiSax working on Linux/Alpha
 *
 * Revision 2.7  1998/02/12 23:07:47  keil
 * change for 2.1.86 (removing FREE_READ/FREE_WRITE from [dev]_kfree_skb()
 *
 * Revision 2.6  1998/02/02 13:36:15  keil
 * bugfix X.75 win calculation
 *
 * Revision 2.5  1997/11/06 17:09:22  keil
 * New 2.1 init code
 *
 * Revision 2.4  1997/10/29 19:02:01  keil
 * new LL interface
 *
 * Revision 2.3  1997/10/01 09:21:39  fritz
 * Removed old compatibility stuff for 2.0.X kernels.
 * From now on, this code is for 2.1.X ONLY!
 * Old stuff is still in the separate branch.
 *
 * Revision 2.2  1997/07/31 11:49:05  keil
 * Error handling for no TEI assign
 *
 * Revision 2.1  1997/07/27 21:34:38  keil
 * cosmetics
 *
 * Revision 2.0  1997/06/26 11:07:29  keil
 * New q.921 and X.75 Layer2
 *
 *
 *  Old log removed KKe
 *
 */</FONT>
<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#__NO_VERSION__">__NO_VERSION__</A>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hisax.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isdnl2.h"</FONT>

<FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *l2_revision = <FONT COLOR="#FF0000">"$Revision$"</FONT>;

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> <A HREF="#l2m_debug">l2m_debug</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">char</FONT> *s);

<FONT COLOR="#298C52">static</FONT>
<FONT COLOR="#298C52">struct</FONT> Fsm l2fsm =
{NULL, 0, 0, NULL, NULL};

<FONT COLOR="#298C52">enum</FONT> {
	ST_L2_1,
	ST_L2_2,
	ST_L2_3,
	ST_L2_4,
	ST_L2_5,
	ST_L2_6,
	ST_L2_7,
	ST_L2_8,
};

<FONT COLOR=#A521F7>#define</FONT> <A NAME="L2_STATE_COUNT">L2_STATE_COUNT</A> (ST_L2_8+1)

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">char</FONT> *strL2State[] =
{
	<FONT COLOR="#FF0000">"ST_L2_1"</FONT>,
	<FONT COLOR="#FF0000">"ST_L2_2"</FONT>,
	<FONT COLOR="#FF0000">"ST_L2_3"</FONT>,
	<FONT COLOR="#FF0000">"ST_L2_4"</FONT>,
	<FONT COLOR="#FF0000">"ST_L2_5"</FONT>,
	<FONT COLOR="#FF0000">"ST_L2_6"</FONT>,
	<FONT COLOR="#FF0000">"ST_L2_7"</FONT>,
	<FONT COLOR="#FF0000">"ST_L2_8"</FONT>,
};

<FONT COLOR="#298C52">enum</FONT> {
	EV_L2_UI,
	EV_L2_SABMX,
	EV_L2_DISC,
	EV_L2_DM,
	EV_L2_UA,
	EV_L2_FRMR,
	EV_L2_SUPER,
	EV_L2_I,
	EV_L2_DL_DATA,
	EV_L2_ACK_PULL,
	EV_L2_DL_UNIT_DATA,
	EV_L2_DL_ESTABLISH,
	EV_L2_DL_RELEASE,
	EV_L2_MDL_ASSIGN,
	EV_L2_MDL_REMOVE,
	EV_L2_MDL_ERROR,
	EV_L1_DEACTIVATE,
	EV_L2_T200,
	EV_L2_T203,
};

<FONT COLOR=#A521F7>#define</FONT> <A NAME="L2_EVENT_COUNT">L2_EVENT_COUNT</A> (EV_L2_T203+1)

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">char</FONT> *strL2Event[] =
{
	<FONT COLOR="#FF0000">"EV_L2_UI"</FONT>,
	<FONT COLOR="#FF0000">"EV_L2_SABMX"</FONT>,
	<FONT COLOR="#FF0000">"EV_L2_DISC"</FONT>,
	<FONT COLOR="#FF0000">"EV_L2_DM"</FONT>,
	<FONT COLOR="#FF0000">"EV_L2_UA"</FONT>,
	<FONT COLOR="#FF0000">"EV_L2_FRMR"</FONT>,
	<FONT COLOR="#FF0000">"EV_L2_SUPER"</FONT>,
	<FONT COLOR="#FF0000">"EV_L2_I"</FONT>,
	<FONT COLOR="#FF0000">"EV_L2_DL_DATA"</FONT>,
	<FONT COLOR="#FF0000">"EV_L2_ACK_PULL"</FONT>,
	<FONT COLOR="#FF0000">"EV_L2_DL_UNIT_DATA"</FONT>,
	<FONT COLOR="#FF0000">"EV_L2_DL_ESTABLISH"</FONT>,
	<FONT COLOR="#FF0000">"EV_L2_DL_RELEASE"</FONT>,
	<FONT COLOR="#FF0000">"EV_L2_MDL_ASSIGN"</FONT>,
	<FONT COLOR="#FF0000">"EV_L2_MDL_REMOVE"</FONT>,
	<FONT COLOR="#FF0000">"EV_L2_MDL_ERROR"</FONT>,
	<FONT COLOR="#FF0000">"EV_L1_DEACTIVATE"</FONT>,
	<FONT COLOR="#FF0000">"EV_L2_T200"</FONT>,
	<FONT COLOR="#FF0000">"EV_L2_T203"</FONT>,
};

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> <A HREF="#l2addrsize">l2addrsize</A>(<FONT COLOR="#298C52">struct</FONT> Layer2 *l2);

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="InitWin">InitWin</A>(<FONT COLOR="#298C52">struct</FONT> Layer2 *l2)
{
	<FONT COLOR="#298C52">int</FONT> i;

	<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; <A HREF="hisax.h.shtml#MAX_WINDOW">MAX_WINDOW</A>; i++)
		l2-&gt;windowar[i] = NULL;
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="ReleaseWin">ReleaseWin</A>(<FONT COLOR="#298C52">struct</FONT> Layer2 *l2)
{
	<FONT COLOR="#298C52">int</FONT> i, cnt = 0;

	<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; <A HREF="hisax.h.shtml#MAX_WINDOW">MAX_WINDOW</A>; i++) {
		<FONT COLOR="#298C52">if</FONT> (l2-&gt;windowar[i]) {
			cnt++;
			dev_kfree_skb(l2-&gt;windowar[i]);
			l2-&gt;windowar[i] = NULL;
		}
	}
	<FONT COLOR="#298C52">if</FONT> (cnt)
		printk(KERN_WARNING <FONT COLOR="#FF0000">"isdl2 freed %d skbuffs in release\n"</FONT>, cnt);
}

<FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">int</FONT>
<A NAME="cansend">cansend</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st)
{
	<FONT COLOR="#298C52">int</FONT> p1;

	p1 = st-&gt;l2.vs - st-&gt;l2.va;
	<FONT COLOR="#298C52">if</FONT> (p1 &lt; 0)
		p1 += (test_bit(<A HREF="hisax.h.shtml#FLG_MOD128">FLG_MOD128</A>, &amp;st-&gt;l2.flag) ? 128 : 8);
	<FONT COLOR="#298C52">return</FONT> ((p1 &lt; st-&gt;l2.window) &amp;&amp; !test_bit(<A HREF="hisax.h.shtml#FLG_PEER_BUSY">FLG_PEER_BUSY</A>, &amp;st-&gt;l2.flag));
}

<FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="clear_exception">clear_exception</A>(<FONT COLOR="#298C52">struct</FONT> Layer2 *l2)
{
	test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_ACK_PEND">FLG_ACK_PEND</A>, &amp;l2-&gt;flag);
	test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_REJEXC">FLG_REJEXC</A>, &amp;l2-&gt;flag);
	test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_OWN_BUSY">FLG_OWN_BUSY</A>, &amp;l2-&gt;flag);
	test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_PEER_BUSY">FLG_PEER_BUSY</A>, &amp;l2-&gt;flag);
}

<FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">int</FONT>
<A NAME="l2headersize">l2headersize</A>(<FONT COLOR="#298C52">struct</FONT> Layer2 *l2, <FONT COLOR="#298C52">int</FONT> ui)
{
	<FONT COLOR="#298C52">return</FONT> (((test_bit(<A HREF="hisax.h.shtml#FLG_MOD128">FLG_MOD128</A>, &amp;l2-&gt;flag) &amp;&amp; (!ui)) ? 2 : 1) +
		(test_bit(<A HREF="hisax.h.shtml#FLG_LAPD">FLG_LAPD</A>, &amp;l2-&gt;flag) ? 2 : 1));
}

<FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">int</FONT>
<A NAME="l2addrsize">l2addrsize</A>(<FONT COLOR="#298C52">struct</FONT> Layer2 *l2)
{
	<FONT COLOR="#298C52">return</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_LAPD">FLG_LAPD</A>, &amp;l2-&gt;flag) ? 2 : 1);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
<A HREF="#sethdraddr">sethdraddr</A>(<FONT COLOR="#298C52">struct</FONT> Layer2 *l2, u_char * header, <FONT COLOR="#298C52">int</FONT> rsp)
{
	u_char *ptr = header;
	<FONT COLOR="#298C52">int</FONT> crbit = rsp;

	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_LAPD">FLG_LAPD</A>, &amp;l2-&gt;flag)) {
		*ptr++ = (l2-&gt;sap &lt;&lt; 2) | (rsp ? 2 : 0);
		*ptr++ = (l2-&gt;tei &lt;&lt; 1) | 1;
		<FONT COLOR="#298C52">return</FONT> (2);
	} <FONT COLOR="#298C52">else</FONT> {
		<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_ORIG">FLG_ORIG</A>, &amp;l2-&gt;flag))
			crbit = !crbit;
		<FONT COLOR="#298C52">if</FONT> (crbit)
			*ptr++ = 1;
		<FONT COLOR="#298C52">else</FONT>
			*ptr++ = 3;
		<FONT COLOR="#298C52">return</FONT> (1);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="enqueue_ui">enqueue_ui</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st,
	   <FONT COLOR="#298C52">struct</FONT> sk_buff *skb)
{
	st-&gt;l2.l2l1(st, <A HREF="hisax.h.shtml#PH_DATA">PH_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, skb);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="enqueue_super">enqueue_super</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st,
	      <FONT COLOR="#298C52">struct</FONT> sk_buff *skb)
{
	st-&gt;l2.l2l1(st, <A HREF="hisax.h.shtml#PH_DATA">PH_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, skb);
}

<FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">int</FONT>
<A NAME="IsUI">IsUI</A>(u_char * data, <FONT COLOR="#298C52">int</FONT> ext)
{
	<FONT COLOR="#298C52">return</FONT> ((data[0] &amp; 0xef) == <A HREF="isdnl2.h.shtml#UI">UI</A>);
}

<FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">int</FONT>
<A NAME="IsUA">IsUA</A>(u_char * data, <FONT COLOR="#298C52">int</FONT> ext)
{
	<FONT COLOR="#298C52">return</FONT> ((data[0] &amp; 0xef) == <A HREF="isdnl2.h.shtml#UA">UA</A>);
}

<FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">int</FONT>
<A NAME="IsDM">IsDM</A>(u_char * data, <FONT COLOR="#298C52">int</FONT> ext)
{
	<FONT COLOR="#298C52">return</FONT> ((data[0] &amp; 0xef) == <A HREF="isdnl2.h.shtml#DM">DM</A>);
}

<FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">int</FONT>
<A NAME="IsDISC">IsDISC</A>(u_char * data, <FONT COLOR="#298C52">int</FONT> ext)
{
	<FONT COLOR="#298C52">return</FONT> ((data[0] &amp; 0xef) == <A HREF="isdnl2.h.shtml#DISC">DISC</A>);
}

<FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">int</FONT>
<A NAME="IsRR">IsRR</A>(u_char * data, <FONT COLOR="#298C52">int</FONT> ext)
{
	<FONT COLOR="#298C52">if</FONT> (ext)
		<FONT COLOR="#298C52">return</FONT> (data[0] == <A HREF="isdnl2.h.shtml#RR">RR</A>);
	<FONT COLOR="#298C52">else</FONT>
		<FONT COLOR="#298C52">return</FONT> ((data[0] &amp; 0xf) == 1);
}

<FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">int</FONT>
<A NAME="IsSABMX">IsSABMX</A>(u_char * data, <FONT COLOR="#298C52">int</FONT> ext)
{
	u_char d = data[0] &amp; ~0x10;

	<FONT COLOR="#298C52">return</FONT> (ext ? d == <A HREF="isdnl2.h.shtml#SABME">SABME</A> : d == <A HREF="isdnl2.h.shtml#SABM">SABM</A>);
}

<FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">int</FONT>
<A NAME="IsREJ">IsREJ</A>(u_char * data, <FONT COLOR="#298C52">int</FONT> ext)
{
	<FONT COLOR="#298C52">return</FONT> (ext ? data[0] == <A HREF="isdnl2.h.shtml#REJ">REJ</A> : (data[0] &amp; 0xf) == <A HREF="isdnl2.h.shtml#REJ">REJ</A>);
}

<FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">int</FONT>
<A NAME="IsFRMR">IsFRMR</A>(u_char * data, <FONT COLOR="#298C52">int</FONT> ext)
{
	<FONT COLOR="#298C52">return</FONT> ((data[0] &amp; 0xef) == <A HREF="isdnl2.h.shtml#FRMR">FRMR</A>);
}

<FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">int</FONT>
<A NAME="IsRNR">IsRNR</A>(u_char * data, <FONT COLOR="#298C52">int</FONT> ext)
{
	<FONT COLOR="#298C52">return</FONT> (ext ? data[0] == <A HREF="isdnl2.h.shtml#RNR">RNR</A> : (data[0] &amp; 0xf) == <A HREF="isdnl2.h.shtml#RNR">RNR</A>);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
<A NAME="legalnr">legalnr</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> nr)
{
	<FONT COLOR="#298C52">struct</FONT> Layer2 *l2 = &amp;st-&gt;l2;
	<FONT COLOR="#298C52">int</FONT> lnr, lvs;

	lvs = (l2-&gt;vs &gt;= l2-&gt;va) ? l2-&gt;vs :
	    (l2-&gt;vs + (test_bit(<A HREF="hisax.h.shtml#FLG_MOD128">FLG_MOD128</A>, &amp;l2-&gt;flag) ? 128 : 8));
	lnr = (nr &gt;= l2-&gt;va) ? nr : (test_bit(<A HREF="hisax.h.shtml#FLG_MOD128">FLG_MOD128</A>, &amp;l2-&gt;flag) ? 128 : 8);
	<FONT COLOR="#298C52">return</FONT> (lnr &lt;= lvs);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="setva">setva</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> nr)
{
	<FONT COLOR="#298C52">struct</FONT> Layer2 *l2 = &amp;st-&gt;l2;
	<FONT COLOR="#298C52">int</FONT> len;

	<FONT COLOR="#298C52">while</FONT> (l2-&gt;va != nr) {
		l2-&gt;va = (l2-&gt;va + 1) % (test_bit(<A HREF="hisax.h.shtml#FLG_MOD128">FLG_MOD128</A>, &amp;l2-&gt;flag) ? 128 : 8);
		len = l2-&gt;windowar[l2-&gt;sow]-&gt;len;
		<FONT COLOR="#298C52">if</FONT> (<A HREF="hisax.h.shtml#PACKET_NOACK">PACKET_NOACK</A> == l2-&gt;windowar[l2-&gt;sow]-&gt;pkt_type)
			len = -1;
		dev_kfree_skb(l2-&gt;windowar[l2-&gt;sow]);
		l2-&gt;windowar[l2-&gt;sow] = NULL;
		l2-&gt;sow = (l2-&gt;sow + 1) % l2-&gt;window;
		<FONT COLOR="#298C52">if</FONT> (st-&gt;lli.l2writewakeup &amp;&amp; (len &gt;=0))
			st-&gt;lli.l2writewakeup(st, len);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#send_uframe">send_uframe</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, u_char cmd, u_char cr)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;
	u_char tmp[<A HREF="hisax.h.shtml#MAX_HEADER_LEN">MAX_HEADER_LEN</A>];
	<FONT COLOR="#298C52">int</FONT> i;

	i = <A HREF="#sethdraddr">sethdraddr</A>(&amp;st-&gt;l2, tmp, cr);
	tmp[i++] = cmd;
	<FONT COLOR="#298C52">if</FONT> (!(skb = alloc_skb(i, GFP_ATOMIC))) {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"isdl2 can't alloc sbbuff for send_uframe\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT>;
	}
	memcpy(skb_put(skb, i), tmp, i);
	<A HREF="#enqueue_super">enqueue_super</A>(st, skb);
}

<FONT COLOR="#298C52">inline</FONT> u_char
<A HREF="#get_PollFlag">get_PollFlag</A>(<FONT COLOR="#298C52">struct</FONT> PStack * st, <FONT COLOR="#298C52">struct</FONT> sk_buff * skb)
{
	<FONT COLOR="#298C52">return</FONT> (skb-&gt;data[<A HREF="#l2addrsize">l2addrsize</A>(&amp;(st-&gt;l2))] &amp; 0x10);
}

<FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="FreeSkb">FreeSkb</A>(<FONT COLOR="#298C52">struct</FONT> sk_buff *skb)
{
	dev_kfree_skb(skb);
}


<FONT COLOR="#298C52">inline</FONT> u_char
<A HREF="#get_PollFlagFree">get_PollFlagFree</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">struct</FONT> sk_buff *skb)
{
	u_char PF;

	PF = <A HREF="#get_PollFlag">get_PollFlag</A>(st, skb);
	<A HREF="#FreeSkb">FreeSkb</A>(skb);
	<FONT COLOR="#298C52">return</FONT> (PF);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="establishlink">establishlink</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	u_char cmd;

	<A HREF="#clear_exception">clear_exception</A>(&amp;st-&gt;l2);
	st-&gt;l2.rc = 0;
	cmd = (test_bit(<A HREF="hisax.h.shtml#FLG_MOD128">FLG_MOD128</A>, &amp;st-&gt;l2.flag) ? <A HREF="isdnl2.h.shtml#SABME">SABME</A> : <A HREF="isdnl2.h.shtml#SABM">SABM</A>) | 0x10;
	<A HREF="#send_uframe">send_uframe</A>(st, cmd, <A HREF="isdnl2.h.shtml#CMD">CMD</A>);
	<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;st-&gt;l2.t203, 1);
	<A HREF="fsm.c.shtml#FsmRestartTimer">FsmRestartTimer</A>(&amp;st-&gt;l2.t200, st-&gt;l2.T200, EV_L2_T200, NULL, 1);
	test_and_set_bit(<A HREF="hisax.h.shtml#FLG_T200_RUN">FLG_T200_RUN</A>, &amp;st-&gt;l2.flag);
	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L2_5);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l2_mdl_error">l2_mdl_error</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;

	<FONT COLOR="#298C52">switch</FONT> (event) {
		<FONT COLOR="#298C52">case</FONT> EV_L2_UA:
			<FONT COLOR="#298C52">if</FONT> (<A HREF="#get_PollFlagFree">get_PollFlagFree</A>(st, skb))
				st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'C'</FONT>);
			<FONT COLOR="#298C52">else</FONT>
				st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'D'</FONT>);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> EV_L2_DM:
			<FONT COLOR="#298C52">if</FONT> (<A HREF="#get_PollFlagFree">get_PollFlagFree</A>(st, skb))
				st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'B'</FONT>);
			<FONT COLOR="#298C52">else</FONT> {
				st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'E'</FONT>);
				<A HREF="#establishlink">establishlink</A>(fi);
				test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_L3_INIT">FLG_L3_INIT</A>, &amp;st-&gt;l2.flag);
			}
			<FONT COLOR="#298C52">break</FONT>;
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l2_dl_establish">l2_dl_establish</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	<FONT COLOR="#298C52">int</FONT> state = fi-&gt;state;

	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L2_3); 
	<FONT COLOR="#298C52">if</FONT> (state == ST_L2_1)
		st-&gt;l2.l2tei(st, <A HREF="hisax.h.shtml#MDL_ASSIGN">MDL_ASSIGN</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="l2_send_ui">l2_send_ui</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;
	u_char header[<A HREF="hisax.h.shtml#MAX_HEADER_LEN">MAX_HEADER_LEN</A>];
	<FONT COLOR="#298C52">int</FONT> i;

	i = <A HREF="#sethdraddr">sethdraddr</A>(&amp;(st-&gt;l2), header, <A HREF="isdnl2.h.shtml#CMD">CMD</A>);
	header[i++] = <A HREF="isdnl2.h.shtml#UI">UI</A>;
	<FONT COLOR="#298C52">while</FONT> ((skb = skb_dequeue(&amp;st-&gt;l2.ui_queue))) {
		memcpy(skb_push(skb, i), header, i);
		<A HREF="#enqueue_ui">enqueue_ui</A>(st, skb);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l2_put_ui">l2_put_ui</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

	skb_queue_tail(&amp;st-&gt;l2.ui_queue, skb);
	<FONT COLOR="#298C52">if</FONT> (fi-&gt;state == ST_L2_1) {
		<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L2_2);
		st-&gt;l2.l2tei(st, <A HREF="hisax.h.shtml#MDL_ASSIGN">MDL_ASSIGN</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);
	}
	<FONT COLOR="#298C52">if</FONT> (fi-&gt;state &gt; ST_L2_3)
		<A HREF="#l2_send_ui">l2_send_ui</A>(st);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l2_got_ui">l2_got_ui</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

	skb_pull(skb, <A HREF="#l2headersize">l2headersize</A>(&amp;st-&gt;l2, 1));
	<FONT COLOR="#298C52">if</FONT> (skb-&gt;len &gt; st-&gt;l2.maxlen) { 
		st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'O'</FONT>);
		<A HREF="#FreeSkb">FreeSkb</A>(skb);
	} <FONT COLOR="#298C52">else</FONT>
		st-&gt;l2.l2l3(st, <A HREF="hisax.h.shtml#DL_UNIT_DATA">DL_UNIT_DATA</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, skb);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l2_establish">l2_establish</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;

	<FONT COLOR="#298C52">if</FONT> (fi-&gt;state != ST_L2_4)
		<A HREF="callc.c.shtml#discard_queue">discard_queue</A>(&amp;st-&gt;l2.i_queue);
	<FONT COLOR="#298C52">if</FONT> (fi-&gt;state != ST_L2_5)
		<A HREF="#establishlink">establishlink</A>(fi);
	test_and_set_bit(<A HREF="hisax.h.shtml#FLG_L3_INIT">FLG_L3_INIT</A>, &amp;st-&gt;l2.flag);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l2_dl_release">l2_dl_release</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;

	<FONT COLOR="#298C52">if</FONT> (fi-&gt;state == ST_L2_4) {
		st-&gt;l2.l2l3(st, <A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A>  | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, NULL);
		<FONT COLOR="#298C52">return</FONT>;
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (fi-&gt;state == ST_L2_5) {
		test_and_set_bit(<A HREF="hisax.h.shtml#FLG_PEND_REL">FLG_PEND_REL</A>, &amp;st-&gt;l2.flag);
		<FONT COLOR="#298C52">return</FONT>;
	}
	<A HREF="callc.c.shtml#discard_queue">discard_queue</A>(&amp;st-&gt;l2.i_queue);
	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L2_6);
	st-&gt;l2.rc = 0;
	<A HREF="#send_uframe">send_uframe</A>(st, <A HREF="isdnl2.h.shtml#DISC">DISC</A> | 0x10, <A HREF="isdnl2.h.shtml#CMD">CMD</A>);
	<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;st-&gt;l2.t203, 1);
	<A HREF="fsm.c.shtml#FsmRestartTimer">FsmRestartTimer</A>(&amp;st-&gt;l2.t200, st-&gt;l2.T200, EV_L2_T200, NULL, 2);
	test_and_set_bit(<A HREF="hisax.h.shtml#FLG_T200_RUN">FLG_T200_RUN</A>, &amp;st-&gt;l2.flag);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l2_got_SABMX">l2_got_SABMX</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">int</FONT> est = 1, state, rsp;
	u_char PollFlag;

	state = fi-&gt;state;
	rsp = *skb-&gt;data &amp; 0x2;
	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_ORIG">FLG_ORIG</A>, &amp;st-&gt;l2.flag))
		rsp = !rsp;
	<FONT COLOR="#298C52">if</FONT> (rsp) {
		st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'L'</FONT>);
		<A HREF="#FreeSkb">FreeSkb</A>(skb);
		<FONT COLOR="#298C52">if</FONT> ((state == ST_L2_7) || (state == ST_L2_8))
			<A HREF="#establishlink">establishlink</A>(fi);
		<FONT COLOR="#298C52">return</FONT>;
	}	
	<FONT COLOR="#298C52">if</FONT> (skb-&gt;len != (<A HREF="#l2addrsize">l2addrsize</A>(&amp;st-&gt;l2) + 1)) {
		st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'N'</FONT>);
		<A HREF="#FreeSkb">FreeSkb</A>(skb);
		<FONT COLOR="#298C52">if</FONT> ((state == ST_L2_7) || (state == ST_L2_8))
			<A HREF="#establishlink">establishlink</A>(fi);
		<FONT COLOR="#298C52">return</FONT>;
	}
	PollFlag = <A HREF="#get_PollFlagFree">get_PollFlagFree</A>(st, skb);
	<FONT COLOR="#298C52">if</FONT> (ST_L2_6 == state) {
		<A HREF="#send_uframe">send_uframe</A>(st, <A HREF="isdnl2.h.shtml#DM">DM</A> | PollFlag, <A HREF="isdnl2.h.shtml#RSP">RSP</A>);
		<FONT COLOR="#298C52">return</FONT>;
	} <FONT COLOR="#298C52">else</FONT>
		<A HREF="#send_uframe">send_uframe</A>(st, <A HREF="isdnl2.h.shtml#UA">UA</A> | PollFlag, <A HREF="isdnl2.h.shtml#RSP">RSP</A>);
	<FONT COLOR="#298C52">if</FONT> (ST_L2_5 == state)
		<FONT COLOR="#298C52">return</FONT>;
	<FONT COLOR="#298C52">if</FONT> (ST_L2_4 != state) {
		st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'F'</FONT>);
		<FONT COLOR="#298C52">if</FONT> (st-&gt;l2.vs != st-&gt;l2.va) {
			<A HREF="callc.c.shtml#discard_queue">discard_queue</A>(&amp;st-&gt;l2.i_queue);
			est = 1;
		} <FONT COLOR="#298C52">else</FONT>
			est = 0;
	}
	<A HREF="#clear_exception">clear_exception</A>(&amp;st-&gt;l2);
	st-&gt;l2.vs = 0;
	st-&gt;l2.va = 0;
	st-&gt;l2.vr = 0;
	st-&gt;l2.sow = 0;
	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L2_7);
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_T200_RUN">FLG_T200_RUN</A>, &amp;st-&gt;l2.flag))
		<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;st-&gt;l2.t200, 2);
	<A HREF="fsm.c.shtml#FsmRestartTimer">FsmRestartTimer</A>(&amp;st-&gt;l2.t203, st-&gt;l2.T203, EV_L2_T203, NULL, 3);

	<FONT COLOR="#298C52">if</FONT> (est)
		st-&gt;l2.l2l3(st, <A HREF="hisax.h.shtml#DL_ESTABLISH">DL_ESTABLISH</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);

	<FONT COLOR="#298C52">if</FONT> (ST_L2_8 == state)
		<FONT COLOR="#298C52">if</FONT> (skb_queue_len(&amp;st-&gt;l2.i_queue) &amp;&amp; <A HREF="#cansend">cansend</A>(st))
			st-&gt;l2.l2l1(st, <A HREF="hisax.h.shtml#PH_PULL">PH_PULL</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l2_got_disconn">l2_got_disconn</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	u_char PollFlag, cmd = <A HREF="isdnl2.h.shtml#UA">UA</A>;
	<FONT COLOR="#298C52">int</FONT> state, rel = 1, cst = 1, rsp;

	state = fi-&gt;state;
	rsp = *skb-&gt;data &amp; 0x2;
	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_ORIG">FLG_ORIG</A>, &amp;st-&gt;l2.flag))
		rsp = !rsp;

	<FONT COLOR="#298C52">if</FONT> (rsp) {
		st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'L'</FONT>);
		<A HREF="#FreeSkb">FreeSkb</A>(skb);
		<FONT COLOR="#298C52">if</FONT> ((state == ST_L2_7) || (state == ST_L2_8))
			<A HREF="#establishlink">establishlink</A>(fi);
		<FONT COLOR="#298C52">return</FONT>;
	}	
	<FONT COLOR="#298C52">if</FONT> (skb-&gt;len != (<A HREF="#l2addrsize">l2addrsize</A>(&amp;st-&gt;l2) + 1)) {
		st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'N'</FONT>);
		<A HREF="#FreeSkb">FreeSkb</A>(skb);
		<FONT COLOR="#298C52">if</FONT> ((state == ST_L2_7) || (state == ST_L2_8))
			<A HREF="#establishlink">establishlink</A>(fi);
		<FONT COLOR="#298C52">return</FONT>;
	}
	PollFlag = <A HREF="#get_PollFlagFree">get_PollFlagFree</A>(st, skb);
	<FONT COLOR="#298C52">if</FONT> ((state == ST_L2_4) || (state == ST_L2_5)) {
		rel = 0;
		cst = 0;
		cmd = <A HREF="isdnl2.h.shtml#DM">DM</A>;
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (state == ST_L2_6) {
		rel = 0;
		cst = 0;
	}
	<FONT COLOR="#298C52">if</FONT> (cst) {
		<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L2_4);
		<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;st-&gt;l2.t203, 3);
		<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_T200_RUN">FLG_T200_RUN</A>, &amp;st-&gt;l2.flag)) 
			<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;st-&gt;l2.t200, 2);
	}
	<A HREF="#send_uframe">send_uframe</A>(st, cmd | PollFlag, <A HREF="isdnl2.h.shtml#RSP">RSP</A>);
	<FONT COLOR="#298C52">if</FONT> (rel) {
		<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_LAPB">FLG_LAPB</A>, &amp;st-&gt;l2.flag))
			st-&gt;l2.l2l1(st, <A HREF="hisax.h.shtml#PH_DEACTIVATE">PH_DEACTIVATE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
		st-&gt;l2.l2l3(st, <A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);
	}
}


<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l2_got_ua">l2_got_ua</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">int</FONT> pr=-1;
	u_char PollFlag;
	<FONT COLOR="#298C52">int</FONT> state,rsp;

	state = fi-&gt;state;
	rsp = *skb-&gt;data &amp; 0x2;
	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_ORIG">FLG_ORIG</A>, &amp;st-&gt;l2.flag))
		rsp = !rsp;

	<FONT COLOR="#298C52">if</FONT> (!rsp) {
		st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'L'</FONT>);
		<A HREF="#FreeSkb">FreeSkb</A>(skb);
		<FONT COLOR="#298C52">if</FONT> ((state == ST_L2_7) || (state == ST_L2_8))
			<A HREF="#establishlink">establishlink</A>(fi);
		<FONT COLOR="#298C52">return</FONT>;
	}	
	<FONT COLOR="#298C52">if</FONT> (skb-&gt;len != (<A HREF="#l2addrsize">l2addrsize</A>(&amp;st-&gt;l2) + 1)) {
		st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'N'</FONT>);
		<A HREF="#FreeSkb">FreeSkb</A>(skb);
		<FONT COLOR="#298C52">if</FONT> ((fi-&gt;state == ST_L2_7) || (fi-&gt;state == ST_L2_8))
			<A HREF="#establishlink">establishlink</A>(fi);
		<FONT COLOR="#298C52">return</FONT>;
	}
	PollFlag = <A HREF="#get_PollFlag">get_PollFlag</A>(st, skb);
	<FONT COLOR="#298C52">if</FONT> (!PollFlag) {
		<A HREF="#l2_mdl_error">l2_mdl_error</A>(fi, event, arg);
		<FONT COLOR="#298C52">return</FONT>;
	}
	<A HREF="#FreeSkb">FreeSkb</A>(skb);

	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_T200_RUN">FLG_T200_RUN</A>, &amp;st-&gt;l2.flag))
		<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;st-&gt;l2.t200, 2);
	<FONT COLOR="#298C52">if</FONT> (fi-&gt;state == ST_L2_5) {
		<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_PEND_REL">FLG_PEND_REL</A>, &amp;st-&gt;l2.flag)) {
			<A HREF="callc.c.shtml#discard_queue">discard_queue</A>(&amp;st-&gt;l2.i_queue);
			st-&gt;l2.rc = 0;
			<A HREF="#send_uframe">send_uframe</A>(st, <A HREF="isdnl2.h.shtml#DISC">DISC</A> | 0x10, <A HREF="isdnl2.h.shtml#CMD">CMD</A>);
			<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L2_6);
			<A HREF="fsm.c.shtml#FsmAddTimer">FsmAddTimer</A>(&amp;st-&gt;l2.t200, st-&gt;l2.T200, EV_L2_T200, NULL, 4);
			test_and_set_bit(<A HREF="hisax.h.shtml#FLG_T200_RUN">FLG_T200_RUN</A>, &amp;st-&gt;l2.flag);
		} <FONT COLOR="#298C52">else</FONT> {
			<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_L3_INIT">FLG_L3_INIT</A>, &amp;st-&gt;l2.flag)) {
				pr = <A HREF="hisax.h.shtml#DL_ESTABLISH">DL_ESTABLISH</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>;
			} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (st-&gt;l2.vs != st-&gt;l2.va) {
				<A HREF="callc.c.shtml#discard_queue">discard_queue</A>(&amp;st-&gt;l2.i_queue);
				pr = <A HREF="hisax.h.shtml#DL_ESTABLISH">DL_ESTABLISH</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>;
			}
			st-&gt;l2.vs = 0;
			st-&gt;l2.va = 0;
			st-&gt;l2.vr = 0;
			st-&gt;l2.sow = 0;
			<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L2_7);
			<FONT COLOR="#298C52">if</FONT> (pr &gt; -1)
				st-&gt;l2.l2l3(st, pr, NULL);
		}
	} <FONT COLOR="#298C52">else</FONT> {		<FONT COLOR=#0000FF>/* ST_L2_6 */</FONT>
		<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_LAPB">FLG_LAPB</A>, &amp;st-&gt;l2.flag))
			st-&gt;l2.l2l1(st, <A HREF="hisax.h.shtml#PH_DEACTIVATE">PH_DEACTIVATE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
		st-&gt;l2.l2l3(st, <A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, NULL);
		<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L2_4);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l2_got_dm">l2_got_dm</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	u_char PollFlag;
	<FONT COLOR="#298C52">int</FONT> state,rsp;

	state = fi-&gt;state;
	rsp = *skb-&gt;data &amp; 0x2;
	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_ORIG">FLG_ORIG</A>, &amp;st-&gt;l2.flag))
		rsp = !rsp;

	<FONT COLOR="#298C52">if</FONT> (!rsp) {
		st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'L'</FONT>);
		<A HREF="#FreeSkb">FreeSkb</A>(skb);
		<FONT COLOR="#298C52">if</FONT> ((state == ST_L2_7) || (state == ST_L2_8))
			<A HREF="#establishlink">establishlink</A>(fi);
		<FONT COLOR="#298C52">return</FONT>;
	}	
	<FONT COLOR="#298C52">if</FONT> (skb-&gt;len != (<A HREF="#l2addrsize">l2addrsize</A>(&amp;st-&gt;l2) + 1)) {
		st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'N'</FONT>);
		<A HREF="#FreeSkb">FreeSkb</A>(skb);
		<FONT COLOR="#298C52">if</FONT> ((fi-&gt;state == ST_L2_7) || (fi-&gt;state == ST_L2_8))
			<A HREF="#establishlink">establishlink</A>(fi);
		<FONT COLOR="#298C52">return</FONT>;
	}
	PollFlag = <A HREF="#get_PollFlagFree">get_PollFlagFree</A>(st, skb);
	<FONT COLOR="#298C52">if</FONT> (!PollFlag) {
		<FONT COLOR="#298C52">if</FONT> (fi-&gt;state == ST_L2_4) {
			<A HREF="#establishlink">establishlink</A>(fi);
			test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_L3_INIT">FLG_L3_INIT</A>, &amp;st-&gt;l2.flag);
			<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L2_5);
		}
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (fi-&gt;state != ST_L2_4) {
		<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_T200_RUN">FLG_T200_RUN</A>, &amp;st-&gt;l2.flag))
			<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;st-&gt;l2.t200, 2);
	 	<FONT COLOR="#298C52">if</FONT> (fi-&gt;state == ST_L2_5)
			<A HREF="callc.c.shtml#discard_queue">discard_queue</A>(&amp;st-&gt;l2.i_queue);
		<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_LAPB">FLG_LAPB</A>, &amp;st-&gt;l2.flag))
			st-&gt;l2.l2l1(st, <A HREF="hisax.h.shtml#PH_DEACTIVATE">PH_DEACTIVATE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
		<FONT COLOR="#298C52">if</FONT> (fi-&gt;state == ST_L2_6)
			st-&gt;l2.l2l3(st, <A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, NULL);
		<FONT COLOR="#298C52">else</FONT>
			st-&gt;l2.l2l3(st, <A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);
		<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L2_4);
	}
}

<FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#enquiry_cr">enquiry_cr</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, u_char typ, u_char cr, u_char pf)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;
	<FONT COLOR="#298C52">struct</FONT> Layer2 *l2;
	u_char tmp[<A HREF="hisax.h.shtml#MAX_HEADER_LEN">MAX_HEADER_LEN</A>];
	<FONT COLOR="#298C52">int</FONT> i;

	l2 = &amp;st-&gt;l2;
	i = <A HREF="#sethdraddr">sethdraddr</A>(l2, tmp, cr);
	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_MOD128">FLG_MOD128</A>, &amp;l2-&gt;flag)) {
		tmp[i++] = typ;
		tmp[i++] = (l2-&gt;vr &lt;&lt; 1) | (pf ? 1 : 0);
	} <FONT COLOR="#298C52">else</FONT>
		tmp[i++] = (l2-&gt;vr &lt;&lt; 5) | typ | (pf ? 0x10 : 0);
	<FONT COLOR="#298C52">if</FONT> (!(skb = alloc_skb(i, GFP_ATOMIC))) {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"isdl2 can't alloc sbbuff for enquiry_cr\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT>;
	}
	memcpy(skb_put(skb, i), tmp, i);
	<A HREF="#enqueue_super">enqueue_super</A>(st, skb);
}

<FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="enquiry_response">enquiry_response</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st)
{
	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_OWN_BUSY">FLG_OWN_BUSY</A>, &amp;st-&gt;l2.flag))
		<A HREF="#enquiry_cr">enquiry_cr</A>(st, <A HREF="isdnl2.h.shtml#RNR">RNR</A>, <A HREF="isdnl2.h.shtml#RSP">RSP</A>, 1);
	<FONT COLOR="#298C52">else</FONT>
		<A HREF="#enquiry_cr">enquiry_cr</A>(st, <A HREF="isdnl2.h.shtml#RR">RR</A>, <A HREF="isdnl2.h.shtml#RSP">RSP</A>, 1);
	test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_ACK_PEND">FLG_ACK_PEND</A>, &amp;st-&gt;l2.flag);
}

<FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="transmit_enquiry">transmit_enquiry</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st)
{
	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_OWN_BUSY">FLG_OWN_BUSY</A>, &amp;st-&gt;l2.flag))
		<A HREF="#enquiry_cr">enquiry_cr</A>(st, <A HREF="isdnl2.h.shtml#RNR">RNR</A>, <A HREF="isdnl2.h.shtml#CMD">CMD</A>, 1);
	<FONT COLOR="#298C52">else</FONT>
		<A HREF="#enquiry_cr">enquiry_cr</A>(st, <A HREF="isdnl2.h.shtml#RR">RR</A>, <A HREF="isdnl2.h.shtml#CMD">CMD</A>, 1);
	test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_ACK_PEND">FLG_ACK_PEND</A>, &amp;st-&gt;l2.flag);
	<A HREF="fsm.c.shtml#FsmAddTimer">FsmAddTimer</A>(&amp;st-&gt;l2.t200, st-&gt;l2.T200, EV_L2_T200, NULL, 12);
	test_and_set_bit(<A HREF="hisax.h.shtml#FLG_T200_RUN">FLG_T200_RUN</A>, &amp;st-&gt;l2.flag);
}


<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="nrerrorrecovery">nrerrorrecovery</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;

	st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'J'</FONT>);
	<A HREF="#establishlink">establishlink</A>(fi);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="invoke_retransmission">invoke_retransmission</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> nr)
{
	<FONT COLOR="#298C52">struct</FONT> Layer2 *l2 = &amp;st-&gt;l2;
	<FONT COLOR="#298C52">int</FONT> p1;
	<FONT COLOR="#298C52">long</FONT> flags;

	<FONT COLOR="#298C52">if</FONT> (l2-&gt;vs != nr) {
		save_flags(flags);
		cli();
		<FONT COLOR="#298C52">while</FONT> (l2-&gt;vs != nr) {
			l2-&gt;vs = l2-&gt;vs - 1;
			<FONT COLOR="#298C52">if</FONT> (l2-&gt;vs &lt; 0)
				l2-&gt;vs += (test_bit(<A HREF="hisax.h.shtml#FLG_MOD128">FLG_MOD128</A>, &amp;l2-&gt;flag) ? 128 : 8);
			p1 = l2-&gt;vs - l2-&gt;va;
			<FONT COLOR="#298C52">if</FONT> (p1 &lt; 0)
				p1 += (test_bit(<A HREF="hisax.h.shtml#FLG_MOD128">FLG_MOD128</A>, &amp;l2-&gt;flag) ? 128 : 8);
			p1 = (p1 + l2-&gt;sow) % l2-&gt;window;
			skb_queue_head(&amp;l2-&gt;i_queue, l2-&gt;windowar[p1]);
			l2-&gt;windowar[p1] = NULL;
		}
		restore_flags(flags);
		st-&gt;l2.l2l1(st, <A HREF="hisax.h.shtml#PH_PULL">PH_PULL</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l2_got_st7_super">l2_got_st7_super</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">int</FONT> PollFlag, nr, rsp, typ = <A HREF="isdnl2.h.shtml#RR">RR</A>;
	<FONT COLOR="#298C52">struct</FONT> Layer2 *l2 = &amp;st-&gt;l2;

	rsp = *skb-&gt;data &amp; 0x2;
	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_ORIG">FLG_ORIG</A>, &amp;l2-&gt;flag))
		rsp = !rsp;

	skb_pull(skb, <A HREF="#l2addrsize">l2addrsize</A>(l2));
	<FONT COLOR="#298C52">if</FONT> (<A HREF="#IsRNR">IsRNR</A>(skb-&gt;data, test_bit(<A HREF="hisax.h.shtml#FLG_MOD128">FLG_MOD128</A>, &amp;l2-&gt;flag))) {
		test_and_set_bit(<A HREF="hisax.h.shtml#FLG_PEER_BUSY">FLG_PEER_BUSY</A>, &amp;l2-&gt;flag);
		typ = <A HREF="isdnl2.h.shtml#RNR">RNR</A>;
	} <FONT COLOR="#298C52">else</FONT>
		test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_PEER_BUSY">FLG_PEER_BUSY</A>, &amp;l2-&gt;flag);
	<FONT COLOR="#298C52">if</FONT> (<A HREF="#IsREJ">IsREJ</A>(skb-&gt;data, test_bit(<A HREF="hisax.h.shtml#FLG_MOD128">FLG_MOD128</A>, &amp;l2-&gt;flag)))
		typ = <A HREF="isdnl2.h.shtml#REJ">REJ</A>;
	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_MOD128">FLG_MOD128</A>, &amp;l2-&gt;flag)) {
		<FONT COLOR="#298C52">if</FONT> (skb-&gt;len == 2) {
			PollFlag = (skb-&gt;data[1] &amp; 0x1) == 0x1;
			nr = skb-&gt;data[1] &gt;&gt; 1;
		} <FONT COLOR="#298C52">else</FONT> {
			st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'N'</FONT>);
			<A HREF="#FreeSkb">FreeSkb</A>(skb);
			<A HREF="#establishlink">establishlink</A>(fi);
			<FONT COLOR="#298C52">return</FONT>;
		}
	} <FONT COLOR="#298C52">else</FONT> {
		<FONT COLOR="#298C52">if</FONT> (skb-&gt;len == 1) {
			PollFlag = (skb-&gt;data[0] &amp; 0x10);
			nr = (skb-&gt;data[0] &gt;&gt; 5) &amp; 0x7;
		} <FONT COLOR="#298C52">else</FONT> {
			st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'N'</FONT>);
			<A HREF="#FreeSkb">FreeSkb</A>(skb);
			<A HREF="#establishlink">establishlink</A>(fi);
			<FONT COLOR="#298C52">return</FONT>;
		}
	}
	<A HREF="#FreeSkb">FreeSkb</A>(skb);

	<FONT COLOR="#298C52">if</FONT> ((!rsp) &amp;&amp; PollFlag)
		<A HREF="#enquiry_response">enquiry_response</A>(st);
	<FONT COLOR="#298C52">if</FONT> (rsp &amp;&amp; PollFlag)
		st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'A'</FONT>);
	<FONT COLOR="#298C52">if</FONT> (<A HREF="#legalnr">legalnr</A>(st, nr)) {
		<FONT COLOR="#298C52">if</FONT> (typ == <A HREF="isdnl2.h.shtml#REJ">REJ</A>) {
			<A HREF="#setva">setva</A>(st, nr);
			<A HREF="#invoke_retransmission">invoke_retransmission</A>(st, nr);
			<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_T200_RUN">FLG_T200_RUN</A>, &amp;st-&gt;l2.flag))
				<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;st-&gt;l2.t200, 9);
			<FONT COLOR="#298C52">if</FONT> (<A HREF="fsm.c.shtml#FsmAddTimer">FsmAddTimer</A>(&amp;st-&gt;l2.t203, st-&gt;l2.T203,
					EV_L2_T203, NULL, 6))
				<A HREF="#l2m_debug">l2m_debug</A>(&amp;st-&gt;l2.l2m, <FONT COLOR="#FF0000">"Restart T203 ST7 REJ"</FONT>);
		} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> ((nr == l2-&gt;vs) &amp;&amp; (typ == <A HREF="isdnl2.h.shtml#RR">RR</A>)) {
			<A HREF="#setva">setva</A>(st, nr);
			<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_T200_RUN">FLG_T200_RUN</A>, &amp;st-&gt;l2.flag))
				<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;st-&gt;l2.t200, 9);
			<A HREF="fsm.c.shtml#FsmRestartTimer">FsmRestartTimer</A>(&amp;st-&gt;l2.t203, st-&gt;l2.T203,
					EV_L2_T203, NULL, 7);
		} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> ((l2-&gt;va != nr) || (typ == <A HREF="isdnl2.h.shtml#RNR">RNR</A>)) {
			<A HREF="#setva">setva</A>(st, nr);
			<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;st-&gt;l2.t203, 9);
			<A HREF="fsm.c.shtml#FsmRestartTimer">FsmRestartTimer</A>(&amp;st-&gt;l2.t200, st-&gt;l2.T200, EV_L2_T200, NULL, 6);
			test_and_set_bit(<A HREF="hisax.h.shtml#FLG_T200_RUN">FLG_T200_RUN</A>, &amp;st-&gt;l2.flag);
		}
		<FONT COLOR="#298C52">if</FONT> (skb_queue_len(&amp;st-&gt;l2.i_queue) &amp;&amp; (typ == <A HREF="isdnl2.h.shtml#RR">RR</A>))
			st-&gt;l2.l2l1(st, <A HREF="hisax.h.shtml#PH_PULL">PH_PULL</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
	} <FONT COLOR="#298C52">else</FONT>
		<A HREF="#nrerrorrecovery">nrerrorrecovery</A>(fi);

	<FONT COLOR="#298C52">if</FONT> ((fi-&gt;userint &amp; <A HREF="isdnl2.h.shtml#LC_FLUSH_WAIT">LC_FLUSH_WAIT</A>) &amp;&amp; rsp &amp;&amp; !(skb_queue_len(&amp;st-&gt;l2.i_queue))) {
		fi-&gt;userint &amp;= ~<A HREF="isdnl2.h.shtml#LC_FLUSH_WAIT">LC_FLUSH_WAIT</A>;
		st-&gt;l2.l2l3(st, <A HREF="hisax.h.shtml#DL_FLUSH">DL_FLUSH</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l2_feed_iqueue">l2_feed_iqueue</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_LAPB">FLG_LAPB</A>, &amp;st-&gt;l2.flag))
		st-&gt;l1.bcs-&gt;tx_cnt += skb-&gt;len + <A HREF="#l2headersize">l2headersize</A>(&amp;st-&gt;l2, 0);
	<FONT COLOR="#298C52">if</FONT> (!((fi-&gt;state == ST_L2_5) &amp;&amp; test_bit(<A HREF="hisax.h.shtml#FLG_L3_INIT">FLG_L3_INIT</A>, &amp;st-&gt;l2.flag)))
		skb_queue_tail(&amp;st-&gt;l2.i_queue, skb);
	<FONT COLOR="#298C52">if</FONT> (fi-&gt;state == ST_L2_7)
		st-&gt;l2.l2l1(st, <A HREF="hisax.h.shtml#PH_PULL">PH_PULL</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l2_got_iframe">l2_got_iframe</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *sp = st-&gt;l1.hardware;
	<FONT COLOR="#298C52">struct</FONT> Layer2 *l2 = &amp;(st-&gt;l2);
	<FONT COLOR="#298C52">int</FONT> PollFlag, ns, nr, i, hs, rsp;
	<FONT COLOR="#298C52">char</FONT> str[64];

	rsp = *skb-&gt;data &amp; 0x2;
	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_ORIG">FLG_ORIG</A>, &amp;l2-&gt;flag))
		rsp = !rsp;

	<FONT COLOR="#298C52">if</FONT> (rsp) {
		st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'L'</FONT>);
		<A HREF="#FreeSkb">FreeSkb</A>(skb);
		<A HREF="#establishlink">establishlink</A>(fi);
		<FONT COLOR="#298C52">return</FONT>;
	}	
	i = <A HREF="#l2addrsize">l2addrsize</A>(l2);
	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_MOD128">FLG_MOD128</A>, &amp;l2-&gt;flag)) {
		<FONT COLOR="#298C52">if</FONT> (skb-&gt;len &lt;= (i + 1)) {
			st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'N'</FONT>);
			<A HREF="#FreeSkb">FreeSkb</A>(skb);
			<A HREF="#establishlink">establishlink</A>(fi);
			<FONT COLOR="#298C52">return</FONT>;
		} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> ((skb-&gt;len - i - 1) &gt; l2-&gt;maxlen) { 
			st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'O'</FONT>);
			<A HREF="#FreeSkb">FreeSkb</A>(skb);
			<A HREF="#establishlink">establishlink</A>(fi);
			<FONT COLOR="#298C52">return</FONT>;
		}
		PollFlag = ((skb-&gt;data[i + 1] &amp; 0x1) == 0x1);
		ns = skb-&gt;data[i] &gt;&gt; 1;
		nr = (skb-&gt;data[i + 1] &gt;&gt; 1) &amp; 0x7f;
	} <FONT COLOR="#298C52">else</FONT> {
		<FONT COLOR="#298C52">if</FONT> (skb-&gt;len &lt;= i) {
			st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'N'</FONT>);
			<A HREF="#FreeSkb">FreeSkb</A>(skb);
			<A HREF="#establishlink">establishlink</A>(fi);
			<FONT COLOR="#298C52">return</FONT>;
		} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> ((skb-&gt;len - i) &gt; l2-&gt;maxlen) { 
			st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'O'</FONT>);
			<A HREF="#FreeSkb">FreeSkb</A>(skb);
			<A HREF="#establishlink">establishlink</A>(fi);
			<FONT COLOR="#298C52">return</FONT>;
		}
		PollFlag = (skb-&gt;data[i] &amp; 0x10);
		ns = (skb-&gt;data[i] &gt;&gt; 1) &amp; 0x7;
		nr = (skb-&gt;data[i] &gt;&gt; 5) &amp; 0x7;
	}
	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_OWN_BUSY">FLG_OWN_BUSY</A>, &amp;l2-&gt;flag)) {
		<A HREF="#FreeSkb">FreeSkb</A>(skb);
		<A HREF="#enquiry_response">enquiry_response</A>(st);
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (l2-&gt;vr == ns) {
		l2-&gt;vr = (l2-&gt;vr + 1) % (test_bit(<A HREF="hisax.h.shtml#FLG_MOD128">FLG_MOD128</A>, &amp;l2-&gt;flag) ? 128 : 8);
		test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_REJEXC">FLG_REJEXC</A>, &amp;l2-&gt;flag);
		<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_LAPD">FLG_LAPD</A>, &amp;l2-&gt;flag))
			<FONT COLOR="#298C52">if</FONT> (sp-&gt;dlogflag) {
				hs = <A HREF="#l2headersize">l2headersize</A>(l2, 0);
				<A HREF="q931.c.shtml#LogFrame">LogFrame</A>(st-&gt;l1.hardware, skb-&gt;data, skb-&gt;len);
				sprintf(str, <FONT COLOR="#FF0000">"Q.931 frame network-&gt;user tei %d"</FONT>, st-&gt;l2.tei);
				<A HREF="q931.c.shtml#dlogframe">dlogframe</A>(st-&gt;l1.hardware, skb-&gt;data + hs,
					  skb-&gt;len - hs, str);
			}
		<FONT COLOR="#298C52">if</FONT> (PollFlag)
			<A HREF="#enquiry_response">enquiry_response</A>(st);
		<FONT COLOR="#298C52">else</FONT>
			test_and_set_bit(<A HREF="hisax.h.shtml#FLG_ACK_PEND">FLG_ACK_PEND</A>, &amp;l2-&gt;flag);
		skb_pull(skb, <A HREF="#l2headersize">l2headersize</A>(l2, 0));
		st-&gt;l2.l2l3(st, <A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, skb);
	} <FONT COLOR="#298C52">else</FONT> {
		<FONT COLOR=#0000FF>/* n(s)!=v(r) */</FONT>
		<A HREF="#FreeSkb">FreeSkb</A>(skb);
		<FONT COLOR="#298C52">if</FONT> (test_and_set_bit(<A HREF="hisax.h.shtml#FLG_REJEXC">FLG_REJEXC</A>, &amp;l2-&gt;flag)) {
			<FONT COLOR="#298C52">if</FONT> (PollFlag)
				<A HREF="#enquiry_response">enquiry_response</A>(st);
		} <FONT COLOR="#298C52">else</FONT> {
			<A HREF="#enquiry_cr">enquiry_cr</A>(st, <A HREF="isdnl2.h.shtml#REJ">REJ</A>, <A HREF="isdnl2.h.shtml#RSP">RSP</A>, PollFlag);
			test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_ACK_PEND">FLG_ACK_PEND</A>, &amp;l2-&gt;flag);
		}
	}

	<FONT COLOR="#298C52">if</FONT> (<A HREF="#legalnr">legalnr</A>(st, nr)) {
		<A HREF="#setva">setva</A>(st, nr);
		<FONT COLOR="#298C52">if</FONT> (!test_bit(<A HREF="hisax.h.shtml#FLG_PEER_BUSY">FLG_PEER_BUSY</A>, &amp;st-&gt;l2.flag) &amp;&amp; (fi-&gt;state == ST_L2_7)) {
			<FONT COLOR="#298C52">if</FONT> (nr == st-&gt;l2.vs) {
				<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_T200_RUN">FLG_T200_RUN</A>, &amp;st-&gt;l2.flag))
					<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;st-&gt;l2.t200, 10);
				<A HREF="fsm.c.shtml#FsmRestartTimer">FsmRestartTimer</A>(&amp;st-&gt;l2.t203, st-&gt;l2.T203,
						EV_L2_T203, NULL, 7);
			} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (nr != st-&gt;l2.va) {
				<A HREF="fsm.c.shtml#FsmRestartTimer">FsmRestartTimer</A>(&amp;st-&gt;l2.t200, st-&gt;l2.T200, EV_L2_T200,
						NULL, 8);
				test_and_set_bit(<A HREF="hisax.h.shtml#FLG_T200_RUN">FLG_T200_RUN</A>, &amp;st-&gt;l2.flag);
			}
		}
	} <FONT COLOR="#298C52">else</FONT> {
		<A HREF="#nrerrorrecovery">nrerrorrecovery</A>(fi);
		<FONT COLOR="#298C52">return</FONT>;
	}

	<FONT COLOR="#298C52">if</FONT> (skb_queue_len(&amp;st-&gt;l2.i_queue) &amp;&amp; (fi-&gt;state == ST_L2_7))
		st-&gt;l2.l2l1(st, <A HREF="hisax.h.shtml#PH_PULL">PH_PULL</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_ACK_PEND">FLG_ACK_PEND</A>, &amp;st-&gt;l2.flag))
		<A HREF="#enquiry_cr">enquiry_cr</A>(st, <A HREF="isdnl2.h.shtml#RR">RR</A>, <A HREF="isdnl2.h.shtml#RSP">RSP</A>, 0);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l2_got_tei">l2_got_tei</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;

	st-&gt;l2.tei = (<FONT COLOR="#298C52">long</FONT>) arg;

	<FONT COLOR="#298C52">if</FONT> (fi-&gt;state == ST_L2_3) {
		<A HREF="#establishlink">establishlink</A>(fi);
		test_and_set_bit(<A HREF="hisax.h.shtml#FLG_L3_INIT">FLG_L3_INIT</A>, &amp;st-&gt;l2.flag);
	} <FONT COLOR="#298C52">else</FONT>
		<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L2_4);
	<FONT COLOR="#298C52">if</FONT> (skb_queue_len(&amp;st-&gt;l2.ui_queue))
		<A HREF="#l2_send_ui">l2_send_ui</A>(st);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l2_st5_tout_200">l2_st5_tout_200</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;

	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_LAPD">FLG_LAPD</A>, &amp;st-&gt;l2.flag) &amp;&amp;
		test_bit(<A HREF="hisax.h.shtml#FLG_DCHAN_BUSY">FLG_DCHAN_BUSY</A>, &amp;st-&gt;l2.flag)) {
		<A HREF="fsm.c.shtml#FsmAddTimer">FsmAddTimer</A>(&amp;st-&gt;l2.t200, st-&gt;l2.T200, EV_L2_T200, NULL, 9);
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (st-&gt;l2.rc == st-&gt;l2.N200) {
		<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L2_4);
		test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_T200_RUN">FLG_T200_RUN</A>, &amp;st-&gt;l2.flag);
		<A HREF="callc.c.shtml#discard_queue">discard_queue</A>(&amp;st-&gt;l2.i_queue);
		st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'G'</FONT>);
		<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_LAPB">FLG_LAPB</A>, &amp;st-&gt;l2.flag))
			st-&gt;l2.l2l1(st, <A HREF="hisax.h.shtml#PH_DEACTIVATE">PH_DEACTIVATE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
		st-&gt;l2.l2l3(st, <A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);
	} <FONT COLOR="#298C52">else</FONT> {
		st-&gt;l2.rc++;
		<A HREF="fsm.c.shtml#FsmAddTimer">FsmAddTimer</A>(&amp;st-&gt;l2.t200, st-&gt;l2.T200, EV_L2_T200, NULL, 9);
		<A HREF="#send_uframe">send_uframe</A>(st, (test_bit(<A HREF="hisax.h.shtml#FLG_MOD128">FLG_MOD128</A>, &amp;st-&gt;l2.flag) ? <A HREF="isdnl2.h.shtml#SABME">SABME</A> : <A HREF="isdnl2.h.shtml#SABM">SABM</A>)
			    | 0x10, <A HREF="isdnl2.h.shtml#CMD">CMD</A>);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l2_st6_tout_200">l2_st6_tout_200</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;

	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_LAPD">FLG_LAPD</A>, &amp;st-&gt;l2.flag) &amp;&amp;
		test_bit(<A HREF="hisax.h.shtml#FLG_DCHAN_BUSY">FLG_DCHAN_BUSY</A>, &amp;st-&gt;l2.flag)) {
		<A HREF="fsm.c.shtml#FsmAddTimer">FsmAddTimer</A>(&amp;st-&gt;l2.t200, st-&gt;l2.T200, EV_L2_T200, NULL, 9);
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (st-&gt;l2.rc == st-&gt;l2.N200) {
		<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L2_4);
		st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'H'</FONT>);
		<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_LAPB">FLG_LAPB</A>, &amp;st-&gt;l2.flag))
			st-&gt;l2.l2l1(st, <A HREF="hisax.h.shtml#PH_DEACTIVATE">PH_DEACTIVATE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
		st-&gt;l2.l2l3(st, <A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);
	} <FONT COLOR="#298C52">else</FONT> {
		st-&gt;l2.rc++;
		<A HREF="fsm.c.shtml#FsmAddTimer">FsmAddTimer</A>(&amp;st-&gt;l2.t200, st-&gt;l2.T200, EV_L2_T200,
			    NULL, 9);
		<A HREF="#send_uframe">send_uframe</A>(st, <A HREF="isdnl2.h.shtml#DISC">DISC</A> | 0x10, <A HREF="isdnl2.h.shtml#CMD">CMD</A>);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l2_st78_tout_200">l2_st78_tout_200</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;

	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_LAPD">FLG_LAPD</A>, &amp;st-&gt;l2.flag) &amp;&amp;
		test_bit(<A HREF="hisax.h.shtml#FLG_DCHAN_BUSY">FLG_DCHAN_BUSY</A>, &amp;st-&gt;l2.flag)) {
		<A HREF="fsm.c.shtml#FsmAddTimer">FsmAddTimer</A>(&amp;st-&gt;l2.t200, st-&gt;l2.T200, EV_L2_T200, NULL, 9);
		<FONT COLOR="#298C52">return</FONT>;
	}
	test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_T200_RUN">FLG_T200_RUN</A>, &amp;st-&gt;l2.flag);
	<FONT COLOR="#298C52">if</FONT> (fi-&gt;state == ST_L2_7) {
		st-&gt;l2.rc = 0;
		<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L2_8);
	}
	<FONT COLOR="#298C52">if</FONT> (st-&gt;l2.rc == st-&gt;l2.N200) {
		<A HREF="#establishlink">establishlink</A>(fi);
	} <FONT COLOR="#298C52">else</FONT> {
		<A HREF="#transmit_enquiry">transmit_enquiry</A>(st);
		st-&gt;l2.rc++;
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l2_st7_tout_203">l2_st7_tout_203</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;

	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_LAPD">FLG_LAPD</A>, &amp;st-&gt;l2.flag) &amp;&amp;
		test_bit(<A HREF="hisax.h.shtml#FLG_DCHAN_BUSY">FLG_DCHAN_BUSY</A>, &amp;st-&gt;l2.flag)) {
		<A HREF="fsm.c.shtml#FsmAddTimer">FsmAddTimer</A>(&amp;st-&gt;l2.t203, st-&gt;l2.T203, EV_L2_T203, NULL, 9);
		<FONT COLOR="#298C52">return</FONT>;
	}
	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L2_8);
	<A HREF="#transmit_enquiry">transmit_enquiry</A>(st);
	st-&gt;l2.rc = 0;
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l2_pull_iqueue">l2_pull_iqueue</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb, *oskb;
	<FONT COLOR="#298C52">struct</FONT> Layer2 *l2 = &amp;st-&gt;l2;
	u_char header[<A HREF="hisax.h.shtml#MAX_HEADER_LEN">MAX_HEADER_LEN</A>];
	<FONT COLOR="#298C52">int</FONT> p1, i;

	<FONT COLOR="#298C52">if</FONT> (!<A HREF="#cansend">cansend</A>(st))
		<FONT COLOR="#298C52">return</FONT>;

	skb = skb_dequeue(&amp;l2-&gt;i_queue);
	<FONT COLOR="#298C52">if</FONT> (!skb)
		<FONT COLOR="#298C52">return</FONT>;

	p1 = l2-&gt;vs - l2-&gt;va;
	<FONT COLOR="#298C52">if</FONT> (p1 &lt; 0)
		p1 += test_bit(<A HREF="hisax.h.shtml#FLG_MOD128">FLG_MOD128</A>, &amp;l2-&gt;flag) ? 128 : 8;
	p1 = (p1 + l2-&gt;sow) % l2-&gt;window;
	<FONT COLOR="#298C52">if</FONT> (l2-&gt;windowar[p1]) {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"isdnl2 try overwrite ack queue entry %d\n"</FONT>,
		       p1);
		dev_kfree_skb(l2-&gt;windowar[p1]);
	}
	l2-&gt;windowar[p1] = skb_clone(skb, GFP_ATOMIC);

	i = <A HREF="#sethdraddr">sethdraddr</A>(&amp;st-&gt;l2, header, <A HREF="isdnl2.h.shtml#CMD">CMD</A>);

	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_MOD128">FLG_MOD128</A>, &amp;l2-&gt;flag)) {
		header[i++] = l2-&gt;vs &lt;&lt; 1;
		header[i++] = l2-&gt;vr &lt;&lt; 1;
		l2-&gt;vs = (l2-&gt;vs + 1) % 128;
	} <FONT COLOR="#298C52">else</FONT> {
		header[i++] = (l2-&gt;vr &lt;&lt; 5) | (l2-&gt;vs &lt;&lt; 1);
		l2-&gt;vs = (l2-&gt;vs + 1) % 8;
	}
	p1 = skb-&gt;data - skb-&gt;head;
	<FONT COLOR="#298C52">if</FONT> (p1 &gt;= i)
		memcpy(skb_push(skb, i), header, i);
	<FONT COLOR="#298C52">else</FONT> {
		printk(KERN_WARNING
		<FONT COLOR="#FF0000">"isdl2 pull_iqueue skb header(%d/%d) too short\n"</FONT>, i, p1);
		oskb = skb;
		skb = alloc_skb(oskb-&gt;len + i, GFP_ATOMIC);
		memcpy(skb_put(skb, i), header, i);
		memcpy(skb_put(skb, oskb-&gt;len), oskb-&gt;data, oskb-&gt;len);
		<A HREF="#FreeSkb">FreeSkb</A>(oskb);
	}
	st-&gt;l2.l2l1(st, <A HREF="hisax.h.shtml#PH_PULL">PH_PULL</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, skb);
	test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_ACK_PEND">FLG_ACK_PEND</A>, &amp;st-&gt;l2.flag);
	<FONT COLOR="#298C52">if</FONT> (!test_and_set_bit(<A HREF="hisax.h.shtml#FLG_T200_RUN">FLG_T200_RUN</A>, &amp;st-&gt;l2.flag)) {
		<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;st-&gt;l2.t203, 13);
		<A HREF="fsm.c.shtml#FsmAddTimer">FsmAddTimer</A>(&amp;st-&gt;l2.t200, st-&gt;l2.T200, EV_L2_T200, NULL, 11);
	}
	<FONT COLOR="#298C52">if</FONT> (skb_queue_len(&amp;l2-&gt;i_queue) &amp;&amp; <A HREF="#cansend">cansend</A>(st))
		st-&gt;l2.l2l1(st, <A HREF="hisax.h.shtml#PH_PULL">PH_PULL</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l2_got_st8_super">l2_got_st8_super</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">int</FONT> PollFlag, nr, rsp, rnr = 0;
	<FONT COLOR="#298C52">struct</FONT> Layer2 *l2 = &amp;st-&gt;l2;

	rsp = *skb-&gt;data &amp; 0x2;
	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_ORIG">FLG_ORIG</A>, &amp;l2-&gt;flag))
		rsp = !rsp;
	skb_pull(skb, <A HREF="#l2addrsize">l2addrsize</A>(l2));

	<FONT COLOR="#298C52">if</FONT> (<A HREF="#IsRNR">IsRNR</A>(skb-&gt;data, test_bit(<A HREF="hisax.h.shtml#FLG_MOD128">FLG_MOD128</A>, &amp;l2-&gt;flag))) {
		test_and_set_bit(<A HREF="hisax.h.shtml#FLG_PEER_BUSY">FLG_PEER_BUSY</A>, &amp;l2-&gt;flag);
		rnr = 1;
	} <FONT COLOR="#298C52">else</FONT>
		test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_PEER_BUSY">FLG_PEER_BUSY</A>, &amp;l2-&gt;flag);
	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_MOD128">FLG_MOD128</A>, &amp;l2-&gt;flag)) {
		<FONT COLOR="#298C52">if</FONT> (skb-&gt;len == 2) {
			PollFlag = (skb-&gt;data[1] &amp; 0x1) == 0x1;
			nr = skb-&gt;data[1] &gt;&gt; 1;
		} <FONT COLOR="#298C52">else</FONT> {
			st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'N'</FONT>);
			<A HREF="#FreeSkb">FreeSkb</A>(skb);
			<A HREF="#establishlink">establishlink</A>(fi);
			<FONT COLOR="#298C52">return</FONT>;
		}
	} <FONT COLOR="#298C52">else</FONT> {
		<FONT COLOR="#298C52">if</FONT> (skb-&gt;len == 1) {
			PollFlag = (skb-&gt;data[0] &amp; 0x10);
			nr = (skb-&gt;data[0] &gt;&gt; 5) &amp; 0x7;
		} <FONT COLOR="#298C52">else</FONT> {
			st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'N'</FONT>);
			<A HREF="#FreeSkb">FreeSkb</A>(skb);
			<A HREF="#establishlink">establishlink</A>(fi);
			<FONT COLOR="#298C52">return</FONT>;
		}
	}
	<A HREF="#FreeSkb">FreeSkb</A>(skb);

	<FONT COLOR="#298C52">if</FONT> (rsp &amp;&amp; PollFlag) {
		<FONT COLOR="#298C52">if</FONT> (<A HREF="#legalnr">legalnr</A>(st, nr)) {
			<A HREF="#setva">setva</A>(st, nr);
			<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_T200_RUN">FLG_T200_RUN</A>, &amp;st-&gt;l2.flag))
				<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;st-&gt;l2.t200, 7);
			<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;l2-&gt;t203, 8);
			<FONT COLOR="#298C52">if</FONT> (rnr) {
				<A HREF="fsm.c.shtml#FsmRestartTimer">FsmRestartTimer</A>(&amp;l2-&gt;t200, l2-&gt;T200,
						EV_L2_T200, NULL, 14);
				test_and_set_bit(<A HREF="hisax.h.shtml#FLG_T200_RUN">FLG_T200_RUN</A>, &amp;st-&gt;l2.flag);
			} <FONT COLOR="#298C52">else</FONT>
				<A HREF="fsm.c.shtml#FsmAddTimer">FsmAddTimer</A>(&amp;l2-&gt;t203, l2-&gt;T203,
					    EV_L2_T203, NULL, 5);
			<A HREF="#invoke_retransmission">invoke_retransmission</A>(st, nr);
			<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L2_7);
			<FONT COLOR="#298C52">if</FONT> (skb_queue_len(&amp;l2-&gt;i_queue) &amp;&amp; <A HREF="#cansend">cansend</A>(st))
				st-&gt;l2.l2l1(st, <A HREF="hisax.h.shtml#PH_PULL">PH_PULL</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
			<FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (fi-&gt;userint &amp; <A HREF="isdnl2.h.shtml#LC_FLUSH_WAIT">LC_FLUSH_WAIT</A>) {
				fi-&gt;userint &amp;= ~<A HREF="isdnl2.h.shtml#LC_FLUSH_WAIT">LC_FLUSH_WAIT</A>;
				st-&gt;l2.l2l3(st, <A HREF="hisax.h.shtml#DL_FLUSH">DL_FLUSH</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);
			}
		}
	} <FONT COLOR="#298C52">else</FONT> {
		<FONT COLOR="#298C52">if</FONT> (!rsp &amp;&amp; PollFlag)
			<A HREF="#enquiry_response">enquiry_response</A>(st);
		<FONT COLOR="#298C52">if</FONT> (<A HREF="#legalnr">legalnr</A>(st, nr)) {
			<A HREF="#setva">setva</A>(st, nr);
		}
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l2_got_FRMR">l2_got_FRMR</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">char</FONT> tmp[64];

	skb_pull(skb, <A HREF="#l2addrsize">l2addrsize</A>(&amp;st-&gt;l2) + 1);
	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_MOD128">FLG_MOD128</A>, &amp;st-&gt;l2.flag)) {
		<FONT COLOR="#298C52">if</FONT> (skb-&gt;len &lt; 5)
			st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'N'</FONT>);
		<FONT COLOR="#298C52">else</FONT> {
			sprintf(tmp, <FONT COLOR="#FF0000">"FRMR information %2x %2x %2x %2x %2x"</FONT>,
				skb-&gt;data[0], skb-&gt;data[1], skb-&gt;data[2],
				skb-&gt;data[3], skb-&gt;data[4]);
			<A HREF="#l2m_debug">l2m_debug</A>(&amp;st-&gt;l2.l2m, tmp);
		}
	} <FONT COLOR="#298C52">else</FONT> {
		<FONT COLOR="#298C52">if</FONT> (skb-&gt;len &lt; 3)
			st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'N'</FONT>);
		<FONT COLOR="#298C52">else</FONT> {
			sprintf(tmp, <FONT COLOR="#FF0000">"FRMR information %2x %2x %2x"</FONT>,
				skb-&gt;data[0], skb-&gt;data[1], skb-&gt;data[2]);
			<A HREF="#l2m_debug">l2m_debug</A>(&amp;st-&gt;l2.l2m, tmp);
		}
	}
	<FONT COLOR="#298C52">if</FONT> (!(skb-&gt;data[0] &amp; 1) || ((skb-&gt;data[0] &amp; 3) == 1) ||		<FONT COLOR=#0000FF>/* I or S */</FONT>
	    (<A HREF="#IsUA">IsUA</A>(skb-&gt;data, 0) &amp;&amp; (fi-&gt;state == ST_L2_7))) {
		st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'K'</FONT>);
		<A HREF="#establishlink">establishlink</A>(fi);
		test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_L3_INIT">FLG_L3_INIT</A>, &amp;st-&gt;l2.flag);
	}
	<A HREF="#FreeSkb">FreeSkb</A>(skb);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l2_tei_remove">l2_tei_remove</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;

	<A HREF="callc.c.shtml#discard_queue">discard_queue</A>(&amp;st-&gt;l2.i_queue);
	<A HREF="callc.c.shtml#discard_queue">discard_queue</A>(&amp;st-&gt;l2.ui_queue);
	st-&gt;l2.tei = -1;
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_T200_RUN">FLG_T200_RUN</A>, &amp;st-&gt;l2.flag))
		<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;st-&gt;l2.t200, 18);
	<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;st-&gt;l2.t203, 19);
	<FONT COLOR="#298C52">if</FONT> (fi-&gt;state != ST_L2_4)
		st-&gt;l2.l2l3(st, <A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);
	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L2_1);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l2_persistant_da">l2_persistant_da</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	<FONT COLOR="#298C52">int</FONT> rel = <A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>;
	
	
	<A HREF="callc.c.shtml#discard_queue">discard_queue</A>(&amp;st-&gt;l2.i_queue);
	<A HREF="callc.c.shtml#discard_queue">discard_queue</A>(&amp;st-&gt;l2.ui_queue);
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_T200_RUN">FLG_T200_RUN</A>, &amp;st-&gt;l2.flag))
		<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;st-&gt;l2.t200, 18);
	<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;st-&gt;l2.t203, 19);
	<A HREF="#clear_exception">clear_exception</A>(&amp;st-&gt;l2);
	<FONT COLOR="#298C52">switch</FONT> (fi-&gt;state) {
		<FONT COLOR="#298C52">case</FONT> ST_L2_1:
			<FONT COLOR="#298C52">if</FONT> (!test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_ESTAB_PEND">FLG_ESTAB_PEND</A>, &amp;st-&gt;l2.flag))
				<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> ST_L2_3:
			st-&gt;l2.l2l3(st, <A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);
		<FONT COLOR="#298C52">case</FONT> ST_L2_2:
			<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L2_1);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> ST_L2_6:
			rel = <A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>;
		<FONT COLOR="#298C52">case</FONT> ST_L2_5:
			<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_PEND_REL">FLG_PEND_REL</A>, &amp;st-&gt;l2.flag))
				rel = <A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>;
		<FONT COLOR="#298C52">case</FONT> ST_L2_7:
		<FONT COLOR="#298C52">case</FONT> ST_L2_8:
			st-&gt;l2.l2l3(st, rel, NULL);
			<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L2_4);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> ST_L2_4:
			<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_ESTAB_PEND">FLG_ESTAB_PEND</A>, &amp;st-&gt;l2.flag))
				st-&gt;l2.l2l3(st, <A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);
			<FONT COLOR="#298C52">break</FONT>;
	}
	test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_PEND_REL">FLG_PEND_REL</A>, &amp;st-&gt;l2.flag);
	test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_L1_ACTIV">FLG_L1_ACTIV</A>, &amp;st-&gt;l2.flag);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">struct</FONT> FsmNode L2FnList[] <A HREF="hisax.h.shtml#HISAX_INITDATA">HISAX_INITDATA</A> =
{
	{ST_L2_1, EV_L2_DL_ESTABLISH, <A HREF="#l2_dl_establish">l2_dl_establish</A>},
	{ST_L2_2, EV_L2_DL_ESTABLISH, <A HREF="#l2_dl_establish">l2_dl_establish</A>},
	{ST_L2_4, EV_L2_DL_ESTABLISH, <A HREF="#l2_establish">l2_establish</A>},
	{ST_L2_5, EV_L2_DL_ESTABLISH, <A HREF="#l2_establish">l2_establish</A>},
	{ST_L2_7, EV_L2_DL_ESTABLISH, <A HREF="#l2_establish">l2_establish</A>},
	{ST_L2_8, EV_L2_DL_ESTABLISH, <A HREF="#l2_establish">l2_establish</A>},
	{ST_L2_4, EV_L2_DL_RELEASE, <A HREF="#l2_dl_release">l2_dl_release</A>},
	{ST_L2_5, EV_L2_DL_RELEASE, <A HREF="#l2_dl_release">l2_dl_release</A>},
	{ST_L2_7, EV_L2_DL_RELEASE, <A HREF="#l2_dl_release">l2_dl_release</A>},
	{ST_L2_8, EV_L2_DL_RELEASE, <A HREF="#l2_dl_release">l2_dl_release</A>},
	{ST_L2_5, EV_L2_DL_DATA, <A HREF="#l2_feed_iqueue">l2_feed_iqueue</A>},
	{ST_L2_7, EV_L2_DL_DATA, <A HREF="#l2_feed_iqueue">l2_feed_iqueue</A>},
	{ST_L2_8, EV_L2_DL_DATA, <A HREF="#l2_feed_iqueue">l2_feed_iqueue</A>},
	{ST_L2_1, EV_L2_DL_UNIT_DATA, <A HREF="#l2_put_ui">l2_put_ui</A>},
	{ST_L2_2, EV_L2_DL_UNIT_DATA, <A HREF="#l2_put_ui">l2_put_ui</A>},
	{ST_L2_3, EV_L2_DL_UNIT_DATA, <A HREF="#l2_put_ui">l2_put_ui</A>},
	{ST_L2_4, EV_L2_DL_UNIT_DATA, <A HREF="#l2_put_ui">l2_put_ui</A>},
	{ST_L2_5, EV_L2_DL_UNIT_DATA, <A HREF="#l2_put_ui">l2_put_ui</A>},
	{ST_L2_6, EV_L2_DL_UNIT_DATA, <A HREF="#l2_put_ui">l2_put_ui</A>},
	{ST_L2_7, EV_L2_DL_UNIT_DATA, <A HREF="#l2_put_ui">l2_put_ui</A>},
	{ST_L2_8, EV_L2_DL_UNIT_DATA, <A HREF="#l2_put_ui">l2_put_ui</A>},
	{ST_L2_1, EV_L2_MDL_ASSIGN, <A HREF="#l2_got_tei">l2_got_tei</A>},
	{ST_L2_2, EV_L2_MDL_ASSIGN, <A HREF="#l2_got_tei">l2_got_tei</A>},
	{ST_L2_3, EV_L2_MDL_ASSIGN, <A HREF="#l2_got_tei">l2_got_tei</A>},
	{ST_L2_2, EV_L2_MDL_ERROR, <A HREF="#l2_tei_remove">l2_tei_remove</A>},
	{ST_L2_3, EV_L2_MDL_ERROR, <A HREF="#l2_tei_remove">l2_tei_remove</A>},
	{ST_L2_4, EV_L2_MDL_REMOVE, <A HREF="#l2_tei_remove">l2_tei_remove</A>},
	{ST_L2_5, EV_L2_MDL_REMOVE, <A HREF="#l2_tei_remove">l2_tei_remove</A>},
	{ST_L2_6, EV_L2_MDL_REMOVE, <A HREF="#l2_tei_remove">l2_tei_remove</A>},
	{ST_L2_7, EV_L2_MDL_REMOVE, <A HREF="#l2_tei_remove">l2_tei_remove</A>},
	{ST_L2_8, EV_L2_MDL_REMOVE, <A HREF="#l2_tei_remove">l2_tei_remove</A>},
	{ST_L2_4, EV_L2_SABMX, <A HREF="#l2_got_SABMX">l2_got_SABMX</A>},
	{ST_L2_5, EV_L2_SABMX, <A HREF="#l2_got_SABMX">l2_got_SABMX</A>},
	{ST_L2_6, EV_L2_SABMX, <A HREF="#l2_got_SABMX">l2_got_SABMX</A>},
	{ST_L2_7, EV_L2_SABMX, <A HREF="#l2_got_SABMX">l2_got_SABMX</A>},
	{ST_L2_8, EV_L2_SABMX, <A HREF="#l2_got_SABMX">l2_got_SABMX</A>},
	{ST_L2_4, EV_L2_DISC, <A HREF="#l2_got_disconn">l2_got_disconn</A>},
	{ST_L2_5, EV_L2_DISC, <A HREF="#l2_got_disconn">l2_got_disconn</A>},
	{ST_L2_6, EV_L2_DISC, <A HREF="#l2_got_disconn">l2_got_disconn</A>},
	{ST_L2_7, EV_L2_DISC, <A HREF="#l2_got_disconn">l2_got_disconn</A>},
	{ST_L2_8, EV_L2_DISC, <A HREF="#l2_got_disconn">l2_got_disconn</A>},
	{ST_L2_4, EV_L2_UA, <A HREF="#l2_mdl_error">l2_mdl_error</A>},
	{ST_L2_5, EV_L2_UA, <A HREF="#l2_got_ua">l2_got_ua</A>},
	{ST_L2_6, EV_L2_UA, <A HREF="#l2_got_ua">l2_got_ua</A>},
	{ST_L2_7, EV_L2_UA, <A HREF="#l2_mdl_error">l2_mdl_error</A>},
	{ST_L2_8, EV_L2_UA, <A HREF="#l2_mdl_error">l2_mdl_error</A>},
	{ST_L2_4, EV_L2_DM, <A HREF="#l2_got_dm">l2_got_dm</A>},
	{ST_L2_5, EV_L2_DM, <A HREF="#l2_got_dm">l2_got_dm</A>},
	{ST_L2_6, EV_L2_DM, <A HREF="#l2_got_dm">l2_got_dm</A>},
	{ST_L2_7, EV_L2_DM, <A HREF="#l2_mdl_error">l2_mdl_error</A>},
	{ST_L2_8, EV_L2_DM, <A HREF="#l2_mdl_error">l2_mdl_error</A>},
	{ST_L2_1, EV_L2_UI, <A HREF="#l2_got_ui">l2_got_ui</A>},
	{ST_L2_2, EV_L2_UI, <A HREF="#l2_got_ui">l2_got_ui</A>},
	{ST_L2_3, EV_L2_UI, <A HREF="#l2_got_ui">l2_got_ui</A>},
	{ST_L2_4, EV_L2_UI, <A HREF="#l2_got_ui">l2_got_ui</A>},
	{ST_L2_5, EV_L2_UI, <A HREF="#l2_got_ui">l2_got_ui</A>},
	{ST_L2_6, EV_L2_UI, <A HREF="#l2_got_ui">l2_got_ui</A>},
	{ST_L2_7, EV_L2_UI, <A HREF="#l2_got_ui">l2_got_ui</A>},
	{ST_L2_8, EV_L2_UI, <A HREF="#l2_got_ui">l2_got_ui</A>},
	{ST_L2_7, EV_L2_FRMR, <A HREF="#l2_got_FRMR">l2_got_FRMR</A>},
	{ST_L2_8, EV_L2_FRMR, <A HREF="#l2_got_FRMR">l2_got_FRMR</A>},
	{ST_L2_7, EV_L2_SUPER, <A HREF="#l2_got_st7_super">l2_got_st7_super</A>},
	{ST_L2_8, EV_L2_SUPER, <A HREF="#l2_got_st8_super">l2_got_st8_super</A>},
	{ST_L2_7, EV_L2_I, <A HREF="#l2_got_iframe">l2_got_iframe</A>},
	{ST_L2_8, EV_L2_I, <A HREF="#l2_got_iframe">l2_got_iframe</A>},
	{ST_L2_5, EV_L2_T200, <A HREF="#l2_st5_tout_200">l2_st5_tout_200</A>},
	{ST_L2_6, EV_L2_T200, <A HREF="#l2_st6_tout_200">l2_st6_tout_200</A>},
	{ST_L2_7, EV_L2_T200, <A HREF="#l2_st78_tout_200">l2_st78_tout_200</A>},
	{ST_L2_8, EV_L2_T200, <A HREF="#l2_st78_tout_200">l2_st78_tout_200</A>},
	{ST_L2_7, EV_L2_T203, <A HREF="#l2_st7_tout_203">l2_st7_tout_203</A>},
	{ST_L2_7, EV_L2_ACK_PULL, <A HREF="#l2_pull_iqueue">l2_pull_iqueue</A>},
	{ST_L2_1, EV_L1_DEACTIVATE, <A HREF="#l2_persistant_da">l2_persistant_da</A>},
	{ST_L2_2, EV_L1_DEACTIVATE, <A HREF="#l2_persistant_da">l2_persistant_da</A>},
	{ST_L2_3, EV_L1_DEACTIVATE, <A HREF="#l2_persistant_da">l2_persistant_da</A>},
	{ST_L2_4, EV_L1_DEACTIVATE, <A HREF="#l2_persistant_da">l2_persistant_da</A>},
	{ST_L2_5, EV_L1_DEACTIVATE, <A HREF="#l2_persistant_da">l2_persistant_da</A>},
	{ST_L2_6, EV_L1_DEACTIVATE, <A HREF="#l2_persistant_da">l2_persistant_da</A>},
	{ST_L2_7, EV_L1_DEACTIVATE, <A HREF="#l2_persistant_da">l2_persistant_da</A>},
	{ST_L2_8, EV_L1_DEACTIVATE, <A HREF="#l2_persistant_da">l2_persistant_da</A>},
};

<FONT COLOR=#A521F7>#define</FONT> <A NAME="L2_FN_COUNT">L2_FN_COUNT</A> (<FONT COLOR="#298C52">sizeof</FONT>(L2FnList)/<FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> FsmNode))

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="isdnl2_l1l2">isdnl2_l1l2</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	u_char *datap;
	<FONT COLOR="#298C52">char</FONT> tmp[32];
	<FONT COLOR="#298C52">int</FONT> ret = 1, len;

	<FONT COLOR="#298C52">switch</FONT> (pr) {
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_DATA">PH_DATA</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
			datap = skb-&gt;data;
			len = <A HREF="#l2addrsize">l2addrsize</A>(&amp;st-&gt;l2);
			<FONT COLOR="#298C52">if</FONT> (skb-&gt;len &gt; len)
				datap += len;
			<FONT COLOR="#298C52">else</FONT> {
				st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'N'</FONT>);
				<A HREF="#FreeSkb">FreeSkb</A>(skb);
				<FONT COLOR="#298C52">return</FONT>;
			}
			<FONT COLOR="#298C52">if</FONT> (!(*datap &amp; 1))	<FONT COLOR=#0000FF>/* I-Frame */</FONT>
				ret = <A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l2.l2m, EV_L2_I, skb);
			<FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> ((*datap &amp; 3) == 1)	<FONT COLOR=#0000FF>/* S-Frame */</FONT>
				ret = <A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l2.l2m, EV_L2_SUPER, skb);
			<FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (<A HREF="#IsUI">IsUI</A>(datap, test_bit(<A HREF="hisax.h.shtml#FLG_MOD128">FLG_MOD128</A>, &amp;st-&gt;l2.flag)))
				ret = <A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l2.l2m, EV_L2_UI, skb);
			<FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (<A HREF="#IsSABMX">IsSABMX</A>(datap, test_bit(<A HREF="hisax.h.shtml#FLG_MOD128">FLG_MOD128</A>, &amp;st-&gt;l2.flag)))
				ret = <A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l2.l2m, EV_L2_SABMX, skb);
			<FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (<A HREF="#IsUA">IsUA</A>(datap, test_bit(<A HREF="hisax.h.shtml#FLG_MOD128">FLG_MOD128</A>, &amp;st-&gt;l2.flag)))
				ret = <A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l2.l2m, EV_L2_UA, skb);
			<FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (<A HREF="#IsDISC">IsDISC</A>(datap, test_bit(<A HREF="hisax.h.shtml#FLG_MOD128">FLG_MOD128</A>, &amp;st-&gt;l2.flag)))
				ret = <A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l2.l2m, EV_L2_DISC, skb);
			<FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (<A HREF="#IsDM">IsDM</A>(datap, test_bit(<A HREF="hisax.h.shtml#FLG_MOD128">FLG_MOD128</A>, &amp;st-&gt;l2.flag)))
				ret = <A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l2.l2m, EV_L2_DM, skb);
			<FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (<A HREF="#IsFRMR">IsFRMR</A>(datap, test_bit(<A HREF="hisax.h.shtml#FLG_MOD128">FLG_MOD128</A>, &amp;st-&gt;l2.flag)))
				ret = <A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l2.l2m, EV_L2_FRMR, skb);
			<FONT COLOR="#298C52">else</FONT> {
				ret = 0;
				st-&gt;ma.layer(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, (<FONT COLOR="#298C52">void</FONT> *) <FONT COLOR="#FF0000">'L'</FONT>);
				<A HREF="#FreeSkb">FreeSkb</A>(skb);
			}
			<FONT COLOR="#298C52">if</FONT> (ret) {
				<A HREF="#FreeSkb">FreeSkb</A>(skb);
			}
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_PULL">PH_PULL</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l2.l2m, EV_L2_ACK_PULL, arg);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_PAUSE">PH_PAUSE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
			test_and_set_bit(<A HREF="hisax.h.shtml#FLG_DCHAN_BUSY">FLG_DCHAN_BUSY</A>, &amp;st-&gt;l2.flag);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_PAUSE">PH_PAUSE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>):
			test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_DCHAN_BUSY">FLG_DCHAN_BUSY</A>, &amp;st-&gt;l2.flag);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_ACTIVATE">PH_ACTIVATE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>):
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_ACTIVATE">PH_ACTIVATE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
			test_and_set_bit(<A HREF="hisax.h.shtml#FLG_L1_ACTIV">FLG_L1_ACTIV</A>, &amp;st-&gt;l2.flag);
			<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_ESTAB_PEND">FLG_ESTAB_PEND</A>, &amp;st-&gt;l2.flag))
				<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l2.l2m, EV_L2_DL_ESTABLISH, arg);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_DEACTIVATE">PH_DEACTIVATE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_DEACTIVATE">PH_DEACTIVATE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>):
			test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_L1_ACTIV">FLG_L1_ACTIV</A>, &amp;st-&gt;l2.flag);
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l2.l2m, EV_L1_DEACTIVATE, arg);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">default</FONT>:
			sprintf(tmp, <FONT COLOR="#FF0000">"l2 unknown pr %04x"</FONT>, pr);
			<A HREF="#l2m_debug">l2m_debug</A>(&amp;st-&gt;l2.l2m, tmp);
			<FONT COLOR="#298C52">break</FONT>;
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="isdnl2_l3l2">isdnl2_l3l2</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">switch</FONT> (pr) {
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			<FONT COLOR="#298C52">if</FONT> (<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l2.l2m, EV_L2_DL_DATA, arg)) {
				dev_kfree_skb((<FONT COLOR="#298C52">struct</FONT> sk_buff *) arg);
			}
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_UNIT_DATA">DL_UNIT_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			<FONT COLOR="#298C52">if</FONT> (<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l2.l2m, EV_L2_DL_UNIT_DATA, arg)) {
				dev_kfree_skb((<FONT COLOR="#298C52">struct</FONT> sk_buff *) arg);
			}
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_ESTABLISH">DL_ESTABLISH</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_L1_ACTIV">FLG_L1_ACTIV</A>, &amp;st-&gt;l2.flag)) {
				<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_LAPD">FLG_LAPD</A>, &amp;st-&gt;l2.flag) ||
					test_bit(<A HREF="hisax.h.shtml#FLG_ORIG">FLG_ORIG</A>, &amp;st-&gt;l2.flag)) {
				<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l2.l2m, EV_L2_DL_ESTABLISH, arg);
				}
			} <FONT COLOR="#298C52">else</FONT> {
				<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_LAPD">FLG_LAPD</A>, &amp;st-&gt;l2.flag) ||
					test_bit(<A HREF="hisax.h.shtml#FLG_ORIG">FLG_ORIG</A>, &amp;st-&gt;l2.flag)) {
				test_and_set_bit(<A HREF="hisax.h.shtml#FLG_ESTAB_PEND">FLG_ESTAB_PEND</A>, &amp;st-&gt;l2.flag);
				}
				st-&gt;l2.l2l1(st, <A HREF="hisax.h.shtml#PH_ACTIVATE">PH_ACTIVATE</A>, NULL);
			}
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_LAPB">FLG_LAPB</A>, &amp;st-&gt;l2.flag)) {
				st-&gt;l2.l2l1(st, <A HREF="hisax.h.shtml#PH_DEACTIVATE">PH_DEACTIVATE</A>, NULL);
			}
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l2.l2m, EV_L2_DL_RELEASE, arg);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_FLUSH">DL_FLUSH</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			(&amp;st-&gt;l2.l2m)-&gt;userint |= <A HREF="isdnl2.h.shtml#LC_FLUSH_WAIT">LC_FLUSH_WAIT</A>;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#MDL_ASSIGN">MDL_ASSIGN</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l2.l2m, EV_L2_MDL_ASSIGN, arg);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#MDL_REMOVE">MDL_REMOVE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l2.l2m, EV_L2_MDL_REMOVE, arg);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#RESPONSE">RESPONSE</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l2.l2m, EV_L2_MDL_ERROR, arg);
			<FONT COLOR="#298C52">break</FONT>;
	}
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="releasestack_isdnl2">releasestack_isdnl2</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st)
{
	<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;st-&gt;l2.t200, 15);
	<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;st-&gt;l2.t203, 16);
	<A HREF="callc.c.shtml#discard_queue">discard_queue</A>(&amp;st-&gt;l2.i_queue);
	<A HREF="callc.c.shtml#discard_queue">discard_queue</A>(&amp;st-&gt;l2.ui_queue);
	<A HREF="#ReleaseWin">ReleaseWin</A>(&amp;st-&gt;l2);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="l2m_debug">l2m_debug</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">char</FONT> *s)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	<FONT COLOR="#298C52">char</FONT> tm[32], str[256];

	<A HREF="fsm.c.shtml#jiftime">jiftime</A>(tm, jiffies);
	sprintf(str, <FONT COLOR="#FF0000">"%s %s %s\n"</FONT>, tm, st-&gt;l2.debug_id, s);
	<A HREF="isdnl1.c.shtml#HiSax_putstatus">HiSax_putstatus</A>(st-&gt;l1.hardware, str);
}

<FONT COLOR="#298C52">void</FONT>
<A HREF="#setstack_isdnl2">setstack_isdnl2</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">char</FONT> *debug_id)
{
	st-&gt;l1.l1l2 = <A HREF="#isdnl2_l1l2">isdnl2_l1l2</A>;
	st-&gt;l3.l3l2 = <A HREF="#isdnl2_l3l2">isdnl2_l3l2</A>;

	skb_queue_head_init(&amp;st-&gt;l2.i_queue);
	skb_queue_head_init(&amp;st-&gt;l2.ui_queue);
	<A HREF="#InitWin">InitWin</A>(&amp;st-&gt;l2);
	st-&gt;l2.debug = 0;

	st-&gt;l2.l2m.fsm = &amp;l2fsm;
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_LAPB">FLG_LAPB</A>, &amp;st-&gt;l2.flag))
		st-&gt;l2.l2m.state = ST_L2_4;
	<FONT COLOR="#298C52">else</FONT>
	st-&gt;l2.l2m.state = ST_L2_1;
	st-&gt;l2.l2m.debug = 0;
	st-&gt;l2.l2m.userdata = st;
	st-&gt;l2.l2m.userint = 0;
	st-&gt;l2.l2m.printdebug = <A HREF="#l2m_debug">l2m_debug</A>;
	strcpy(st-&gt;l2.debug_id, debug_id);

	<A HREF="fsm.c.shtml#FsmInitTimer">FsmInitTimer</A>(&amp;st-&gt;l2.l2m, &amp;st-&gt;l2.t200);
	<A HREF="fsm.c.shtml#FsmInitTimer">FsmInitTimer</A>(&amp;st-&gt;l2.l2m, &amp;st-&gt;l2.t203);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#transl2_l3l2">transl2_l3l2</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">switch</FONT> (pr) {
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_UNIT_DATA">DL_UNIT_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			st-&gt;l2.l2l1(st, <A HREF="hisax.h.shtml#PH_DATA">PH_DATA</A>, arg);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_ESTABLISH">DL_ESTABLISH</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			st-&gt;l2.l2l1(st, <A HREF="hisax.h.shtml#PH_ACTIVATE">PH_ACTIVATE</A>, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			st-&gt;l2.l2l1(st, <A HREF="hisax.h.shtml#PH_DEACTIVATE">PH_DEACTIVATE</A>, NULL);
			<FONT COLOR="#298C52">break</FONT>;
	}
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="setstack_transl2">setstack_transl2</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st)
{
	st-&gt;l3.l3l2 = <A HREF="#transl2_l3l2">transl2_l3l2</A>;
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="releasestack_transl2">releasestack_transl2</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st)
{
}

<A HREF="callc.c.shtml#HISAX_INITFUNC">HISAX_INITFUNC</A>(<FONT COLOR="#298C52">void</FONT>
Isdnl2New(<FONT COLOR="#298C52">void</FONT>))
{
	l2fsm.state_count = <A HREF="#L2_STATE_COUNT">L2_STATE_COUNT</A>;
	l2fsm.event_count = <A HREF="#L2_EVENT_COUNT">L2_EVENT_COUNT</A>;
	l2fsm.strEvent = strL2Event;
	l2fsm.strState = strL2State;
	FsmNew(&amp;l2fsm, L2FnList, <A HREF="#L2_FN_COUNT">L2_FN_COUNT</A>);
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="Isdnl2Free">Isdnl2Free</A>(<FONT COLOR="#298C52">void</FONT>)
{
	<A HREF="fsm.c.shtml#FsmFree">FsmFree</A>(&amp;l2fsm);
}
</BODY>

</HTML>
