<HTML>

<!-- Generated by c2html-1.0, Copyright 1998 by Dave Whittington -->
<HEAD>
<TITLE>telespci.c</TITLE>
<!--#include virtual="/ssi/js.shtml" -->
<!--#include virtual="/ssi/buttondefs.shtml" -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<TABLE WIDTH="100%">
<TR>
<TD ALIGN=LEFT WIDTH="90"><!--#include virtual="/ssi/b_home.shtml" --></TD>
<TD ALIGN=RIGHT WIDTH="90"><!--#include virtual="/ssi/b_index.shtml" --></TD>
</TR>
</TABLE>
<CENTER><H1>telespci.c</H1></CENTER>

<HR>
<PRE>
<FONT COLOR=#0000FF>/* $Id$

 * telespci.c     low level stuff for Teles PCI isdn cards
 *
 * Author       Ton van Rosmalen 
 *              Karsten Keil (keil@temic-ech.spacenet.de)
 *
 *
 * $Log$
 * Revision 2.3  1998/05/25 12:58:26  keil
 * HiSax golden code from certification, Don't use !!!
 * No leased lines, no X75, but many changes.
 *
 * Revision 2.1  1998/04/15 16:38:23  keil
 * Add S0Box and Teles PCI support
 *
 *
 */</FONT>
<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#__NO_VERSION__">__NO_VERSION__</A>
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/config.h&gt;
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hisax.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isac.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hscx.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isdnl1.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/pci.h&gt;

<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *CardType[];

<FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *telespci_revision = <FONT COLOR="#FF0000">"$Revision$"</FONT>;

<FONT COLOR=#A521F7>#define</FONT> ZORAN_PO_RQ_PEN	0x02000000
<FONT COLOR=#A521F7>#define</FONT> ZORAN_PO_WR	0x00800000
<FONT COLOR=#A521F7>#define</FONT> ZORAN_PO_GID0	0x00000000
<FONT COLOR=#A521F7>#define</FONT> ZORAN_PO_GID1	0x00100000
<FONT COLOR=#A521F7>#define</FONT> ZORAN_PO_GREG0	0x00000000
<FONT COLOR=#A521F7>#define</FONT> ZORAN_PO_GREG1	0x00010000
<FONT COLOR=#A521F7>#define</FONT> ZORAN_PO_DMASK	0xFF

<FONT COLOR=#A521F7>#define</FONT> WRITE_ADDR_ISAC	(ZORAN_PO_WR | ZORAN_PO_GID0 | ZORAN_PO_GREG0)
<FONT COLOR=#A521F7>#define</FONT> READ_DATA_ISAC	(ZORAN_PO_GID0 | ZORAN_PO_GREG1)
<FONT COLOR=#A521F7>#define</FONT> WRITE_DATA_ISAC	(ZORAN_PO_WR | ZORAN_PO_GID0 | ZORAN_PO_GREG1)
<FONT COLOR=#A521F7>#define</FONT> WRITE_ADDR_HSCX	(ZORAN_PO_WR | ZORAN_PO_GID1 | ZORAN_PO_GREG0)
<FONT COLOR=#A521F7>#define</FONT> READ_DATA_HSCX	(ZORAN_PO_GID1 | ZORAN_PO_GREG1)
<FONT COLOR=#A521F7>#define</FONT> WRITE_DATA_HSCX	(ZORAN_PO_WR | ZORAN_PO_GID1 | ZORAN_PO_GREG1)

<FONT COLOR=#A521F7>#define</FONT> ZORAN_WAIT_NOBUSY	<FONT COLOR="#298C52">do</FONT> { \
					portdata = readl(adr + 0x200); \
				} <FONT COLOR="#298C52">while</FONT> (portdata &amp; ZORAN_PO_RQ_PEN)

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> u_char
readisac(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char off)
{
	<FONT COLOR="#298C52">register</FONT> <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> portdata;

	ZORAN_WAIT_NOBUSY;
	
	<FONT COLOR=#0000FF>/* set address for ISAC */</FONT>
	writel(WRITE_ADDR_ISAC | (off-0x20), adr + 0x200);
	ZORAN_WAIT_NOBUSY;
	
	<FONT COLOR=#0000FF>/* read data from ISAC */</FONT>
	writel(READ_DATA_ISAC, adr + 0x200);
	ZORAN_WAIT_NOBUSY;
	<FONT COLOR="#298C52">return</FONT>((u_char)(portdata &amp; ZORAN_PO_DMASK));
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
writeisac(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char off, u_char data)
{
	<FONT COLOR="#298C52">register</FONT> <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> portdata;

	ZORAN_WAIT_NOBUSY;
	
	<FONT COLOR=#0000FF>/* set address for ISAC */</FONT>
	writel(WRITE_ADDR_ISAC | (off-0x20), adr + 0x200);
	ZORAN_WAIT_NOBUSY;

	<FONT COLOR=#0000FF>/* write data to ISAC */</FONT>
	writel(WRITE_DATA_ISAC | data, adr + 0x200);
	ZORAN_WAIT_NOBUSY;
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> u_char
readhscx(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, <FONT COLOR="#298C52">int</FONT> hscx, u_char off)
{
	<FONT COLOR="#298C52">register</FONT> <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> portdata;

	ZORAN_WAIT_NOBUSY;
	<FONT COLOR=#0000FF>/* set address for HSCX */</FONT>
	writel(WRITE_ADDR_HSCX | ((hscx ? 0x40:0) + (off &amp; 0x1f)), adr + 0x200);
	ZORAN_WAIT_NOBUSY;
	
	<FONT COLOR=#0000FF>/* read data from HSCX */</FONT>
	writel(READ_DATA_HSCX, adr + 0x200);
	ZORAN_WAIT_NOBUSY;
	<FONT COLOR="#298C52">return</FONT> ((u_char)(portdata &amp; ZORAN_PO_DMASK));
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
writehscx(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, <FONT COLOR="#298C52">int</FONT> hscx, u_char off, u_char data)
{
	<FONT COLOR="#298C52">register</FONT> <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> portdata;

	ZORAN_WAIT_NOBUSY;
	<FONT COLOR=#0000FF>/* set address for HSCX */</FONT>
	writel(WRITE_ADDR_HSCX | ((hscx ? 0x40:0) + (off &amp; 0x1f)), adr + 0x200);
	ZORAN_WAIT_NOBUSY;

	<FONT COLOR=#0000FF>/* write data to HSCX */</FONT>
	writel(WRITE_DATA_HSCX | data, adr + 0x200);
	ZORAN_WAIT_NOBUSY;
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
read_fifo_isac(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	<FONT COLOR="#298C52">register</FONT> <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> portdata;
	<FONT COLOR="#298C52">register</FONT> <FONT COLOR="#298C52">int</FONT> i;

	ZORAN_WAIT_NOBUSY;
	<FONT COLOR=#0000FF>/* read data from ISAC */</FONT>
	<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; size; i++) {
		<FONT COLOR=#0000FF>/* set address for ISAC fifo */</FONT>
		writel(WRITE_ADDR_ISAC | 0x1E, adr + 0x200);
		ZORAN_WAIT_NOBUSY;
		writel(READ_DATA_ISAC, adr + 0x200);
		ZORAN_WAIT_NOBUSY;
		data[i] = (u_char)(portdata &amp; ZORAN_PO_DMASK);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
write_fifo_isac(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	<FONT COLOR="#298C52">register</FONT> <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> portdata;
	<FONT COLOR="#298C52">register</FONT> <FONT COLOR="#298C52">int</FONT> i;

	ZORAN_WAIT_NOBUSY;
	<FONT COLOR=#0000FF>/* write data to ISAC */</FONT>
	<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; size; i++) {
		<FONT COLOR=#0000FF>/* set address for ISAC fifo */</FONT>
		writel(WRITE_ADDR_ISAC | 0x1E, adr + 0x200);
		ZORAN_WAIT_NOBUSY;
		writel(WRITE_DATA_ISAC | data[i], adr + 0x200);
		ZORAN_WAIT_NOBUSY;
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
read_fifo_hscx(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, <FONT COLOR="#298C52">int</FONT> hscx, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	<FONT COLOR="#298C52">register</FONT> <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> portdata;
	<FONT COLOR="#298C52">register</FONT> <FONT COLOR="#298C52">int</FONT> i;

	ZORAN_WAIT_NOBUSY;
	<FONT COLOR=#0000FF>/* read data from HSCX */</FONT>
	<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; size; i++) {
		<FONT COLOR=#0000FF>/* set address for HSCX fifo */</FONT>
		writel(WRITE_ADDR_HSCX |(hscx ? 0x5F:0x1F), adr + 0x200);
		ZORAN_WAIT_NOBUSY;
		writel(READ_DATA_HSCX, adr + 0x200);
		ZORAN_WAIT_NOBUSY;
		data[i] = (u_char) (portdata &amp; ZORAN_PO_DMASK);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
write_fifo_hscx(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, <FONT COLOR="#298C52">int</FONT> hscx, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> portdata;
	<FONT COLOR="#298C52">register</FONT> <FONT COLOR="#298C52">int</FONT> i;

	ZORAN_WAIT_NOBUSY;
	<FONT COLOR=#0000FF>/* write data to HSCX */</FONT>
	<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; size; i++) {
		<FONT COLOR=#0000FF>/* set address for HSCX fifo */</FONT>
		writel(WRITE_ADDR_HSCX |(hscx ? 0x5F:0x1F), adr + 0x200);
		ZORAN_WAIT_NOBUSY;
		writel(WRITE_DATA_HSCX | data[i], adr + 0x200);
		ZORAN_WAIT_NOBUSY;
		udelay(10);
	}
}

<FONT COLOR=#0000FF>/* Interface functions */</FONT>

<FONT COLOR="#298C52">static</FONT> u_char
<A HREF="asuscom.c.shtml#ReadISAC">ReadISAC</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char offset)
{
	<FONT COLOR="#298C52">return</FONT> (readisac(cs-&gt;hw.teles0.membase, offset));
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#WriteISAC">WriteISAC</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char offset, u_char value)
{
	writeisac(cs-&gt;hw.teles0.membase, offset, value);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#ReadISACfifo">ReadISACfifo</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	read_fifo_isac(cs-&gt;hw.teles0.membase, data, size);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#WriteISACfifo">WriteISACfifo</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	write_fifo_isac(cs-&gt;hw.teles0.membase, data, size);
}

<FONT COLOR="#298C52">static</FONT> u_char
<A HREF="asuscom.c.shtml#ReadHSCX">ReadHSCX</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> hscx, u_char offset)
{
	<FONT COLOR="#298C52">return</FONT> (readhscx(cs-&gt;hw.teles0.membase, hscx, offset));
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#WriteHSCX">WriteHSCX</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> hscx, u_char offset, u_char value)
{
	writehscx(cs-&gt;hw.teles0.membase, hscx, offset, value);
}

<FONT COLOR=#0000FF>/*
 * fast interrupt HSCX stuff goes here
 */</FONT>

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#READHSCX">READHSCX</A>(cs, nr, reg) readhscx(cs-&gt;hw.teles0.membase, nr, reg)
<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#WRITEHSCX">WRITEHSCX</A>(cs, nr, reg, data) writehscx(cs-&gt;hw.teles0.membase, nr, reg, data)
<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#READHSCXFIFO">READHSCXFIFO</A>(cs, nr, ptr, cnt) read_fifo_hscx(cs-&gt;hw.teles0.membase, nr, ptr, cnt)
<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#WRITEHSCXFIFO">WRITEHSCXFIFO</A>(cs, nr, ptr, cnt) write_fifo_hscx(cs-&gt;hw.teles0.membase, nr, ptr, cnt)

<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hscx_irq.c"</FONT>

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
telespci_interrupt(<FONT COLOR="#298C52">int</FONT> intno, <FONT COLOR="#298C52">void</FONT> *dev_id, <FONT COLOR="#298C52">struct</FONT> pt_regs *regs)
{
<FONT COLOR=#A521F7>#define</FONT> MAXCOUNT 20
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = dev_id;
	u_char val, stat = 0;

	<FONT COLOR="#298C52">if</FONT> (!cs) {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"TelesPCI: Spurious interrupt!\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT>;
	}
	val = readhscx(cs-&gt;hw.teles0.membase, 1, <A HREF="hscx.h.shtml#HSCX_ISTA">HSCX_ISTA</A>);
	<FONT COLOR="#298C52">if</FONT> (val) {
		<A HREF="hscx_irq.c.shtml#hscx_int_main">hscx_int_main</A>(cs, val);
		stat |= 1;
	}
	val = readisac(cs-&gt;hw.teles0.membase, <A HREF="isac.h.shtml#ISAC_ISTA">ISAC_ISTA</A>);
	<FONT COLOR="#298C52">if</FONT> (val) {
		<A HREF="isac.c.shtml#isac_interrupt">isac_interrupt</A>(cs, val);
		stat |= 2;
	}
	<FONT COLOR=#0000FF>/* Clear interrupt register for Zoran PCI controller */</FONT>
	writel(0x70000000, cs-&gt;hw.teles0.membase + 0x3C);

	<FONT COLOR="#298C52">if</FONT> (stat &amp; 1) {
		writehscx(cs-&gt;hw.teles0.membase, 0, <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A>, 0xFF);
		writehscx(cs-&gt;hw.teles0.membase, 1, <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A>, 0xFF);
		writehscx(cs-&gt;hw.teles0.membase, 0, <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A>, 0x0);
		writehscx(cs-&gt;hw.teles0.membase, 1, <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A>, 0x0);
	}
	<FONT COLOR="#298C52">if</FONT> (stat &amp; 2) {
		writeisac(cs-&gt;hw.teles0.membase, <A HREF="isac.h.shtml#ISAC_MASK">ISAC_MASK</A>, 0xFF);
		writeisac(cs-&gt;hw.teles0.membase, <A HREF="isac.h.shtml#ISAC_MASK">ISAC_MASK</A>, 0x0);
	}
}

<FONT COLOR="#298C52">void</FONT>
release_io_telespci(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	iounmap((<FONT COLOR="#298C52">void</FONT> *)cs-&gt;hw.teles0.membase);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
TelesPCI_card_msg(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> mt, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">switch</FONT> (mt) {
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_RESET">CARD_RESET</A>:
			<FONT COLOR="#298C52">return</FONT>(0);
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_RELEASE">CARD_RELEASE</A>:
			release_io_telespci(cs);
			<FONT COLOR="#298C52">return</FONT>(0);
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_SETIRQ">CARD_SETIRQ</A>:
			<FONT COLOR="#298C52">return</FONT>(request_irq(cs-&gt;irq, &amp;telespci_interrupt,
					<A HREF="hisax.h.shtml#I4L_IRQ_FLAG">I4L_IRQ_FLAG</A>, <FONT COLOR="#FF0000">"HiSax"</FONT>, cs));
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_INIT">CARD_INIT</A>:
			inithscxisac(cs, 3);
			<FONT COLOR="#298C52">return</FONT>(0);
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_TEST">CARD_TEST</A>:
			<FONT COLOR="#298C52">return</FONT>(0);
	}
	<FONT COLOR="#298C52">return</FONT>(0);
}

<FONT COLOR="#298C52">static</FONT> 	<FONT COLOR="#298C52">struct</FONT> pci_dev *dev_tel __initdata = NULL;

<A HREF="asuscom.c.shtml#__initfunc">__initfunc</A>(<FONT COLOR="#298C52">int</FONT>
setup_telespci(<FONT COLOR="#298C52">struct</FONT> IsdnCard *card))
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = card-&gt;cs;
	<FONT COLOR="#298C52">char</FONT> tmp[64];

	strcpy(tmp, telespci_revision);
	printk(KERN_INFO <FONT COLOR="#FF0000">"HiSax: Teles/PCI driver Rev. %s\n"</FONT>, HiSax_getrev(tmp));
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;typ != <A HREF="hisax.h.shtml#ISDN_CTYPE_TELESPCI">ISDN_CTYPE_TELESPCI</A>)
		<FONT COLOR="#298C52">return</FONT> (0);

<FONT COLOR=#A521F7>#if</FONT> CONFIG_PCI
	<FONT COLOR="#298C52">if</FONT> (!pci_present()) {
		printk(KERN_ERR <FONT COLOR="#FF0000">"TelesPCI: no PCI bus present\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT>(0);
	}
	<FONT COLOR="#298C52">if</FONT> ((dev_tel = pci_find_device (0x11DE, 0x6120, dev_tel))) {
		cs-&gt;irq = dev_tel-&gt;irq;
		<FONT COLOR="#298C52">if</FONT> (!cs-&gt;irq) {
			printk(KERN_WARNING <FONT COLOR="#FF0000">"Teles: No IRQ for PCI card found\n"</FONT>);
			<FONT COLOR="#298C52">return</FONT>(0);
		}
		cs-&gt;hw.teles0.membase = (u_int) ioremap(dev_tel-&gt;base_address[0],
			PAGE_SIZE);
		printk(KERN_INFO <FONT COLOR="#FF0000">"Found: Zoran, base-address: 0x%lx, irq: 0x%x\n"</FONT>,
			dev_tel-&gt;base_address[0], dev_tel-&gt;irq);
	} <FONT COLOR="#298C52">else</FONT> {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"TelesPCI: No PCI card found\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT>(0);
	}
<FONT COLOR=#A521F7>#else</FONT>
	printk(KERN_WARNING <FONT COLOR="#FF0000">"HiSax: Teles/PCI and NO_PCI_BIOS\n"</FONT>);
	printk(KERN_WARNING <FONT COLOR="#FF0000">"HiSax: Teles/PCI unable to config\n"</FONT>);
	<FONT COLOR="#298C52">return</FONT> (0);
<FONT COLOR=#A521F7>#endif</FONT> <FONT COLOR=#0000FF>/* CONFIG_PCI */</FONT>

	<FONT COLOR=#0000FF>/* Initialize Zoran PCI controller */</FONT>
	writel(0x00000000, cs-&gt;hw.teles0.membase + 0x28);
	writel(0x01000000, cs-&gt;hw.teles0.membase + 0x28);
	writel(0x01000000, cs-&gt;hw.teles0.membase + 0x28);
	writel(0x7BFFFFFF, cs-&gt;hw.teles0.membase + 0x2C);
	writel(0x70000000, cs-&gt;hw.teles0.membase + 0x3C);
	writel(0x61000000, cs-&gt;hw.teles0.membase + 0x40);
	<FONT COLOR=#0000FF>/* writel(0x00800000, cs-&gt;hw.teles0.membase + 0x200); */</FONT>

	printk(KERN_INFO
	       <FONT COLOR="#FF0000">"HiSax: %s config irq:%d mem:%x\n"</FONT>,
	       CardType[cs-&gt;typ], cs-&gt;irq,
	       cs-&gt;hw.teles0.membase);

	cs-&gt;readisac = &amp;<A HREF="asuscom.c.shtml#ReadISAC">ReadISAC</A>;
	cs-&gt;writeisac = &amp;<A HREF="asuscom.c.shtml#WriteISAC">WriteISAC</A>;
	cs-&gt;readisacfifo = &amp;<A HREF="asuscom.c.shtml#ReadISACfifo">ReadISACfifo</A>;
	cs-&gt;writeisacfifo = &amp;<A HREF="asuscom.c.shtml#WriteISACfifo">WriteISACfifo</A>;
	cs-&gt;BC_Read_Reg = &amp;<A HREF="asuscom.c.shtml#ReadHSCX">ReadHSCX</A>;
	cs-&gt;BC_Write_Reg = &amp;<A HREF="asuscom.c.shtml#WriteHSCX">WriteHSCX</A>;
	cs-&gt;BC_Send_Data = &amp;<A HREF="hscx_irq.c.shtml#hscx_fill_fifo">hscx_fill_fifo</A>;
	cs-&gt;cardmsg = &amp;TelesPCI_card_msg;
	<A HREF="isac.c.shtml#ISACVersion">ISACVersion</A>(cs, <FONT COLOR="#FF0000">"TelesPCI:"</FONT>);
	<FONT COLOR="#298C52">if</FONT> (HscxVersion(cs, <FONT COLOR="#FF0000">"TelesPCI:"</FONT>)) {
		printk(KERN_WARNING
		 <FONT COLOR="#FF0000">"TelesPCI: wrong HSCX versions check IO/MEM addresses\n"</FONT>);
		release_io_telespci(cs);
		<FONT COLOR="#298C52">return</FONT> (0);
	}
	<FONT COLOR="#298C52">return</FONT> (1);
}
</BODY>

</HTML>
