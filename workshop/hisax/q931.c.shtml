<HTML>

<!-- Generated by c2html-1.0, Copyright 1998 by Dave Whittington -->
<HEAD>
<TITLE>q931.c</TITLE>
<!--#include virtual="/ssi/js.shtml" -->
<!--#include virtual="/ssi/buttondefs.shtml" -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<TABLE WIDTH="100%">
<TR>
<TD ALIGN=LEFT WIDTH="90"><!--#include virtual="/ssi/b_home.shtml" --></TD>
<TD ALIGN=RIGHT WIDTH="90"><!--#include virtual="/ssi/b_index.shtml" --></TD>
</TR>
</TABLE>
<CENTER><H1>q931.c</H1></CENTER>

<HR>
<PRE>
<FONT COLOR=#0000FF>/* $Id$

 * q931.c       code to decode ITU Q.931 call control messages
 *
 * Author       Jan den Ouden
 *
 * Changelog
 *
 * Pauline Middelink    general improvements
 *
 * Beat Doebeli         cause texts, display information element
 *
 * Karsten Keil         cause texts, display information element for 1TR6
 *
 *
 * $Log$
 * Revision 1.6  1997/07/27 21:09:44  keil
 * move functions to isdnl3.c
 *
 * Revision 1.5  1997/04/06 22:56:43  keil
 * Some cosmetic changes
 *
 * Revision 1.4  1997/02/09 00:29:11  keil
 * new interface handling, one interface per card
 *
 * Revision 1.3  1997/01/21 22:24:59  keil
 * cleanups
 *
 * Revision 1.2  1996/10/27 22:12:45  keil
 * reporting unknown level 3 protocol ids
 *
 * Revision 1.1  1996/10/13 20:04:56  keil
 * Initial revision
 *
 *
 */</FONT>


<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#__NO_VERSION__">__NO_VERSION__</A>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hisax.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"l3_1tr6.h"</FONT>

<FONT COLOR="#298C52">void</FONT>
<A HREF="#iecpy">iecpy</A>(u_char * dest, u_char * iestart, <FONT COLOR="#298C52">int</FONT> ieoffset)
{
	u_char *p;
	<FONT COLOR="#298C52">int</FONT> l;

	p = iestart + ieoffset + 2;
	l = iestart[1] - ieoffset;
	<FONT COLOR="#298C52">while</FONT> (l--)
		*dest++ = *p++;
	*dest++ = <FONT COLOR="#FF0000">'\0'</FONT>;
}

<FONT COLOR=#0000FF>/*
 * According to Table 4-2/Q.931
 */</FONT>
<FONT COLOR="#298C52">static</FONT>
<FONT COLOR="#298C52">struct</FONT> MessageType {
	u_char nr;
	<FONT COLOR="#298C52">char</FONT> *descr;
} mtlist[] = {

	{
		0x1, <FONT COLOR="#FF0000">"ALERTING"</FONT>
	},
	{
		0x2, <FONT COLOR="#FF0000">"CALL PROCEEDING"</FONT>
	},
	{
		0x7, <FONT COLOR="#FF0000">"CONNECT"</FONT>
	},
	{
		0xf, <FONT COLOR="#FF0000">"CONNECT ACKNOWLEDGE"</FONT>
	},
	{
		0x3, <FONT COLOR="#FF0000">"PROGRESS"</FONT>
	},
	{
		0x5, <FONT COLOR="#FF0000">"SETUP"</FONT>
	},
	{
		0xd, <FONT COLOR="#FF0000">"SETUP ACKNOWLEDGE"</FONT>
	},
	{
		0x26, <FONT COLOR="#FF0000">"RESUME"</FONT>
	},
	{
		0x2e, <FONT COLOR="#FF0000">"RESUME ACKNOWLEDGE"</FONT>
	},
	{
		0x22, <FONT COLOR="#FF0000">"RESUME REJECT"</FONT>
	},
	{
		0x25, <FONT COLOR="#FF0000">"SUSPEND"</FONT>
	},
	{
		0x2d, <FONT COLOR="#FF0000">"SUSPEND ACKNOWLEDGE"</FONT>
	},
	{
		0x21, <FONT COLOR="#FF0000">"SUSPEND REJECT"</FONT>
	},
	{
		0x20, <FONT COLOR="#FF0000">"USER INFORMATION"</FONT>
	},
	{
		0x45, <FONT COLOR="#FF0000">"DISCONNECT"</FONT>
	},
	{
		0x4d, <FONT COLOR="#FF0000">"RELEASE"</FONT>
	},
	{
		0x5a, <FONT COLOR="#FF0000">"RELEASE COMPLETE"</FONT>
	},
	{
		0x46, <FONT COLOR="#FF0000">"RESTART"</FONT>
	},
	{
		0x4e, <FONT COLOR="#FF0000">"RESTART ACKNOWLEDGE"</FONT>
	},
	{
		0x60, <FONT COLOR="#FF0000">"SEGMENT"</FONT>
	},
	{
		0x79, <FONT COLOR="#FF0000">"CONGESTION CONTROL"</FONT>
	},
	{
		0x7b, <FONT COLOR="#FF0000">"INFORMATION"</FONT>
	},
	{
		0x62, <FONT COLOR="#FF0000">"FACILITY"</FONT>
	},
	{
		0x6e, <FONT COLOR="#FF0000">"NOTIFY"</FONT>
	},
	{
		0x7d, <FONT COLOR="#FF0000">"STATUS"</FONT>
	},
	{
		0x75, <FONT COLOR="#FF0000">"STATUS ENQUIRY"</FONT>
	}
};

<FONT COLOR=#A521F7>#define</FONT> <A NAME="MTSIZE">MTSIZE</A> <FONT COLOR="#298C52">sizeof</FONT>(mtlist)/<FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> MessageType)

<FONT COLOR="#298C52">static</FONT>
<FONT COLOR="#298C52">struct</FONT> MessageType mt_n0[] =
{
	{MT_N0_REG_IND, <FONT COLOR="#FF0000">"REGister INDication"</FONT>},
	{MT_N0_CANC_IND, <FONT COLOR="#FF0000">"CANCel INDication"</FONT>},
	{MT_N0_FAC_STA, <FONT COLOR="#FF0000">"FACility STAtus"</FONT>},
	{MT_N0_STA_ACK, <FONT COLOR="#FF0000">"STAtus ACKnowledge"</FONT>},
	{MT_N0_STA_REJ, <FONT COLOR="#FF0000">"STAtus REJect"</FONT>},
	{MT_N0_FAC_INF, <FONT COLOR="#FF0000">"FACility INFormation"</FONT>},
	{MT_N0_INF_ACK, <FONT COLOR="#FF0000">"INFormation ACKnowledge"</FONT>},
	{MT_N0_INF_REJ, <FONT COLOR="#FF0000">"INFormation REJect"</FONT>},
	{MT_N0_CLOSE, <FONT COLOR="#FF0000">"CLOSE"</FONT>},
	{MT_N0_CLO_ACK, <FONT COLOR="#FF0000">"CLOse ACKnowledge"</FONT>}
};

<FONT COLOR="#298C52">int</FONT> mt_n0_len = (<FONT COLOR="#298C52">sizeof</FONT>(mt_n0) / <FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> MessageType));

<FONT COLOR="#298C52">static</FONT>
<FONT COLOR="#298C52">struct</FONT> MessageType mt_n1[] =
{
	{MT_N1_ESC, <FONT COLOR="#FF0000">"ESCape"</FONT>},
	{MT_N1_ALERT, <FONT COLOR="#FF0000">"ALERT"</FONT>},
	{MT_N1_CALL_SENT, <FONT COLOR="#FF0000">"CALL SENT"</FONT>},
	{MT_N1_CONN, <FONT COLOR="#FF0000">"CONNect"</FONT>},
	{MT_N1_CONN_ACK, <FONT COLOR="#FF0000">"CONNect ACKnowledge"</FONT>},
	{MT_N1_SETUP, <FONT COLOR="#FF0000">"SETUP"</FONT>},
	{MT_N1_SETUP_ACK, <FONT COLOR="#FF0000">"SETUP ACKnowledge"</FONT>},
	{MT_N1_RES, <FONT COLOR="#FF0000">"RESume"</FONT>},
	{MT_N1_RES_ACK, <FONT COLOR="#FF0000">"RESume ACKnowledge"</FONT>},
	{MT_N1_RES_REJ, <FONT COLOR="#FF0000">"RESume REJect"</FONT>},
	{MT_N1_SUSP, <FONT COLOR="#FF0000">"SUSPend"</FONT>},
	{MT_N1_SUSP_ACK, <FONT COLOR="#FF0000">"SUSPend ACKnowledge"</FONT>},
	{MT_N1_SUSP_REJ, <FONT COLOR="#FF0000">"SUSPend REJect"</FONT>},
	{MT_N1_USER_INFO, <FONT COLOR="#FF0000">"USER INFO"</FONT>},
	{MT_N1_DET, <FONT COLOR="#FF0000">"DETach"</FONT>},
	{MT_N1_DISC, <FONT COLOR="#FF0000">"DISConnect"</FONT>},
	{MT_N1_REL, <FONT COLOR="#FF0000">"RELease"</FONT>},
	{MT_N1_REL_ACK, <FONT COLOR="#FF0000">"RELease ACKnowledge"</FONT>},
	{MT_N1_CANC_ACK, <FONT COLOR="#FF0000">"CANCel ACKnowledge"</FONT>},
	{MT_N1_CANC_REJ, <FONT COLOR="#FF0000">"CANCel REJect"</FONT>},
	{MT_N1_CON_CON, <FONT COLOR="#FF0000">"CONgestion CONtrol"</FONT>},
	{MT_N1_FAC, <FONT COLOR="#FF0000">"FACility"</FONT>},
	{MT_N1_FAC_ACK, <FONT COLOR="#FF0000">"FACility ACKnowledge"</FONT>},
	{MT_N1_FAC_CAN, <FONT COLOR="#FF0000">"FACility CANcel"</FONT>},
	{MT_N1_FAC_REG, <FONT COLOR="#FF0000">"FACility REGister"</FONT>},
	{MT_N1_FAC_REJ, <FONT COLOR="#FF0000">"FACility REJect"</FONT>},
	{MT_N1_INFO, <FONT COLOR="#FF0000">"INFOrmation"</FONT>},
	{MT_N1_REG_ACK, <FONT COLOR="#FF0000">"REGister ACKnowledge"</FONT>},
	{MT_N1_REG_REJ, <FONT COLOR="#FF0000">"REGister REJect"</FONT>},
	{MT_N1_STAT, <FONT COLOR="#FF0000">"STATus"</FONT>}
};

<FONT COLOR="#298C52">int</FONT> mt_n1_len = (<FONT COLOR="#298C52">sizeof</FONT>(mt_n1) / <FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> MessageType));

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">struct</FONT> MessageType fac_1tr6[] =
{
	{FAC_Sperre, <FONT COLOR="#FF0000">"Sperre"</FONT>},
	{FAC_Forward1, <FONT COLOR="#FF0000">"Forward 1"</FONT>},
	{FAC_Forward2, <FONT COLOR="#FF0000">"Forward 2"</FONT>},
	{FAC_Konferenz, <FONT COLOR="#FF0000">"Konferenz"</FONT>},
	{FAC_GrabBchan, <FONT COLOR="#FF0000">"Grab Bchannel"</FONT>},
	{FAC_Reactivate, <FONT COLOR="#FF0000">"Reactivate"</FONT>},
	{FAC_Konferenz3, <FONT COLOR="#FF0000">"Dreier Konferenz"</FONT>},
	{FAC_Dienstwechsel1, <FONT COLOR="#FF0000">"Einseitiger Dienstwechsel"</FONT>},
	{FAC_Dienstwechsel2, <FONT COLOR="#FF0000">"Zweiseitiger Dienstwechsel"</FONT>},
	{FAC_NummernIdent, <FONT COLOR="#FF0000">"Rufnummer-Identifizierung"</FONT>},
	{FAC_GBG, <FONT COLOR="#FF0000">"GBG"</FONT>},
	{FAC_DisplayUebergeben, <FONT COLOR="#FF0000">"Display Uebergeben"</FONT>},
	{FAC_DisplayUmgeleitet, <FONT COLOR="#FF0000">"Display Umgeleitet"</FONT>},
	{FAC_Unterdruecke, <FONT COLOR="#FF0000">"Unterdruecke Rufnummer"</FONT>},
	{FAC_Deactivate, <FONT COLOR="#FF0000">"Deactivate"</FONT>},
	{FAC_Activate, <FONT COLOR="#FF0000">"Activate"</FONT>},
	{FAC_SPV, <FONT COLOR="#FF0000">"SPV"</FONT>},
	{FAC_Rueckwechsel, <FONT COLOR="#FF0000">"Rueckwechsel"</FONT>},
	{FAC_Umleitung, <FONT COLOR="#FF0000">"Umleitung"</FONT>}
};
<FONT COLOR="#298C52">int</FONT> fac_1tr6_len = (<FONT COLOR="#298C52">sizeof</FONT>(fac_1tr6) / <FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> MessageType));



<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
<A NAME="prbits">prbits</A>(<FONT COLOR="#298C52">char</FONT> *dest, u_char b, <FONT COLOR="#298C52">int</FONT> start, <FONT COLOR="#298C52">int</FONT> len)
{
	<FONT COLOR="#298C52">char</FONT> *dp = dest;

	b = b &lt;&lt; (8 - start);
	<FONT COLOR="#298C52">while</FONT> (len--) {
		<FONT COLOR="#298C52">if</FONT> (b &amp; 0x80)
			*dp++ = <FONT COLOR="#FF0000">'1'</FONT>;
		<FONT COLOR="#298C52">else</FONT>
			*dp++ = <FONT COLOR="#FF0000">'0'</FONT>;
		b = b &lt;&lt; 1;
	}
	<FONT COLOR="#298C52">return</FONT> (dp - dest);
}

<FONT COLOR="#298C52">static</FONT>
u_char *
<A NAME="skipext">skipext</A>(u_char * p)
{
	<FONT COLOR="#298C52">while</FONT> (!(*p++ &amp; 0x80));
	<FONT COLOR="#298C52">return</FONT> (p);
}

<FONT COLOR=#0000FF>/*
 * Cause Values According to Q.850
 * edescr: English description
 * ddescr: German description used by Swissnet II (Swiss Telecom
 *         not yet written...
 */</FONT>

<FONT COLOR="#298C52">static</FONT>
<FONT COLOR="#298C52">struct</FONT> CauseValue {
	u_char nr;
	<FONT COLOR="#298C52">char</FONT> *edescr;
	<FONT COLOR="#298C52">char</FONT> *ddescr;
} cvlist[] = {

	{
		0x01, <FONT COLOR="#FF0000">"Unallocated (unassigned) number"</FONT>, <FONT COLOR="#FF0000">"Nummer nicht zugeteilt"</FONT>
	},
	{
		0x02, <FONT COLOR="#FF0000">"No route to specified transit network"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x03, <FONT COLOR="#FF0000">"No route to destination"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x04, <FONT COLOR="#FF0000">"Send special information tone"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x05, <FONT COLOR="#FF0000">"Misdialled trunk prefix"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x06, <FONT COLOR="#FF0000">"Channel unacceptable"</FONT>, <FONT COLOR="#FF0000">"Kanal nicht akzeptierbar"</FONT>
	},
	{
		0x07, <FONT COLOR="#FF0000">"Channel awarded and being delivered in an established channel"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x08, <FONT COLOR="#FF0000">"Preemption"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x09, <FONT COLOR="#FF0000">"Preemption - circuit reserved for reuse"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x10, <FONT COLOR="#FF0000">"Normal call clearing"</FONT>, <FONT COLOR="#FF0000">"Normale Ausloesung"</FONT>
	},
	{
		0x11, <FONT COLOR="#FF0000">"User busy"</FONT>, <FONT COLOR="#FF0000">"TNB besetzt"</FONT>
	},
	{
		0x12, <FONT COLOR="#FF0000">"No user responding"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x13, <FONT COLOR="#FF0000">"No answer from user (user alerted)"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x14, <FONT COLOR="#FF0000">"Subscriber absent"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x15, <FONT COLOR="#FF0000">"Call rejected"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x16, <FONT COLOR="#FF0000">"Number changed"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x1a, <FONT COLOR="#FF0000">"non-selected user clearing"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x1b, <FONT COLOR="#FF0000">"Destination out of order"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x1c, <FONT COLOR="#FF0000">"Invalid number format (address incomplete)"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x1d, <FONT COLOR="#FF0000">"Facility rejected"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x1e, <FONT COLOR="#FF0000">"Response to Status enquiry"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x1f, <FONT COLOR="#FF0000">"Normal, unspecified"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x22, <FONT COLOR="#FF0000">"No circuit/channel available"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x26, <FONT COLOR="#FF0000">"Network out of order"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x27, <FONT COLOR="#FF0000">"Permanent frame mode connection out-of-service"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x28, <FONT COLOR="#FF0000">"Permanent frame mode connection operational"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x29, <FONT COLOR="#FF0000">"Temporary failure"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x2a, <FONT COLOR="#FF0000">"Switching equipment congestion"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x2b, <FONT COLOR="#FF0000">"Access information discarded"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x2c, <FONT COLOR="#FF0000">"Requested circuit/channel not available"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x2e, <FONT COLOR="#FF0000">"Precedence call blocked"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x2f, <FONT COLOR="#FF0000">"Resource unavailable, unspecified"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x31, <FONT COLOR="#FF0000">"Quality of service unavailable"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x32, <FONT COLOR="#FF0000">"Requested facility not subscribed"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x35, <FONT COLOR="#FF0000">"Outgoing calls barred within CUG"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x37, <FONT COLOR="#FF0000">"Incoming calls barred within CUG"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x39, <FONT COLOR="#FF0000">"Bearer capability not authorized"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x3a, <FONT COLOR="#FF0000">"Bearer capability not presently available"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x3e, <FONT COLOR="#FF0000">"Inconsistency in designated outgoing access information and subscriber class "</FONT>, <FONT COLOR="#FF0000">" "</FONT>
	},
	{
		0x3f, <FONT COLOR="#FF0000">"Service or option not available, unspecified"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x41, <FONT COLOR="#FF0000">"Bearer capability not implemented"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x42, <FONT COLOR="#FF0000">"Channel type not implemented"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x43, <FONT COLOR="#FF0000">"Requested facility not implemented"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x44, <FONT COLOR="#FF0000">"Only restricted digital information bearer capability is available"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x4f, <FONT COLOR="#FF0000">"Service or option not implemented"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x51, <FONT COLOR="#FF0000">"Invalid call reference value"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x52, <FONT COLOR="#FF0000">"Identified channel does not exist"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x53, <FONT COLOR="#FF0000">"A suspended call exists, but this call identity does not"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x54, <FONT COLOR="#FF0000">"Call identity in use"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x55, <FONT COLOR="#FF0000">"No call suspended"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x56, <FONT COLOR="#FF0000">"Call having the requested call identity has been cleared"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x57, <FONT COLOR="#FF0000">"User not member of CUG"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x58, <FONT COLOR="#FF0000">"Incompatible destination"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x5a, <FONT COLOR="#FF0000">"Non-existent CUG"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x5b, <FONT COLOR="#FF0000">"Invalid transit network selection"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x5f, <FONT COLOR="#FF0000">"Invalid message, unspecified"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x60, <FONT COLOR="#FF0000">"Mandatory information element is missing"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x61, <FONT COLOR="#FF0000">"Message type non-existent or not implemented"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x62, <FONT COLOR="#FF0000">"Message not compatible with call state or message type non-existent or not implemented "</FONT>, <FONT COLOR="#FF0000">" "</FONT>
	},
	{
		0x63, <FONT COLOR="#FF0000">"Information element/parameter non-existent or not implemented"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x64, <FONT COLOR="#FF0000">"Invalid information element contents"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x65, <FONT COLOR="#FF0000">"Message not compatible with call state"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x66, <FONT COLOR="#FF0000">"Recovery on timer expiry"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x67, <FONT COLOR="#FF0000">"Parameter non-existent or not implemented - passed on"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x6e, <FONT COLOR="#FF0000">"Message with unrecognized parameter discarded"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x6f, <FONT COLOR="#FF0000">"Protocol error, unspecified"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
	{
		0x7f, <FONT COLOR="#FF0000">"Interworking, unspecified"</FONT>, <FONT COLOR="#FF0000">""</FONT>
	},
};

<FONT COLOR=#A521F7>#define</FONT> <A NAME="CVSIZE">CVSIZE</A> <FONT COLOR="#298C52">sizeof</FONT>(cvlist)/<FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> CauseValue)

<FONT COLOR="#298C52">static</FONT>
<FONT COLOR="#298C52">int</FONT>
<A NAME="prcause">prcause</A>(<FONT COLOR="#298C52">char</FONT> *dest, u_char * p)
{
	u_char *end;
	<FONT COLOR="#298C52">char</FONT> *dp = dest;
	<FONT COLOR="#298C52">int</FONT> i, cause;

	end = p + p[1] + 1;
	p += 2;
	dp += sprintf(dp, <FONT COLOR="#FF0000">"    coding "</FONT>);
	dp += <A HREF="#prbits">prbits</A>(dp, *p, 7, 2);
	dp += sprintf(dp, <FONT COLOR="#FF0000">" location "</FONT>);
	dp += <A HREF="#prbits">prbits</A>(dp, *p, 4, 4);
	*dp++ = <FONT COLOR="#FF0000">'\n'</FONT>;
	p = <A HREF="#skipext">skipext</A>(p);

	cause = 0x7f &amp; *p++;

	<FONT COLOR=#0000FF>/* locate cause value */</FONT>
	<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; <A HREF="#CVSIZE">CVSIZE</A>; i++)
		<FONT COLOR="#298C52">if</FONT> (cvlist[i].nr == cause)
			<FONT COLOR="#298C52">break</FONT>;

	<FONT COLOR=#0000FF>/* display cause value if it exists */</FONT>
	<FONT COLOR="#298C52">if</FONT> (i == <A HREF="#CVSIZE">CVSIZE</A>)
		dp += sprintf(dp, <FONT COLOR="#FF0000">"Unknown cause type %x!\n"</FONT>, cause);
	<FONT COLOR="#298C52">else</FONT>
		dp += sprintf(dp, <FONT COLOR="#FF0000">"  cause value %x : %s \n"</FONT>, cause, cvlist[i].edescr);

	<FONT COLOR="#298C52">while</FONT> (!0) {
		<FONT COLOR="#298C52">if</FONT> (p &gt; end)
			<FONT COLOR="#298C52">break</FONT>;
		dp += sprintf(dp, <FONT COLOR="#FF0000">"    diag attribute %d "</FONT>, *p++ &amp; 0x7f);
		dp += sprintf(dp, <FONT COLOR="#FF0000">" rej %d "</FONT>, *p &amp; 0x7f);
		<FONT COLOR="#298C52">if</FONT> (*p &amp; 0x80) {
			*dp++ = <FONT COLOR="#FF0000">'\n'</FONT>;
			<FONT COLOR="#298C52">break</FONT>;
		} <FONT COLOR="#298C52">else</FONT>
			dp += sprintf(dp, <FONT COLOR="#FF0000">" av %d\n"</FONT>, (*++p) &amp; 0x7f);
	}
	<FONT COLOR="#298C52">return</FONT> (dp - dest);

}

<FONT COLOR="#298C52">static</FONT>
<FONT COLOR="#298C52">struct</FONT> MessageType cause_1tr6[] =
{
	{CAUSE_InvCRef, <FONT COLOR="#FF0000">"Invalid Call Reference"</FONT>},
	{CAUSE_BearerNotImpl, <FONT COLOR="#FF0000">"Bearer Service Not Implemented"</FONT>},
	{CAUSE_CIDunknown, <FONT COLOR="#FF0000">"Caller Identity unknown"</FONT>},
	{CAUSE_CIDinUse, <FONT COLOR="#FF0000">"Caller Identity in Use"</FONT>},
	{CAUSE_NoChans, <FONT COLOR="#FF0000">"No Channels available"</FONT>},
	{CAUSE_FacNotImpl, <FONT COLOR="#FF0000">"Facility Not Implemented"</FONT>},
	{CAUSE_FacNotSubscr, <FONT COLOR="#FF0000">"Facility Not Subscribed"</FONT>},
	{CAUSE_OutgoingBarred, <FONT COLOR="#FF0000">"Outgoing calls barred"</FONT>},
	{CAUSE_UserAccessBusy, <FONT COLOR="#FF0000">"User Access Busy"</FONT>},
	{CAUSE_NegativeGBG, <FONT COLOR="#FF0000">"Negative GBG"</FONT>},
	{CAUSE_UnknownGBG, <FONT COLOR="#FF0000">"Unknown  GBG"</FONT>},
	{CAUSE_NoSPVknown, <FONT COLOR="#FF0000">"No SPV known"</FONT>},
	{CAUSE_DestNotObtain, <FONT COLOR="#FF0000">"Destination not obtainable"</FONT>},
	{CAUSE_NumberChanged, <FONT COLOR="#FF0000">"Number changed"</FONT>},
	{CAUSE_OutOfOrder, <FONT COLOR="#FF0000">"Out Of Order"</FONT>},
	{CAUSE_NoUserResponse, <FONT COLOR="#FF0000">"No User Response"</FONT>},
	{CAUSE_UserBusy, <FONT COLOR="#FF0000">"User Busy"</FONT>},
	{CAUSE_IncomingBarred, <FONT COLOR="#FF0000">"Incoming Barred"</FONT>},
	{CAUSE_CallRejected, <FONT COLOR="#FF0000">"Call Rejected"</FONT>},
	{CAUSE_NetworkCongestion, <FONT COLOR="#FF0000">"Network Congestion"</FONT>},
	{CAUSE_RemoteUser, <FONT COLOR="#FF0000">"Remote User initiated"</FONT>},
	{CAUSE_LocalProcErr, <FONT COLOR="#FF0000">"Local Procedure Error"</FONT>},
	{CAUSE_RemoteProcErr, <FONT COLOR="#FF0000">"Remote Procedure Error"</FONT>},
	{CAUSE_RemoteUserSuspend, <FONT COLOR="#FF0000">"Remote User Suspend"</FONT>},
	{CAUSE_RemoteUserResumed, <FONT COLOR="#FF0000">"Remote User Resumed"</FONT>},
	{CAUSE_UserInfoDiscarded, <FONT COLOR="#FF0000">"User Info Discarded"</FONT>}
};

<FONT COLOR="#298C52">int</FONT> cause_1tr6_len = (<FONT COLOR="#298C52">sizeof</FONT>(cause_1tr6) / <FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> MessageType));

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
<A NAME="prcause_1tr6">prcause_1tr6</A>(<FONT COLOR="#298C52">char</FONT> *dest, u_char * p)
{
	<FONT COLOR="#298C52">char</FONT> *dp = dest;
	<FONT COLOR="#298C52">int</FONT> i, cause;

	p++;
	<FONT COLOR="#298C52">if</FONT> (0 == *p) {
		dp += sprintf(dp, <FONT COLOR="#FF0000">"   OK (cause length=0)\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT> (dp - dest);
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (*p &gt; 1) {
		dp += sprintf(dp, <FONT COLOR="#FF0000">"    coding "</FONT>);
		dp += <A HREF="#prbits">prbits</A>(dp, p[2], 7, 2);
		dp += sprintf(dp, <FONT COLOR="#FF0000">" location "</FONT>);
		dp += <A HREF="#prbits">prbits</A>(dp, p[2], 4, 4);
		*dp++ = <FONT COLOR="#FF0000">'\n'</FONT>;
	}
	p++;
	cause = 0x7f &amp; *p;

	<FONT COLOR=#0000FF>/* locate cause value */</FONT>
	<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; cause_1tr6_len; i++)
		<FONT COLOR="#298C52">if</FONT> (cause_1tr6[i].nr == cause)
			<FONT COLOR="#298C52">break</FONT>;

	<FONT COLOR=#0000FF>/* display cause value if it exists */</FONT>
	<FONT COLOR="#298C52">if</FONT> (i == cause_1tr6_len)
		dp += sprintf(dp, <FONT COLOR="#FF0000">"Unknown cause type %x!\n"</FONT>, cause);
	<FONT COLOR="#298C52">else</FONT>
		dp += sprintf(dp, <FONT COLOR="#FF0000">"  cause value %x : %s \n"</FONT>, cause, cause_1tr6[i].descr);

	<FONT COLOR="#298C52">return</FONT> (dp - dest);

}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
<A NAME="prchident">prchident</A>(<FONT COLOR="#298C52">char</FONT> *dest, u_char * p)
{
	<FONT COLOR="#298C52">char</FONT> *dp = dest;

	p += 2;
	dp += sprintf(dp, <FONT COLOR="#FF0000">"    octet 3 "</FONT>);
	dp += <A HREF="#prbits">prbits</A>(dp, *p, 8, 8);
	*dp++ = <FONT COLOR="#FF0000">'\n'</FONT>;
	<FONT COLOR="#298C52">return</FONT> (dp - dest);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
<A NAME="prcalled">prcalled</A>(<FONT COLOR="#298C52">char</FONT> *dest, u_char * p)
{
	<FONT COLOR="#298C52">int</FONT> l;
	<FONT COLOR="#298C52">char</FONT> *dp = dest;

	p++;
	l = *p++ - 1;
	dp += sprintf(dp, <FONT COLOR="#FF0000">"    octet 3 "</FONT>);
	dp += <A HREF="#prbits">prbits</A>(dp, *p++, 8, 8);
	*dp++ = <FONT COLOR="#FF0000">'\n'</FONT>;
	dp += sprintf(dp, <FONT COLOR="#FF0000">"    number digits "</FONT>);
	<FONT COLOR="#298C52">while</FONT> (l--)
		*dp++ = *p++;
	*dp++ = <FONT COLOR="#FF0000">'\n'</FONT>;
	<FONT COLOR="#298C52">return</FONT> (dp - dest);
}
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
<A NAME="prcalling">prcalling</A>(<FONT COLOR="#298C52">char</FONT> *dest, u_char * p)
{
	<FONT COLOR="#298C52">int</FONT> l;
	<FONT COLOR="#298C52">char</FONT> *dp = dest;

	p++;
	l = *p++ - 1;
	dp += sprintf(dp, <FONT COLOR="#FF0000">"    octet 3 "</FONT>);
	dp += <A HREF="#prbits">prbits</A>(dp, *p, 8, 8);
	*dp++ = <FONT COLOR="#FF0000">'\n'</FONT>;
	<FONT COLOR="#298C52">if</FONT> (!(*p &amp; 0x80)) {
		dp += sprintf(dp, <FONT COLOR="#FF0000">"    octet 3a "</FONT>);
		dp += <A HREF="#prbits">prbits</A>(dp, *++p, 8, 8);
		*dp++ = <FONT COLOR="#FF0000">'\n'</FONT>;
		l--;
	};
	p++;

	dp += sprintf(dp, <FONT COLOR="#FF0000">"    number digits "</FONT>);
	<FONT COLOR="#298C52">while</FONT> (l--)
		*dp++ = *p++;
	*dp++ = <FONT COLOR="#FF0000">'\n'</FONT>;
	<FONT COLOR="#298C52">return</FONT> (dp - dest);
}

<FONT COLOR="#298C52">static</FONT>
<FONT COLOR="#298C52">int</FONT>
<A NAME="prbearer">prbearer</A>(<FONT COLOR="#298C52">char</FONT> *dest, u_char * p)
{
	<FONT COLOR="#298C52">char</FONT> *dp = dest, ch;

	p += 2;
	dp += sprintf(dp, <FONT COLOR="#FF0000">"    octet 3  "</FONT>);
	dp += <A HREF="#prbits">prbits</A>(dp, *p++, 8, 8);
	*dp++ = <FONT COLOR="#FF0000">'\n'</FONT>;
	dp += sprintf(dp, <FONT COLOR="#FF0000">"    octet 4  "</FONT>);
	dp += <A HREF="#prbits">prbits</A>(dp, *p, 8, 8);
	*dp++ = <FONT COLOR="#FF0000">'\n'</FONT>;
	<FONT COLOR="#298C52">if</FONT> ((*p++ &amp; 0x1f) == 0x18) {
		dp += sprintf(dp, <FONT COLOR="#FF0000">"    octet 4.1 "</FONT>);
		dp += <A HREF="#prbits">prbits</A>(dp, *p++, 8, 8);
		*dp++ = <FONT COLOR="#FF0000">'\n'</FONT>;
	}
	<FONT COLOR=#0000FF>/* check for user information layer 1 */</FONT>
	<FONT COLOR="#298C52">if</FONT> ((*p &amp; 0x60) == 0x20) {
		ch = <FONT COLOR="#FF0000">' '</FONT>;
		<FONT COLOR="#298C52">do</FONT> {
			dp += sprintf(dp, <FONT COLOR="#FF0000">"    octet 5%c "</FONT>, ch);
			dp += <A HREF="#prbits">prbits</A>(dp, *p, 8, 8);
			*dp++ = <FONT COLOR="#FF0000">'\n'</FONT>;
			<FONT COLOR="#298C52">if</FONT> (ch == <FONT COLOR="#FF0000">' '</FONT>)
				ch = <FONT COLOR="#FF0000">'a'</FONT>;
			<FONT COLOR="#298C52">else</FONT>
				ch++;
		}
		<FONT COLOR="#298C52">while</FONT> (!(*p++ &amp; 0x80));
	}
	<FONT COLOR=#0000FF>/* check for user information layer 2 */</FONT>
	<FONT COLOR="#298C52">if</FONT> ((*p &amp; 0x60) == 0x40) {
		dp += sprintf(dp, <FONT COLOR="#FF0000">"    octet 6  "</FONT>);
		dp += <A HREF="#prbits">prbits</A>(dp, *p++, 8, 8);
		*dp++ = <FONT COLOR="#FF0000">'\n'</FONT>;
	}
	<FONT COLOR=#0000FF>/* check for user information layer 3 */</FONT>
	<FONT COLOR="#298C52">if</FONT> ((*p &amp; 0x60) == 0x60) {
		dp += sprintf(dp, <FONT COLOR="#FF0000">"    octet 7  "</FONT>);
		dp += <A HREF="#prbits">prbits</A>(dp, *p++, 8, 8);
		*dp++ = <FONT COLOR="#FF0000">'\n'</FONT>;
	}
	<FONT COLOR="#298C52">return</FONT> (dp - dest);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
<A NAME="general">general</A>(<FONT COLOR="#298C52">char</FONT> *dest, u_char * p)
{
	<FONT COLOR="#298C52">char</FONT> *dp = dest;
	<FONT COLOR="#298C52">char</FONT> ch = <FONT COLOR="#FF0000">' '</FONT>;
	<FONT COLOR="#298C52">int</FONT> l, octet = 3;

	p++;
	l = *p++;
	<FONT COLOR=#0000FF>/* Iterate over all octets in the information element */</FONT>
	<FONT COLOR="#298C52">while</FONT> (l--) {
		dp += sprintf(dp, <FONT COLOR="#FF0000">"    octet %d%c "</FONT>, octet, ch);
		dp += <A HREF="#prbits">prbits</A>(dp, *p++, 8, 8);
		*dp++ = <FONT COLOR="#FF0000">'\n'</FONT>;

		<FONT COLOR=#0000FF>/* last octet in group? */</FONT>
		<FONT COLOR="#298C52">if</FONT> (*p &amp; 0x80) {
			octet++;
			ch = <FONT COLOR="#FF0000">' '</FONT>;
		} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (ch == <FONT COLOR="#FF0000">' '</FONT>)
			ch = <FONT COLOR="#FF0000">'a'</FONT>;
		<FONT COLOR="#298C52">else</FONT>
			ch++;
	}
	<FONT COLOR="#298C52">return</FONT> (dp - dest);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
<A NAME="prcharge">prcharge</A>(<FONT COLOR="#298C52">char</FONT> *dest, u_char * p)
{
	<FONT COLOR="#298C52">char</FONT> *dp = dest;
	<FONT COLOR="#298C52">int</FONT> l;

	p++;
	l = *p++ - 1;
	dp += sprintf(dp, <FONT COLOR="#FF0000">"    GEA "</FONT>);
	dp += <A HREF="#prbits">prbits</A>(dp, *p++, 8, 8);
	dp += sprintf(dp, <FONT COLOR="#FF0000">"  Anzahl: "</FONT>);
	<FONT COLOR=#0000FF>/* Iterate over all octets in the * information element */</FONT>
	<FONT COLOR="#298C52">while</FONT> (l--)
		*dp++ = *p++;
	*dp++ = <FONT COLOR="#FF0000">'\n'</FONT>;
	<FONT COLOR="#298C52">return</FONT> (dp - dest);
}
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
<A NAME="prtext">prtext</A>(<FONT COLOR="#298C52">char</FONT> *dest, u_char * p)
{
	<FONT COLOR="#298C52">char</FONT> *dp = dest;
	<FONT COLOR="#298C52">int</FONT> l;

	p++;
	l = *p++;
	dp += sprintf(dp, <FONT COLOR="#FF0000">"    "</FONT>);
	<FONT COLOR=#0000FF>/* Iterate over all octets in the * information element */</FONT>
	<FONT COLOR="#298C52">while</FONT> (l--)
		*dp++ = *p++;
	*dp++ = <FONT COLOR="#FF0000">'\n'</FONT>;
	<FONT COLOR="#298C52">return</FONT> (dp - dest);
}
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
<A NAME="display">display</A>(<FONT COLOR="#298C52">char</FONT> *dest, u_char * p)
{
	<FONT COLOR="#298C52">char</FONT> *dp = dest;
	<FONT COLOR="#298C52">char</FONT> ch = <FONT COLOR="#FF0000">' '</FONT>;
	<FONT COLOR="#298C52">int</FONT> l, octet = 3;

	p++;
	l = *p++;
	<FONT COLOR=#0000FF>/* Iterate over all octets in the * display-information element */</FONT>
	dp += sprintf(dp, <FONT COLOR="#FF0000">"   \""</FONT>);
	<FONT COLOR="#298C52">while</FONT> (l--) {
		dp += sprintf(dp, <FONT COLOR="#FF0000">"%c"</FONT>, *p++);

		<FONT COLOR=#0000FF>/* last octet in group? */</FONT>
		<FONT COLOR="#298C52">if</FONT> (*p &amp; 0x80) {
			octet++;
			ch = <FONT COLOR="#FF0000">' '</FONT>;
		} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (ch == <FONT COLOR="#FF0000">' '</FONT>)
			ch = <FONT COLOR="#FF0000">'a'</FONT>;

		<FONT COLOR="#298C52">else</FONT>
			ch++;
	}
	*dp++ = <FONT COLOR="#FF0000">'\"'</FONT>;
	*dp++ = <FONT COLOR="#FF0000">'\n'</FONT>;
	<FONT COLOR="#298C52">return</FONT> (dp - dest);
}

<FONT COLOR="#298C52">int</FONT>
<A NAME="prfacility">prfacility</A>(<FONT COLOR="#298C52">char</FONT> *dest, u_char * p)
{
	<FONT COLOR="#298C52">char</FONT> *dp = dest;
	<FONT COLOR="#298C52">int</FONT> l, l2;

	p++;
	l = *p++;
	dp += sprintf(dp, <FONT COLOR="#FF0000">"    octet 3 "</FONT>);
	dp += <A HREF="#prbits">prbits</A>(dp, *p++, 8, 8);
	dp += sprintf(dp, <FONT COLOR="#FF0000">"\n"</FONT>);
	l -= 1;

	<FONT COLOR="#298C52">while</FONT> (l &gt; 0) {
		dp += sprintf(dp, <FONT COLOR="#FF0000">"   octet 4 "</FONT>);
		dp += <A HREF="#prbits">prbits</A>(dp, *p++, 8, 8);
		dp += sprintf(dp, <FONT COLOR="#FF0000">"\n"</FONT>);
		dp += sprintf(dp, <FONT COLOR="#FF0000">"   octet 5 %d\n"</FONT>, l2 = *p++ &amp; 0x7f);
		l -= 2;
		dp += sprintf(dp, <FONT COLOR="#FF0000">"   contents "</FONT>);
		<FONT COLOR="#298C52">while</FONT> (l2--) {
			dp += sprintf(dp, <FONT COLOR="#FF0000">"%2x "</FONT>, *p++);
			l--;
		}
		dp += sprintf(dp, <FONT COLOR="#FF0000">"\n"</FONT>);
	}

	<FONT COLOR="#298C52">return</FONT> (dp - dest);
}

<FONT COLOR="#298C52">static</FONT>
<FONT COLOR="#298C52">struct</FONT> InformationElement {
	u_char nr;
	<FONT COLOR="#298C52">char</FONT> *descr;
	<FONT COLOR="#298C52">int</FONT> (*f) (<FONT COLOR="#298C52">char</FONT> *, u_char *);
} ielist[] = {

	{
		0x00, <FONT COLOR="#FF0000">"Segmented message"</FONT>, <A HREF="#general">general</A>
	},
	{
		0x04, <FONT COLOR="#FF0000">"Bearer capability"</FONT>, <A HREF="#prbearer">prbearer</A>
	},
	{
		0x08, <FONT COLOR="#FF0000">"Cause"</FONT>, <A HREF="#prcause">prcause</A>
	},
	{
		0x10, <FONT COLOR="#FF0000">"Call identity"</FONT>, <A HREF="#general">general</A>
	},
	{
		0x14, <FONT COLOR="#FF0000">"Call state"</FONT>, <A HREF="#general">general</A>
	},
	{
		0x18, <FONT COLOR="#FF0000">"Channel identification"</FONT>, <A HREF="#prchident">prchident</A>
	},
	{
		0x1c, <FONT COLOR="#FF0000">"Facility"</FONT>, <A HREF="#prfacility">prfacility</A>
	},
	{
		0x1e, <FONT COLOR="#FF0000">"Progress indicator"</FONT>, <A HREF="#general">general</A>
	},
	{
		0x20, <FONT COLOR="#FF0000">"Network-specific facilities"</FONT>, <A HREF="#general">general</A>
	},
	{
		0x27, <FONT COLOR="#FF0000">"Notification indicator"</FONT>, <A HREF="#general">general</A>
	},
	{
		0x28, <FONT COLOR="#FF0000">"Display"</FONT>, <A HREF="#display">display</A>
	},
	{
		0x29, <FONT COLOR="#FF0000">"Date/Time"</FONT>, <A HREF="#general">general</A>
	},
	{
		0x2c, <FONT COLOR="#FF0000">"Keypad facility"</FONT>, <A HREF="#general">general</A>
	},
	{
		0x34, <FONT COLOR="#FF0000">"Signal"</FONT>, <A HREF="#general">general</A>
	},
	{
		0x40, <FONT COLOR="#FF0000">"Information rate"</FONT>, <A HREF="#general">general</A>
	},
	{
		0x42, <FONT COLOR="#FF0000">"End-to-end delay"</FONT>, <A HREF="#general">general</A>
	},
	{
		0x43, <FONT COLOR="#FF0000">"Transit delay selection and indication"</FONT>, <A HREF="#general">general</A>
	},
	{
		0x44, <FONT COLOR="#FF0000">"Packet layer binary parameters"</FONT>, <A HREF="#general">general</A>
	},
	{
		0x45, <FONT COLOR="#FF0000">"Packet layer window size"</FONT>, <A HREF="#general">general</A>
	},
	{
		0x46, <FONT COLOR="#FF0000">"Packet size"</FONT>, <A HREF="#general">general</A>
	},
	{
		0x47, <FONT COLOR="#FF0000">"Closed user group"</FONT>, <A HREF="#general">general</A>
	},
	{
		0x4a, <FONT COLOR="#FF0000">"Reverse charge indication"</FONT>, <A HREF="#general">general</A>
	},
	{
		0x6c, <FONT COLOR="#FF0000">"Calling party number"</FONT>, <A HREF="#prcalling">prcalling</A>
	},
	{
		0x6d, <FONT COLOR="#FF0000">"Calling party subaddress"</FONT>, <A HREF="#general">general</A>
	},
	{
		0x70, <FONT COLOR="#FF0000">"Called party number"</FONT>, <A HREF="#prcalled">prcalled</A>
	},
	{
		0x71, <FONT COLOR="#FF0000">"Called party subaddress"</FONT>, <A HREF="#general">general</A>
	},
	{
		0x74, <FONT COLOR="#FF0000">"Redirecting number"</FONT>, <A HREF="#general">general</A>
	},
	{
		0x78, <FONT COLOR="#FF0000">"Transit network selection"</FONT>, <A HREF="#general">general</A>
	},
	{
		0x79, <FONT COLOR="#FF0000">"Restart indicator"</FONT>, <A HREF="#general">general</A>
	},
	{
		0x7c, <FONT COLOR="#FF0000">"Low layer compatibility"</FONT>, <A HREF="#general">general</A>
	},
	{
		0x7d, <FONT COLOR="#FF0000">"High layer compatibility"</FONT>, <A HREF="#general">general</A>
	},
	{
		0x7e, <FONT COLOR="#FF0000">"User-user"</FONT>, <A HREF="#general">general</A>
	},
	{
		0x7f, <FONT COLOR="#FF0000">"Escape for extension"</FONT>, <A HREF="#general">general</A>
	},
};


<FONT COLOR=#A521F7>#define</FONT> <A NAME="IESIZE">IESIZE</A> <FONT COLOR="#298C52">sizeof</FONT>(ielist)/<FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> InformationElement)

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">struct</FONT> InformationElement we_0[] =
{
	{WE0_cause, <FONT COLOR="#FF0000">"Cause"</FONT>, <A HREF="#prcause_1tr6">prcause_1tr6</A>},
	{WE0_connAddr, <FONT COLOR="#FF0000">"Connecting Address"</FONT>, <A HREF="#prcalled">prcalled</A>},
	{WE0_callID, <FONT COLOR="#FF0000">"Call IDentity"</FONT>, <A HREF="#general">general</A>},
	{WE0_chanID, <FONT COLOR="#FF0000">"Channel IDentity"</FONT>, <A HREF="#general">general</A>},
	{WE0_netSpecFac, <FONT COLOR="#FF0000">"Network Specific Facility"</FONT>, <A HREF="#general">general</A>},
	{WE0_display, <FONT COLOR="#FF0000">"Display"</FONT>, <A HREF="#general">general</A>},
	{WE0_keypad, <FONT COLOR="#FF0000">"Keypad"</FONT>, <A HREF="#general">general</A>},
	{WE0_origAddr, <FONT COLOR="#FF0000">"Origination Address"</FONT>, <A HREF="#prcalled">prcalled</A>},
	{WE0_destAddr, <FONT COLOR="#FF0000">"Destination Address"</FONT>, <A HREF="#prcalled">prcalled</A>},
	{WE0_userInfo, <FONT COLOR="#FF0000">"User Info"</FONT>, <A HREF="#general">general</A>}
};

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> we_0_len = (<FONT COLOR="#298C52">sizeof</FONT>(we_0) / <FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> InformationElement));

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">struct</FONT> InformationElement we_6[] =
{
	{WE6_serviceInd, <FONT COLOR="#FF0000">"Service Indicator"</FONT>, <A HREF="#general">general</A>},
	{WE6_chargingInfo, <FONT COLOR="#FF0000">"Charging Information"</FONT>, <A HREF="#prcharge">prcharge</A>},
	{WE6_date, <FONT COLOR="#FF0000">"Date"</FONT>, <A HREF="#prtext">prtext</A>},
	{WE6_facSelect, <FONT COLOR="#FF0000">"Facility Select"</FONT>, <A HREF="#general">general</A>},
	{WE6_facStatus, <FONT COLOR="#FF0000">"Facility Status"</FONT>, <A HREF="#general">general</A>},
	{WE6_statusCalled, <FONT COLOR="#FF0000">"Status Called"</FONT>, <A HREF="#general">general</A>},
	{WE6_addTransAttr, <FONT COLOR="#FF0000">"Additional Transmission Attributes"</FONT>, <A HREF="#general">general</A>}
};
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> we_6_len = (<FONT COLOR="#298C52">sizeof</FONT>(we_6) / <FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> InformationElement));

<FONT COLOR="#298C52">int</FONT>
<A NAME="QuickHex">QuickHex</A>(<FONT COLOR="#298C52">char</FONT> *txt, u_char * p, <FONT COLOR="#298C52">int</FONT> cnt)
{
	<FONT COLOR="#298C52">register</FONT> <FONT COLOR="#298C52">int</FONT> i;
	<FONT COLOR="#298C52">register</FONT> <FONT COLOR="#298C52">char</FONT> *t = txt;
	<FONT COLOR="#298C52">register</FONT> u_char w;

	<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; cnt; i++) {
		*t++ = <FONT COLOR="#FF0000">' '</FONT>;
		w = (p[i] &gt;&gt; 4) &amp; 0x0f;
		<FONT COLOR="#298C52">if</FONT> (w &lt; 10)
			*t++ = <FONT COLOR="#FF0000">'0'</FONT> + w;
		<FONT COLOR="#298C52">else</FONT>
			*t++ = <FONT COLOR="#FF0000">'A'</FONT> - 10 + w;
		w = p[i] &amp; 0x0f;
		<FONT COLOR="#298C52">if</FONT> (w &lt; 10)
			*t++ = <FONT COLOR="#FF0000">'0'</FONT> + w;
		<FONT COLOR="#298C52">else</FONT>
			*t++ = <FONT COLOR="#FF0000">'A'</FONT> - 10 + w;
	}
	*t++ = 0;
	<FONT COLOR="#298C52">return</FONT> (t - txt);
}

<FONT COLOR="#298C52">void</FONT>
<A HREF="#LogFrame">LogFrame</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *sp, u_char * buf, <FONT COLOR="#298C52">int</FONT> size)
{
	<FONT COLOR="#298C52">char</FONT> *dp;

	<FONT COLOR="#298C52">if</FONT> (size &lt; 1)
		<FONT COLOR="#298C52">return</FONT>;
	dp = sp-&gt;dlogspace;
	<FONT COLOR="#298C52">if</FONT> (size &lt; 4096 / 3 - 10) {
		dp += sprintf(dp, <FONT COLOR="#FF0000">"HEX:"</FONT>);
		dp += <A HREF="#QuickHex">QuickHex</A>(dp, buf, size);
		dp--;
		*dp++ = <FONT COLOR="#FF0000">'\n'</FONT>;
		*dp = 0;
	} <FONT COLOR="#298C52">else</FONT>
		sprintf(dp, <FONT COLOR="#FF0000">"LogFrame: warning Frame too big (%d)\n"</FONT>,
			size);
	<A HREF="isdnl1.c.shtml#HiSax_putstatus">HiSax_putstatus</A>(sp, sp-&gt;dlogspace);
}

<FONT COLOR="#298C52">void</FONT>
<A HREF="#dlogframe">dlogframe</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *sp, u_char * buf, <FONT COLOR="#298C52">int</FONT> size, <FONT COLOR="#298C52">char</FONT> *comment)
{
	u_char *bend = buf + size;
	<FONT COLOR="#298C52">char</FONT> *dp;
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">char</FONT> pd, cr_l, cr, mt;
	<FONT COLOR="#298C52">int</FONT> i, cs = 0, cs_old = 0, cs_fest = 0;

	<FONT COLOR="#298C52">if</FONT> (size &lt; 1)
		<FONT COLOR="#298C52">return</FONT>;
	<FONT COLOR=#0000FF>/* display header */</FONT>
	dp = sp-&gt;dlogspace;
	dp += sprintf(dp, <FONT COLOR="#FF0000">"%s\n"</FONT>, comment);

	<FONT COLOR="#298C52">if</FONT> ((0xfe &amp; buf[0]) == PROTO_DIS_N0) {	<FONT COLOR=#0000FF>/* 1TR6 */</FONT>
		<FONT COLOR=#0000FF>/* locate message type */</FONT>
		pd = *buf++;
		cr_l = *buf++;
		<FONT COLOR="#298C52">if</FONT> (cr_l)
			cr = *buf++;
		<FONT COLOR="#298C52">else</FONT>
			cr = 0;
		mt = *buf++;
		<FONT COLOR="#298C52">if</FONT> (pd == PROTO_DIS_N0) {	<FONT COLOR=#0000FF>/* N0 */</FONT>
			<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; mt_n0_len; i++)
				<FONT COLOR="#298C52">if</FONT> (mt_n0[i].nr == mt)
					<FONT COLOR="#298C52">break</FONT>;
			<FONT COLOR=#0000FF>/* display message type if it exists */</FONT>
			<FONT COLOR="#298C52">if</FONT> (i == mt_n0_len)
				dp += sprintf(dp, <FONT COLOR="#FF0000">"callref %d %s size %d unknown message type N0 %x!\n"</FONT>,
					      cr &amp; 0x7f, (cr &amp; 0x80) ? <FONT COLOR="#FF0000">"called"</FONT> : <FONT COLOR="#FF0000">"caller"</FONT>,
					      size, mt);
			<FONT COLOR="#298C52">else</FONT>
				dp += sprintf(dp, <FONT COLOR="#FF0000">"callref %d %s size %d message type %s\n"</FONT>,
					      cr &amp; 0x7f, (cr &amp; 0x80) ? <FONT COLOR="#FF0000">"called"</FONT> : <FONT COLOR="#FF0000">"caller"</FONT>,
					      size, mt_n0[i].descr);
		} <FONT COLOR="#298C52">else</FONT> {	<FONT COLOR=#0000FF>/* N1 */</FONT>
			<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; mt_n1_len; i++)
				<FONT COLOR="#298C52">if</FONT> (mt_n1[i].nr == mt)
					<FONT COLOR="#298C52">break</FONT>;
			<FONT COLOR=#0000FF>/* display message type if it exists */</FONT>
			<FONT COLOR="#298C52">if</FONT> (i == mt_n1_len)
				dp += sprintf(dp, <FONT COLOR="#FF0000">"callref %d %s size %d unknown message type N1 %x!\n"</FONT>,
					      cr &amp; 0x7f, (cr &amp; 0x80) ? <FONT COLOR="#FF0000">"called"</FONT> : <FONT COLOR="#FF0000">"caller"</FONT>,
					      size, mt);
			<FONT COLOR="#298C52">else</FONT>
				dp += sprintf(dp, <FONT COLOR="#FF0000">"callref %d %s size %d message type %s\n"</FONT>,
					      cr &amp; 0x7f, (cr &amp; 0x80) ? <FONT COLOR="#FF0000">"called"</FONT> : <FONT COLOR="#FF0000">"caller"</FONT>,
					      size, mt_n1[i].descr);
		}

		<FONT COLOR=#0000FF>/* display each information element */</FONT>
		<FONT COLOR="#298C52">while</FONT> (buf &lt; bend) {
			<FONT COLOR=#0000FF>/* Is it a single octet information element? */</FONT>
			<FONT COLOR="#298C52">if</FONT> (*buf &amp; 0x80) {
				<FONT COLOR="#298C52">switch</FONT> ((*buf &gt;&gt; 4) &amp; 7) {
					<FONT COLOR="#298C52">case</FONT> 1:
						dp += sprintf(dp, <FONT COLOR="#FF0000">"  Shift %x\n"</FONT>, *buf &amp; 0xf);
						cs_old = cs;
						cs = *buf &amp; 7;
						cs_fest = *buf &amp; 8;
						<FONT COLOR="#298C52">break</FONT>;
					<FONT COLOR="#298C52">case</FONT> 3:
						dp += sprintf(dp, <FONT COLOR="#FF0000">"  Congestion level %x\n"</FONT>, *buf &amp; 0xf);
						<FONT COLOR="#298C52">break</FONT>;
					<FONT COLOR="#298C52">case</FONT> 2:
						<FONT COLOR="#298C52">if</FONT> (*buf == 0xa0) {
							dp += sprintf(dp, <FONT COLOR="#FF0000">"  More data\n"</FONT>);
							<FONT COLOR="#298C52">break</FONT>;
						}
						<FONT COLOR="#298C52">if</FONT> (*buf == 0xa1) {
							dp += sprintf(dp, <FONT COLOR="#FF0000">"  Sending complete\n"</FONT>);
						}
						<FONT COLOR="#298C52">break</FONT>;
						<FONT COLOR=#0000FF>/* fall through */</FONT>
					<FONT COLOR="#298C52">default</FONT>:
						dp += sprintf(dp, <FONT COLOR="#FF0000">"  Reserved %x\n"</FONT>, *buf);
						<FONT COLOR="#298C52">break</FONT>;
				}
				buf++;
				<FONT COLOR="#298C52">continue</FONT>;
			}
			<FONT COLOR=#0000FF>/* No, locate it in the table */</FONT>
			<FONT COLOR="#298C52">if</FONT> (cs == 0) {
				<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; we_0_len; i++)
					<FONT COLOR="#298C52">if</FONT> (*buf == we_0[i].nr)
						<FONT COLOR="#298C52">break</FONT>;

				<FONT COLOR=#0000FF>/* When found, give appropriate msg */</FONT>
				<FONT COLOR="#298C52">if</FONT> (i != we_0_len) {
					dp += sprintf(dp, <FONT COLOR="#FF0000">"  %s\n"</FONT>, we_0[i].descr);
					dp += we_0[i].f(dp, buf);
				} <FONT COLOR="#298C52">else</FONT>
					dp += sprintf(dp, <FONT COLOR="#FF0000">"  Codeset %d attribute %x attribute size %d\n"</FONT>, cs, *buf, buf[1]);
			} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (cs == 6) {
				<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; we_6_len; i++)
					<FONT COLOR="#298C52">if</FONT> (*buf == we_6[i].nr)
						<FONT COLOR="#298C52">break</FONT>;

				<FONT COLOR=#0000FF>/* When found, give appropriate msg */</FONT>
				<FONT COLOR="#298C52">if</FONT> (i != we_6_len) {
					dp += sprintf(dp, <FONT COLOR="#FF0000">"  %s\n"</FONT>, we_6[i].descr);
					dp += we_6[i].f(dp, buf);
				} <FONT COLOR="#298C52">else</FONT>
					dp += sprintf(dp, <FONT COLOR="#FF0000">"  Codeset %d attribute %x attribute size %d\n"</FONT>, cs, *buf, buf[1]);
			} <FONT COLOR="#298C52">else</FONT>
				dp += sprintf(dp, <FONT COLOR="#FF0000">"  Unknown Codeset %d attribute %x attribute size %d\n"</FONT>, cs, *buf, buf[1]);
			<FONT COLOR=#0000FF>/* Skip to next element */</FONT>
			<FONT COLOR="#298C52">if</FONT> (cs_fest == 8) {
				cs = cs_old;
				cs_old = 0;
				cs_fest = 0;
			}
			buf += buf[1] + 2;
		}
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (buf[0] == 8) {	<FONT COLOR=#0000FF>/* EURO */</FONT>
		<FONT COLOR=#0000FF>/* locate message type */</FONT>
		buf++;
		cr_l = *buf++;
		<FONT COLOR="#298C52">if</FONT> (cr_l)
			cr = *buf++;
		<FONT COLOR="#298C52">else</FONT>
			cr = 0;
		mt = *buf++;
		<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; <A HREF="#MTSIZE">MTSIZE</A>; i++)
			<FONT COLOR="#298C52">if</FONT> (mtlist[i].nr == mt)
				<FONT COLOR="#298C52">break</FONT>;

		<FONT COLOR=#0000FF>/* display message type if it exists */</FONT>
		<FONT COLOR="#298C52">if</FONT> (i == <A HREF="#MTSIZE">MTSIZE</A>)
			dp += sprintf(dp, <FONT COLOR="#FF0000">"callref %d %s size %d unknown message type %x!\n"</FONT>,
			    cr &amp; 0x7f, (cr &amp; 0x80) ? <FONT COLOR="#FF0000">"called"</FONT> : <FONT COLOR="#FF0000">"caller"</FONT>,
				      size, mt);
		<FONT COLOR="#298C52">else</FONT>
			dp += sprintf(dp, <FONT COLOR="#FF0000">"callref %d %s size %d message type %s\n"</FONT>,
			    cr &amp; 0x7f, (cr &amp; 0x80) ? <FONT COLOR="#FF0000">"called"</FONT> : <FONT COLOR="#FF0000">"caller"</FONT>,
				      size, mtlist[i].descr);

		<FONT COLOR=#0000FF>/* display each information element */</FONT>
		<FONT COLOR="#298C52">while</FONT> (buf &lt; bend) {
			<FONT COLOR=#0000FF>/* Is it a single octet information element? */</FONT>
			<FONT COLOR="#298C52">if</FONT> (*buf &amp; 0x80) {
				<FONT COLOR="#298C52">switch</FONT> ((*buf &gt;&gt; 4) &amp; 7) {
					<FONT COLOR="#298C52">case</FONT> 1:
						dp += sprintf(dp, <FONT COLOR="#FF0000">"  Shift %x\n"</FONT>, *buf &amp; 0xf);
						<FONT COLOR="#298C52">break</FONT>;
					<FONT COLOR="#298C52">case</FONT> 3:
						dp += sprintf(dp, <FONT COLOR="#FF0000">"  Congestion level %x\n"</FONT>, *buf &amp; 0xf);
						<FONT COLOR="#298C52">break</FONT>;
					<FONT COLOR="#298C52">case</FONT> 5:
						dp += sprintf(dp, <FONT COLOR="#FF0000">"  Repeat indicator %x\n"</FONT>, *buf &amp; 0xf);
						<FONT COLOR="#298C52">break</FONT>;
					<FONT COLOR="#298C52">case</FONT> 2:
						<FONT COLOR="#298C52">if</FONT> (*buf == 0xa0) {
							dp += sprintf(dp, <FONT COLOR="#FF0000">"  More data\n"</FONT>);
							<FONT COLOR="#298C52">break</FONT>;
						}
						<FONT COLOR="#298C52">if</FONT> (*buf == 0xa1) {
							dp += sprintf(dp, <FONT COLOR="#FF0000">"  Sending complete\n"</FONT>);
						}
						<FONT COLOR="#298C52">break</FONT>;
						<FONT COLOR=#0000FF>/* fall through */</FONT>
					<FONT COLOR="#298C52">default</FONT>:
						dp += sprintf(dp, <FONT COLOR="#FF0000">"  Reserved %x\n"</FONT>, *buf);
						<FONT COLOR="#298C52">break</FONT>;
				}
				buf++;
				<FONT COLOR="#298C52">continue</FONT>;
			}
			<FONT COLOR=#0000FF>/* No, locate it in the table */</FONT>
			<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; <A HREF="#IESIZE">IESIZE</A>; i++)
				<FONT COLOR="#298C52">if</FONT> (*buf == ielist[i].nr)
					<FONT COLOR="#298C52">break</FONT>;

			<FONT COLOR=#0000FF>/* When not found, give appropriate msg */</FONT>
			<FONT COLOR="#298C52">if</FONT> (i != <A HREF="#IESIZE">IESIZE</A>) {
				dp += sprintf(dp, <FONT COLOR="#FF0000">"  %s\n"</FONT>, ielist[i].descr);
				dp += ielist[i].f(dp, buf);
			} <FONT COLOR="#298C52">else</FONT>
				dp += sprintf(dp, <FONT COLOR="#FF0000">"  attribute %x attribute size %d\n"</FONT>, *buf, buf[1]);

			<FONT COLOR=#0000FF>/* Skip to next element */</FONT>
			buf += buf[1] + 2;
		}
	} <FONT COLOR="#298C52">else</FONT> {
		dp += sprintf(dp, <FONT COLOR="#FF0000">"Unknown protocol %x!"</FONT>, buf[0]);
	}
	dp += sprintf(dp, <FONT COLOR="#FF0000">"\n"</FONT>);
	<A HREF="isdnl1.c.shtml#HiSax_putstatus">HiSax_putstatus</A>(sp, sp-&gt;dlogspace);
}
</BODY>

</HTML>
