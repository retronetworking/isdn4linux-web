<HTML>

<!-- Generated by c2html-1.0, Copyright 1998 by Dave Whittington -->
<HEAD>
<TITLE>netjet.c</TITLE>
<!--#include virtual="/ssi/js.shtml" -->
<!--#include virtual="/ssi/buttondefs.shtml" -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<TABLE WIDTH="100%">
<TR>
<TD ALIGN=LEFT WIDTH="90"><!--#include virtual="/ssi/b_home.shtml" --></TD>
<TD ALIGN=RIGHT WIDTH="90"><!--#include virtual="/ssi/b_index.shtml" --></TD>
</TR>
</TABLE>
<CENTER><H1>netjet.c</H1></CENTER>

<HR>
<PRE>
<FONT COLOR=#0000FF>/* $Id$

 * netjet.c     low level stuff for Traverse Technologie NETJet ISDN cards
 *
 * Author     Karsten Keil (keil@temic-ech.spacenet.de)
 *
 * Thanks to Traverse Technologie Australia for documents and informations
 *
 *
 * $Log$
 * Revision 1.5  1998/05/25 12:58:21  keil
 * HiSax golden code from certification, Don't use !!!
 * No leased lines, no X75, but many changes.
 *
 * Revision 1.4  1998/04/15 16:42:35  keil
 * new init code
 * new PCI init (2.1.94)
 *
 * Revision 1.3  1998/02/12 23:08:05  keil
 * change for 2.1.86 (removing FREE_READ/FREE_WRITE from [dev]_kfree_skb()
 *
 * Revision 1.2  1998/02/02 13:32:06  keil
 * New
 *
 *
 *
 */</FONT>

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#__NO_VERSION__">__NO_VERSION__</A>
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/config.h&gt;
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hisax.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isac.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hscx.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isdnl1.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/pci.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/interrupt.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/ppp_defs.h&gt;

<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *CardType[];

<FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *NETjet_revision = <FONT COLOR="#FF0000">"$Revision$"</FONT>;

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#byteout">byteout</A>(addr,val) outb(val,addr)
<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#bytein">bytein</A>(addr) inb(addr)

<FONT COLOR=#0000FF>/* PCI stuff */</FONT>
<FONT COLOR=#A521F7>#define</FONT> PCI_VENDOR_TRAVERSE_TECH 0xe159
<FONT COLOR=#A521F7>#define</FONT> PCI_NETJET_ID	0x0001

<FONT COLOR=#A521F7>#define</FONT> NETJET_CTRL	0x00
<FONT COLOR=#A521F7>#define</FONT> NETJET_DMACTRL	0x01
<FONT COLOR=#A521F7>#define</FONT> NETJET_AUXCTRL	0x02
<FONT COLOR=#A521F7>#define</FONT> NETJET_AUXDATA	0x03
<FONT COLOR=#A521F7>#define</FONT> NETJET_IRQMASK0 0x04
<FONT COLOR=#A521F7>#define</FONT> NETJET_IRQMASK1 0x05
<FONT COLOR=#A521F7>#define</FONT> NETJET_IRQSTAT0 0x06
<FONT COLOR=#A521F7>#define</FONT> NETJET_IRQSTAT1 0x07
<FONT COLOR=#A521F7>#define</FONT> NETJET_DMA_READ_START	0x08
<FONT COLOR=#A521F7>#define</FONT> NETJET_DMA_READ_IRQ	0x0c
<FONT COLOR=#A521F7>#define</FONT> NETJET_DMA_READ_END	0x10
<FONT COLOR=#A521F7>#define</FONT> NETJET_DMA_READ_ADR	0x14
<FONT COLOR=#A521F7>#define</FONT> NETJET_DMA_WRITE_START	0x18
<FONT COLOR=#A521F7>#define</FONT> NETJET_DMA_WRITE_IRQ	0x1c
<FONT COLOR=#A521F7>#define</FONT> NETJET_DMA_WRITE_END	0x20
<FONT COLOR=#A521F7>#define</FONT> NETJET_DMA_WRITE_ADR	0x24
<FONT COLOR=#A521F7>#define</FONT> NETJET_PULSE_CNT	0x28

<FONT COLOR=#A521F7>#define</FONT> NETJET_ISAC_OFF	0xc0
<FONT COLOR=#A521F7>#define</FONT> NETJET_ISACIRQ	0x10
<FONT COLOR=#A521F7>#define</FONT> NETJET_IRQM0_READ	0x0c
<FONT COLOR=#A521F7>#define</FONT> NETJET_IRQM0_READ_1	0x04
<FONT COLOR=#A521F7>#define</FONT> NETJET_IRQM0_READ_2	0x08
<FONT COLOR=#A521F7>#define</FONT> NETJET_IRQM0_WRITE	0x03
<FONT COLOR=#A521F7>#define</FONT> NETJET_IRQM0_WRITE_1	0x01
<FONT COLOR=#A521F7>#define</FONT> NETJET_IRQM0_WRITE_2	0x02

<FONT COLOR=#A521F7>#define</FONT> NETJET_DMA_SIZE 512

<FONT COLOR=#A521F7>#define</FONT> HDLC_ZERO_SEARCH 0
<FONT COLOR=#A521F7>#define</FONT> HDLC_FLAG_SEARCH 1
<FONT COLOR=#A521F7>#define</FONT> HDLC_FLAG_FOUND  2
<FONT COLOR=#A521F7>#define</FONT> HDLC_FRAME_FOUND 3
<FONT COLOR=#A521F7>#define</FONT> HDLC_NULL 4
<FONT COLOR=#A521F7>#define</FONT> HDLC_PART 5
<FONT COLOR=#A521F7>#define</FONT> HDLC_FULL 6

<FONT COLOR=#A521F7>#define</FONT> HDLC_FLAG_VALUE	0x7e

<FONT COLOR=#0000FF>/* Interface functions */</FONT>

<FONT COLOR="#298C52">static</FONT> u_char
<A HREF="asuscom.c.shtml#ReadISAC">ReadISAC</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char offset)
{
	<FONT COLOR="#298C52">long</FONT> flags;
	u_char ret;
	
	save_flags(flags);
	cli();
	cs-&gt;hw.njet.auxd &amp;= 0xfc;
	cs-&gt;hw.njet.auxd |= (offset&gt;&gt;4) &amp; 3;
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.njet.auxa, cs-&gt;hw.njet.auxd);
	ret = <A HREF="asuscom.c.shtml#bytein">bytein</A>(cs-&gt;hw.njet.isac + ((offset &amp; 0xf)&lt;&lt;2));
	restore_flags(flags);
	<FONT COLOR="#298C52">return</FONT>(ret);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#WriteISAC">WriteISAC</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char offset, u_char value)
{
	<FONT COLOR="#298C52">long</FONT> flags;
	
	save_flags(flags);
	cli();
	cs-&gt;hw.njet.auxd &amp;= 0xfc;
	cs-&gt;hw.njet.auxd |= (offset&gt;&gt;4) &amp; 3;
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.njet.auxa, cs-&gt;hw.njet.auxd);
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.njet.isac + ((offset &amp; 0xf)&lt;&lt;2), value);
	restore_flags(flags);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#ReadISACfifo">ReadISACfifo</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char *data, <FONT COLOR="#298C52">int</FONT> size)
{
	cs-&gt;hw.njet.auxd &amp;= 0xfc;
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.njet.auxa, cs-&gt;hw.njet.auxd);
	insb(cs-&gt;hw.njet.isac, data, size);
}

__u16 fcstab[256] =
{
	0x0000, 0x1189, 0x2312, 0x329b, 0x4624, 0x57ad, 0x6536, 0x74bf,
	0x8c48, 0x9dc1, 0xaf5a, 0xbed3, 0xca6c, 0xdbe5, 0xe97e, 0xf8f7,
	0x1081, 0x0108, 0x3393, 0x221a, 0x56a5, 0x472c, 0x75b7, 0x643e,
	0x9cc9, 0x8d40, 0xbfdb, 0xae52, 0xdaed, 0xcb64, 0xf9ff, 0xe876,
	0x2102, 0x308b, 0x0210, 0x1399, 0x6726, 0x76af, 0x4434, 0x55bd,
	0xad4a, 0xbcc3, 0x8e58, 0x9fd1, 0xeb6e, 0xfae7, 0xc87c, 0xd9f5,
	0x3183, 0x200a, 0x1291, 0x0318, 0x77a7, 0x662e, 0x54b5, 0x453c,
	0xbdcb, 0xac42, 0x9ed9, 0x8f50, 0xfbef, 0xea66, 0xd8fd, 0xc974,
	0x4204, 0x538d, 0x6116, 0x709f, 0x0420, 0x15a9, 0x2732, 0x36bb,
	0xce4c, 0xdfc5, 0xed5e, 0xfcd7, 0x8868, 0x99e1, 0xab7a, 0xbaf3,
	0x5285, 0x430c, 0x7197, 0x601e, 0x14a1, 0x0528, 0x37b3, 0x263a,
	0xdecd, 0xcf44, 0xfddf, 0xec56, 0x98e9, 0x8960, 0xbbfb, 0xaa72,
	0x6306, 0x728f, 0x4014, 0x519d, 0x2522, 0x34ab, 0x0630, 0x17b9,
	0xef4e, 0xfec7, 0xcc5c, 0xddd5, 0xa96a, 0xb8e3, 0x8a78, 0x9bf1,
	0x7387, 0x620e, 0x5095, 0x411c, 0x35a3, 0x242a, 0x16b1, 0x0738,
	0xffcf, 0xee46, 0xdcdd, 0xcd54, 0xb9eb, 0xa862, 0x9af9, 0x8b70,
	0x8408, 0x9581, 0xa71a, 0xb693, 0xc22c, 0xd3a5, 0xe13e, 0xf0b7,
	0x0840, 0x19c9, 0x2b52, 0x3adb, 0x4e64, 0x5fed, 0x6d76, 0x7cff,
	0x9489, 0x8500, 0xb79b, 0xa612, 0xd2ad, 0xc324, 0xf1bf, 0xe036,
	0x18c1, 0x0948, 0x3bd3, 0x2a5a, 0x5ee5, 0x4f6c, 0x7df7, 0x6c7e,
	0xa50a, 0xb483, 0x8618, 0x9791, 0xe32e, 0xf2a7, 0xc03c, 0xd1b5,
	0x2942, 0x38cb, 0x0a50, 0x1bd9, 0x6f66, 0x7eef, 0x4c74, 0x5dfd,
	0xb58b, 0xa402, 0x9699, 0x8710, 0xf3af, 0xe226, 0xd0bd, 0xc134,
	0x39c3, 0x284a, 0x1ad1, 0x0b58, 0x7fe7, 0x6e6e, 0x5cf5, 0x4d7c,
	0xc60c, 0xd785, 0xe51e, 0xf497, 0x8028, 0x91a1, 0xa33a, 0xb2b3,
	0x4a44, 0x5bcd, 0x6956, 0x78df, 0x0c60, 0x1de9, 0x2f72, 0x3efb,
	0xd68d, 0xc704, 0xf59f, 0xe416, 0x90a9, 0x8120, 0xb3bb, 0xa232,
	0x5ac5, 0x4b4c, 0x79d7, 0x685e, 0x1ce1, 0x0d68, 0x3ff3, 0x2e7a,
	0xe70e, 0xf687, 0xc41c, 0xd595, 0xa12a, 0xb0a3, 0x8238, 0x93b1,
	0x6b46, 0x7acf, 0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9,
	0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330,
	0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78
};

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> 
<A HREF="asuscom.c.shtml#WriteISACfifo">WriteISACfifo</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char *data, <FONT COLOR="#298C52">int</FONT> size)
{
	cs-&gt;hw.njet.auxd &amp;= 0xfc;
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.njet.auxa, cs-&gt;hw.njet.auxd);
	outsb(cs-&gt;hw.njet.isac, data, size);
}

<FONT COLOR="#298C52">void</FONT> fill_mem(<FONT COLOR="#298C52">struct</FONT> BCState *bcs, u_int *pos, u_int cnt, <FONT COLOR="#298C52">int</FONT> chan, u_char fill)
{
	u_int mask=0x000000ff, val = 0, *p=pos;
	u_int i;
	
	val |= fill;
	<FONT COLOR="#298C52">if</FONT> (chan) {
		val  &lt;&lt;= 8;
		mask &lt;&lt;= 8;
	}
	mask ^= 0xffffffff;
	<FONT COLOR="#298C52">for</FONT> (i=0; i&lt;cnt; i++) {
		*p   &amp;= mask;
		*p++ |= val;
		<FONT COLOR="#298C52">if</FONT> (p &gt; bcs-&gt;hw.tiger.s_end)
			p = bcs-&gt;hw.tiger.send;
	}
}

<FONT COLOR="#298C52">void</FONT>
mode_tiger(<FONT COLOR="#298C52">struct</FONT> BCState *bcs, <FONT COLOR="#298C52">int</FONT> mode, <FONT COLOR="#298C52">int</FONT> bc)
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = bcs-&gt;cs;
	<FONT COLOR="#298C52">char</FONT> tmp[64];

	<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) {
		sprintf(tmp, <FONT COLOR="#FF0000">"Tiger mode %d bchan %d/%d"</FONT>,
			mode, bc, bcs-&gt;channel);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	}
	bcs-&gt;mode = mode;
	bcs-&gt;channel = bc;
	<FONT COLOR="#298C52">switch</FONT> (mode) {
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#L1_MODE_NULL">L1_MODE_NULL</A>):
			fill_mem(bcs, bcs-&gt;hw.tiger.send,
				NETJET_DMA_SIZE, bc, 0xff);
			<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) {
				sprintf(tmp, <FONT COLOR="#FF0000">"Tiger stat rec %d/%d send %d"</FONT>,
					bcs-&gt;hw.tiger.r_tot, bcs-&gt;hw.tiger.r_err,
					bcs-&gt;hw.tiger.s_tot); 
				<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
			}
			<FONT COLOR="#298C52">if</FONT> ((cs-&gt;bcs[0].mode == <A HREF="hisax.h.shtml#L1_MODE_NULL">L1_MODE_NULL</A>) &amp;&amp;
				(cs-&gt;bcs[1].mode == <A HREF="hisax.h.shtml#L1_MODE_NULL">L1_MODE_NULL</A>)) {
				cs-&gt;hw.njet.dmactrl = 0;
				<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.njet.base + NETJET_DMACTRL,
					cs-&gt;hw.njet.dmactrl);
				<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.njet.base + NETJET_IRQMASK0, 0);
			}
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#L1_MODE_TRANS">L1_MODE_TRANS</A>):
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#L1_MODE_HDLC">L1_MODE_HDLC</A>): 
			fill_mem(bcs, bcs-&gt;hw.tiger.send,
				NETJET_DMA_SIZE, bc, 0xff);
			bcs-&gt;hw.tiger.r_state = HDLC_ZERO_SEARCH;
			bcs-&gt;hw.tiger.r_tot = 0;
			bcs-&gt;hw.tiger.r_bitcnt = 0;
			bcs-&gt;hw.tiger.r_one = 0;
			bcs-&gt;hw.tiger.r_err = 0;
			bcs-&gt;hw.tiger.s_tot = 0;
			<FONT COLOR="#298C52">if</FONT> (! cs-&gt;hw.njet.dmactrl) {
				fill_mem(bcs, bcs-&gt;hw.tiger.send,
					NETJET_DMA_SIZE, !bc, 0xff);
				cs-&gt;hw.njet.dmactrl = 1;
				<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.njet.base + NETJET_DMACTRL,
					cs-&gt;hw.njet.dmactrl);
				<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.njet.base + NETJET_IRQMASK0, 0x3f);
			}
			bcs-&gt;hw.tiger.sendp = bcs-&gt;hw.tiger.send;
			bcs-&gt;hw.tiger.free = NETJET_DMA_SIZE;
			test_and_set_bit(<A HREF="hisax.h.shtml#BC_FLG_EMPTY">BC_FLG_EMPTY</A>, &amp;bcs-&gt;Flag);
			<FONT COLOR="#298C52">break</FONT>;
	}
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) {
		sprintf(tmp, <FONT COLOR="#FF0000">"tiger: set %x %x %x  %x/%x  pulse=%d"</FONT>,
			<A HREF="asuscom.c.shtml#bytein">bytein</A>(cs-&gt;hw.njet.base + NETJET_DMACTRL),
			<A HREF="asuscom.c.shtml#bytein">bytein</A>(cs-&gt;hw.njet.base + NETJET_IRQMASK0),
			<A HREF="asuscom.c.shtml#bytein">bytein</A>(cs-&gt;hw.njet.base + NETJET_IRQSTAT0),
			inl(cs-&gt;hw.njet.base + NETJET_DMA_READ_ADR),
			inl(cs-&gt;hw.njet.base + NETJET_DMA_WRITE_ADR),
			<A HREF="asuscom.c.shtml#bytein">bytein</A>(cs-&gt;hw.njet.base + NETJET_PULSE_CNT));
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	}
}

<FONT COLOR="#298C52">static</FONT> u_char dummyrr(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> chan, u_char off)
{
	<FONT COLOR="#298C52">return</FONT>(5);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> dummywr(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> chan, u_char off, u_char value)
{
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> printframe(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char *buf, <FONT COLOR="#298C52">int</FONT> count, <FONT COLOR="#298C52">char</FONT> *s) {
	<FONT COLOR="#298C52">char</FONT> tmp[128];
	<FONT COLOR="#298C52">char</FONT> *t = tmp;
	<FONT COLOR="#298C52">int</FONT> i=count,j;
	u_char *p = buf;

	t += sprintf(t, <FONT COLOR="#FF0000">"tiger %s(%4d)"</FONT>, s, count);
	<FONT COLOR="#298C52">while</FONT> (i&gt;0) {
		<FONT COLOR="#298C52">if</FONT> (i&gt;16)
			j=16;
		<FONT COLOR="#298C52">else</FONT>
			j=i;
		<A HREF="q931.c.shtml#QuickHex">QuickHex</A>(t, p, j);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
		p += j;
		i -= j;
		t = tmp;
		t += sprintf(t, <FONT COLOR="#FF0000">"tiger %s      "</FONT>, s);
	}
}

<FONT COLOR=#A521F7>#define</FONT> MAKE_RAW_BYTE <FONT COLOR="#298C52">for</FONT> (j=0; j&lt;8; j++) { \
			bitcnt++;\
			s_val &gt;&gt;= 1;\
			<FONT COLOR="#298C52">if</FONT> (val &amp; 1) {\
				s_one++;\
				s_val |= 0x80;\
			} <FONT COLOR="#298C52">else</FONT> {\
				s_one = 0;\
				s_val &amp;= 0x7f;\
			}\
			<FONT COLOR="#298C52">if</FONT> (bitcnt==8) {\
				bcs-&gt;hw.tiger.sendbuf[s_cnt++] = s_val;\
				bitcnt = 0;\
			}\
			<FONT COLOR="#298C52">if</FONT> (s_one == 5) {\
				s_val &gt;&gt;= 1;\
				s_val &amp;= 0x7f;\
				bitcnt++;\
				s_one = 0;\
			}\
			<FONT COLOR="#298C52">if</FONT> (bitcnt==8) {\
				bcs-&gt;hw.tiger.sendbuf[s_cnt++] = s_val;\
				bitcnt = 0;\
			}\
			val &gt;&gt;= 1;\
		}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> make_raw_data(<FONT COLOR="#298C52">struct</FONT> BCState *bcs) {
	<FONT COLOR="#298C52">register</FONT> u_int i,s_cnt=0;
	<FONT COLOR="#298C52">register</FONT> u_char j;
	<FONT COLOR="#298C52">register</FONT> u_char val;
	<FONT COLOR="#298C52">register</FONT> u_char s_one = 0;
	<FONT COLOR="#298C52">register</FONT> u_char s_val = 0;
	<FONT COLOR="#298C52">register</FONT> u_char bitcnt = 0;
	u_int fcs;
	<FONT COLOR="#298C52">char</FONT> tmp[64];
	
	<FONT COLOR="#298C52">if</FONT> (!bcs-&gt;hw.tiger.tx_skb) {
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(bcs-&gt;cs, <FONT COLOR="#FF0000">"tiger make_raw: NULL skb"</FONT>);
		<FONT COLOR="#298C52">return</FONT>(1);
	}
	bcs-&gt;hw.tiger.sendbuf[s_cnt++] = HDLC_FLAG_VALUE;
	fcs = PPP_INITFCS;
	<FONT COLOR="#298C52">for</FONT> (i=0; i&lt;bcs-&gt;hw.tiger.tx_skb-&gt;len; i++) {
		val = bcs-&gt;hw.tiger.tx_skb-&gt;data[i];
		fcs = PPP_FCS (fcs, val);
		MAKE_RAW_BYTE;
	}
	fcs ^= 0xffff;
	val = fcs &amp; 0xff;
	MAKE_RAW_BYTE;
	val = (fcs&gt;&gt;8) &amp; 0xff;
	MAKE_RAW_BYTE;
	val = HDLC_FLAG_VALUE;
	<FONT COLOR="#298C52">for</FONT> (j=0; j&lt;8; j++) { 
		bitcnt++;
		s_val &gt;&gt;= 1;
		<FONT COLOR="#298C52">if</FONT> (val &amp; 1)
			s_val |= 0x80;
		<FONT COLOR="#298C52">else</FONT>
			s_val &amp;= 0x7f;
		<FONT COLOR="#298C52">if</FONT> (bitcnt==8) {
			bcs-&gt;hw.tiger.sendbuf[s_cnt++] = s_val;
			bitcnt = 0;
		}
		val &gt;&gt;= 1;
	}
	<FONT COLOR="#298C52">if</FONT> (bcs-&gt;cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) {
		sprintf(tmp,<FONT COLOR="#FF0000">"tiger make_raw: in %d out %d.%d"</FONT>,
			bcs-&gt;hw.tiger.tx_skb-&gt;len, s_cnt, bitcnt);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(bcs-&gt;cs,tmp);
	}
	<FONT COLOR="#298C52">if</FONT> (bitcnt) {
		<FONT COLOR="#298C52">while</FONT> (8&gt;bitcnt++) {
			s_val &gt;&gt;= 1;
			s_val |= 0x80;
		}
		bcs-&gt;hw.tiger.sendbuf[s_cnt++] = s_val;
	}
	bcs-&gt;hw.tiger.sendcnt = s_cnt;
	bcs-&gt;tx_cnt -= bcs-&gt;hw.tiger.tx_skb-&gt;len;
	bcs-&gt;hw.tiger.sp = bcs-&gt;hw.tiger.sendbuf;
	<FONT COLOR="#298C52">return</FONT>(0);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> got_frame(<FONT COLOR="#298C52">struct</FONT> BCState *bcs, <FONT COLOR="#298C52">int</FONT> count) {
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;
		
	<FONT COLOR="#298C52">if</FONT> (!(skb = dev_alloc_skb(count)))
		printk(KERN_WARNING <FONT COLOR="#FF0000">"TIGER: receive out of memory\n"</FONT>);
	<FONT COLOR="#298C52">else</FONT> {
		memcpy(skb_put(skb, count), bcs-&gt;hw.tiger.rcvbuf, count);
		skb_queue_tail(&amp;bcs-&gt;rqueue, skb);
	}
	bcs-&gt;event |= 1 &lt;&lt; <A HREF="isdnl1.h.shtml#B_RCVBUFREADY">B_RCVBUFREADY</A>;
	queue_task(&amp;bcs-&gt;tqueue, &amp;tq_immediate);
	mark_bh(IMMEDIATE_BH);
	
	<FONT COLOR="#298C52">if</FONT> (bcs-&gt;cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_RECEIVE_FRAME">L1_DEB_RECEIVE_FRAME</A>)
		printframe(bcs-&gt;cs, bcs-&gt;hw.tiger.rcvbuf, count, <FONT COLOR="#FF0000">"rec"</FONT>);
}



<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> read_raw(<FONT COLOR="#298C52">struct</FONT> BCState *bcs, u_int *buf, <FONT COLOR="#298C52">int</FONT> cnt){
	<FONT COLOR="#298C52">int</FONT> i;
	<FONT COLOR="#298C52">register</FONT> u_char j;
	<FONT COLOR="#298C52">register</FONT> u_char val;
	u_int  *pend = bcs-&gt;hw.tiger.rec +NETJET_DMA_SIZE -1;
	<FONT COLOR="#298C52">register</FONT> u_char state = bcs-&gt;hw.tiger.r_state;
	<FONT COLOR="#298C52">register</FONT> u_char r_one = bcs-&gt;hw.tiger.r_one;
	<FONT COLOR="#298C52">register</FONT> u_char r_val = bcs-&gt;hw.tiger.r_val;
	<FONT COLOR="#298C52">register</FONT> u_int bitcnt = bcs-&gt;hw.tiger.r_bitcnt;
	u_int *p = buf;
	<FONT COLOR="#298C52">char</FONT> tmp[64];
        
	<FONT COLOR="#298C52">for</FONT> (i=0;i&lt;cnt;i++) {
		val = bcs-&gt;channel ? ((*p&gt;&gt;8) &amp; 0xff) : (*p &amp; 0xff);
		p++;
		<FONT COLOR="#298C52">if</FONT> (p &gt; pend)
			p = bcs-&gt;hw.tiger.rec;
		<FONT COLOR="#298C52">if</FONT> (val == 0xff) {
			state = HDLC_ZERO_SEARCH;
			bcs-&gt;hw.tiger.r_tot++;
			bitcnt = 0;
			r_one = 0;
			<FONT COLOR="#298C52">continue</FONT>;
		}
		<FONT COLOR="#298C52">for</FONT> (j=0;j&lt;8;j++) {
			<FONT COLOR="#298C52">if</FONT> (state == HDLC_ZERO_SEARCH) {
				<FONT COLOR="#298C52">if</FONT> (val &amp; 1) {
					r_one++;
				} <FONT COLOR="#298C52">else</FONT> {
					r_one=0;
					state= HDLC_FLAG_SEARCH;
					<FONT COLOR="#298C52">if</FONT> (bcs-&gt;cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) {
						sprintf(tmp,<FONT COLOR="#FF0000">"tiger read_raw: zBit(%d,%d,%d) %x"</FONT>,
							bcs-&gt;hw.tiger.r_tot,i,j,val);
						<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(bcs-&gt;cs,tmp);
					}
				}
			} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (state == HDLC_FLAG_SEARCH) { 
				<FONT COLOR="#298C52">if</FONT> (val &amp; 1) {
					r_one++;
					<FONT COLOR="#298C52">if</FONT> (r_one&gt;6) {
						state=HDLC_ZERO_SEARCH;
					}
				} <FONT COLOR="#298C52">else</FONT> {
					<FONT COLOR="#298C52">if</FONT> (r_one==6) {
						bitcnt=0;
						r_val=0;
						state=HDLC_FLAG_FOUND;
						<FONT COLOR="#298C52">if</FONT> (bcs-&gt;cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) {
							sprintf(tmp,<FONT COLOR="#FF0000">"tiger read_raw: flag(%d,%d,%d) %x"</FONT>,
								bcs-&gt;hw.tiger.r_tot,i,j,val);
							<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(bcs-&gt;cs,tmp);
						}
					}
					r_one=0;
				}
			} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (state ==  HDLC_FLAG_FOUND) {
				<FONT COLOR="#298C52">if</FONT> (val &amp; 1) {
					r_one++;
					<FONT COLOR="#298C52">if</FONT> (r_one&gt;6) {
						state=HDLC_ZERO_SEARCH;
					} <FONT COLOR="#298C52">else</FONT> {
						r_val &gt;&gt;= 1;
						r_val |= 0x80;
						bitcnt++;
					}
				} <FONT COLOR="#298C52">else</FONT> {
					<FONT COLOR="#298C52">if</FONT> (r_one==6) {
						bitcnt=0;
						r_val=0;
						r_one=0;
						val &gt;&gt;= 1;
						<FONT COLOR="#298C52">continue</FONT>;
					} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (r_one!=5) {
						r_val &gt;&gt;= 1;
						r_val &amp;= 0x7f;
						bitcnt++;
					}
					r_one=0;	
				}
				<FONT COLOR="#298C52">if</FONT> ((state != HDLC_ZERO_SEARCH) &amp;&amp;
					!(bitcnt &amp; 7)) {
					state=HDLC_FRAME_FOUND;
					bcs-&gt;hw.tiger.r_fcs = PPP_INITFCS;
					bcs-&gt;hw.tiger.rcvbuf[0] = r_val;
					bcs-&gt;hw.tiger.r_fcs = PPP_FCS (bcs-&gt;hw.tiger.r_fcs, r_val);
					<FONT COLOR="#298C52">if</FONT> (bcs-&gt;cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) {
						sprintf(tmp,<FONT COLOR="#FF0000">"tiger read_raw: byte1(%d,%d,%d) rval %x val %x i %x"</FONT>,
							bcs-&gt;hw.tiger.r_tot,i,j,r_val,val,
							bcs-&gt;cs-&gt;hw.njet.irqstat0);
						<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(bcs-&gt;cs,tmp);
					}
				}
			} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (state ==  HDLC_FRAME_FOUND) {
				<FONT COLOR="#298C52">if</FONT> (val &amp; 1) {
					r_one++;
					<FONT COLOR="#298C52">if</FONT> (r_one&gt;6) {
						state=HDLC_ZERO_SEARCH;
						bitcnt=0;
					} <FONT COLOR="#298C52">else</FONT> {
						r_val &gt;&gt;= 1;
						r_val |= 0x80;
						bitcnt++;
					}
				} <FONT COLOR="#298C52">else</FONT> {
					<FONT COLOR="#298C52">if</FONT> (r_one==6) {
						r_val=0; 
						r_one=0;
						bitcnt++;
						<FONT COLOR="#298C52">if</FONT> (bitcnt &amp; 7) {
							<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(bcs-&gt;cs, <FONT COLOR="#FF0000">"tiger: frame not byte aligned"</FONT>);
							state=HDLC_FLAG_SEARCH;
							bcs-&gt;hw.tiger.r_err++;
						} <FONT COLOR="#298C52">else</FONT> {
							<FONT COLOR="#298C52">if</FONT> (bcs-&gt;cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) {
								sprintf(tmp,<FONT COLOR="#FF0000">"tiger frame end(%d,%d): fcs(%x) i %x"</FONT>,
									i,j,bcs-&gt;hw.tiger.r_fcs, bcs-&gt;cs-&gt;hw.njet.irqstat0);
								<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(bcs-&gt;cs, tmp);
							}
							<FONT COLOR="#298C52">if</FONT> (bcs-&gt;hw.tiger.r_fcs == PPP_GOODFCS) {
								got_frame(bcs, (bitcnt&gt;&gt;3)-3);
							} <FONT COLOR="#298C52">else</FONT>
								<FONT COLOR="#298C52">if</FONT> (bcs-&gt;cs-&gt;debug) {
									<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(bcs-&gt;cs, <FONT COLOR="#FF0000">"tiger FCS error"</FONT>);
									printframe(bcs-&gt;cs, bcs-&gt;hw.tiger.rcvbuf,
										(bitcnt&gt;&gt;3)-1, <FONT COLOR="#FF0000">"rec"</FONT>);
									bcs-&gt;hw.tiger.r_err++;
								}
							state=HDLC_FLAG_FOUND;
						}
						bitcnt=0;
					} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (r_one==5) {
						val &gt;&gt;= 1;
						r_one=0;
						<FONT COLOR="#298C52">continue</FONT>;
					} <FONT COLOR="#298C52">else</FONT> {
						r_val &gt;&gt;= 1;
						r_val &amp;= 0x7f;
						bitcnt++;
					}
					r_one=0;	
				}
				<FONT COLOR="#298C52">if</FONT> ((state == HDLC_FRAME_FOUND) &amp;&amp;
					!(bitcnt &amp; 7)) {
					<FONT COLOR="#298C52">if</FONT> ((bitcnt&gt;&gt;3)&gt;=<A HREF="hisax.h.shtml#HSCX_BUFMAX">HSCX_BUFMAX</A>) {
						<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(bcs-&gt;cs, <FONT COLOR="#FF0000">"tiger: frame to big"</FONT>);
						r_val=0; 
						state=HDLC_FLAG_SEARCH;
						bcs-&gt;hw.tiger.r_err++;
					} <FONT COLOR="#298C52">else</FONT> {
						bcs-&gt;hw.tiger.rcvbuf[(bitcnt&gt;&gt;3)-1] = r_val;
						bcs-&gt;hw.tiger.r_fcs = 
							PPP_FCS (bcs-&gt;hw.tiger.r_fcs, r_val);
					}
				}
			}
			val &gt;&gt;= 1;
		}
		bcs-&gt;hw.tiger.r_tot++;
	}
	bcs-&gt;hw.tiger.r_state = state;
	bcs-&gt;hw.tiger.r_one = r_one;
	bcs-&gt;hw.tiger.r_val = r_val;
	bcs-&gt;hw.tiger.r_bitcnt = bitcnt;
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> read_tiger(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs) {
	u_int *p;
	<FONT COLOR="#298C52">int</FONT> cnt = NETJET_DMA_SIZE/2;
	<FONT COLOR="#298C52">char</FONT> tmp[64];
	
	<FONT COLOR="#298C52">if</FONT> ((cs-&gt;hw.njet.irqstat0 &amp; cs-&gt;hw.njet.last_is0) &amp; NETJET_IRQM0_READ) {
		sprintf(tmp,<FONT COLOR="#FF0000">"tiger warn read double dma %x/%x"</FONT>,
			cs-&gt;hw.njet.irqstat0, cs-&gt;hw.njet.last_is0);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
		<FONT COLOR="#298C52">return</FONT>;
	} <FONT COLOR="#298C52">else</FONT> {
		cs-&gt;hw.njet.last_is0 &amp;= ~NETJET_IRQM0_READ;
		cs-&gt;hw.njet.last_is0 |= (cs-&gt;hw.njet.irqstat0 &amp; NETJET_IRQM0_READ);
	}	
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.njet.irqstat0 &amp; NETJET_IRQM0_READ_1)
		p = cs-&gt;bcs[0].hw.tiger.rec + NETJET_DMA_SIZE - 1;
	<FONT COLOR="#298C52">else</FONT>
		p = cs-&gt;bcs[0].hw.tiger.rec + cnt - 1;
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;bcs[0].mode == <A HREF="hisax.h.shtml#L1_MODE_HDLC">L1_MODE_HDLC</A>)
		read_raw(cs-&gt;bcs, p, cnt);
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;bcs[1].mode == <A HREF="hisax.h.shtml#L1_MODE_HDLC">L1_MODE_HDLC</A>)
		read_raw(cs-&gt;bcs + 1, p, cnt);
	cs-&gt;hw.njet.irqstat0 &amp;= ~NETJET_IRQM0_READ;
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> write_raw(<FONT COLOR="#298C52">struct</FONT> BCState *bcs, u_int *buf, <FONT COLOR="#298C52">int</FONT> cnt);

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> fill_dma(<FONT COLOR="#298C52">struct</FONT> BCState *bcs)
{
	<FONT COLOR="#298C52">char</FONT> tmp[64];
	<FONT COLOR="#298C52">register</FONT> u_int *p, *sp;
	<FONT COLOR="#298C52">register</FONT> <FONT COLOR="#298C52">int</FONT> cnt;

	<FONT COLOR="#298C52">if</FONT> (!bcs-&gt;hw.tiger.tx_skb)
		<FONT COLOR="#298C52">return</FONT>;
	<FONT COLOR="#298C52">if</FONT> (bcs-&gt;cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) {
		sprintf(tmp,<FONT COLOR="#FF0000">"tiger fill_dma1: c%d %4x"</FONT>, bcs-&gt;channel,
			bcs-&gt;Flag);
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(bcs-&gt;cs,tmp);
	}
	<FONT COLOR="#298C52">if</FONT> (test_and_set_bit(<A HREF="hisax.h.shtml#BC_FLG_BUSY">BC_FLG_BUSY</A>, &amp;bcs-&gt;Flag))
		<FONT COLOR="#298C52">return</FONT>;
	<FONT COLOR="#298C52">if</FONT> (make_raw_data(bcs))
		<FONT COLOR="#298C52">return</FONT>;		
	<FONT COLOR="#298C52">if</FONT> (bcs-&gt;cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) {
		sprintf(tmp,<FONT COLOR="#FF0000">"tiger fill_dma2: c%d %4x"</FONT>, bcs-&gt;channel,
			bcs-&gt;Flag);
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(bcs-&gt;cs,tmp);
	}
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#BC_FLG_NOFRAME">BC_FLG_NOFRAME</A>, &amp;bcs-&gt;Flag)) {
		write_raw(bcs, bcs-&gt;hw.tiger.sendp, bcs-&gt;hw.tiger.free);
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#BC_FLG_HALF">BC_FLG_HALF</A>, &amp;bcs-&gt;Flag)) {
		p = bus_to_virt(inl(bcs-&gt;cs-&gt;hw.njet.base + NETJET_DMA_READ_ADR));
		sp = bcs-&gt;hw.tiger.sendp;
		<FONT COLOR="#298C52">if</FONT> (p == bcs-&gt;hw.tiger.s_end)
			p = bcs-&gt;hw.tiger.send -1;
		<FONT COLOR="#298C52">if</FONT> (sp == bcs-&gt;hw.tiger.s_end)
			sp = bcs-&gt;hw.tiger.send -1;
		cnt = p - sp;
		<FONT COLOR="#298C52">if</FONT> (cnt &lt;0) {
			write_raw(bcs, bcs-&gt;hw.tiger.sendp, bcs-&gt;hw.tiger.free);
		} <FONT COLOR="#298C52">else</FONT> {
			p++;
			cnt++;
			<FONT COLOR="#298C52">if</FONT> (p &gt; bcs-&gt;hw.tiger.s_end)
				p = bcs-&gt;hw.tiger.send;
			p++;
			cnt++;
			<FONT COLOR="#298C52">if</FONT> (p &gt; bcs-&gt;hw.tiger.s_end)
				p = bcs-&gt;hw.tiger.send;
			write_raw(bcs, p, bcs-&gt;hw.tiger.free - cnt);
		}
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#BC_FLG_EMPTY">BC_FLG_EMPTY</A>, &amp;bcs-&gt;Flag)) {
		p = bus_to_virt(inl(bcs-&gt;cs-&gt;hw.njet.base + NETJET_DMA_READ_ADR));
		cnt = bcs-&gt;hw.tiger.s_end - p;
		<FONT COLOR="#298C52">if</FONT> (cnt &lt; 2) {
			p = bcs-&gt;hw.tiger.send + 1;
			cnt = NETJET_DMA_SIZE/2 - 2;
		} <FONT COLOR="#298C52">else</FONT> {
			p++;
			p++;
			<FONT COLOR="#298C52">if</FONT> (cnt &lt;= (NETJET_DMA_SIZE/2))
				cnt += NETJET_DMA_SIZE/2;
			cnt--;
			cnt--;
		}
		write_raw(bcs, p, cnt);
	}
	<FONT COLOR="#298C52">if</FONT> (bcs-&gt;cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) {
		sprintf(tmp,<FONT COLOR="#FF0000">"tiger fill_dma3: c%d %4x"</FONT>, bcs-&gt;channel,
			bcs-&gt;Flag);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(bcs-&gt;cs,tmp);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> write_raw(<FONT COLOR="#298C52">struct</FONT> BCState *bcs, u_int *buf, <FONT COLOR="#298C52">int</FONT> cnt) {
	u_int mask, val, *p=buf;
	u_int i, s_cnt;
	<FONT COLOR="#298C52">char</FONT> tmp[64];
        
        <FONT COLOR="#298C52">if</FONT> (cnt &lt;= 0)
        	<FONT COLOR="#298C52">return</FONT>;
	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#BC_FLG_BUSY">BC_FLG_BUSY</A>, &amp;bcs-&gt;Flag)) {
		<FONT COLOR="#298C52">if</FONT> (bcs-&gt;hw.tiger.sendcnt&gt; cnt) {
			s_cnt = cnt;
			bcs-&gt;hw.tiger.sendcnt -= cnt;
		} <FONT COLOR="#298C52">else</FONT> {
			s_cnt = bcs-&gt;hw.tiger.sendcnt;
			bcs-&gt;hw.tiger.sendcnt = 0;
		}
		<FONT COLOR="#298C52">if</FONT> (bcs-&gt;channel)
			mask = 0xffff00ff;
		<FONT COLOR="#298C52">else</FONT>
			mask = 0xffffff00;
		<FONT COLOR="#298C52">for</FONT> (i=0; i&lt;s_cnt; i++) {
			val = bcs-&gt;channel ? ((bcs-&gt;hw.tiger.sp[i] &lt;&lt;8) &amp; 0xff00) :
				(bcs-&gt;hw.tiger.sp[i]);
			*p   &amp;= mask;
			*p++ |= val;
			<FONT COLOR="#298C52">if</FONT> (p&gt;bcs-&gt;hw.tiger.s_end)
				p = bcs-&gt;hw.tiger.send;
		}
		bcs-&gt;hw.tiger.s_tot += s_cnt;
		<FONT COLOR="#298C52">if</FONT> (bcs-&gt;cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) {
			sprintf(tmp,<FONT COLOR="#FF0000">"tiger write_raw: c%d %x-%x %d/%d %d %x"</FONT>, bcs-&gt;channel,
			(u_int)buf, (u_int)p, s_cnt, cnt, bcs-&gt;hw.tiger.sendcnt,
			bcs-&gt;cs-&gt;hw.njet.irqstat0);
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(bcs-&gt;cs,tmp);
		}
		<FONT COLOR="#298C52">if</FONT> (bcs-&gt;cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX_FIFO">L1_DEB_HSCX_FIFO</A>)
			printframe(bcs-&gt;cs, bcs-&gt;hw.tiger.sp, s_cnt, <FONT COLOR="#FF0000">"snd"</FONT>);
		bcs-&gt;hw.tiger.sp += s_cnt;
		bcs-&gt;hw.tiger.sendp = p;
		<FONT COLOR="#298C52">if</FONT> (!bcs-&gt;hw.tiger.sendcnt) {
			<FONT COLOR="#298C52">if</FONT> (!bcs-&gt;hw.tiger.tx_skb) {
				sprintf(tmp,<FONT COLOR="#FF0000">"tiger write_raw: NULL skb s_cnt %d"</FONT>, s_cnt);
				<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(bcs-&gt;cs, tmp);
			} <FONT COLOR="#298C52">else</FONT> {
				<FONT COLOR="#298C52">if</FONT> (bcs-&gt;st-&gt;lli.l1writewakeup &amp;&amp;
					(<A HREF="hisax.h.shtml#PACKET_NOACK">PACKET_NOACK</A> != bcs-&gt;hw.tiger.tx_skb-&gt;pkt_type))
					bcs-&gt;st-&gt;lli.l1writewakeup(bcs-&gt;st, bcs-&gt;hw.tiger.tx_skb-&gt;len);
				dev_kfree_skb(bcs-&gt;hw.tiger.tx_skb);
				bcs-&gt;hw.tiger.tx_skb = NULL;
			}
			test_and_clear_bit(<A HREF="hisax.h.shtml#BC_FLG_BUSY">BC_FLG_BUSY</A>, &amp;bcs-&gt;Flag);
			bcs-&gt;hw.tiger.free = cnt - s_cnt;
			<FONT COLOR="#298C52">if</FONT> (bcs-&gt;hw.tiger.free &gt; (NETJET_DMA_SIZE/2))
				test_and_set_bit(<A HREF="hisax.h.shtml#BC_FLG_HALF">BC_FLG_HALF</A>, &amp;bcs-&gt;Flag);
			<FONT COLOR="#298C52">else</FONT> {
				test_and_clear_bit(<A HREF="hisax.h.shtml#BC_FLG_HALF">BC_FLG_HALF</A>, &amp;bcs-&gt;Flag);
				test_and_set_bit(<A HREF="hisax.h.shtml#BC_FLG_NOFRAME">BC_FLG_NOFRAME</A>, &amp;bcs-&gt;Flag);
			}
			<FONT COLOR="#298C52">if</FONT> ((bcs-&gt;hw.tiger.tx_skb = skb_dequeue(&amp;bcs-&gt;squeue))) {
				fill_dma(bcs);
			} <FONT COLOR="#298C52">else</FONT> {
				mask ^= 0xffffffff;
				<FONT COLOR="#298C52">if</FONT> (s_cnt &lt; cnt) {
					<FONT COLOR="#298C52">for</FONT> (i=s_cnt; i&lt;cnt;i++) {
						*p++ |= mask;
						<FONT COLOR="#298C52">if</FONT> (p&gt;bcs-&gt;hw.tiger.s_end)
							p = bcs-&gt;hw.tiger.send;
					}
					<FONT COLOR="#298C52">if</FONT> (bcs-&gt;cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) {
						sprintf(tmp, <FONT COLOR="#FF0000">"tiger write_raw: fill rest %d"</FONT>,
							cnt - s_cnt);
						<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(bcs-&gt;cs,tmp);
					}
				}
				bcs-&gt;event |= 1 &lt;&lt; <A HREF="isdnl1.h.shtml#B_XMTBUFREADY">B_XMTBUFREADY</A>;
				queue_task(&amp;bcs-&gt;tqueue, &amp;tq_immediate);
				mark_bh(IMMEDIATE_BH);
			}
		}
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#BC_FLG_NOFRAME">BC_FLG_NOFRAME</A>, &amp;bcs-&gt;Flag)) {
		test_and_set_bit(<A HREF="hisax.h.shtml#BC_FLG_HALF">BC_FLG_HALF</A>, &amp;bcs-&gt;Flag);
		fill_mem(bcs, buf, cnt, bcs-&gt;channel, 0xff);
		bcs-&gt;hw.tiger.free += cnt;
		<FONT COLOR="#298C52">if</FONT> (bcs-&gt;cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) {
			sprintf(tmp,<FONT COLOR="#FF0000">"tiger write_raw: fill half"</FONT>);
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(bcs-&gt;cs,tmp);
		}
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#BC_FLG_HALF">BC_FLG_HALF</A>, &amp;bcs-&gt;Flag)) {
		test_and_set_bit(<A HREF="hisax.h.shtml#BC_FLG_EMPTY">BC_FLG_EMPTY</A>, &amp;bcs-&gt;Flag);
		fill_mem(bcs, buf, cnt, bcs-&gt;channel, 0xff);
		<FONT COLOR="#298C52">if</FONT> (bcs-&gt;cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) {
			sprintf(tmp,<FONT COLOR="#FF0000">"tiger write_raw: fill full"</FONT>);
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(bcs-&gt;cs,tmp);
		}
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> write_tiger(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs) {
	u_int *p, cnt = NETJET_DMA_SIZE/2;
	<FONT COLOR="#298C52">char</FONT> tmp[64];
	
	<FONT COLOR="#298C52">if</FONT> ((cs-&gt;hw.njet.irqstat0 &amp; cs-&gt;hw.njet.last_is0) &amp; NETJET_IRQM0_WRITE) {
		sprintf(tmp,<FONT COLOR="#FF0000">"tiger warn write double dma %x/%x"</FONT>,
			cs-&gt;hw.njet.irqstat0, cs-&gt;hw.njet.last_is0);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
		<FONT COLOR="#298C52">return</FONT>;
	} <FONT COLOR="#298C52">else</FONT> {
		cs-&gt;hw.njet.last_is0 &amp;= ~NETJET_IRQM0_WRITE;
		cs-&gt;hw.njet.last_is0 |= (cs-&gt;hw.njet.irqstat0 &amp; NETJET_IRQM0_WRITE);
	}	
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.njet.irqstat0  &amp; NETJET_IRQM0_WRITE_1)
		p = cs-&gt;bcs[0].hw.tiger.send + NETJET_DMA_SIZE - 1;
	<FONT COLOR="#298C52">else</FONT>
		p = cs-&gt;bcs[0].hw.tiger.send + cnt - 1;
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;bcs[0].mode == <A HREF="hisax.h.shtml#L1_MODE_HDLC">L1_MODE_HDLC</A>)
		write_raw(cs-&gt;bcs, p, cnt);
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;bcs[1].mode == <A HREF="hisax.h.shtml#L1_MODE_HDLC">L1_MODE_HDLC</A>)
		write_raw(cs-&gt;bcs + 1, p, cnt);
	cs-&gt;hw.njet.irqstat0 &amp;= ~NETJET_IRQM0_WRITE;
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
tiger_l2l1(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">long</FONT> flags;

	<FONT COLOR="#298C52">switch</FONT> (pr) {
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_DATA">PH_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			save_flags(flags);
			cli();
			<FONT COLOR="#298C52">if</FONT> (st-&gt;l1.bcs-&gt;hw.tiger.tx_skb) {
				skb_queue_tail(&amp;st-&gt;l1.bcs-&gt;squeue, skb);
				restore_flags(flags);
			} <FONT COLOR="#298C52">else</FONT> {
				st-&gt;l1.bcs-&gt;hw.tiger.tx_skb = skb;
				st-&gt;l1.bcs-&gt;cs-&gt;BC_Send_Data(st-&gt;l1.bcs);
				restore_flags(flags);
			}
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_PULL">PH_PULL</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
			<FONT COLOR="#298C52">if</FONT> (st-&gt;l1.bcs-&gt;hw.tiger.tx_skb) {
				printk(KERN_WARNING <FONT COLOR="#FF0000">"tiger_l2l1: this shouldn't happen\n"</FONT>);
				<FONT COLOR="#298C52">break</FONT>;
			}
			save_flags(flags);
			cli();
			st-&gt;l1.bcs-&gt;hw.tiger.tx_skb = skb;
			st-&gt;l1.bcs-&gt;cs-&gt;BC_Send_Data(st-&gt;l1.bcs);
			restore_flags(flags);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_PULL">PH_PULL</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			<FONT COLOR="#298C52">if</FONT> (!st-&gt;l1.bcs-&gt;hw.tiger.tx_skb) {
				test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_L1_PULL_REQ">FLG_L1_PULL_REQ</A>, &amp;st-&gt;l1.Flags);
				st-&gt;l1.l1l2(st, <A HREF="hisax.h.shtml#PH_PULL">PH_PULL</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, NULL);
			} <FONT COLOR="#298C52">else</FONT>
				test_and_set_bit(<A HREF="hisax.h.shtml#FLG_L1_PULL_REQ">FLG_L1_PULL_REQ</A>, &amp;st-&gt;l1.Flags);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_ACTIVATE">PH_ACTIVATE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			test_and_set_bit(<A HREF="hisax.h.shtml#BC_FLG_ACTIV">BC_FLG_ACTIV</A>, &amp;st-&gt;l1.bcs-&gt;Flag);
			mode_tiger(st-&gt;l1.bcs, st-&gt;l1.mode, st-&gt;l1.bc);
			st-&gt;l1.l1l2(st, <A HREF="hisax.h.shtml#PH_ACTIVATE">PH_ACTIVATE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_DEACTIVATE">PH_DEACTIVATE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			<FONT COLOR="#298C52">if</FONT> (!test_bit(<A HREF="hisax.h.shtml#BC_FLG_BUSY">BC_FLG_BUSY</A>, &amp;st-&gt;l1.bcs-&gt;Flag))
				mode_tiger(st-&gt;l1.bcs, 0, 0);
			test_and_clear_bit(<A HREF="hisax.h.shtml#BC_FLG_ACTIV">BC_FLG_ACTIV</A>, &amp;st-&gt;l1.bcs-&gt;Flag);
			<FONT COLOR="#298C52">break</FONT>;
	}
}


<FONT COLOR="#298C52">void</FONT>
close_tigerstate(<FONT COLOR="#298C52">struct</FONT> BCState *bcs)
{
	mode_tiger(bcs, 0, 0);
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#BC_FLG_INIT">BC_FLG_INIT</A>, &amp;bcs-&gt;Flag)) {
		<FONT COLOR="#298C52">if</FONT> (bcs-&gt;hw.tiger.rcvbuf) {
			kfree(bcs-&gt;hw.tiger.rcvbuf);
			bcs-&gt;hw.tiger.rcvbuf = NULL;
		}
		<FONT COLOR="#298C52">if</FONT> (bcs-&gt;hw.tiger.sendbuf) {
			kfree(bcs-&gt;hw.tiger.sendbuf);
			bcs-&gt;hw.tiger.sendbuf = NULL;
		}
		<A HREF="callc.c.shtml#discard_queue">discard_queue</A>(&amp;bcs-&gt;rqueue);
		<A HREF="callc.c.shtml#discard_queue">discard_queue</A>(&amp;bcs-&gt;squeue);
		<FONT COLOR="#298C52">if</FONT> (bcs-&gt;hw.tiger.tx_skb) {
			dev_kfree_skb(bcs-&gt;hw.tiger.tx_skb);
			bcs-&gt;hw.tiger.tx_skb = NULL;
			test_and_clear_bit(<A HREF="hisax.h.shtml#BC_FLG_BUSY">BC_FLG_BUSY</A>, &amp;bcs-&gt;Flag);
		}
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
open_tigerstate(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> bc)
{
	<FONT COLOR="#298C52">struct</FONT> BCState *bcs = cs-&gt;bcs + bc;

	<FONT COLOR="#298C52">if</FONT> (!test_and_set_bit(<A HREF="hisax.h.shtml#BC_FLG_INIT">BC_FLG_INIT</A>, &amp;bcs-&gt;Flag)) {
		<FONT COLOR="#298C52">if</FONT> (!(bcs-&gt;hw.tiger.rcvbuf = kmalloc(<A HREF="hisax.h.shtml#HSCX_BUFMAX">HSCX_BUFMAX</A>, GFP_KERNEL))) {
			printk(KERN_WARNING
			       <FONT COLOR="#FF0000">"HiSax: No memory for tiger.rcvbuf\n"</FONT>);
			<FONT COLOR="#298C52">return</FONT> (1);
		}
		<FONT COLOR="#298C52">if</FONT> (!(bcs-&gt;hw.tiger.sendbuf = kmalloc(<A HREF="hisax.h.shtml#RAW_BUFMAX">RAW_BUFMAX</A>, GFP_KERNEL))) {
			printk(KERN_WARNING
			       <FONT COLOR="#FF0000">"HiSax: No memory for tiger.sendbuf\n"</FONT>);
			<FONT COLOR="#298C52">return</FONT> (1);
		}
		skb_queue_head_init(&amp;bcs-&gt;rqueue);
		skb_queue_head_init(&amp;bcs-&gt;squeue);
	}
	bcs-&gt;hw.tiger.tx_skb = NULL;
	bcs-&gt;hw.tiger.sendcnt = 0;
	test_and_clear_bit(<A HREF="hisax.h.shtml#BC_FLG_BUSY">BC_FLG_BUSY</A>, &amp;bcs-&gt;Flag);
	bcs-&gt;event = 0;
	bcs-&gt;tx_cnt = 0;
	<FONT COLOR="#298C52">return</FONT> (0);
}

<FONT COLOR="#298C52">int</FONT>
setstack_tiger(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">struct</FONT> BCState *bcs)
{
	<FONT COLOR="#298C52">if</FONT> (open_tigerstate(st-&gt;l1.hardware, bcs-&gt;channel))
		<FONT COLOR="#298C52">return</FONT> (-1);
	st-&gt;l1.bcs = bcs;
	st-&gt;l2.l2l1 = tiger_l2l1;
	<A HREF="lmgr.c.shtml#setstack_manager">setstack_manager</A>(st);
	bcs-&gt;st = st;
	<FONT COLOR="#298C52">return</FONT> (0);
}

 
<A HREF="asuscom.c.shtml#__initfunc">__initfunc</A>(<FONT COLOR="#298C52">void</FONT>
inittiger(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs))
{
	<FONT COLOR="#298C52">char</FONT> tmp[128];

	<FONT COLOR="#298C52">if</FONT> (!(cs-&gt;bcs[0].hw.tiger.send = kmalloc(NETJET_DMA_SIZE * <FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT>),
		GFP_KERNEL | GFP_DMA))) {
		printk(KERN_WARNING
		       <FONT COLOR="#FF0000">"HiSax: No memory for tiger.send\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT>;
	}
	cs-&gt;bcs[0].hw.tiger.s_irq = cs-&gt;bcs[0].hw.tiger.send + NETJET_DMA_SIZE/2 - 1;
	cs-&gt;bcs[0].hw.tiger.s_end = cs-&gt;bcs[0].hw.tiger.send + NETJET_DMA_SIZE - 1;
	cs-&gt;bcs[1].hw.tiger.send = cs-&gt;bcs[0].hw.tiger.send;
	cs-&gt;bcs[1].hw.tiger.s_irq = cs-&gt;bcs[0].hw.tiger.s_irq;
	cs-&gt;bcs[1].hw.tiger.s_end = cs-&gt;bcs[0].hw.tiger.s_end;
	
	memset(cs-&gt;bcs[0].hw.tiger.send, 0xff, NETJET_DMA_SIZE * <FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT>));
	sprintf(tmp, <FONT COLOR="#FF0000">"tiger: send buf %x - %x"</FONT>, (u_int)cs-&gt;bcs[0].hw.tiger.send,
		(u_int)(cs-&gt;bcs[0].hw.tiger.send + NETJET_DMA_SIZE - 1));
	<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	outl(virt_to_bus(cs-&gt;bcs[0].hw.tiger.send),
		cs-&gt;hw.njet.base + NETJET_DMA_READ_START);
	outl(virt_to_bus(cs-&gt;bcs[0].hw.tiger.s_irq),
		cs-&gt;hw.njet.base + NETJET_DMA_READ_IRQ);
	outl(virt_to_bus(cs-&gt;bcs[0].hw.tiger.s_end),
		cs-&gt;hw.njet.base + NETJET_DMA_READ_END);
	<FONT COLOR="#298C52">if</FONT> (!(cs-&gt;bcs[0].hw.tiger.rec = kmalloc(NETJET_DMA_SIZE * <FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT>),
		GFP_KERNEL | GFP_DMA))) {
		printk(KERN_WARNING
		       <FONT COLOR="#FF0000">"HiSax: No memory for tiger.rec\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT>;
	}
	sprintf(tmp, <FONT COLOR="#FF0000">"tiger: rec buf %x - %x"</FONT>, (u_int)cs-&gt;bcs[0].hw.tiger.rec,
		(u_int)(cs-&gt;bcs[0].hw.tiger.rec + NETJET_DMA_SIZE - 1));
	<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	cs-&gt;bcs[1].hw.tiger.rec = cs-&gt;bcs[0].hw.tiger.rec;
	memset(cs-&gt;bcs[0].hw.tiger.rec, 0xff, NETJET_DMA_SIZE * <FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT>));
	outl(virt_to_bus(cs-&gt;bcs[0].hw.tiger.rec),
		cs-&gt;hw.njet.base + NETJET_DMA_WRITE_START);
	outl(virt_to_bus(cs-&gt;bcs[0].hw.tiger.rec + NETJET_DMA_SIZE/2 - 1),
		cs-&gt;hw.njet.base + NETJET_DMA_WRITE_IRQ);
	outl(virt_to_bus(cs-&gt;bcs[0].hw.tiger.rec + NETJET_DMA_SIZE - 1),
		cs-&gt;hw.njet.base + NETJET_DMA_WRITE_END);
	sprintf(tmp, <FONT COLOR="#FF0000">"tiger: dmacfg  %x/%x  pulse=%d"</FONT>,
		inl(cs-&gt;hw.njet.base + NETJET_DMA_WRITE_ADR),
		inl(cs-&gt;hw.njet.base + NETJET_DMA_READ_ADR),
		<A HREF="asuscom.c.shtml#bytein">bytein</A>(cs-&gt;hw.njet.base + NETJET_PULSE_CNT));
	<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	cs-&gt;hw.njet.last_is0 = 0;
	cs-&gt;bcs[0].BC_SetStack = setstack_tiger;
	cs-&gt;bcs[1].BC_SetStack = setstack_tiger;
	cs-&gt;bcs[0].BC_Close = close_tigerstate;
	cs-&gt;bcs[1].BC_Close = close_tigerstate;
}

<FONT COLOR="#298C52">void</FONT>
releasetiger(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;bcs[0].hw.tiger.send) {
		kfree(cs-&gt;bcs[0].hw.tiger.send);
		cs-&gt;bcs[0].hw.tiger.send = NULL;
	}
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;bcs[1].hw.tiger.send) {
		cs-&gt;bcs[1].hw.tiger.send = NULL;
	}
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;bcs[0].hw.tiger.rec) {
		kfree(cs-&gt;bcs[0].hw.tiger.rec);
		cs-&gt;bcs[0].hw.tiger.rec = NULL;
	}
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;bcs[1].hw.tiger.rec) {
		cs-&gt;bcs[1].hw.tiger.rec = NULL;
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
netjet_interrupt(<FONT COLOR="#298C52">int</FONT> intno, <FONT COLOR="#298C52">void</FONT> *dev_id, <FONT COLOR="#298C52">struct</FONT> pt_regs *regs)
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = dev_id;
	u_char val, sval;
	<FONT COLOR="#298C52">char</FONT> tmp[128];
	<FONT COLOR="#298C52">long</FONT> flags;

	<FONT COLOR="#298C52">if</FONT> (!cs) {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"NETjet: Spurious interrupt!\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT>;
	}
	<FONT COLOR="#298C52">if</FONT> (!((sval = <A HREF="asuscom.c.shtml#bytein">bytein</A>(cs-&gt;hw.njet.base + NETJET_IRQSTAT1)) &amp;
		NETJET_ISACIRQ)) {
		val = <A HREF="asuscom.c.shtml#ReadISAC">ReadISAC</A>(cs, <A HREF="isac.h.shtml#ISAC_ISTA">ISAC_ISTA</A>);
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_ISAC">L1_DEB_ISAC</A>) {
			sprintf(tmp, <FONT COLOR="#FF0000">"tiger: i1 %x %x"</FONT>, sval, val);
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
		}
		<FONT COLOR="#298C52">if</FONT> (val) {
			<A HREF="isac.c.shtml#isac_interrupt">isac_interrupt</A>(cs, val);
			<A HREF="asuscom.c.shtml#WriteISAC">WriteISAC</A>(cs, <A HREF="isac.h.shtml#ISAC_MASK">ISAC_MASK</A>, 0xFF);
			<A HREF="asuscom.c.shtml#WriteISAC">WriteISAC</A>(cs, <A HREF="isac.h.shtml#ISAC_MASK">ISAC_MASK</A>, 0x0);
		}
	}
	save_flags(flags);
	cli();
	<FONT COLOR="#298C52">if</FONT> ((sval = <A HREF="asuscom.c.shtml#bytein">bytein</A>(cs-&gt;hw.njet.base + NETJET_IRQSTAT0))) {
		<FONT COLOR="#298C52">if</FONT> (test_and_set_bit(<A HREF="hisax.h.shtml#FLG_LOCK_ATOMIC">FLG_LOCK_ATOMIC</A>, &amp;cs-&gt;HW_Flags)) {
			restore_flags(flags);
			<FONT COLOR="#298C52">return</FONT>;
		}
		cs-&gt;hw.njet.irqstat0 = sval;
		restore_flags(flags);
<FONT COLOR=#0000FF>/*		sprintf(tmp, "tiger: ist0 %x  %x %x  %x/%x  pulse=%d",
			sval, 
			bytein(cs-&gt;hw.njet.base + NETJET_DMACTRL),
			bytein(cs-&gt;hw.njet.base + NETJET_IRQMASK0),
			inl(cs-&gt;hw.njet.base + NETJET_DMA_READ_ADR),
			inl(cs-&gt;hw.njet.base + NETJET_DMA_WRITE_ADR),
			bytein(cs-&gt;hw.njet.base + NETJET_PULSE_CNT));
		debugl1(cs, tmp);
*/</FONT>
<FONT COLOR=#0000FF>/*		cs-&gt;hw.njet.irqmask0 = ((0x0f &amp; cs-&gt;hw.njet.irqstat0) ^ 0x0f) | 0x30;
*/</FONT>		<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.njet.base + NETJET_IRQSTAT0, cs-&gt;hw.njet.irqstat0);
<FONT COLOR=#0000FF>/*		byteout(cs-&gt;hw.njet.base + NETJET_IRQMASK0, cs-&gt;hw.njet.irqmask0);
*/</FONT>		<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.njet.irqstat0 &amp; NETJET_IRQM0_READ)
			read_tiger(cs);
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.njet.irqstat0 &amp; NETJET_IRQM0_WRITE)
			write_tiger(cs);
		test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_LOCK_ATOMIC">FLG_LOCK_ATOMIC</A>, &amp;cs-&gt;HW_Flags);
	} <FONT COLOR="#298C52">else</FONT>
		restore_flags(flags);

<FONT COLOR=#0000FF>/*	if (!testcnt--) {
		cs-&gt;hw.njet.dmactrl = 0;
		byteout(cs-&gt;hw.njet.base + NETJET_DMACTRL,
			cs-&gt;hw.njet.dmactrl);
		byteout(cs-&gt;hw.njet.base + NETJET_IRQMASK0, 0);
	}
*/</FONT>
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
reset_netjet(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">long</FONT> flags;

	save_flags(flags);
	sti();
	cs-&gt;hw.njet.ctrl_reg = 0xff;  <FONT COLOR=#0000FF>/* Reset On */</FONT>
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.njet.base + NETJET_CTRL, cs-&gt;hw.njet.ctrl_reg);
	current-&gt;state = TASK_INTERRUPTIBLE;
	current-&gt;timeout = jiffies + (10 * HZ) / 1000;	<FONT COLOR=#0000FF>/* Timeout 10ms */</FONT>
	schedule();
	cs-&gt;hw.njet.ctrl_reg = 0x00;  <FONT COLOR=#0000FF>/* Reset Off and status read clear */</FONT>
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.njet.base + NETJET_CTRL, cs-&gt;hw.njet.ctrl_reg);
	current-&gt;state = TASK_INTERRUPTIBLE;
	current-&gt;timeout = jiffies + (10 * HZ) / 1000;	<FONT COLOR=#0000FF>/* Timeout 10ms */</FONT>
	schedule();
	restore_flags(flags);
	cs-&gt;hw.njet.auxd = 0;
	cs-&gt;hw.njet.dmactrl = 0;
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.njet.base + NETJET_AUXCTRL, ~NETJET_ISACIRQ);
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.njet.base + NETJET_IRQMASK1, NETJET_ISACIRQ);
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.njet.auxa, cs-&gt;hw.njet.auxd);
}

<FONT COLOR="#298C52">void</FONT>
release_io_netjet(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.njet.base + NETJET_IRQMASK0, 0);
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.njet.base + NETJET_IRQMASK1, 0);
	releasetiger(cs);
	release_region(cs-&gt;hw.njet.base, 256);
}


<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
NETjet_card_msg(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> mt, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">switch</FONT> (mt) {
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_RESET">CARD_RESET</A>:
			reset_netjet(cs);
			<FONT COLOR="#298C52">return</FONT>(0);
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_RELEASE">CARD_RELEASE</A>:
			release_io_netjet(cs);
			<FONT COLOR="#298C52">return</FONT>(0);
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_SETIRQ">CARD_SETIRQ</A>:
			<FONT COLOR="#298C52">return</FONT>(request_irq(cs-&gt;irq, &amp;netjet_interrupt,
					<A HREF="hisax.h.shtml#I4L_IRQ_FLAG">I4L_IRQ_FLAG</A> | SA_SHIRQ, <FONT COLOR="#FF0000">"HiSax"</FONT>, cs));
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_INIT">CARD_INIT</A>:
			inittiger(cs);
			clear_pending_isac_ints(cs);
			initisac(cs);
			<FONT COLOR=#0000FF>/* Reenable all IRQ */</FONT>
			cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_MASK">ISAC_MASK</A>, 0);
			<FONT COLOR="#298C52">return</FONT>(0);
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_TEST">CARD_TEST</A>:
			<FONT COLOR="#298C52">return</FONT>(0);
	}
	<FONT COLOR="#298C52">return</FONT>(0);
}



<FONT COLOR="#298C52">static</FONT> 	<FONT COLOR="#298C52">struct</FONT> pci_dev *dev_netjet __initdata = NULL;

<A HREF="asuscom.c.shtml#__initfunc">__initfunc</A>(<FONT COLOR="#298C52">int</FONT>
setup_netjet(<FONT COLOR="#298C52">struct</FONT> IsdnCard *card))
{
	<FONT COLOR="#298C52">int</FONT> bytecnt;
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = card-&gt;cs;
	<FONT COLOR="#298C52">char</FONT> tmp[64];

	strcpy(tmp, NETjet_revision);
	printk(KERN_INFO <FONT COLOR="#FF0000">"HiSax: Traverse Tech. NETjet driver Rev. %s\n"</FONT>, HiSax_getrev(tmp));
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;typ != <A HREF="hisax.h.shtml#ISDN_CTYPE_NETJET">ISDN_CTYPE_NETJET</A>)
		<FONT COLOR="#298C52">return</FONT>(0);
	test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_LOCK_ATOMIC">FLG_LOCK_ATOMIC</A>, &amp;cs-&gt;HW_Flags);
<FONT COLOR=#A521F7>#if</FONT> CONFIG_PCI
	<FONT COLOR="#298C52">if</FONT> (!pci_present()) {
		printk(KERN_ERR <FONT COLOR="#FF0000">"Netjet: no PCI bus present\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT>(0);
	}
	<FONT COLOR="#298C52">if</FONT> ((dev_netjet = pci_find_device(PCI_VENDOR_TRAVERSE_TECH,
		PCI_NETJET_ID,  dev_netjet))) {
		cs-&gt;irq = dev_netjet-&gt;irq;
		<FONT COLOR="#298C52">if</FONT> (!cs-&gt;irq) {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"NETjet: No IRQ for PCI card found\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT>(0);
	}
		cs-&gt;hw.njet.base = dev_netjet-&gt;base_address[0] &amp;
			PCI_BASE_ADDRESS_IO_MASK; 
		<FONT COLOR="#298C52">if</FONT> (!cs-&gt;hw.njet.base) {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"NETjet: No IO-Adr for PCI card found\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT>(0);
	}
		cs-&gt;hw.njet.auxa = cs-&gt;hw.njet.base + NETJET_AUXDATA;
		cs-&gt;hw.njet.isac = cs-&gt;hw.njet.base | NETJET_ISAC_OFF;
	bytecnt = 256;
	} <FONT COLOR="#298C52">else</FONT> {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"NETjet: No PCI card found\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT>(0);
	}
<FONT COLOR=#A521F7>#else</FONT>
	printk(KERN_WARNING <FONT COLOR="#FF0000">"NETjet: NO_PCI_BIOS\n"</FONT>);
	printk(KERN_WARNING <FONT COLOR="#FF0000">"NETjet: unable to config NETJET PCI\n"</FONT>);
	<FONT COLOR="#298C52">return</FONT> (0);
<FONT COLOR=#A521F7>#endif</FONT> <FONT COLOR=#0000FF>/* CONFIG_PCI */</FONT>
	printk(KERN_INFO
		<FONT COLOR="#FF0000">"NETjet: PCI card configured at 0x%x IRQ %d\n"</FONT>,
		cs-&gt;hw.njet.base, cs-&gt;irq);
	<FONT COLOR="#298C52">if</FONT> (check_region(cs-&gt;hw.njet.base, bytecnt)) {
		printk(KERN_WARNING
		       <FONT COLOR="#FF0000">"HiSax: %s config port %x-%x already in use\n"</FONT>,
		       CardType[card-&gt;typ],
		       cs-&gt;hw.njet.base,
		       cs-&gt;hw.njet.base + bytecnt);
		<FONT COLOR="#298C52">return</FONT> (0);
	} <FONT COLOR="#298C52">else</FONT> {
		request_region(cs-&gt;hw.njet.base, bytecnt, <FONT COLOR="#FF0000">"netjet isdn"</FONT>);
	}
	reset_netjet(cs);
	cs-&gt;readisac  = &amp;<A HREF="asuscom.c.shtml#ReadISAC">ReadISAC</A>;
	cs-&gt;writeisac = &amp;<A HREF="asuscom.c.shtml#WriteISAC">WriteISAC</A>;
	cs-&gt;readisacfifo  = &amp;<A HREF="asuscom.c.shtml#ReadISACfifo">ReadISACfifo</A>;
	cs-&gt;writeisacfifo = &amp;<A HREF="asuscom.c.shtml#WriteISACfifo">WriteISACfifo</A>;
	cs-&gt;BC_Read_Reg  = &amp;dummyrr;
	cs-&gt;BC_Write_Reg = &amp;dummywr;
	cs-&gt;BC_Send_Data = &amp;fill_dma;
	cs-&gt;cardmsg = &amp;NETjet_card_msg;
	<A HREF="isac.c.shtml#ISACVersion">ISACVersion</A>(cs, <FONT COLOR="#FF0000">"NETjet:"</FONT>);
	<FONT COLOR="#298C52">return</FONT> (1);
}
</BODY>

</HTML>
