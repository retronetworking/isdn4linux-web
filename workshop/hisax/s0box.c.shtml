<HTML>

<!-- Generated by c2html-1.0, Copyright 1998 by Dave Whittington -->
<HEAD>
<TITLE>s0box.c</TITLE>
<!--#include virtual="/ssi/js.shtml" -->
<!--#include virtual="/ssi/buttondefs.shtml" -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<TABLE WIDTH="100%">
<TR>
<TD ALIGN=LEFT WIDTH="90"><!--#include virtual="/ssi/b_home.shtml" --></TD>
<TD ALIGN=RIGHT WIDTH="90"><!--#include virtual="/ssi/b_index.shtml" --></TD>
</TR>
</TABLE>
<CENTER><H1>s0box.c</H1></CENTER>

<HR>
<PRE>
<FONT COLOR=#0000FF>/* $Id$

 * s0box.c      low level stuff for Creatix S0BOX
 *
 * Author       S0BOX specific stuff: Enrik Berkhan (enrik@starfleet.inka.de)
 *
 *
 */</FONT>
<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#__NO_VERSION__">__NO_VERSION__</A>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hisax.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isac.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hscx.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isdnl1.h"</FONT>

<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *CardType[];
<FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *s0box_revision = <FONT COLOR="#FF0000">"$Revision$"</FONT>;

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#writereg">writereg</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> padr, <FONT COLOR="#298C52">signed</FONT> <FONT COLOR="#298C52">int</FONT> addr, u_char off, u_char val) {
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT> flags;

	save_flags(flags);
	cli();
	outb_p(0x1c,padr+2);
	outb_p(0x14,padr+2);
	outb_p((addr+off)&amp;0x7f,padr);
	outb_p(0x16,padr+2);
	outb_p(val,padr);
	outb_p(0x17,padr+2);
	outb_p(0x14,padr+2);
	outb_p(0x1c,padr+2);
	restore_flags(flags);
}

<FONT COLOR="#298C52">static</FONT> u_char nibtab[] = { 1, 9, 5, 0xd, 3, 0xb, 7, 0xf,
			 0, 0, 0, 0, 0, 0, 0, 0,
			 0, 8, 4, 0xc, 2, 0xa, 6, 0xe } ;

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> u_char
<A HREF="asuscom.c.shtml#readreg">readreg</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> padr, <FONT COLOR="#298C52">signed</FONT> <FONT COLOR="#298C52">int</FONT> addr, u_char off) {
	<FONT COLOR="#298C52">register</FONT> u_char n1, n2;
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT> flags;

	save_flags(flags);
	cli();
	outb_p(0x1c,padr+2);
	outb_p(0x14,padr+2);
	outb_p((addr+off)|0x80,padr);
	outb_p(0x16,padr+2);
	outb_p(0x17,padr+2);
	n1 = (inb_p(padr+1) &gt;&gt; 3) &amp; 0x17;
	outb_p(0x16,padr+2);
	n2 = (inb_p(padr+1) &gt;&gt; 3) &amp; 0x17;
	outb_p(0x14,padr+2);
	outb_p(0x1c,padr+2);
	restore_flags(flags);
	<FONT COLOR="#298C52">return</FONT> nibtab[n1] | (nibtab[n2] &lt;&lt; 4);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
read_fifo(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> padr, <FONT COLOR="#298C52">signed</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	<FONT COLOR="#298C52">int</FONT> i;
	<FONT COLOR="#298C52">register</FONT> u_char n1, n2;
	
	outb_p(0x1c, padr+2);
	outb_p(0x14, padr+2);
	outb_p(adr|0x80, padr);
	outb_p(0x16, padr+2);
	<FONT COLOR="#298C52">for</FONT> (i=0; i&lt;size; i++) {
		outb_p(0x17, padr+2);
		n1 = (inb_p(padr+1) &gt;&gt; 3) &amp; 0x17;
		outb_p(0x16,padr+2);
		n2 = (inb_p(padr+1) &gt;&gt; 3) &amp; 0x17;
		*(data++)=nibtab[n1] | (nibtab[n2] &lt;&lt; 4);
	}
	outb_p(0x14,padr+2);
	outb_p(0x1c,padr+2);
	<FONT COLOR="#298C52">return</FONT>;
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
write_fifo(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> padr, <FONT COLOR="#298C52">signed</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	<FONT COLOR="#298C52">int</FONT> i;
	outb_p(0x1c, padr+2);
	outb_p(0x14, padr+2);
	outb_p(adr&amp;0x7f, padr);
	<FONT COLOR="#298C52">for</FONT> (i=0; i&lt;size; i++) {
		outb_p(0x16, padr+2);
		outb_p(*(data++), padr);
		outb_p(0x17, padr+2);
	}
	outb_p(0x14,padr+2);
	outb_p(0x1c,padr+2);
	<FONT COLOR="#298C52">return</FONT>;
}

<FONT COLOR=#0000FF>/* Interface functions */</FONT>

<FONT COLOR="#298C52">static</FONT> u_char
<A HREF="asuscom.c.shtml#ReadISAC">ReadISAC</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char offset)
{
	<FONT COLOR="#298C52">return</FONT> (<A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.teles3.cfg_reg, cs-&gt;hw.teles3.isac, offset));
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#WriteISAC">WriteISAC</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char offset, u_char value)
{
	<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.teles3.cfg_reg, cs-&gt;hw.teles3.isac, offset, value);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#ReadISACfifo">ReadISACfifo</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	read_fifo(cs-&gt;hw.teles3.cfg_reg, cs-&gt;hw.teles3.isacfifo, data, size);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#WriteISACfifo">WriteISACfifo</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	write_fifo(cs-&gt;hw.teles3.cfg_reg, cs-&gt;hw.teles3.isacfifo, data, size);
}

<FONT COLOR="#298C52">static</FONT> u_char
<A HREF="asuscom.c.shtml#ReadHSCX">ReadHSCX</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> hscx, u_char offset)
{
	<FONT COLOR="#298C52">return</FONT> (<A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.teles3.cfg_reg, cs-&gt;hw.teles3.hscx[hscx], offset));
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#WriteHSCX">WriteHSCX</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> hscx, u_char offset, u_char value)
{
	<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.teles3.cfg_reg, cs-&gt;hw.teles3.hscx[hscx], offset, value);
}

<FONT COLOR=#0000FF>/*
 * fast interrupt HSCX stuff goes here
 */</FONT>

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#READHSCX">READHSCX</A>(cs, nr, reg) <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.teles3.cfg_reg, cs-&gt;hw.teles3.hscx[nr], reg)
<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#WRITEHSCX">WRITEHSCX</A>(cs, nr, reg, data) <A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.teles3.cfg_reg, cs-&gt;hw.teles3.hscx[nr], reg, data)
<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#READHSCXFIFO">READHSCXFIFO</A>(cs, nr, ptr, cnt) read_fifo(cs-&gt;hw.teles3.cfg_reg, cs-&gt;hw.teles3.hscxfifo[nr], ptr, cnt)
<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#WRITEHSCXFIFO">WRITEHSCXFIFO</A>(cs, nr, ptr, cnt) write_fifo(cs-&gt;hw.teles3.cfg_reg, cs-&gt;hw.teles3.hscxfifo[nr], ptr, cnt)

<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hscx_irq.c"</FONT>

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
s0box_interrupt(<FONT COLOR="#298C52">int</FONT> intno, <FONT COLOR="#298C52">void</FONT> *dev_id, <FONT COLOR="#298C52">struct</FONT> pt_regs *regs)
{
<FONT COLOR=#A521F7>#define</FONT> MAXCOUNT 20
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = dev_id;
	u_char val, stat = 0;
	<FONT COLOR="#298C52">int</FONT> count = 0;

	<FONT COLOR="#298C52">if</FONT> (!cs) {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"Teles: Spurious interrupt!\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT>;
	}
	val = <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.teles3.cfg_reg, cs-&gt;hw.teles3.hscx[1], <A HREF="hscx.h.shtml#HSCX_ISTA">HSCX_ISTA</A>);
      Start_HSCX:
	<FONT COLOR="#298C52">if</FONT> (val) {
		<A HREF="hscx_irq.c.shtml#hscx_int_main">hscx_int_main</A>(cs, val);
		stat |= 1;
	}
	val = <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.teles3.cfg_reg, cs-&gt;hw.teles3.isac, <A HREF="isac.h.shtml#ISAC_ISTA">ISAC_ISTA</A>);
      Start_ISAC:
	<FONT COLOR="#298C52">if</FONT> (val) {
		<A HREF="isac.c.shtml#isac_interrupt">isac_interrupt</A>(cs, val);
		stat |= 2;
	}
	count++;
	val = <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.teles3.cfg_reg, cs-&gt;hw.teles3.hscx[1], <A HREF="hscx.h.shtml#HSCX_ISTA">HSCX_ISTA</A>);
	<FONT COLOR="#298C52">if</FONT> (val &amp;&amp; count &lt; MAXCOUNT) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>)
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"HSCX IntStat after IntRoutine"</FONT>);
		<FONT COLOR="#298C52">goto</FONT> Start_HSCX;
	}
	val = <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.teles3.cfg_reg, cs-&gt;hw.teles3.isac, <A HREF="isac.h.shtml#ISAC_ISTA">ISAC_ISTA</A>);
	<FONT COLOR="#298C52">if</FONT> (val &amp;&amp; count &lt; MAXCOUNT) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_ISAC">L1_DEB_ISAC</A>)
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"ISAC IntStat after IntRoutine"</FONT>);
		<FONT COLOR="#298C52">goto</FONT> Start_ISAC;
	}
	<FONT COLOR="#298C52">if</FONT> (count &gt;= MAXCOUNT)
		printk(KERN_WARNING <FONT COLOR="#FF0000">"S0Box: more than %d loops in s0box_interrupt\n"</FONT>, count);
	<FONT COLOR="#298C52">if</FONT> (stat &amp; 1) {
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.teles3.cfg_reg, cs-&gt;hw.teles3.hscx[0], <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A>, 0xFF);
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.teles3.cfg_reg, cs-&gt;hw.teles3.hscx[1], <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A>, 0xFF);
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.teles3.cfg_reg, cs-&gt;hw.teles3.hscx[0], <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A>, 0x0);
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.teles3.cfg_reg, cs-&gt;hw.teles3.hscx[1], <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A>, 0x0);
	}
	<FONT COLOR="#298C52">if</FONT> (stat &amp; 2) {
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.teles3.cfg_reg, cs-&gt;hw.teles3.isac, <A HREF="isac.h.shtml#ISAC_MASK">ISAC_MASK</A>, 0xFF);
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.teles3.cfg_reg, cs-&gt;hw.teles3.isac, <A HREF="isac.h.shtml#ISAC_MASK">ISAC_MASK</A>, 0x0);
	}
}

<FONT COLOR="#298C52">void</FONT>
release_io_s0box(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	release_region(cs-&gt;hw.teles3.cfg_reg, 8);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
S0Box_card_msg(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> mt, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">switch</FONT> (mt) {
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_RESET">CARD_RESET</A>:
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_RELEASE">CARD_RELEASE</A>:
			release_io_s0box(cs);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_SETIRQ">CARD_SETIRQ</A>:
			<FONT COLOR="#298C52">return</FONT>(request_irq(cs-&gt;irq, &amp;s0box_interrupt,
					<A HREF="hisax.h.shtml#I4L_IRQ_FLAG">I4L_IRQ_FLAG</A>, <FONT COLOR="#FF0000">"HiSax"</FONT>, cs));
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_INIT">CARD_INIT</A>:
			inithscxisac(cs, 3);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_TEST">CARD_TEST</A>:
			<FONT COLOR="#298C52">break</FONT>;
	}
	<FONT COLOR="#298C52">return</FONT>(0);
}

<A HREF="asuscom.c.shtml#__initfunc">__initfunc</A>(<FONT COLOR="#298C52">int</FONT>
setup_s0box(<FONT COLOR="#298C52">struct</FONT> IsdnCard *card))
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = card-&gt;cs;
	<FONT COLOR="#298C52">char</FONT> tmp[64];

	strcpy(tmp, s0box_revision);
	printk(KERN_INFO <FONT COLOR="#FF0000">"HiSax: S0Box IO driver Rev. %s\n"</FONT>, HiSax_getrev(tmp));
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;typ != <A HREF="hisax.h.shtml#ISDN_CTYPE_S0BOX">ISDN_CTYPE_S0BOX</A>)
		<FONT COLOR="#298C52">return</FONT> (0);

	cs-&gt;hw.teles3.cfg_reg = card-&gt;para[1];
	cs-&gt;hw.teles3.hscx[0] = -0x20;
	cs-&gt;hw.teles3.hscx[1] = 0x0;
	cs-&gt;hw.teles3.isac = 0x20;
	cs-&gt;hw.teles3.isacfifo = cs-&gt;hw.teles3.isac + 0x3e;
	cs-&gt;hw.teles3.hscxfifo[0] = cs-&gt;hw.teles3.hscx[0] + 0x3e;
	cs-&gt;hw.teles3.hscxfifo[1] = cs-&gt;hw.teles3.hscx[1] + 0x3e;
	cs-&gt;irq = card-&gt;para[0];
	<FONT COLOR="#298C52">if</FONT> (check_region(cs-&gt;hw.teles3.cfg_reg,8)) {
		printk(KERN_WARNING
		       <FONT COLOR="#FF0000">"HiSax: %s ports %x-%x already in use\n"</FONT>,
		       CardType[cs-&gt;typ],
                       cs-&gt;hw.teles3.cfg_reg,
                       cs-&gt;hw.teles3.cfg_reg + 7);
		<FONT COLOR="#298C52">return</FONT> 0;
	} <FONT COLOR="#298C52">else</FONT>
		request_region(cs-&gt;hw.teles3.cfg_reg, 8, <FONT COLOR="#FF0000">"S0Box parallel I/O"</FONT>);
	printk(KERN_INFO
	       <FONT COLOR="#FF0000">"HiSax: %s config irq:%d isac:0x%x  cfg:0x%x\n"</FONT>,
	       CardType[cs-&gt;typ], cs-&gt;irq,
	       cs-&gt;hw.teles3.isac, cs-&gt;hw.teles3.cfg_reg);
	printk(KERN_INFO
	       <FONT COLOR="#FF0000">"HiSax: hscx A:0x%x  hscx B:0x%x\n"</FONT>,
	       cs-&gt;hw.teles3.hscx[0], cs-&gt;hw.teles3.hscx[1]);
	cs-&gt;readisac = &amp;<A HREF="asuscom.c.shtml#ReadISAC">ReadISAC</A>;
	cs-&gt;writeisac = &amp;<A HREF="asuscom.c.shtml#WriteISAC">WriteISAC</A>;
	cs-&gt;readisacfifo = &amp;<A HREF="asuscom.c.shtml#ReadISACfifo">ReadISACfifo</A>;
	cs-&gt;writeisacfifo = &amp;<A HREF="asuscom.c.shtml#WriteISACfifo">WriteISACfifo</A>;
	cs-&gt;BC_Read_Reg = &amp;<A HREF="asuscom.c.shtml#ReadHSCX">ReadHSCX</A>;
	cs-&gt;BC_Write_Reg = &amp;<A HREF="asuscom.c.shtml#WriteHSCX">WriteHSCX</A>;
	cs-&gt;BC_Send_Data = &amp;<A HREF="hscx_irq.c.shtml#hscx_fill_fifo">hscx_fill_fifo</A>;
	cs-&gt;cardmsg = &amp;S0Box_card_msg;
	<A HREF="isac.c.shtml#ISACVersion">ISACVersion</A>(cs, <FONT COLOR="#FF0000">"S0Box:"</FONT>);
	<FONT COLOR="#298C52">if</FONT> (HscxVersion(cs, <FONT COLOR="#FF0000">"S0Box:"</FONT>)) {
		printk(KERN_WARNING
		       <FONT COLOR="#FF0000">"S0Box: wrong HSCX versions check IO address\n"</FONT>);
		release_io_s0box(cs);
		<FONT COLOR="#298C52">return</FONT> (0);
	}
	<FONT COLOR="#298C52">return</FONT> (1);
}
</BODY>

</HTML>
