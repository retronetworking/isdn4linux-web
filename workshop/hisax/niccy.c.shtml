<HTML>

<!-- Generated by c2html-1.0, Copyright 1998 by Dave Whittington -->
<HEAD>
<TITLE>niccy.c</TITLE>
<!--#include virtual="/ssi/js.shtml" -->
<!--#include virtual="/ssi/buttondefs.shtml" -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<TABLE WIDTH="100%">
<TR>
<TD ALIGN=LEFT WIDTH="90"><!--#include virtual="/ssi/b_home.shtml" --></TD>
<TD ALIGN=RIGHT WIDTH="90"><!--#include virtual="/ssi/b_index.shtml" --></TD>
</TR>
</TABLE>
<CENTER><H1>niccy.c</H1></CENTER>

<HR>
<PRE>
<FONT COLOR=#0000FF>/* $Id$

 * niccy.c  low level stuff for Dr. Neuhaus NICCY PnP and NICCY PCI and
 *          compatible (SAGEM cybermodem)
 *
 * Author   Karsten Keil
 * 
 * Thanks to Dr. Neuhaus and SAGEM for informations
 *
 * $Log$
 * Revision 1.4  1998/04/16 19:16:48  keil
 * need config.h
 *
 * Revision 1.3  1998/04/15 16:42:59  keil
 * new init code
 *
 * Revision 1.2  1998/02/11 17:31:04  keil
 * new file
 *
 */</FONT>


<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#__NO_VERSION__">__NO_VERSION__</A>
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/config.h&gt;
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hisax.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isac.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hscx.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isdnl1.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/pci.h&gt;

<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *CardType[];
<FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *niccy_revision = <FONT COLOR="#FF0000">"$Revision$"</FONT>;

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#byteout">byteout</A>(addr,val) outb(val,addr)
<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#bytein">bytein</A>(addr) inb(addr)

<FONT COLOR=#A521F7>#define</FONT> ISAC_PCI_DATA	0
<FONT COLOR=#A521F7>#define</FONT> HSCX_PCI_DATA	1
<FONT COLOR=#A521F7>#define</FONT> ISAC_PCI_ADDR	2
<FONT COLOR=#A521F7>#define</FONT> HSCX_PCI_ADDR	3
<FONT COLOR=#A521F7>#define</FONT> ISAC_PNP	0
<FONT COLOR=#A521F7>#define</FONT> HSCX_PNP	1

<FONT COLOR=#0000FF>/* SUB Types */</FONT>
<FONT COLOR=#A521F7>#define</FONT> NICCY_PNP	1
<FONT COLOR=#A521F7>#define</FONT> NICCY_PCI	2

<FONT COLOR=#0000FF>/* PCI stuff */</FONT>
<FONT COLOR=#A521F7>#define</FONT> PCI_VENDOR_DR_NEUHAUS	0x1267
<FONT COLOR=#A521F7>#define</FONT> PCI_NICCY_ID		0x1016
<FONT COLOR=#A521F7>#define</FONT> PCI_IRQ_CTRL_REG	0x38
<FONT COLOR=#A521F7>#define</FONT> PCI_IRQ_ENABLE		0x1f00
<FONT COLOR=#A521F7>#define</FONT> PCI_IRQ_DISABLE		0xff0000
<FONT COLOR=#A521F7>#define</FONT> PCI_IRQ_ASSERT		0x800000

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> u_char
<A HREF="asuscom.c.shtml#readreg">readreg</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> ale, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char off)
{
	<FONT COLOR="#298C52">register</FONT> u_char ret;
	<FONT COLOR="#298C52">long</FONT> flags;

	save_flags(flags);
	cli();
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(ale, off);
	ret = <A HREF="asuscom.c.shtml#bytein">bytein</A>(adr);
	restore_flags(flags);
	<FONT COLOR="#298C52">return</FONT> (ret);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#readfifo">readfifo</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> ale, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char off, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	<FONT COLOR=#0000FF>/* fifo read without cli because it's allready done  */</FONT>

	<A HREF="asuscom.c.shtml#byteout">byteout</A>(ale, off);
	insb(adr, data, size);
}


<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#writereg">writereg</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> ale, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char off, u_char data)
{
	<FONT COLOR="#298C52">long</FONT> flags;

	save_flags(flags);
	cli();
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(ale, off);
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(adr, data);
	restore_flags(flags);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#writefifo">writefifo</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> ale, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char off, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	<FONT COLOR=#0000FF>/* fifo write without cli because it's allready done  */</FONT>
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(ale, off);
	outsb(adr, data, size);
}

<FONT COLOR=#0000FF>/* Interface functions */</FONT>

<FONT COLOR="#298C52">static</FONT> u_char
<A HREF="asuscom.c.shtml#ReadISAC">ReadISAC</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char offset)
{
	<FONT COLOR="#298C52">return</FONT> (<A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.niccy.isac_ale, cs-&gt;hw.niccy.isac, offset));
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#WriteISAC">WriteISAC</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char offset, u_char value)
{
	<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.niccy.isac_ale, cs-&gt;hw.niccy.isac, offset, value);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#ReadISACfifo">ReadISACfifo</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	<A HREF="asuscom.c.shtml#readfifo">readfifo</A>(cs-&gt;hw.niccy.isac_ale, cs-&gt;hw.niccy.isac, 0, data, size);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#WriteISACfifo">WriteISACfifo</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	<A HREF="asuscom.c.shtml#writefifo">writefifo</A>(cs-&gt;hw.niccy.isac_ale, cs-&gt;hw.niccy.isac, 0, data, size);
}

<FONT COLOR="#298C52">static</FONT> u_char
<A HREF="asuscom.c.shtml#ReadHSCX">ReadHSCX</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> hscx, u_char offset)
{
	<FONT COLOR="#298C52">return</FONT> (<A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.niccy.hscx_ale,
			cs-&gt;hw.niccy.hscx, offset + (hscx ? 0x40 : 0)));
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#WriteHSCX">WriteHSCX</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> hscx, u_char offset, u_char value)
{
	<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.niccy.hscx_ale,
		 cs-&gt;hw.niccy.hscx, offset + (hscx ? 0x40 : 0), value);
}

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#READHSCX">READHSCX</A>(cs, nr, reg) <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.niccy.hscx_ale, \
		cs-&gt;hw.niccy.hscx, reg + (nr ? 0x40 : 0))
<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#WRITEHSCX">WRITEHSCX</A>(cs, nr, reg, data) <A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.niccy.hscx_ale, \
		cs-&gt;hw.niccy.hscx, reg + (nr ? 0x40 : 0), data)

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#READHSCXFIFO">READHSCXFIFO</A>(cs, nr, ptr, cnt) <A HREF="asuscom.c.shtml#readfifo">readfifo</A>(cs-&gt;hw.niccy.hscx_ale, \
		cs-&gt;hw.niccy.hscx, (nr ? 0x40 : 0), ptr, cnt)

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#WRITEHSCXFIFO">WRITEHSCXFIFO</A>(cs, nr, ptr, cnt) <A HREF="asuscom.c.shtml#writefifo">writefifo</A>(cs-&gt;hw.niccy.hscx_ale, \
		cs-&gt;hw.niccy.hscx, (nr ? 0x40 : 0), ptr, cnt)

<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hscx_irq.c"</FONT>

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
niccy_interrupt(<FONT COLOR="#298C52">int</FONT> intno, <FONT COLOR="#298C52">void</FONT> *dev_id, <FONT COLOR="#298C52">struct</FONT> pt_regs *regs)
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = dev_id;
	u_char val, stat = 0;

	<FONT COLOR="#298C52">if</FONT> (!cs) {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"Niccy: Spurious interrupt!\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT>;
	}
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;subtyp == NICCY_PCI) {
		<FONT COLOR="#298C52">int</FONT> ival;
		ival = inl(cs-&gt;hw.niccy.cfg_reg + PCI_IRQ_CTRL_REG);
		<FONT COLOR="#298C52">if</FONT> (!(ival &amp; PCI_IRQ_ASSERT)) <FONT COLOR=#0000FF>/* IRQ not for us (shared) */</FONT>
			<FONT COLOR="#298C52">return</FONT>;
		outl(ival, cs-&gt;hw.niccy.cfg_reg + PCI_IRQ_CTRL_REG);
	}
	val = <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.niccy.hscx_ale, cs-&gt;hw.niccy.hscx, <A HREF="hscx.h.shtml#HSCX_ISTA">HSCX_ISTA</A> + 0x40);
      Start_HSCX:
	<FONT COLOR="#298C52">if</FONT> (val) {
		<A HREF="hscx_irq.c.shtml#hscx_int_main">hscx_int_main</A>(cs, val);
		stat |= 1;
	}
	val = <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.niccy.isac_ale, cs-&gt;hw.niccy.isac, <A HREF="isac.h.shtml#ISAC_ISTA">ISAC_ISTA</A>);
      Start_ISAC:
	<FONT COLOR="#298C52">if</FONT> (val) {
		<A HREF="isac.c.shtml#isac_interrupt">isac_interrupt</A>(cs, val);
		stat |= 2;
	}
	val = <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.niccy.hscx_ale, cs-&gt;hw.niccy.hscx, <A HREF="hscx.h.shtml#HSCX_ISTA">HSCX_ISTA</A> + 0x40);
	<FONT COLOR="#298C52">if</FONT> (val) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>)
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"HSCX IntStat after IntRoutine"</FONT>);
		<FONT COLOR="#298C52">goto</FONT> Start_HSCX;
	}
	val = <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.niccy.isac_ale, cs-&gt;hw.niccy.isac, <A HREF="isac.h.shtml#ISAC_ISTA">ISAC_ISTA</A>);
	<FONT COLOR="#298C52">if</FONT> (val) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_ISAC">L1_DEB_ISAC</A>)
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"ISAC IntStat after IntRoutine"</FONT>);
		<FONT COLOR="#298C52">goto</FONT> Start_ISAC;
	}
	<FONT COLOR="#298C52">if</FONT> (stat &amp; 1) {
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.niccy.hscx_ale, cs-&gt;hw.niccy.hscx, <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A>, 0xFF);
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.niccy.hscx_ale, cs-&gt;hw.niccy.hscx, <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A> + 0x40, 0xFF);
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.niccy.hscx_ale, cs-&gt;hw.niccy.hscx, <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A>, 0);
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.niccy.hscx_ale, cs-&gt;hw.niccy.hscx, <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A> + 0x40, 0);
	}
	<FONT COLOR="#298C52">if</FONT> (stat &amp; 2) {
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.niccy.isac_ale, cs-&gt;hw.niccy.isac, <A HREF="isac.h.shtml#ISAC_MASK">ISAC_MASK</A>, 0xFF);
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.niccy.isac_ale, cs-&gt;hw.niccy.isac, <A HREF="isac.h.shtml#ISAC_MASK">ISAC_MASK</A>, 0);
	}
}

<FONT COLOR="#298C52">void</FONT>
release_io_niccy(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;subtyp == NICCY_PCI) {
		<FONT COLOR="#298C52">int</FONT> val;
		
		val = inl(cs-&gt;hw.niccy.cfg_reg + PCI_IRQ_CTRL_REG);
		val &amp;= PCI_IRQ_DISABLE;
		outl(val, cs-&gt;hw.niccy.cfg_reg + PCI_IRQ_CTRL_REG);
		release_region(cs-&gt;hw.niccy.cfg_reg, 0x80);
		release_region(cs-&gt;hw.niccy.isac, 4);
	} <FONT COLOR="#298C52">else</FONT> {
		release_region(cs-&gt;hw.niccy.isac, 2);
		release_region(cs-&gt;hw.niccy.isac_ale, 2);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
niccy_reset(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">int</FONT> val, nval;
	
	val = inl(cs-&gt;hw.niccy.cfg_reg + PCI_IRQ_CTRL_REG);
	nval = val | PCI_IRQ_ENABLE;
	outl(nval, cs-&gt;hw.niccy.cfg_reg + PCI_IRQ_CTRL_REG);

	inithscxisac(cs, 3);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
niccy_card_msg(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> mt, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">int</FONT> imode;
	
	<FONT COLOR="#298C52">switch</FONT> (mt) {
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_RESET">CARD_RESET</A>:
			niccy_reset(cs);
			<FONT COLOR="#298C52">return</FONT>(0);
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_RELEASE">CARD_RELEASE</A>:
			release_io_niccy(cs);
			<FONT COLOR="#298C52">return</FONT>(0);
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_SETIRQ">CARD_SETIRQ</A>:
			<FONT COLOR="#298C52">if</FONT> (cs-&gt;subtyp == NICCY_PCI)
				imode = <A HREF="hisax.h.shtml#I4L_IRQ_FLAG">I4L_IRQ_FLAG</A> | SA_SHIRQ;
			<FONT COLOR="#298C52">else</FONT>
				imode = <A HREF="hisax.h.shtml#I4L_IRQ_FLAG">I4L_IRQ_FLAG</A>;
			<FONT COLOR="#298C52">return</FONT>(request_irq(cs-&gt;irq, &amp;niccy_interrupt,
				imode, <FONT COLOR="#FF0000">"HiSax"</FONT>, cs));
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_INIT">CARD_INIT</A>:
			niccy_reset(cs);
			<FONT COLOR="#298C52">return</FONT>(0);
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_TEST">CARD_TEST</A>:
			<FONT COLOR="#298C52">return</FONT>(0);
	}
	<FONT COLOR="#298C52">return</FONT>(0);
}

<FONT COLOR="#298C52">static</FONT> 	<FONT COLOR="#298C52">struct</FONT> pci_dev *niccy_dev __initdata = NULL;

<A HREF="asuscom.c.shtml#__initfunc">__initfunc</A>(<FONT COLOR="#298C52">int</FONT>
setup_niccy(<FONT COLOR="#298C52">struct</FONT> IsdnCard *card))
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = card-&gt;cs;
	<FONT COLOR="#298C52">char</FONT> tmp[64];

	strcpy(tmp, niccy_revision);
	printk(KERN_INFO <FONT COLOR="#FF0000">"HiSax: Niccy driver Rev. %s\n"</FONT>, HiSax_getrev(tmp));
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;typ != <A HREF="hisax.h.shtml#ISDN_CTYPE_NICCY">ISDN_CTYPE_NICCY</A>)
		<FONT COLOR="#298C52">return</FONT> (0);

	<FONT COLOR="#298C52">if</FONT> (card-&gt;para[1]) {
		cs-&gt;hw.niccy.isac = card-&gt;para[1] + ISAC_PNP;
		cs-&gt;hw.niccy.hscx = card-&gt;para[1] + HSCX_PNP;
		cs-&gt;hw.niccy.isac_ale = card-&gt;para[2] + ISAC_PNP;
		cs-&gt;hw.niccy.hscx_ale = card-&gt;para[2] + HSCX_PNP;
		cs-&gt;hw.niccy.cfg_reg = 0;
		cs-&gt;subtyp = NICCY_PNP;
		cs-&gt;irq = card-&gt;para[0];
		<FONT COLOR="#298C52">if</FONT> (check_region((cs-&gt;hw.niccy.isac), 2)) {
			printk(KERN_WARNING
				<FONT COLOR="#FF0000">"HiSax: %s data port %x-%x already in use\n"</FONT>,
				CardType[card-&gt;typ],
				cs-&gt;hw.niccy.isac,
				cs-&gt;hw.niccy.isac + 1);
			<FONT COLOR="#298C52">return</FONT> (0);
		} <FONT COLOR="#298C52">else</FONT>
			request_region(cs-&gt;hw.niccy.isac, 2, <FONT COLOR="#FF0000">"niccy data"</FONT>);
		<FONT COLOR="#298C52">if</FONT> (check_region((cs-&gt;hw.niccy.isac_ale), 2)) {
			printk(KERN_WARNING
				<FONT COLOR="#FF0000">"HiSax: %s address port %x-%x already in use\n"</FONT>,
				CardType[card-&gt;typ],
				cs-&gt;hw.niccy.isac_ale,
				cs-&gt;hw.niccy.isac_ale + 1);
			release_region(cs-&gt;hw.niccy.isac, 2);
			<FONT COLOR="#298C52">return</FONT> (0);
		} <FONT COLOR="#298C52">else</FONT>
			request_region(cs-&gt;hw.niccy.isac_ale, 2, <FONT COLOR="#FF0000">"niccy addr"</FONT>);
	} <FONT COLOR="#298C52">else</FONT> {
<FONT COLOR=#A521F7>#if</FONT> CONFIG_PCI
		u_int pci_ioaddr;

		<FONT COLOR="#298C52">if</FONT> (!pci_present()) {
			printk(KERN_ERR <FONT COLOR="#FF0000">"Niccy: no PCI bus present\n"</FONT>);
			<FONT COLOR="#298C52">return</FONT>(0);
		}

		cs-&gt;subtyp = 0;
		<FONT COLOR="#298C52">if</FONT> ((niccy_dev = pci_find_device(PCI_VENDOR_DR_NEUHAUS,
			   PCI_NICCY_ID, niccy_dev))) {
			<FONT COLOR=#0000FF>/* get IRQ */</FONT>
			<FONT COLOR="#298C52">if</FONT> (!niccy_dev-&gt;irq) {
				printk(KERN_WARNING <FONT COLOR="#FF0000">"Niccy: No IRQ for PCI card found\n"</FONT>);
			<FONT COLOR="#298C52">return</FONT>(0);
		}
			cs-&gt;irq = niccy_dev-&gt;irq;
			<FONT COLOR="#298C52">if</FONT> (!niccy_dev-&gt;base_address[0]) {
				printk(KERN_WARNING <FONT COLOR="#FF0000">"Niccy: No IO-Adr for PCI cfg found\n"</FONT>);
			<FONT COLOR="#298C52">return</FONT>(0);
		}
			cs-&gt;hw.niccy.cfg_reg = niccy_dev-&gt;base_address[0] &amp; PCI_BASE_ADDRESS_IO_MASK;
			<FONT COLOR="#298C52">if</FONT> (!niccy_dev-&gt;base_address[1]) {
			printk(KERN_WARNING <FONT COLOR="#FF0000">"Niccy: No IO-Adr for PCI card found\n"</FONT>);
			<FONT COLOR="#298C52">return</FONT>(0);
		}
			pci_ioaddr = niccy_dev-&gt;base_address[1] &amp; PCI_BASE_ADDRESS_IO_MASK;
		cs-&gt;hw.niccy.isac = pci_ioaddr + ISAC_PCI_DATA;
		cs-&gt;hw.niccy.isac_ale = pci_ioaddr + ISAC_PCI_ADDR;
		cs-&gt;hw.niccy.hscx = pci_ioaddr + HSCX_PCI_DATA;
		cs-&gt;hw.niccy.hscx_ale = pci_ioaddr + HSCX_PCI_ADDR;
			cs-&gt;subtyp = NICCY_PCI;
		} <FONT COLOR="#298C52">else</FONT> {
			printk(KERN_WARNING <FONT COLOR="#FF0000">"Niccy: No PCI card found\n"</FONT>);
			<FONT COLOR="#298C52">return</FONT>(0);
		}
		<FONT COLOR="#298C52">if</FONT> (check_region((cs-&gt;hw.niccy.isac), 4)) {
			printk(KERN_WARNING
				<FONT COLOR="#FF0000">"HiSax: %s data port %x-%x already in use\n"</FONT>,
				CardType[card-&gt;typ],
				cs-&gt;hw.niccy.isac,
				cs-&gt;hw.niccy.isac + 4);
			<FONT COLOR="#298C52">return</FONT> (0);
		} <FONT COLOR="#298C52">else</FONT>
			request_region(cs-&gt;hw.niccy.isac, 4, <FONT COLOR="#FF0000">"niccy"</FONT>);
		<FONT COLOR="#298C52">if</FONT> (check_region(cs-&gt;hw.niccy.cfg_reg, 0x80)) {
			printk(KERN_WARNING
			       <FONT COLOR="#FF0000">"HiSax: %s pci port %x-%x already in use\n"</FONT>,
				CardType[card-&gt;typ],
				cs-&gt;hw.niccy.cfg_reg,
				cs-&gt;hw.niccy.cfg_reg + 0x80);
			release_region(cs-&gt;hw.niccy.isac, 4);
			<FONT COLOR="#298C52">return</FONT> (0);
		} <FONT COLOR="#298C52">else</FONT> {
			request_region(cs-&gt;hw.niccy.cfg_reg, 0x80, <FONT COLOR="#FF0000">"niccy pci"</FONT>);
		}
<FONT COLOR=#A521F7>#else</FONT>
		printk(KERN_WARNING <FONT COLOR="#FF0000">"Niccy: io0 0 and NO_PCI_BIOS\n"</FONT>);
		printk(KERN_WARNING <FONT COLOR="#FF0000">"Niccy: unable to config NICCY PCI\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT> (0);
<FONT COLOR=#A521F7>#endif</FONT> <FONT COLOR=#0000FF>/* CONFIG_PCI */</FONT>
	}
	printk(KERN_INFO
		<FONT COLOR="#FF0000">"HiSax: %s %s config irq:%d data:0x%X ale:0x%X\n"</FONT>,
		CardType[cs-&gt;typ], (cs-&gt;subtyp==1) ? <FONT COLOR="#FF0000">"PnP"</FONT>:<FONT COLOR="#FF0000">"PCI"</FONT>,
		cs-&gt;irq, cs-&gt;hw.niccy.isac, cs-&gt;hw.niccy.isac_ale);
	cs-&gt;readisac = &amp;<A HREF="asuscom.c.shtml#ReadISAC">ReadISAC</A>;
	cs-&gt;writeisac = &amp;<A HREF="asuscom.c.shtml#WriteISAC">WriteISAC</A>;
	cs-&gt;readisacfifo = &amp;<A HREF="asuscom.c.shtml#ReadISACfifo">ReadISACfifo</A>;
	cs-&gt;writeisacfifo = &amp;<A HREF="asuscom.c.shtml#WriteISACfifo">WriteISACfifo</A>;
	cs-&gt;BC_Read_Reg = &amp;<A HREF="asuscom.c.shtml#ReadHSCX">ReadHSCX</A>;
	cs-&gt;BC_Write_Reg = &amp;<A HREF="asuscom.c.shtml#WriteHSCX">WriteHSCX</A>;
	cs-&gt;BC_Send_Data = &amp;<A HREF="hscx_irq.c.shtml#hscx_fill_fifo">hscx_fill_fifo</A>;
	cs-&gt;cardmsg = &amp;niccy_card_msg;
	<A HREF="isac.c.shtml#ISACVersion">ISACVersion</A>(cs, <FONT COLOR="#FF0000">"Niccy:"</FONT>);
	<FONT COLOR="#298C52">if</FONT> (HscxVersion(cs, <FONT COLOR="#FF0000">"Niccy:"</FONT>)) {
		printk(KERN_WARNING
		    <FONT COLOR="#FF0000">"Niccy: wrong HSCX versions check IO address\n"</FONT>);
		release_io_niccy(cs);
		<FONT COLOR="#298C52">return</FONT> (0);
	}
	<FONT COLOR="#298C52">return</FONT> (1);
}
</BODY>

</HTML>
