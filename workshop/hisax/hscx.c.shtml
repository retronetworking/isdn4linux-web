<HTML>

<!-- Generated by c2html-1.0, Copyright 1998 by Dave Whittington -->
<HEAD>
<TITLE>hscx.c</TITLE>
<!--#include virtual="/ssi/js.shtml" -->
<!--#include virtual="/ssi/buttondefs.shtml" -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<TABLE WIDTH="100%">
<TR>
<TD ALIGN=LEFT WIDTH="90"><!--#include virtual="/ssi/b_home.shtml" --></TD>
<TD ALIGN=RIGHT WIDTH="90"><!--#include virtual="/ssi/b_index.shtml" --></TD>
</TR>
</TABLE>
<CENTER><H1>hscx.c</H1></CENTER>

<HR>
<PRE>
<FONT COLOR=#0000FF>/* $Id$

 * hscx.c   HSCX specific routines
 *
 * Author       Karsten Keil (keil@temic-ech.spacenet.de)
 *
 *
 * $Log$
 * Revision 1.11  1998/05/25 14:10:07  keil
 * HiSax 3.0
 * X.75 and leased are working again.
 *
 * Revision 1.10  1998/05/25 12:57:59  keil
 * HiSax golden code from certification, Don't use !!!
 * No leased lines, no X75, but many changes.
 *
 * Revision 1.9  1998/04/15 16:45:33  keil
 * new init code
 *
 * Revision 1.8  1998/03/19 13:16:24  keil
 * fix the correct release of the hscx
 *
 * Revision 1.7  1998/02/12 23:07:36  keil
 * change for 2.1.86 (removing FREE_READ/FREE_WRITE from [dev]_kfree_skb()
 *
 * Revision 1.6  1998/02/02 13:41:12  keil
 * new init
 *
 * Revision 1.5  1997/11/06 17:09:34  keil
 * New 2.1 init code
 *
 * Revision 1.4  1997/10/29 19:01:06  keil
 * changes for 2.1
 *
 * Revision 1.3  1997/07/27 21:38:34  keil
 * new B-channel interface
 *
 * Revision 1.2  1997/06/26 11:16:17  keil
 * first version
 *
 *
 */</FONT>

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#__NO_VERSION__">__NO_VERSION__</A>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hisax.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hscx.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isac.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isdnl1.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/interrupt.h&gt;

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">char</FONT> *HSCXVer[] <A HREF="hisax.h.shtml#HISAX_INITDATA">HISAX_INITDATA</A> =
{<FONT COLOR="#FF0000">"A1"</FONT>, <FONT COLOR="#FF0000">"?1"</FONT>, <FONT COLOR="#FF0000">"A2"</FONT>, <FONT COLOR="#FF0000">"?3"</FONT>, <FONT COLOR="#FF0000">"A3"</FONT>, <FONT COLOR="#FF0000">"V2.1"</FONT>, <FONT COLOR="#FF0000">"?6"</FONT>, <FONT COLOR="#FF0000">"?7"</FONT>,
 <FONT COLOR="#FF0000">"?8"</FONT>, <FONT COLOR="#FF0000">"?9"</FONT>, <FONT COLOR="#FF0000">"?10"</FONT>, <FONT COLOR="#FF0000">"?11"</FONT>, <FONT COLOR="#FF0000">"?12"</FONT>, <FONT COLOR="#FF0000">"?13"</FONT>, <FONT COLOR="#FF0000">"?14"</FONT>, <FONT COLOR="#FF0000">"???"</FONT>};

<A HREF="callc.c.shtml#HISAX_INITFUNC">HISAX_INITFUNC</A>(<FONT COLOR="#298C52">int</FONT>
HscxVersion(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">char</FONT> *s))
{
	<FONT COLOR="#298C52">int</FONT> verA, verB;

	verA = cs-&gt;BC_Read_Reg(cs, 0, <A HREF="hscx.h.shtml#HSCX_VSTR">HSCX_VSTR</A>) &amp; 0xf;
	verB = cs-&gt;BC_Read_Reg(cs, 1, <A HREF="hscx.h.shtml#HSCX_VSTR">HSCX_VSTR</A>) &amp; 0xf;
	printk(KERN_INFO <FONT COLOR="#FF0000">"%s HSCX version A: %s  B: %s\n"</FONT>, s,
	       HSCXVer[verA], HSCXVer[verB]);
	<FONT COLOR="#298C52">if</FONT> ((verA == 0) | (verA == 0xf) | (verB == 0) | (verB == 0xf))
		<FONT COLOR="#298C52">return</FONT> (1);
	<FONT COLOR="#298C52">else</FONT>
		<FONT COLOR="#298C52">return</FONT> (0);
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="modehscx">modehscx</A>(<FONT COLOR="#298C52">struct</FONT> BCState *bcs, <FONT COLOR="#298C52">int</FONT> mode, <FONT COLOR="#298C52">int</FONT> bc)
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = bcs-&gt;cs;
	<FONT COLOR="#298C52">int</FONT> hscx = bcs-&gt;channel;

	<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) {
		<FONT COLOR="#298C52">char</FONT> tmp[40];
		sprintf(tmp, <FONT COLOR="#FF0000">"hscx %c mode %d ichan %d"</FONT>,
			<FONT COLOR="#FF0000">'A'</FONT> + hscx, mode, bc);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	}
	bcs-&gt;mode = mode;
	cs-&gt;BC_Write_Reg(cs, hscx, <A HREF="hscx.h.shtml#HSCX_CCR1">HSCX_CCR1</A>, 
		test_bit(<A HREF="hisax.h.shtml#HW_IPAC">HW_IPAC</A>, &amp;cs-&gt;HW_Flags) ? 0x82 : 0x85);
	cs-&gt;BC_Write_Reg(cs, hscx, <A HREF="hscx.h.shtml#HSCX_XAD1">HSCX_XAD1</A>, 0xFF);
	cs-&gt;BC_Write_Reg(cs, hscx, <A HREF="hscx.h.shtml#HSCX_XAD2">HSCX_XAD2</A>, 0xFF);
	cs-&gt;BC_Write_Reg(cs, hscx, <A HREF="hscx.h.shtml#HSCX_RAH2">HSCX_RAH2</A>, 0xFF);
	cs-&gt;BC_Write_Reg(cs, hscx, <A HREF="hscx.h.shtml#HSCX_XBCH">HSCX_XBCH</A>, 0x0);
	cs-&gt;BC_Write_Reg(cs, hscx, <A HREF="hscx.h.shtml#HSCX_RLCR">HSCX_RLCR</A>, 0x0);
	cs-&gt;BC_Write_Reg(cs, hscx, <A HREF="hscx.h.shtml#HSCX_CCR2">HSCX_CCR2</A>, 0x30);
	cs-&gt;BC_Write_Reg(cs, hscx, <A HREF="hscx.h.shtml#HSCX_XCCR">HSCX_XCCR</A>, 7);
	cs-&gt;BC_Write_Reg(cs, hscx, <A HREF="hscx.h.shtml#HSCX_RCCR">HSCX_RCCR</A>, 7);

	<FONT COLOR=#0000FF>/* Switch IOM 1 SSI */</FONT>
	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#HW_IOM1">HW_IOM1</A>, &amp;cs-&gt;HW_Flags) &amp;&amp; (hscx == 0))
		bc = 1 - bc;

	<FONT COLOR="#298C52">if</FONT> (bc == 0) {
		cs-&gt;BC_Write_Reg(cs, hscx, <A HREF="hscx.h.shtml#HSCX_TSAX">HSCX_TSAX</A>,
			      test_bit(<A HREF="hisax.h.shtml#HW_IOM1">HW_IOM1</A>, &amp;cs-&gt;HW_Flags) ? 0x7 : 0x2f);
		cs-&gt;BC_Write_Reg(cs, hscx, <A HREF="hscx.h.shtml#HSCX_TSAR">HSCX_TSAR</A>,
			      test_bit(<A HREF="hisax.h.shtml#HW_IOM1">HW_IOM1</A>, &amp;cs-&gt;HW_Flags) ? 0x7 : 0x2f);
	} <FONT COLOR="#298C52">else</FONT> {
		cs-&gt;BC_Write_Reg(cs, hscx, <A HREF="hscx.h.shtml#HSCX_TSAX">HSCX_TSAX</A>, 0x3);
		cs-&gt;BC_Write_Reg(cs, hscx, <A HREF="hscx.h.shtml#HSCX_TSAR">HSCX_TSAR</A>, 0x3);
	}
	<FONT COLOR="#298C52">switch</FONT> (mode) {
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#L1_MODE_NULL">L1_MODE_NULL</A>):
			cs-&gt;BC_Write_Reg(cs, hscx, <A HREF="hscx.h.shtml#HSCX_TSAX">HSCX_TSAX</A>, 0xff);
			cs-&gt;BC_Write_Reg(cs, hscx, <A HREF="hscx.h.shtml#HSCX_TSAR">HSCX_TSAR</A>, 0xff);
			cs-&gt;BC_Write_Reg(cs, hscx, <A HREF="hscx.h.shtml#HSCX_MODE">HSCX_MODE</A>, 0x84);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#L1_MODE_TRANS">L1_MODE_TRANS</A>):
			cs-&gt;BC_Write_Reg(cs, hscx, <A HREF="hscx.h.shtml#HSCX_MODE">HSCX_MODE</A>, 0xe4);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#L1_MODE_HDLC">L1_MODE_HDLC</A>):
			cs-&gt;BC_Write_Reg(cs, hscx, <A HREF="hscx.h.shtml#HSCX_MODE">HSCX_MODE</A>, 0x8c);
			<FONT COLOR="#298C52">break</FONT>;
	}
	<FONT COLOR="#298C52">if</FONT> (mode)
		cs-&gt;BC_Write_Reg(cs, hscx, <A HREF="hscx.h.shtml#HSCX_CMDR">HSCX_CMDR</A>, 0x41);
	cs-&gt;BC_Write_Reg(cs, hscx, <A HREF="hscx.h.shtml#HSCX_ISTA">HSCX_ISTA</A>, 0x00);
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="hscx_sched_event">hscx_sched_event</A>(<FONT COLOR="#298C52">struct</FONT> BCState *bcs, <FONT COLOR="#298C52">int</FONT> event)
{
	bcs-&gt;event |= 1 &lt;&lt; event;
	queue_task(&amp;bcs-&gt;tqueue, &amp;tq_immediate);
	mark_bh(IMMEDIATE_BH);
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="hscx_l2l1">hscx_l2l1</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">long</FONT> flags;

	<FONT COLOR="#298C52">switch</FONT> (pr) {
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_DATA">PH_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			save_flags(flags);
			cli();
			<FONT COLOR="#298C52">if</FONT> (st-&gt;l1.bcs-&gt;hw.hscx.tx_skb) {
				skb_queue_tail(&amp;st-&gt;l1.bcs-&gt;squeue, skb);
				restore_flags(flags);
			} <FONT COLOR="#298C52">else</FONT> {
				st-&gt;l1.bcs-&gt;hw.hscx.tx_skb = skb;
				test_and_set_bit(<A HREF="hisax.h.shtml#BC_FLG_BUSY">BC_FLG_BUSY</A>, &amp;st-&gt;l1.bcs-&gt;Flag);
				st-&gt;l1.bcs-&gt;hw.hscx.count = 0;
				restore_flags(flags);
				st-&gt;l1.bcs-&gt;cs-&gt;BC_Send_Data(st-&gt;l1.bcs);
			}
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_PULL">PH_PULL</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
			<FONT COLOR="#298C52">if</FONT> (st-&gt;l1.bcs-&gt;hw.hscx.tx_skb) {
				printk(KERN_WARNING <FONT COLOR="#FF0000">"hscx_l2l1: this shouldn't happen\n"</FONT>);
				<FONT COLOR="#298C52">break</FONT>;
			}
			test_and_set_bit(<A HREF="hisax.h.shtml#BC_FLG_BUSY">BC_FLG_BUSY</A>, &amp;st-&gt;l1.bcs-&gt;Flag);
			st-&gt;l1.bcs-&gt;hw.hscx.tx_skb = skb;
			st-&gt;l1.bcs-&gt;hw.hscx.count = 0;
			st-&gt;l1.bcs-&gt;cs-&gt;BC_Send_Data(st-&gt;l1.bcs);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_PULL">PH_PULL</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			<FONT COLOR="#298C52">if</FONT> (!st-&gt;l1.bcs-&gt;hw.hscx.tx_skb) {
				test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_L1_PULL_REQ">FLG_L1_PULL_REQ</A>, &amp;st-&gt;l1.Flags);
				st-&gt;l1.l1l2(st, <A HREF="hisax.h.shtml#PH_PULL">PH_PULL</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, NULL);
			} <FONT COLOR="#298C52">else</FONT>
				test_and_set_bit(<A HREF="hisax.h.shtml#FLG_L1_PULL_REQ">FLG_L1_PULL_REQ</A>, &amp;st-&gt;l1.Flags);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_ACTIVATE">PH_ACTIVATE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			test_and_set_bit(<A HREF="hisax.h.shtml#BC_FLG_ACTIV">BC_FLG_ACTIV</A>, &amp;st-&gt;l1.bcs-&gt;Flag);
			<A HREF="#modehscx">modehscx</A>(st-&gt;l1.bcs, st-&gt;l1.mode, st-&gt;l1.bc);
			<A HREF="isdnl1.c.shtml#l1_msg_b">l1_msg_b</A>(st, pr, arg);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_DEACTIVATE">PH_DEACTIVATE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			<A HREF="isdnl1.c.shtml#l1_msg_b">l1_msg_b</A>(st, pr, arg);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_DEACTIVATE">PH_DEACTIVATE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>):
			test_and_clear_bit(<A HREF="hisax.h.shtml#BC_FLG_ACTIV">BC_FLG_ACTIV</A>, &amp;st-&gt;l1.bcs-&gt;Flag);
			<FONT COLOR="#298C52">if</FONT> (!test_bit(<A HREF="hisax.h.shtml#BC_FLG_BUSY">BC_FLG_BUSY</A>, &amp;st-&gt;l1.bcs-&gt;Flag)) {
				<A HREF="#modehscx">modehscx</A>(st-&gt;l1.bcs, 0, st-&gt;l1.bc);
				st-&gt;l1.l1l2(st, <A HREF="hisax.h.shtml#PH_DEACTIVATE">PH_DEACTIVATE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, NULL);
			}
			<FONT COLOR="#298C52">break</FONT>;
	}
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="close_hscxstate">close_hscxstate</A>(<FONT COLOR="#298C52">struct</FONT> BCState *bcs)
{
	<A HREF="#modehscx">modehscx</A>(bcs, 0, 0);
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#BC_FLG_INIT">BC_FLG_INIT</A>, &amp;bcs-&gt;Flag)) {
		<FONT COLOR="#298C52">if</FONT> (bcs-&gt;hw.hscx.rcvbuf) {
			kfree(bcs-&gt;hw.hscx.rcvbuf);
			bcs-&gt;hw.hscx.rcvbuf = NULL;
		}
		<A HREF="callc.c.shtml#discard_queue">discard_queue</A>(&amp;bcs-&gt;rqueue);
		<A HREF="callc.c.shtml#discard_queue">discard_queue</A>(&amp;bcs-&gt;squeue);
		<FONT COLOR="#298C52">if</FONT> (bcs-&gt;hw.hscx.tx_skb) {
			dev_kfree_skb(bcs-&gt;hw.hscx.tx_skb);
			bcs-&gt;hw.hscx.tx_skb = NULL;
			test_and_clear_bit(<A HREF="hisax.h.shtml#BC_FLG_BUSY">BC_FLG_BUSY</A>, &amp;bcs-&gt;Flag);
		}
	}
}

<FONT COLOR="#298C52">int</FONT>
<A NAME="open_hscxstate">open_hscxstate</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs,
	       <FONT COLOR="#298C52">int</FONT> bc)
{
	<FONT COLOR="#298C52">struct</FONT> BCState *bcs = cs-&gt;bcs + bc;

	<FONT COLOR="#298C52">if</FONT> (!test_and_set_bit(<A HREF="hisax.h.shtml#BC_FLG_INIT">BC_FLG_INIT</A>, &amp;bcs-&gt;Flag)) {
		<FONT COLOR="#298C52">if</FONT> (!(bcs-&gt;hw.hscx.rcvbuf = kmalloc(<A HREF="hisax.h.shtml#HSCX_BUFMAX">HSCX_BUFMAX</A>, GFP_ATOMIC))) {
			printk(KERN_WARNING
			       <FONT COLOR="#FF0000">"HiSax: No memory for hscx.rcvbuf\n"</FONT>);
			<FONT COLOR="#298C52">return</FONT> (1);
		}
		skb_queue_head_init(&amp;bcs-&gt;rqueue);
		skb_queue_head_init(&amp;bcs-&gt;squeue);
	}
	bcs-&gt;hw.hscx.tx_skb = NULL;
	test_and_clear_bit(<A HREF="hisax.h.shtml#BC_FLG_BUSY">BC_FLG_BUSY</A>, &amp;bcs-&gt;Flag);
	bcs-&gt;event = 0;
	bcs-&gt;hw.hscx.rcvidx = 0;
	bcs-&gt;tx_cnt = 0;
	<FONT COLOR="#298C52">return</FONT> (0);
}

<FONT COLOR="#298C52">int</FONT>
<A HREF="#setstack_hscx">setstack_hscx</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">struct</FONT> BCState *bcs)
{
	<FONT COLOR="#298C52">if</FONT> (<A HREF="#open_hscxstate">open_hscxstate</A>(st-&gt;l1.hardware, bcs-&gt;channel))
		<FONT COLOR="#298C52">return</FONT> (-1);
	st-&gt;l1.bcs = bcs;
	st-&gt;l2.l2l1 = <A HREF="#hscx_l2l1">hscx_l2l1</A>;
	<A HREF="lmgr.c.shtml#setstack_manager">setstack_manager</A>(st);
	bcs-&gt;st = st;
	<A HREF="isdnl1.c.shtml#setstack_l1_B">setstack_l1_B</A>(st);
	<FONT COLOR="#298C52">return</FONT> (0);
}

<A HREF="callc.c.shtml#HISAX_INITFUNC">HISAX_INITFUNC</A>(<FONT COLOR="#298C52">void</FONT>
clear_pending_hscx_ints(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs))
{
	<FONT COLOR="#298C52">int</FONT> val, eval;
	<FONT COLOR="#298C52">char</FONT> tmp[64];

	val = cs-&gt;BC_Read_Reg(cs, 1, <A HREF="hscx.h.shtml#HSCX_ISTA">HSCX_ISTA</A>);
	sprintf(tmp, <FONT COLOR="#FF0000">"HSCX B ISTA %x"</FONT>, val);
	<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	<FONT COLOR="#298C52">if</FONT> (val &amp; 0x01) {
		eval = cs-&gt;BC_Read_Reg(cs, 1, <A HREF="hscx.h.shtml#HSCX_EXIR">HSCX_EXIR</A>);
		sprintf(tmp, <FONT COLOR="#FF0000">"HSCX B EXIR %x"</FONT>, eval);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	}
	<FONT COLOR="#298C52">if</FONT> (val &amp; 0x02) {
		eval = cs-&gt;BC_Read_Reg(cs, 0, <A HREF="hscx.h.shtml#HSCX_EXIR">HSCX_EXIR</A>);
		sprintf(tmp, <FONT COLOR="#FF0000">"HSCX A EXIR %x"</FONT>, eval);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	}
	val = cs-&gt;BC_Read_Reg(cs, 0, <A HREF="hscx.h.shtml#HSCX_ISTA">HSCX_ISTA</A>);
	sprintf(tmp, <FONT COLOR="#FF0000">"HSCX A ISTA %x"</FONT>, val);
	<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	val = cs-&gt;BC_Read_Reg(cs, 1, <A HREF="hscx.h.shtml#HSCX_STAR">HSCX_STAR</A>);
	sprintf(tmp, <FONT COLOR="#FF0000">"HSCX B STAR %x"</FONT>, val);
	<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	val = cs-&gt;BC_Read_Reg(cs, 0, <A HREF="hscx.h.shtml#HSCX_STAR">HSCX_STAR</A>);
	sprintf(tmp, <FONT COLOR="#FF0000">"HSCX A STAR %x"</FONT>, val);
	<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	<FONT COLOR=#0000FF>/* disable all IRQ */</FONT>
	cs-&gt;BC_Write_Reg(cs, 0, <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A>, 0xFF);
	cs-&gt;BC_Write_Reg(cs, 1, <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A>, 0xFF);
}

<A HREF="callc.c.shtml#HISAX_INITFUNC">HISAX_INITFUNC</A>(<FONT COLOR="#298C52">void</FONT> 
inithscx(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs))
{
	cs-&gt;bcs[0].BC_SetStack = <A HREF="#setstack_hscx">setstack_hscx</A>;
	cs-&gt;bcs[1].BC_SetStack = <A HREF="#setstack_hscx">setstack_hscx</A>;
	cs-&gt;bcs[0].BC_Close = <A HREF="#close_hscxstate">close_hscxstate</A>;
	cs-&gt;bcs[1].BC_Close = <A HREF="#close_hscxstate">close_hscxstate</A>;
	<A HREF="#modehscx">modehscx</A>(cs-&gt;bcs, 0, 0);
	<A HREF="#modehscx">modehscx</A>(cs-&gt;bcs + 1, 0, 0);
}

<A HREF="callc.c.shtml#HISAX_INITFUNC">HISAX_INITFUNC</A>(<FONT COLOR="#298C52">void</FONT> 
inithscxisac(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> part))
{
	<FONT COLOR="#298C52">if</FONT> (part &amp; 1) {
		clear_pending_isac_ints(cs);
		clear_pending_hscx_ints(cs);
		initisac(cs);
		inithscx(cs);
	}
	<FONT COLOR="#298C52">if</FONT> (part &amp; 2) {
		<FONT COLOR=#0000FF>/* Reenable all IRQ */</FONT>
		cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_MASK">ISAC_MASK</A>, 0);
		cs-&gt;BC_Write_Reg(cs, 0, <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A>, 0);
		cs-&gt;BC_Write_Reg(cs, 1, <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A>, 0);
		<FONT COLOR=#0000FF>/* RESET Receiver and Transmitter */</FONT>
		cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_CMDR">ISAC_CMDR</A>, 0x41);
	}
}
</BODY>

</HTML>
