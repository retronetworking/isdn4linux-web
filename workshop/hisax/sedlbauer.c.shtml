<HTML>

<!-- Generated by c2html-1.0, Copyright 1998 by Dave Whittington -->
<HEAD>
<TITLE>sedlbauer.c</TITLE>
<!--#include virtual="/ssi/js.shtml" -->
<!--#include virtual="/ssi/buttondefs.shtml" -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<TABLE WIDTH="100%">
<TR>
<TD ALIGN=LEFT WIDTH="90"><!--#include virtual="/ssi/b_home.shtml" --></TD>
<TD ALIGN=RIGHT WIDTH="90"><!--#include virtual="/ssi/b_index.shtml" --></TD>
</TR>
</TABLE>
<CENTER><H1>sedlbauer.c</H1></CENTER>

<HR>
<PRE>
<FONT COLOR=#0000FF>/* $Id$

 * sedlbauer.c  low level stuff for Sedlbauer cards
 *              includes Support for the Sedlbauer Speed Star 
 *              derived from the original file dynalink.c from Karsten Keil
 *
 * Copyright (C) 1997,1998 Marcus Niemann (for the modifications to
 *                                         the original file dynalink.c)
 *
 * Author     Marcus Niemann (niemann@www-bib.fh-bielefeld.de)
 *
 * Thanks to  Karsten Keil
 *            Sedlbauer AG for informations
 *            Edgar Toernig
 *
 * $Log$
 * Revision 1.7  1998/04/15 16:44:33  keil
 * new init code
 *
 * Revision 1.6  1998/02/09 18:46:06  keil
 * Support for Sedlbauer PCMCIA (Marcus Niemann)
 *
 * Revision 1.5  1998/02/02 13:29:45  keil
 * fast io
 *
 * Revision 1.4  1997/11/08 21:35:52  keil
 * new l1 init
 *
 * Revision 1.3  1997/11/06 17:09:28  keil
 * New 2.1 init code
 *
 * Revision 1.2  1997/10/29 18:55:52  keil
 * changes for 2.1.60 (irq2dev_map)
 *
 * Revision 1.1  1997/09/11 17:32:04  keil
 * new
 *
 *
 */</FONT>

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#__NO_VERSION__">__NO_VERSION__</A>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hisax.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isac.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hscx.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isdnl1.h"</FONT>

<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *CardType[];

<FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *Sedlbauer_revision = <FONT COLOR="#FF0000">"$Revision$"</FONT>;

<FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *Sedlbauer_Types[] =
{<FONT COLOR="#FF0000">"None"</FONT>, <FONT COLOR="#FF0000">"Speed Card"</FONT>, <FONT COLOR="#FF0000">"Speed Win"</FONT>, <FONT COLOR="#FF0000">"Speed Star"</FONT>};
 
<FONT COLOR=#A521F7>#define</FONT> SEDL_SPEED_CARD 1
<FONT COLOR=#A521F7>#define</FONT> SEDL_SPEED_WIN  2
<FONT COLOR=#A521F7>#define</FONT> SEDL_SPEED_STAR 3

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#byteout">byteout</A>(addr,val) outb(val,addr)
<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#bytein">bytein</A>(addr) inb(addr)

<FONT COLOR=#A521F7>#define</FONT> SEDL_RESET_ON	0
<FONT COLOR=#A521F7>#define</FONT> SEDL_RESET_OFF	1
<FONT COLOR=#A521F7>#define</FONT> SEDL_ISAC	2
<FONT COLOR=#A521F7>#define</FONT> SEDL_HSCX	3
<FONT COLOR=#A521F7>#define</FONT> SEDL_ADR	4

<FONT COLOR=#A521F7>#define</FONT> SEDL_PCMCIA_RESET	0
<FONT COLOR=#A521F7>#define</FONT> SEDL_PCMCIA_ISAC	1
<FONT COLOR=#A521F7>#define</FONT> SEDL_PCMCIA_HSCX	2
<FONT COLOR=#A521F7>#define</FONT> SEDL_PCMCIA_ADR		4

<FONT COLOR=#A521F7>#define</FONT> SEDL_RESET      0x3	<FONT COLOR=#0000FF>/* same as DOS driver */</FONT>

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> u_char
<A HREF="asuscom.c.shtml#readreg">readreg</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> ale, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char off)
{
	<FONT COLOR="#298C52">register</FONT> u_char ret;
	<FONT COLOR="#298C52">long</FONT> flags;

	save_flags(flags);
	cli();
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(ale, off);
	ret = <A HREF="asuscom.c.shtml#bytein">bytein</A>(adr);
	restore_flags(flags);
	<FONT COLOR="#298C52">return</FONT> (ret);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#readfifo">readfifo</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> ale, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char off, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	<FONT COLOR=#0000FF>/* fifo read without cli because it's allready done  */</FONT>

	<A HREF="asuscom.c.shtml#byteout">byteout</A>(ale, off);
	insb(adr, data, size);
}


<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#writereg">writereg</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> ale, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char off, u_char data)
{
	<FONT COLOR="#298C52">long</FONT> flags;

	save_flags(flags);
	cli();
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(ale, off);
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(adr, data);
	restore_flags(flags);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#writefifo">writefifo</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> ale, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char off, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	<FONT COLOR=#0000FF>/* fifo write without cli because it's allready done  */</FONT>
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(ale, off);
	outsb(adr, data, size);
}

<FONT COLOR=#0000FF>/* Interface functions */</FONT>

<FONT COLOR="#298C52">static</FONT> u_char
<A HREF="asuscom.c.shtml#ReadISAC">ReadISAC</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char offset)
{
	<FONT COLOR="#298C52">return</FONT> (<A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.sedl.adr, cs-&gt;hw.sedl.isac, offset));
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#WriteISAC">WriteISAC</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char offset, u_char value)
{
	<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.sedl.adr, cs-&gt;hw.sedl.isac, offset, value);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#ReadISACfifo">ReadISACfifo</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	<A HREF="asuscom.c.shtml#readfifo">readfifo</A>(cs-&gt;hw.sedl.adr, cs-&gt;hw.sedl.isac, 0, data, size);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#WriteISACfifo">WriteISACfifo</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	<A HREF="asuscom.c.shtml#writefifo">writefifo</A>(cs-&gt;hw.sedl.adr, cs-&gt;hw.sedl.isac, 0, data, size);
}

<FONT COLOR="#298C52">static</FONT> u_char
<A HREF="asuscom.c.shtml#ReadHSCX">ReadHSCX</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> hscx, u_char offset)
{
	<FONT COLOR="#298C52">return</FONT> (<A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.sedl.adr,
			cs-&gt;hw.sedl.hscx, offset + (hscx ? 0x40 : 0)));
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#WriteHSCX">WriteHSCX</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> hscx, u_char offset, u_char value)
{
	<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.sedl.adr,
		 cs-&gt;hw.sedl.hscx, offset + (hscx ? 0x40 : 0), value);
}

<FONT COLOR=#0000FF>/*
 * fast interrupt HSCX stuff goes here
 */</FONT>

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#READHSCX">READHSCX</A>(cs, nr, reg) <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.sedl.adr, \
		cs-&gt;hw.sedl.hscx, reg + (nr ? 0x40 : 0))
<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#WRITEHSCX">WRITEHSCX</A>(cs, nr, reg, data) <A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.sedl.adr, \
		cs-&gt;hw.sedl.hscx, reg + (nr ? 0x40 : 0), data)

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#READHSCXFIFO">READHSCXFIFO</A>(cs, nr, ptr, cnt) <A HREF="asuscom.c.shtml#readfifo">readfifo</A>(cs-&gt;hw.sedl.adr, \
		cs-&gt;hw.sedl.hscx, (nr ? 0x40 : 0), ptr, cnt)

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#WRITEHSCXFIFO">WRITEHSCXFIFO</A>(cs, nr, ptr, cnt) <A HREF="asuscom.c.shtml#writefifo">writefifo</A>(cs-&gt;hw.sedl.adr, \
		cs-&gt;hw.sedl.hscx, (nr ? 0x40 : 0), ptr, cnt)

<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hscx_irq.c"</FONT>

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
sedlbauer_interrupt(<FONT COLOR="#298C52">int</FONT> intno, <FONT COLOR="#298C52">void</FONT> *dev_id, <FONT COLOR="#298C52">struct</FONT> pt_regs *regs)
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = dev_id;
	u_char val, stat = 0;

	<FONT COLOR="#298C52">if</FONT> (!cs) {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"Sedlbauer: Spurious interrupt!\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT>;
	}

        <FONT COLOR="#298C52">if</FONT> ((cs-&gt;typ == <A HREF="hisax.h.shtml#ISDN_CTYPE_SEDLBAUER_PCMCIA">ISDN_CTYPE_SEDLBAUER_PCMCIA</A>) &amp;&amp; (*cs-&gt;busy_flag == 1)) {
          <FONT COLOR=#0000FF>/* The card tends to generate interrupts while being removed
             causing us to just crash the kernel. bad. */</FONT>
          printk(KERN_WARNING <FONT COLOR="#FF0000">"Sedlbauer: card not available!\n"</FONT>);
          <FONT COLOR="#298C52">return</FONT>;
        }

	val = <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.sedl.adr, cs-&gt;hw.sedl.hscx, <A HREF="hscx.h.shtml#HSCX_ISTA">HSCX_ISTA</A> + 0x40);
      Start_HSCX:
	<FONT COLOR="#298C52">if</FONT> (val) {
		<A HREF="hscx_irq.c.shtml#hscx_int_main">hscx_int_main</A>(cs, val);
		stat |= 1;
	}
	val = <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.sedl.adr, cs-&gt;hw.sedl.isac, <A HREF="isac.h.shtml#ISAC_ISTA">ISAC_ISTA</A>);
      Start_ISAC:
	<FONT COLOR="#298C52">if</FONT> (val) {
		<A HREF="isac.c.shtml#isac_interrupt">isac_interrupt</A>(cs, val);
		stat |= 2;
	}
	val = <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.sedl.adr, cs-&gt;hw.sedl.hscx, <A HREF="hscx.h.shtml#HSCX_ISTA">HSCX_ISTA</A> + 0x40);
	<FONT COLOR="#298C52">if</FONT> (val) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>)
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"HSCX IntStat after IntRoutine"</FONT>);
		<FONT COLOR="#298C52">goto</FONT> Start_HSCX;
	}
	val = <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.sedl.adr, cs-&gt;hw.sedl.isac, <A HREF="isac.h.shtml#ISAC_ISTA">ISAC_ISTA</A>);
	<FONT COLOR="#298C52">if</FONT> (val) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_ISAC">L1_DEB_ISAC</A>)
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"ISAC IntStat after IntRoutine"</FONT>);
		<FONT COLOR="#298C52">goto</FONT> Start_ISAC;
	}
	<FONT COLOR="#298C52">if</FONT> (stat &amp; 1) {
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.sedl.adr, cs-&gt;hw.sedl.hscx, <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A>, 0xFF);
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.sedl.adr, cs-&gt;hw.sedl.hscx, <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A> + 0x40, 0xFF);
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.sedl.adr, cs-&gt;hw.sedl.hscx, <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A>, 0x0);
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.sedl.adr, cs-&gt;hw.sedl.hscx, <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A> + 0x40, 0x0);
	}
	<FONT COLOR="#298C52">if</FONT> (stat &amp; 2) {
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.sedl.adr, cs-&gt;hw.sedl.isac, <A HREF="isac.h.shtml#ISAC_MASK">ISAC_MASK</A>, 0xFF);
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.sedl.adr, cs-&gt;hw.sedl.isac, <A HREF="isac.h.shtml#ISAC_MASK">ISAC_MASK</A>, 0x0);
	}
}

<FONT COLOR="#298C52">void</FONT>
release_io_sedlbauer(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">int</FONT> bytecnt = 8;

	<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.sedl.cfg_reg)
		release_region(cs-&gt;hw.sedl.cfg_reg, bytecnt);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
reset_sedlbauer(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">long</FONT> flags;

	<FONT COLOR="#298C52">if</FONT> (cs-&gt;typ != <A HREF="hisax.h.shtml#ISDN_CTYPE_SEDLBAUER_PCMCIA">ISDN_CTYPE_SEDLBAUER_PCMCIA</A>) {
		<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.sedl.reset_on, SEDL_RESET);	<FONT COLOR=#0000FF>/* Reset On */</FONT>
		save_flags(flags);
		sti();
		current-&gt;state = TASK_INTERRUPTIBLE;
		current-&gt;timeout = jiffies + 1;
		schedule();
		<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.sedl.reset_off, 0);	<FONT COLOR=#0000FF>/* Reset Off */</FONT>
		current-&gt;state = TASK_INTERRUPTIBLE;
		current-&gt;timeout = jiffies + 1;
		schedule();
		restore_flags(flags);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
Sedl_card_msg(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> mt, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">switch</FONT> (mt) {
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_RESET">CARD_RESET</A>:
			reset_sedlbauer(cs);
			<FONT COLOR="#298C52">return</FONT>(0);
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_RELEASE">CARD_RELEASE</A>:
			release_io_sedlbauer(cs);
			<FONT COLOR="#298C52">return</FONT>(0);
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_SETIRQ">CARD_SETIRQ</A>:
			<FONT COLOR="#298C52">return</FONT>(request_irq(cs-&gt;irq, &amp;sedlbauer_interrupt,
					<A HREF="hisax.h.shtml#I4L_IRQ_FLAG">I4L_IRQ_FLAG</A>, <FONT COLOR="#FF0000">"HiSax"</FONT>, cs));
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_INIT">CARD_INIT</A>:
			inithscxisac(cs, 3);
			<FONT COLOR="#298C52">return</FONT>(0);
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_TEST">CARD_TEST</A>:
			<FONT COLOR="#298C52">return</FONT>(0);
	}
	<FONT COLOR="#298C52">return</FONT>(0);
}

<A HREF="asuscom.c.shtml#__initfunc">__initfunc</A>(<FONT COLOR="#298C52">int</FONT>
setup_sedlbauer(<FONT COLOR="#298C52">struct</FONT> IsdnCard *card))
{
	<FONT COLOR="#298C52">int</FONT> bytecnt;
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = card-&gt;cs;
	<FONT COLOR="#298C52">char</FONT> tmp[64];

	strcpy(tmp, Sedlbauer_revision);
	printk(KERN_INFO <FONT COLOR="#FF0000">"HiSax: Sedlbauer driver Rev. %s\n"</FONT>, HiSax_getrev(tmp));
 	<FONT COLOR="#298C52">if</FONT> (cs-&gt;typ == <A HREF="hisax.h.shtml#ISDN_CTYPE_SEDLBAUER">ISDN_CTYPE_SEDLBAUER</A>) {
 		cs-&gt;subtyp = SEDL_SPEED_CARD;
 	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (cs-&gt;typ == <A HREF="hisax.h.shtml#ISDN_CTYPE_SEDLBAUER_PCMCIA">ISDN_CTYPE_SEDLBAUER_PCMCIA</A>) {	
 		cs-&gt;subtyp = SEDL_SPEED_STAR;
 	} <FONT COLOR="#298C52">else</FONT>
		<FONT COLOR="#298C52">return</FONT> (0);

	bytecnt = 8;
	cs-&gt;hw.sedl.cfg_reg = card-&gt;para[1];
	cs-&gt;irq = card-&gt;para[0];
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;subtyp == SEDL_SPEED_STAR) {
		cs-&gt;hw.sedl.adr = cs-&gt;hw.sedl.cfg_reg + SEDL_PCMCIA_ADR;
		cs-&gt;hw.sedl.isac = cs-&gt;hw.sedl.cfg_reg + SEDL_PCMCIA_ISAC;
		cs-&gt;hw.sedl.hscx = cs-&gt;hw.sedl.cfg_reg + SEDL_PCMCIA_HSCX;
		cs-&gt;hw.sedl.reset_on = cs-&gt;hw.sedl.cfg_reg + SEDL_PCMCIA_RESET;
		cs-&gt;hw.sedl.reset_off = cs-&gt;hw.sedl.cfg_reg + SEDL_PCMCIA_RESET;
	} <FONT COLOR="#298C52">else</FONT> {
		cs-&gt;hw.sedl.adr = cs-&gt;hw.sedl.cfg_reg + SEDL_ADR;
		cs-&gt;hw.sedl.isac = cs-&gt;hw.sedl.cfg_reg + SEDL_ISAC;
		cs-&gt;hw.sedl.hscx = cs-&gt;hw.sedl.cfg_reg + SEDL_HSCX;
		cs-&gt;hw.sedl.reset_on = cs-&gt;hw.sedl.cfg_reg + SEDL_RESET_ON;
		cs-&gt;hw.sedl.reset_off = cs-&gt;hw.sedl.cfg_reg + SEDL_RESET_OFF;
	}
        
	<FONT COLOR=#0000FF>/* In case of the sedlbauer pcmcia card, this region is in use,
           reserved for us by the card manager. So we do not check it
           here, it would fail. */</FONT>
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;typ != <A HREF="hisax.h.shtml#ISDN_CTYPE_SEDLBAUER_PCMCIA">ISDN_CTYPE_SEDLBAUER_PCMCIA</A> &amp;&amp;
	   check_region((cs-&gt;hw.sedl.cfg_reg), bytecnt)) {
		printk(KERN_WARNING
		       <FONT COLOR="#FF0000">"HiSax: %s config port %x-%x already in use\n"</FONT>,
		       CardType[card-&gt;typ],
		       cs-&gt;hw.sedl.cfg_reg,
		       cs-&gt;hw.sedl.cfg_reg + bytecnt);
		<FONT COLOR="#298C52">return</FONT> (0);
	} <FONT COLOR="#298C52">else</FONT> {
		request_region(cs-&gt;hw.sedl.cfg_reg, bytecnt, <FONT COLOR="#FF0000">"sedlbauer isdn"</FONT>);
	}

	printk(KERN_INFO
	       <FONT COLOR="#FF0000">"Sedlbauer: defined at 0x%x IRQ %d\n"</FONT>,
	       cs-&gt;hw.sedl.cfg_reg,
	       cs-&gt;irq);
	printk(KERN_WARNING
		       <FONT COLOR="#FF0000">"Sedlbauer %s uses ports 0x%x-0x%x\n"</FONT>,
		       Sedlbauer_Types[cs-&gt;subtyp],
		       cs-&gt;hw.sedl.cfg_reg,
		       cs-&gt;hw.sedl.cfg_reg + bytecnt);

	printk(KERN_INFO <FONT COLOR="#FF0000">"Sedlbauer: resetting card\n"</FONT>);
	reset_sedlbauer(cs);
	cs-&gt;readisac = &amp;<A HREF="asuscom.c.shtml#ReadISAC">ReadISAC</A>;
	cs-&gt;writeisac = &amp;<A HREF="asuscom.c.shtml#WriteISAC">WriteISAC</A>;
	cs-&gt;readisacfifo = &amp;<A HREF="asuscom.c.shtml#ReadISACfifo">ReadISACfifo</A>;
	cs-&gt;writeisacfifo = &amp;<A HREF="asuscom.c.shtml#WriteISACfifo">WriteISACfifo</A>;
	cs-&gt;BC_Read_Reg = &amp;<A HREF="asuscom.c.shtml#ReadHSCX">ReadHSCX</A>;
	cs-&gt;BC_Write_Reg = &amp;<A HREF="asuscom.c.shtml#WriteHSCX">WriteHSCX</A>;
	cs-&gt;BC_Send_Data = &amp;<A HREF="hscx_irq.c.shtml#hscx_fill_fifo">hscx_fill_fifo</A>;
	cs-&gt;cardmsg = &amp;Sedl_card_msg;
	<A HREF="isac.c.shtml#ISACVersion">ISACVersion</A>(cs, <FONT COLOR="#FF0000">"Sedlbauer:"</FONT>);
	<FONT COLOR="#298C52">if</FONT> (HscxVersion(cs, <FONT COLOR="#FF0000">"Sedlbauer:"</FONT>)) {
		printk(KERN_WARNING
		    <FONT COLOR="#FF0000">"Sedlbauer: wrong HSCX versions check IO address\n"</FONT>);
		release_io_sedlbauer(cs);
		<FONT COLOR="#298C52">return</FONT> (0);
	}
	<FONT COLOR="#298C52">return</FONT> (1);
}
</BODY>

</HTML>
