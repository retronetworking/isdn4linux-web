<HTML>

<!-- Generated by c2html-1.0, Copyright 1998 by Dave Whittington -->
<HEAD>
<TITLE>isdnl3.c</TITLE>
<!--#include virtual="/ssi/js.shtml" -->
<!--#include virtual="/ssi/buttondefs.shtml" -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<TABLE WIDTH="100%">
<TR>
<TD ALIGN=LEFT WIDTH="90"><!--#include virtual="/ssi/b_home.shtml" --></TD>
<TD ALIGN=RIGHT WIDTH="90"><!--#include virtual="/ssi/b_index.shtml" --></TD>
</TR>
</TABLE>
<CENTER><H1>isdnl3.c</H1></CENTER>

<HR>
<PRE>
<FONT COLOR=#0000FF>/* $Id$

 * Author       Karsten Keil (keil@temic-ech.spacenet.de)
 *              based on the teles driver from Jan den Ouden
 *
 * Thanks to    Jan den Ouden
 *              Fritz Elfert
 *
 * $Log$
 * Revision 2.7  1998/05/25 14:10:15  keil
 * HiSax 3.0
 * X.75 and leased are working again.
 *
 * Revision 2.6  1998/05/25 12:58:11  keil
 * HiSax golden code from certification, Don't use !!!
 * No leased lines, no X75, but many changes.
 *
 * Revision 2.5  1998/02/12 23:07:52  keil
 * change for 2.1.86 (removing FREE_READ/FREE_WRITE from [dev]_kfree_skb()
 *
 * Revision 2.4  1997/11/06 17:09:25  keil
 * New 2.1 init code
 *
 * Revision 2.3  1997/10/29 19:07:53  keil
 * changes for 2.1
 *
 * Revision 2.2  1997/10/01 09:21:41  fritz
 * Removed old compatibility stuff for 2.0.X kernels.
 * From now on, this code is for 2.1.X ONLY!
 * Old stuff is still in the separate branch.
 *
 * Revision 2.1  1997/08/03 14:36:32  keil
 * Implement RESTART procedure
 *
 * Revision 2.0  1997/07/27 21:15:42  keil
 * New Callref based layer3
 *
 * Revision 1.11  1997/06/26 11:11:44  keil
 * SET_SKBFREE now on creation of a SKB
 *
 * Revision 1.10  1997/04/06 22:54:16  keil
 * Using SKB's
 *
 * Revision 1.9  1997/03/25 23:11:25  keil
 * US NI-1 protocol
 *
 * Revision 1.8  1997/03/21 18:53:44  keil
 * Report no protocol error to syslog too
 *
 * Remove old logs /KKe
 *
 */</FONT>
<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#__NO_VERSION__">__NO_VERSION__</A>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hisax.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isdnl3.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/config.h&gt;

<FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *l3_revision = <FONT COLOR="#FF0000">"$Revision$"</FONT>;

<FONT COLOR="#298C52">static</FONT>
<FONT COLOR="#298C52">struct</FONT> Fsm l3fsm =
{NULL, 0, 0, NULL, NULL};

<FONT COLOR="#298C52">enum</FONT> {
	ST_L3_LC_REL,
	ST_L3_LC_ESTAB_WAIT,
	ST_L3_LC_REL_WAIT,
	ST_L3_LC_ESTAB,
};

<FONT COLOR=#A521F7>#define</FONT> <A NAME="L3_STATE_COUNT">L3_STATE_COUNT</A> (ST_L3_LC_ESTAB+1)

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">char</FONT> *strL3State[] =
{
	<FONT COLOR="#FF0000">"ST_L3_LC_REL"</FONT>,
	<FONT COLOR="#FF0000">"ST_L3_LC_ESTAB_WAIT"</FONT>,
	<FONT COLOR="#FF0000">"ST_L3_LC_REL_WAIT"</FONT>,
	<FONT COLOR="#FF0000">"ST_L3_LC_ESTAB"</FONT>,
};

<FONT COLOR="#298C52">enum</FONT> {
	EV_ESTABLISH_REQ,
	EV_ESTABLISH_IND,
	EV_ESTABLISH_CNF,
	EV_RELEASE_REQ,
	EV_RELEASE_CNF,
	EV_RELEASE_IND,
};

<FONT COLOR=#A521F7>#define</FONT> <A NAME="L3_EVENT_COUNT">L3_EVENT_COUNT</A> (EV_RELEASE_IND+1)

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">char</FONT> *strL3Event[] =
{
	<FONT COLOR="#FF0000">"EV_ESTABLISH_REQ"</FONT>,
	<FONT COLOR="#FF0000">"EV_ESTABLISH_IND"</FONT>,
	<FONT COLOR="#FF0000">"EV_ESTABLISH_CNF"</FONT>,
	<FONT COLOR="#FF0000">"EV_RELEASE_REQ"</FONT>,
	<FONT COLOR="#FF0000">"EV_RELEASE_CNF"</FONT>,
	<FONT COLOR="#FF0000">"EV_RELEASE_IND"</FONT>,
};

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="l3m_debug">l3m_debug</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">char</FONT> *s)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	<FONT COLOR="#298C52">char</FONT> tm[32], str[256];

	<A HREF="fsm.c.shtml#jiftime">jiftime</A>(tm, jiffies);
	sprintf(str, <FONT COLOR="#FF0000">"%s %s %s\n"</FONT>, tm, st-&gt;l3.debug_id, s);
	<A HREF="isdnl1.c.shtml#HiSax_putstatus">HiSax_putstatus</A>(st-&gt;l1.hardware, str);
}

u_char *
<A HREF="#findie">findie</A>(u_char * p, <FONT COLOR="#298C52">int</FONT> size, u_char ie, <FONT COLOR="#298C52">int</FONT> wanted_set)
{
	<FONT COLOR="#298C52">int</FONT> l, codeset, maincodeset;
	u_char *pend = p + size;

	<FONT COLOR=#0000FF>/* skip protocol discriminator, callref and message type */</FONT>
	p++;
	l = (*p++) &amp; 0xf;
	p += l;
	p++;
	codeset = 0;
	maincodeset = 0;
	<FONT COLOR=#0000FF>/* while there are bytes left... */</FONT>
	<FONT COLOR="#298C52">while</FONT> (p &lt; pend) {
		<FONT COLOR="#298C52">if</FONT> ((*p &amp; 0xf0) == 0x90) {
			codeset = *p &amp; 0x07;
			<FONT COLOR="#298C52">if</FONT> (!(*p &amp; 0x08))
				maincodeset = codeset;
		}
		<FONT COLOR="#298C52">if</FONT> (*p &amp; 0x80)
			p++;
		<FONT COLOR="#298C52">else</FONT> {
			<FONT COLOR="#298C52">if</FONT> (codeset == wanted_set) {
				<FONT COLOR="#298C52">if</FONT> (*p == ie)
					<FONT COLOR="#298C52">return</FONT> (p);
				<FONT COLOR="#298C52">if</FONT> (*p &gt; ie)
					<FONT COLOR="#298C52">return</FONT> (NULL);
			}
			p++;
			l = *p++;
			p += l;
			codeset = maincodeset;
		}
	}
	<FONT COLOR="#298C52">return</FONT> (NULL);
}

<FONT COLOR="#298C52">int</FONT>
<A NAME="getcallref">getcallref</A>(u_char * p)
{
	<FONT COLOR="#298C52">int</FONT> l, m = 1, cr = 0;
	p++;			<FONT COLOR=#0000FF>/* prot discr */</FONT>
	l = 0xf &amp; *p++;		<FONT COLOR=#0000FF>/* callref length */</FONT>
	<FONT COLOR="#298C52">if</FONT> (!l)			<FONT COLOR=#0000FF>/* dummy CallRef */</FONT>
		<FONT COLOR="#298C52">return</FONT>(-1);
	<FONT COLOR="#298C52">while</FONT> (l--) {
		cr += m * (*p++);
		m *= 8;
	}
	<FONT COLOR="#298C52">return</FONT> (cr);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> OrigCallRef = 0;

<FONT COLOR="#298C52">int</FONT>
<A NAME="newcallref">newcallref</A>(<FONT COLOR="#298C52">void</FONT>)
{
	<FONT COLOR="#298C52">if</FONT> (OrigCallRef == 127)
		OrigCallRef = 1;
	<FONT COLOR="#298C52">else</FONT>
		OrigCallRef++;
	<FONT COLOR="#298C52">return</FONT> (OrigCallRef);
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="l3_debug">l3_debug</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *fmt, ...)
{
	va_list args;
	<FONT COLOR="#298C52">char</FONT> str[256], tm[32];
	<FONT COLOR="#298C52">char</FONT> *t = str;

	va_start(args, fmt);
	<A HREF="fsm.c.shtml#jiftime">jiftime</A>(tm, jiffies);
	t += sprintf(str, <FONT COLOR="#FF0000">"%s l3 "</FONT>, tm);
	t += vsprintf(t, fmt, args);
	va_end(args);
	*t++ = <FONT COLOR="#FF0000">'\n'</FONT>;
	*t++ = 0;
	<A HREF="isdnl1.c.shtml#HiSax_putstatus">HiSax_putstatus</A>(st-&gt;l1.hardware, str);
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="newl3state">newl3state</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, <FONT COLOR="#298C52">int</FONT> state)
{
	<FONT COLOR="#298C52">if</FONT> (pc-&gt;debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_STATE">L3_DEB_STATE</A>)
		<A HREF="#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"newstate cr %d %d --&gt; %d"</FONT>, pc-&gt;callref,
			pc-&gt;state, state);
	pc-&gt;state = state;
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="L3ExpireTimer">L3ExpireTimer</A>(<FONT COLOR="#298C52">struct</FONT> L3Timer *t)
{
	t-&gt;pc-&gt;st-&gt;lli.l4l3(t-&gt;pc-&gt;st, t-&gt;event, t-&gt;pc);
}

<FONT COLOR="#298C52">void</FONT>
<A HREF="#L3InitTimer">L3InitTimer</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, <FONT COLOR="#298C52">struct</FONT> L3Timer *t)
{
	t-&gt;pc = pc;
	t-&gt;tl.function = (<FONT COLOR="#298C52">void</FONT> *) <A HREF="#L3ExpireTimer">L3ExpireTimer</A>;
	t-&gt;tl.data = (<FONT COLOR="#298C52">long</FONT>) t;
	init_timer(&amp;t-&gt;tl);
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="L3DelTimer">L3DelTimer</A>(<FONT COLOR="#298C52">struct</FONT> L3Timer *t)
{
	del_timer(&amp;t-&gt;tl);
}

<FONT COLOR="#298C52">int</FONT>
<A NAME="L3AddTimer">L3AddTimer</A>(<FONT COLOR="#298C52">struct</FONT> L3Timer *t,
	   <FONT COLOR="#298C52">int</FONT> millisec, <FONT COLOR="#298C52">int</FONT> event)
{
	<FONT COLOR="#298C52">if</FONT> (t-&gt;tl.next || t-&gt;tl.prev) {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"L3AddTimer: timer already active!\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT> -1;
	}
	init_timer(&amp;t-&gt;tl);
	t-&gt;event = event;
	t-&gt;tl.expires = jiffies + (millisec * HZ) / 1000;
	add_timer(&amp;t-&gt;tl);
	<FONT COLOR="#298C52">return</FONT> 0;
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="StopAllL3Timer">StopAllL3Timer</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc)
{
	<A HREF="#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
}

<FONT COLOR="#298C52">struct</FONT> sk_buff *
<A NAME="l3_alloc_skb">l3_alloc_skb</A>(<FONT COLOR="#298C52">int</FONT> len)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;

	<FONT COLOR="#298C52">if</FONT> (!(skb = alloc_skb(len + <A HREF="hisax.h.shtml#MAX_HEADER_LEN">MAX_HEADER_LEN</A>, GFP_ATOMIC))) {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"HiSax: No skb for D-channel\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT> (NULL);
	}
	skb_reserve(skb, <A HREF="hisax.h.shtml#MAX_HEADER_LEN">MAX_HEADER_LEN</A>);
	<FONT COLOR="#298C52">return</FONT> (skb);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="no_l3_proto">no_l3_proto</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

	<A HREF="isdnl1.c.shtml#HiSax_putstatus">HiSax_putstatus</A>(st-&gt;l1.hardware, <FONT COLOR="#FF0000">"L3 no D protocol\n"</FONT>);
	<FONT COLOR="#298C52">if</FONT> (skb) {
		dev_kfree_skb(skb);
	}
}

<FONT COLOR=#A521F7>#ifdef</FONT>	CONFIG_HISAX_EURO
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">void</FONT> <A HREF="l3dss1.c.shtml#setstack_dss1">setstack_dss1</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st);
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR=#A521F7>#ifdef</FONT>        CONFIG_HISAX_NI1
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">void</FONT> setstack_ni1(<FONT COLOR="#298C52">struct</FONT> PStack *st);
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR=#A521F7>#ifdef</FONT>	CONFIG_HISAX_1TR6
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">void</FONT> setstack_1tr6(<FONT COLOR="#298C52">struct</FONT> PStack *st);
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR="#298C52">struct</FONT> l3_process
*<A NAME="getl3proc">getl3proc</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> cr)
{
	<FONT COLOR="#298C52">struct</FONT> l3_process *p = st-&gt;l3.proc;

	<FONT COLOR="#298C52">while</FONT> (p)
		<FONT COLOR="#298C52">if</FONT> (p-&gt;callref == cr)
			<FONT COLOR="#298C52">return</FONT> (p);
		<FONT COLOR="#298C52">else</FONT>
			p = p-&gt;next;
	<FONT COLOR="#298C52">return</FONT> (NULL);
}

<FONT COLOR="#298C52">struct</FONT> l3_process
*<A NAME="new_l3_process">new_l3_process</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> cr)
{
	<FONT COLOR="#298C52">struct</FONT> l3_process *p, *np;

	<FONT COLOR="#298C52">if</FONT> (!(p = kmalloc(<FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> l3_process), GFP_ATOMIC))) {
		printk(KERN_ERR <FONT COLOR="#FF0000">"HiSax can't get memory for cr %d\n"</FONT>, cr);
		<FONT COLOR="#298C52">return</FONT> (NULL);
	}
	<FONT COLOR="#298C52">if</FONT> (!st-&gt;l3.proc)
		st-&gt;l3.proc = p;
	<FONT COLOR="#298C52">else</FONT> {
		np = st-&gt;l3.proc;
		<FONT COLOR="#298C52">while</FONT> (np-&gt;next)
			np = np-&gt;next;
		np-&gt;next = p;
	}
	p-&gt;next = NULL;
	p-&gt;debug = <A HREF="isdnl3.h.shtml#L3_DEB_WARN">L3_DEB_WARN</A>;
	p-&gt;callref = cr;
	p-&gt;state = 0;
	p-&gt;chan = NULL;
	p-&gt;st = st;
	p-&gt;N303 = st-&gt;l3.N303;
	<A HREF="#L3InitTimer">L3InitTimer</A>(p, &amp;p-&gt;timer);
	<FONT COLOR="#298C52">return</FONT> (p);
};

<FONT COLOR="#298C52">void</FONT>
<A NAME="release_l3_process">release_l3_process</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *p)
{
	<FONT COLOR="#298C52">struct</FONT> l3_process *np, *pp = NULL;

	<FONT COLOR="#298C52">if</FONT> (!p)
		<FONT COLOR="#298C52">return</FONT>;
	np = p-&gt;st-&gt;l3.proc;
	<FONT COLOR="#298C52">while</FONT> (np) {
		<FONT COLOR="#298C52">if</FONT> (np == p) {
			<A HREF="#StopAllL3Timer">StopAllL3Timer</A>(p);
			<FONT COLOR="#298C52">if</FONT> (pp)
				pp-&gt;next = np-&gt;next;
			<FONT COLOR="#298C52">else</FONT>
				p-&gt;st-&gt;l3.proc = np-&gt;next;
			kfree(p);
			<FONT COLOR="#298C52">return</FONT>;
		}
		pp = np;
		np = np-&gt;next;
	}
	printk(KERN_ERR <FONT COLOR="#FF0000">"HiSax internal L3 error CR not in list\n"</FONT>);
};

<FONT COLOR="#298C52">void</FONT>
<A HREF="#setstack_l3dc">setstack_l3dc</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">struct</FONT> Channel *chanp)
{
	<FONT COLOR="#298C52">char</FONT> tmp[64];

	st-&gt;l3.proc   = NULL;
	st-&gt;l3.global = NULL;
	skb_queue_head_init(&amp;st-&gt;l3.squeue);
	st-&gt;l3.l3m.fsm = &amp;l3fsm;
	st-&gt;l3.l3m.state = ST_L3_LC_REL;
	st-&gt;l3.l3m.debug = 1;
	st-&gt;l3.l3m.userdata = st;
	st-&gt;l3.l3m.userint = 0;
	st-&gt;l3.l3m.printdebug = <A HREF="#l3m_debug">l3m_debug</A>;
	strcpy(st-&gt;l3.debug_id, <FONT COLOR="#FF0000">"L3DC"</FONT>);

<FONT COLOR=#A521F7>#ifdef</FONT>	CONFIG_HISAX_EURO
	<FONT COLOR="#298C52">if</FONT> (st-&gt;protocol == ISDN_PTYPE_EURO) {
		<A HREF="l3dss1.c.shtml#setstack_dss1">setstack_dss1</A>(st);
	} <FONT COLOR="#298C52">else</FONT>
<FONT COLOR=#A521F7>#endif</FONT>
<FONT COLOR=#A521F7>#ifdef</FONT>        CONFIG_HISAX_NI1
	<FONT COLOR="#298C52">if</FONT> (st-&gt;protocol == ISDN_PTYPE_NI1) {
		setstack_ni1(st);
	} <FONT COLOR="#298C52">else</FONT>
<FONT COLOR=#A521F7>#endif</FONT>
<FONT COLOR=#A521F7>#ifdef</FONT>	CONFIG_HISAX_1TR6
	<FONT COLOR="#298C52">if</FONT> (st-&gt;protocol == ISDN_PTYPE_1TR6) {
		setstack_1tr6(st);
	} <FONT COLOR="#298C52">else</FONT>
<FONT COLOR=#A521F7>#endif</FONT>
	<FONT COLOR="#298C52">if</FONT> (st-&gt;protocol == ISDN_PTYPE_LEASED) {
		st-&gt;lli.l4l3 = <A HREF="#no_l3_proto">no_l3_proto</A>;
		st-&gt;l2.l2l3 = <A HREF="#no_l3_proto">no_l3_proto</A>;
		printk(KERN_INFO <FONT COLOR="#FF0000">"HiSax: Leased line mode\n"</FONT>);
	} <FONT COLOR="#298C52">else</FONT> {
		st-&gt;lli.l4l3 = <A HREF="#no_l3_proto">no_l3_proto</A>;
		st-&gt;l2.l2l3 = <A HREF="#no_l3_proto">no_l3_proto</A>;
		sprintf(tmp, <FONT COLOR="#FF0000">"protocol %s not supported"</FONT>,
			(st-&gt;protocol == ISDN_PTYPE_1TR6) ? <FONT COLOR="#FF0000">"1tr6"</FONT> :
			(st-&gt;protocol == ISDN_PTYPE_EURO) ? <FONT COLOR="#FF0000">"euro"</FONT> :
			(st-&gt;protocol == ISDN_PTYPE_NI1) ? <FONT COLOR="#FF0000">"ni1"</FONT> :
			<FONT COLOR="#FF0000">"unknown"</FONT>);
		printk(KERN_WARNING <FONT COLOR="#FF0000">"HiSax: %s\n"</FONT>, tmp);
		st-&gt;protocol = -1;
	}
}

<FONT COLOR="#298C52">void</FONT>
<A HREF="#isdnl3_trans">isdnl3_trans</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> pr, <FONT COLOR="#298C52">void</FONT> *arg) {
	st-&gt;l3.l3l2(st, pr, arg);
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="releasestack_isdnl3">releasestack_isdnl3</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st)
{
	<FONT COLOR="#298C52">while</FONT> (st-&gt;l3.proc)
		<A HREF="#release_l3_process">release_l3_process</A>(st-&gt;l3.proc);
	<FONT COLOR="#298C52">if</FONT> (st-&gt;l3.global) {
		<A HREF="#StopAllL3Timer">StopAllL3Timer</A>(st-&gt;l3.global);
		kfree(st-&gt;l3.global);
		st-&gt;l3.global = NULL;
	}
	<A HREF="callc.c.shtml#discard_queue">discard_queue</A>(&amp;st-&gt;l3.squeue);
}

<FONT COLOR="#298C52">void</FONT>
<A HREF="#setstack_l3bc">setstack_l3bc</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">struct</FONT> Channel *chanp)
{

	st-&gt;l3.proc   = NULL;
	st-&gt;l3.global = NULL;
	skb_queue_head_init(&amp;st-&gt;l3.squeue);
	st-&gt;l3.l3m.fsm = &amp;l3fsm;
	st-&gt;l3.l3m.state = ST_L3_LC_REL;
	st-&gt;l3.l3m.debug = 1;
	st-&gt;l3.l3m.userdata = st;
	st-&gt;l3.l3m.userint = 0;
	st-&gt;l3.l3m.printdebug = <A HREF="#l3m_debug">l3m_debug</A>;
	strcpy(st-&gt;l3.debug_id, <FONT COLOR="#FF0000">"L3BC"</FONT>);
	st-&gt;lli.l4l3 = <A HREF="#isdnl3_trans">isdnl3_trans</A>;
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lc_activate">lc_activate</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;

	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L3_LC_ESTAB_WAIT);
	st-&gt;l3.l3l2(st, <A HREF="hisax.h.shtml#DL_ESTABLISH">DL_ESTABLISH</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lc_connect">lc_connect</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L3_LC_ESTAB);
	<FONT COLOR="#298C52">while</FONT> ((skb = skb_dequeue(&amp;st-&gt;l3.squeue))) {
		st-&gt;l3.l3l2(st, <A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, skb);
	}
	st-&gt;l3.l3l4(st, <A HREF="hisax.h.shtml#DL_ESTABLISH">DL_ESTABLISH</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lc_release_req">lc_release_req</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;

	<FONT COLOR="#298C52">if</FONT> (fi-&gt;state == ST_L3_LC_ESTAB_WAIT)
		<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L3_LC_REL);
	<FONT COLOR="#298C52">else</FONT>
		<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L3_LC_REL_WAIT);
	st-&gt;l3.l3l2(st, <A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lc_release_ind">lc_release_ind</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;

	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L3_LC_REL);
	<A HREF="callc.c.shtml#discard_queue">discard_queue</A>(&amp;st-&gt;l3.squeue);
	st-&gt;l3.l3l4(st, <A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);
}

<FONT COLOR=#0000FF>/* *INDENT-OFF* */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">struct</FONT> FsmNode L3FnList[] <A HREF="hisax.h.shtml#HISAX_INITDATA">HISAX_INITDATA</A> =
{
	{ST_L3_LC_REL,		EV_ESTABLISH_REQ,	<A HREF="#lc_activate">lc_activate</A>},
	{ST_L3_LC_REL,		EV_ESTABLISH_IND,	<A HREF="#lc_connect">lc_connect</A>},
	{ST_L3_LC_REL,		EV_ESTABLISH_CNF,	<A HREF="#lc_connect">lc_connect</A>},
	{ST_L3_LC_ESTAB_WAIT,	EV_ESTABLISH_CNF,	<A HREF="#lc_connect">lc_connect</A>},
	{ST_L3_LC_ESTAB_WAIT,	EV_RELEASE_REQ,		<A HREF="#lc_release_req">lc_release_req</A>},
	{ST_L3_LC_ESTAB_WAIT,	EV_RELEASE_IND,		<A HREF="#lc_release_ind">lc_release_ind</A>},
	{ST_L3_LC_ESTAB,	EV_RELEASE_IND,		<A HREF="#lc_release_ind">lc_release_ind</A>},
	{ST_L3_LC_ESTAB,	EV_RELEASE_REQ,		<A HREF="#lc_release_req">lc_release_req</A>},
	{ST_L3_LC_REL_WAIT,	EV_RELEASE_CNF,		<A HREF="#lc_release_ind">lc_release_ind</A>},
	{ST_L3_LC_REL_WAIT,	EV_ESTABLISH_REQ,	<A HREF="#lc_activate">lc_activate</A>},
};
<FONT COLOR=#0000FF>/* *INDENT-ON* */</FONT>

<FONT COLOR=#A521F7>#define</FONT> <A NAME="L3_FN_COUNT">L3_FN_COUNT</A> (<FONT COLOR="#298C52">sizeof</FONT>(L3FnList)/<FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> FsmNode))

<FONT COLOR="#298C52">void</FONT>
<A NAME="l3_msg">l3_msg</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	
	<FONT COLOR="#298C52">switch</FONT> (pr) {
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			<FONT COLOR="#298C52">if</FONT> (st-&gt;l3.l3m.state == ST_L3_LC_ESTAB) {
				st-&gt;l3.l3l2(st, pr, arg);
			} <FONT COLOR="#298C52">else</FONT> {
				<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

				skb_queue_head(&amp;st-&gt;l3.squeue, skb);
				<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l3.l3m, EV_ESTABLISH_REQ, NULL); 
			}
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_ESTABLISH">DL_ESTABLISH</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l3.l3m, EV_ESTABLISH_REQ, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_ESTABLISH">DL_ESTABLISH</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l3.l3m, EV_ESTABLISH_CNF, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_ESTABLISH">DL_ESTABLISH</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l3.l3m, EV_ESTABLISH_IND, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l3.l3m, EV_RELEASE_IND, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l3.l3m, EV_RELEASE_CNF, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l3.l3m, EV_RELEASE_REQ, NULL);
			<FONT COLOR="#298C52">break</FONT>;
	}
}

<A HREF="callc.c.shtml#HISAX_INITFUNC">HISAX_INITFUNC</A>(<FONT COLOR="#298C52">void</FONT>
Isdnl3New(<FONT COLOR="#298C52">void</FONT>))
{
	l3fsm.state_count = <A HREF="#L3_STATE_COUNT">L3_STATE_COUNT</A>;
	l3fsm.event_count = <A HREF="#L3_EVENT_COUNT">L3_EVENT_COUNT</A>;
	l3fsm.strEvent = strL3Event;
	l3fsm.strState = strL3State;
	FsmNew(&amp;l3fsm, L3FnList, <A HREF="#L3_FN_COUNT">L3_FN_COUNT</A>);
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="Isdnl3Free">Isdnl3Free</A>(<FONT COLOR="#298C52">void</FONT>)
{
	<A HREF="fsm.c.shtml#FsmFree">FsmFree</A>(&amp;l3fsm);
}
</BODY>

</HTML>
