<HTML>

<!-- Generated by c2html-1.0, Copyright 1998 by Dave Whittington -->
<HEAD>
<TITLE>hscx_irq.c</TITLE>
<!--#include virtual="/ssi/js.shtml" -->
<!--#include virtual="/ssi/buttondefs.shtml" -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<TABLE WIDTH="100%">
<TR>
<TD ALIGN=LEFT WIDTH="90"><!--#include virtual="/ssi/b_home.shtml" --></TD>
<TD ALIGN=RIGHT WIDTH="90"><!--#include virtual="/ssi/b_index.shtml" --></TD>
</TR>
</TABLE>
<CENTER><H1>hscx_irq.c</H1></CENTER>

<HR>
<PRE>
<FONT COLOR=#0000FF>/* $Id$

 * hscx_irq.c     low level b-channel stuff for Siemens HSCX
 *
 * Author     Karsten Keil (keil@temic-ech.spacenet.de)
 *
 * This is an include file for fast inline IRQ stuff
 *
 * $Log$
 * Revision 1.8  1998/04/10 10:35:22  paul
 * fixed (silly?) warnings from egcs on Alpha.
 *
 * Revision 1.7  1998/02/12 23:07:37  keil
 * change for 2.1.86 (removing FREE_READ/FREE_WRITE from [dev]_kfree_skb()
 *
 * Revision 1.6  1997/10/29 19:01:07  keil
 * changes for 2.1
 *
 * Revision 1.5  1997/10/01 09:21:35  fritz
 * Removed old compatibility stuff for 2.0.X kernels.
 * From now on, this code is for 2.1.X ONLY!
 * Old stuff is still in the separate branch.
 *
 * Revision 1.4  1997/08/15 17:48:02  keil
 * cosmetic
 *
 * Revision 1.3  1997/07/27 21:38:36  keil
 * new B-channel interface
 *
 * Revision 1.2  1997/06/26 11:16:19  keil
 * first version
 *
 *
 */</FONT>


<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="waitforCEC">waitforCEC</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> hscx)
{
	<FONT COLOR="#298C52">int</FONT> to = 50;

	<FONT COLOR="#298C52">while</FONT> ((<A HREF="asuscom.c.shtml#READHSCX">READHSCX</A>(cs, hscx, <A HREF="hscx.h.shtml#HSCX_STAR">HSCX_STAR</A>) &amp; 0x04) &amp;&amp; to) {
		udelay(1);
		to--;
	}
	<FONT COLOR="#298C52">if</FONT> (!to)
		printk(KERN_WARNING <FONT COLOR="#FF0000">"HiSax: waitforCEC timeout\n"</FONT>);
}


<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="waitforXFW">waitforXFW</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> hscx)
{
	<FONT COLOR="#298C52">int</FONT> to = 50;

	<FONT COLOR="#298C52">while</FONT> ((!(<A HREF="asuscom.c.shtml#READHSCX">READHSCX</A>(cs, hscx, <A HREF="hscx.h.shtml#HSCX_STAR">HSCX_STAR</A>) &amp; 0x44) == 0x40) &amp;&amp; to) {
		udelay(1);
		to--;
	}
	<FONT COLOR="#298C52">if</FONT> (!to)
		printk(KERN_WARNING <FONT COLOR="#FF0000">"HiSax: waitforXFW timeout\n"</FONT>);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#WriteHSCXCMDR">WriteHSCXCMDR</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> hscx, u_char data)
{
	<FONT COLOR="#298C52">long</FONT> flags;

	save_flags(flags);
	cli();
	<A HREF="#waitforCEC">waitforCEC</A>(cs, hscx);
	<A HREF="asuscom.c.shtml#WRITEHSCX">WRITEHSCX</A>(cs, hscx, <A HREF="hscx.h.shtml#HSCX_CMDR">HSCX_CMDR</A>, data);
	restore_flags(flags);
}



<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="hscx_empty_fifo">hscx_empty_fifo</A>(<FONT COLOR="#298C52">struct</FONT> BCState *bcs, <FONT COLOR="#298C52">int</FONT> count)
{
	u_char *ptr;
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = bcs-&gt;cs;
	<FONT COLOR="#298C52">long</FONT> flags;

	<FONT COLOR="#298C52">if</FONT> ((cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) &amp;&amp; !(cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX_FIFO">L1_DEB_HSCX_FIFO</A>))
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"hscx_empty_fifo"</FONT>);

	<FONT COLOR="#298C52">if</FONT> (bcs-&gt;hw.hscx.rcvidx + count &gt; <A HREF="hisax.h.shtml#HSCX_BUFMAX">HSCX_BUFMAX</A>) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_WARN">L1_DEB_WARN</A>)
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"hscx_empty_fifo: incoming packet too large"</FONT>);
		<A HREF="#WriteHSCXCMDR">WriteHSCXCMDR</A>(cs, bcs-&gt;channel, 0x80);
		bcs-&gt;hw.hscx.rcvidx = 0;
		<FONT COLOR="#298C52">return</FONT>;
	}
	ptr = bcs-&gt;hw.hscx.rcvbuf + bcs-&gt;hw.hscx.rcvidx;
	bcs-&gt;hw.hscx.rcvidx += count;
	save_flags(flags);
	cli();
	<A HREF="asuscom.c.shtml#READHSCXFIFO">READHSCXFIFO</A>(cs, bcs-&gt;channel, ptr, count);
	<A HREF="#WriteHSCXCMDR">WriteHSCXCMDR</A>(cs, bcs-&gt;channel, 0x80);
	restore_flags(flags);
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX_FIFO">L1_DEB_HSCX_FIFO</A>) {
		<FONT COLOR="#298C52">char</FONT> tmp[256];
		<FONT COLOR="#298C52">char</FONT> *t = tmp;

		t += sprintf(t, <FONT COLOR="#FF0000">"hscx_empty_fifo %c cnt %d"</FONT>,
			     bcs-&gt;channel ? <FONT COLOR="#FF0000">'B'</FONT> : <FONT COLOR="#FF0000">'A'</FONT>, count);
		<A HREF="q931.c.shtml#QuickHex">QuickHex</A>(t, ptr, count);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="hscx_fill_fifo">hscx_fill_fifo</A>(<FONT COLOR="#298C52">struct</FONT> BCState *bcs)
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = bcs-&gt;cs;
	<FONT COLOR="#298C52">int</FONT> more, count;
	<FONT COLOR="#298C52">int</FONT> fifo_size = test_bit(<A HREF="hisax.h.shtml#HW_IPAC">HW_IPAC</A>, &amp;cs-&gt;HW_Flags)? 64: 32;
	u_char *ptr;
	<FONT COLOR="#298C52">long</FONT> flags;


	<FONT COLOR="#298C52">if</FONT> ((cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) &amp;&amp; !(cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX_FIFO">L1_DEB_HSCX_FIFO</A>))
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"hscx_fill_fifo"</FONT>);

	<FONT COLOR="#298C52">if</FONT> (!bcs-&gt;hw.hscx.tx_skb)
		<FONT COLOR="#298C52">return</FONT>;
	<FONT COLOR="#298C52">if</FONT> (bcs-&gt;hw.hscx.tx_skb-&gt;len &lt;= 0)
		<FONT COLOR="#298C52">return</FONT>;

	more = (bcs-&gt;mode == <A HREF="hisax.h.shtml#L1_MODE_TRANS">L1_MODE_TRANS</A>) ? 1 : 0;
	<FONT COLOR="#298C52">if</FONT> (bcs-&gt;hw.hscx.tx_skb-&gt;len &gt; fifo_size) {
		more = !0;
		count = fifo_size;
	} <FONT COLOR="#298C52">else</FONT>
		count = bcs-&gt;hw.hscx.tx_skb-&gt;len;

	<A HREF="#waitforXFW">waitforXFW</A>(cs, bcs-&gt;channel);
	save_flags(flags);
	cli();
	ptr = bcs-&gt;hw.hscx.tx_skb-&gt;data;
	skb_pull(bcs-&gt;hw.hscx.tx_skb, count);
	bcs-&gt;tx_cnt -= count;
	bcs-&gt;hw.hscx.count += count;
	<A HREF="asuscom.c.shtml#WRITEHSCXFIFO">WRITEHSCXFIFO</A>(cs, bcs-&gt;channel, ptr, count);
	<A HREF="#WriteHSCXCMDR">WriteHSCXCMDR</A>(cs, bcs-&gt;channel, more ? 0x8 : 0xa);
	restore_flags(flags);
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX_FIFO">L1_DEB_HSCX_FIFO</A>) {
		<FONT COLOR="#298C52">char</FONT> tmp[256];
		<FONT COLOR="#298C52">char</FONT> *t = tmp;

		t += sprintf(t, <FONT COLOR="#FF0000">"hscx_fill_fifo %c cnt %d"</FONT>,
			     bcs-&gt;channel ? <FONT COLOR="#FF0000">'B'</FONT> : <FONT COLOR="#FF0000">'A'</FONT>, count);
		<A HREF="q931.c.shtml#QuickHex">QuickHex</A>(t, ptr, count);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#hscx_interrupt">hscx_interrupt</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char val, u_char hscx)
{
	u_char r;
	<FONT COLOR="#298C52">struct</FONT> BCState *bcs = cs-&gt;bcs + hscx;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;
	<FONT COLOR="#298C52">int</FONT> fifo_size = test_bit(<A HREF="hisax.h.shtml#HW_IPAC">HW_IPAC</A>, &amp;cs-&gt;HW_Flags)? 64: 32;
	<FONT COLOR="#298C52">int</FONT> count;
	<FONT COLOR="#298C52">char</FONT> tmp[32];

	<FONT COLOR="#298C52">if</FONT> (!test_bit(<A HREF="hisax.h.shtml#BC_FLG_INIT">BC_FLG_INIT</A>, &amp;bcs-&gt;Flag))
		<FONT COLOR="#298C52">return</FONT>;

	<FONT COLOR="#298C52">if</FONT> (val &amp; 0x80) {	<FONT COLOR=#0000FF>/* RME */</FONT>
		r = <A HREF="asuscom.c.shtml#READHSCX">READHSCX</A>(cs, hscx, <A HREF="hscx.h.shtml#HSCX_RSTA">HSCX_RSTA</A>);
		<FONT COLOR="#298C52">if</FONT> ((r &amp; 0xf0) != 0xa0) {
			<FONT COLOR="#298C52">if</FONT> (!(r &amp; 0x80))
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_WARN">L1_DEB_WARN</A>)
					<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"HSCX invalid frame"</FONT>);
			<FONT COLOR="#298C52">if</FONT> ((r &amp; 0x40) &amp;&amp; bcs-&gt;mode)
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_WARN">L1_DEB_WARN</A>) {
					sprintf(tmp, <FONT COLOR="#FF0000">"HSCX RDO mode=%d"</FONT>,
						bcs-&gt;mode);
					<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
				}
			<FONT COLOR="#298C52">if</FONT> (!(r &amp; 0x20))
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_WARN">L1_DEB_WARN</A>)
					<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"HSCX CRC error"</FONT>);
			<A HREF="#WriteHSCXCMDR">WriteHSCXCMDR</A>(cs, hscx, 0x80);
		} <FONT COLOR="#298C52">else</FONT> {
			count = <A HREF="asuscom.c.shtml#READHSCX">READHSCX</A>(cs, hscx, <A HREF="hscx.h.shtml#HSCX_RBCL">HSCX_RBCL</A>) &amp; (
				test_bit(<A HREF="hisax.h.shtml#HW_IPAC">HW_IPAC</A>, &amp;cs-&gt;HW_Flags)? 0x3f: 0x1f);
			<FONT COLOR="#298C52">if</FONT> (count == 0)
				count = fifo_size;
			<A HREF="#hscx_empty_fifo">hscx_empty_fifo</A>(bcs, count);
			<FONT COLOR="#298C52">if</FONT> ((count = bcs-&gt;hw.hscx.rcvidx - 1) &gt; 0) {
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX_FIFO">L1_DEB_HSCX_FIFO</A>) {
					sprintf(tmp, <FONT COLOR="#FF0000">"HX Frame %d"</FONT>, count);
					<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
				}
				<FONT COLOR="#298C52">if</FONT> (!(skb = dev_alloc_skb(count)))
					printk(KERN_WARNING <FONT COLOR="#FF0000">"HSCX: receive out of memory\n"</FONT>);
				<FONT COLOR="#298C52">else</FONT> {
					memcpy(skb_put(skb, count), bcs-&gt;hw.hscx.rcvbuf, count);
					skb_queue_tail(&amp;bcs-&gt;rqueue, skb);
				}
			}
		}
		bcs-&gt;hw.hscx.rcvidx = 0;
		<A HREF="hscx.c.shtml#hscx_sched_event">hscx_sched_event</A>(bcs, <A HREF="isdnl1.h.shtml#B_RCVBUFREADY">B_RCVBUFREADY</A>);
	}
	<FONT COLOR="#298C52">if</FONT> (val &amp; 0x40) {	<FONT COLOR=#0000FF>/* RPF */</FONT>
		<A HREF="#hscx_empty_fifo">hscx_empty_fifo</A>(bcs, fifo_size);
		<FONT COLOR="#298C52">if</FONT> (bcs-&gt;mode == <A HREF="hisax.h.shtml#L1_MODE_TRANS">L1_MODE_TRANS</A>) {
			<FONT COLOR=#0000FF>/* receive audio data */</FONT>
			<FONT COLOR="#298C52">if</FONT> (!(skb = dev_alloc_skb(fifo_size)))
				printk(KERN_WARNING <FONT COLOR="#FF0000">"HiSax: receive out of memory\n"</FONT>);
			<FONT COLOR="#298C52">else</FONT> {
				memcpy(skb_put(skb, fifo_size), bcs-&gt;hw.hscx.rcvbuf, fifo_size);
				skb_queue_tail(&amp;bcs-&gt;rqueue, skb);
			}
			bcs-&gt;hw.hscx.rcvidx = 0;
			<A HREF="hscx.c.shtml#hscx_sched_event">hscx_sched_event</A>(bcs, <A HREF="isdnl1.h.shtml#B_RCVBUFREADY">B_RCVBUFREADY</A>);
		}
	}
	<FONT COLOR="#298C52">if</FONT> (val &amp; 0x10) {	<FONT COLOR=#0000FF>/* XPR */</FONT>
		<FONT COLOR="#298C52">if</FONT> (bcs-&gt;hw.hscx.tx_skb) {
			<FONT COLOR="#298C52">if</FONT> (bcs-&gt;hw.hscx.tx_skb-&gt;len) {
				<A HREF="#hscx_fill_fifo">hscx_fill_fifo</A>(bcs);
				<FONT COLOR="#298C52">return</FONT>;
			} <FONT COLOR="#298C52">else</FONT> {
				<FONT COLOR="#298C52">if</FONT> (bcs-&gt;st-&gt;lli.l1writewakeup &amp;&amp;
					(<A HREF="hisax.h.shtml#PACKET_NOACK">PACKET_NOACK</A> != bcs-&gt;hw.hscx.tx_skb-&gt;pkt_type))
					bcs-&gt;st-&gt;lli.l1writewakeup(bcs-&gt;st, bcs-&gt;hw.hscx.count);
				dev_kfree_skb(bcs-&gt;hw.hscx.tx_skb);
				bcs-&gt;hw.hscx.count = 0; 
				bcs-&gt;hw.hscx.tx_skb = NULL;
			}
		}
		<FONT COLOR="#298C52">if</FONT> ((bcs-&gt;hw.hscx.tx_skb = skb_dequeue(&amp;bcs-&gt;squeue))) {
			bcs-&gt;hw.hscx.count = 0;
			test_and_set_bit(<A HREF="hisax.h.shtml#BC_FLG_BUSY">BC_FLG_BUSY</A>, &amp;bcs-&gt;Flag);
			<A HREF="#hscx_fill_fifo">hscx_fill_fifo</A>(bcs);
		} <FONT COLOR="#298C52">else</FONT> {
			test_and_clear_bit(<A HREF="hisax.h.shtml#BC_FLG_BUSY">BC_FLG_BUSY</A>, &amp;bcs-&gt;Flag);
			<A HREF="hscx.c.shtml#hscx_sched_event">hscx_sched_event</A>(bcs, <A HREF="isdnl1.h.shtml#B_XMTBUFREADY">B_XMTBUFREADY</A>);
		}
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#hscx_int_main">hscx_int_main</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char val)
{

	u_char exval;
	<FONT COLOR="#298C52">struct</FONT> BCState *bcs;
	<FONT COLOR="#298C52">char</FONT> tmp[32];

	<FONT COLOR="#298C52">if</FONT> (val &amp; 0x01) {
		bcs = cs-&gt;bcs + 1;
		exval = <A HREF="asuscom.c.shtml#READHSCX">READHSCX</A>(cs, 1, <A HREF="hscx.h.shtml#HSCX_EXIR">HSCX_EXIR</A>);
		<FONT COLOR="#298C52">if</FONT> (exval == 0x40) {
			<FONT COLOR="#298C52">if</FONT> (bcs-&gt;mode == 1)
				<A HREF="#hscx_fill_fifo">hscx_fill_fifo</A>(bcs);
			<FONT COLOR="#298C52">else</FONT> {
				<FONT COLOR=#0000FF>/* Here we lost an TX interrupt, so
				   * restart transmitting the whole frame.
				 */</FONT>
				<FONT COLOR="#298C52">if</FONT> (bcs-&gt;hw.hscx.tx_skb) {
					skb_push(bcs-&gt;hw.hscx.tx_skb, bcs-&gt;hw.hscx.count);
					bcs-&gt;tx_cnt += bcs-&gt;hw.hscx.count;
					bcs-&gt;hw.hscx.count = 0;
				}
				<A HREF="#WriteHSCXCMDR">WriteHSCXCMDR</A>(cs, bcs-&gt;channel, 0x01);
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_WARN">L1_DEB_WARN</A>) {
					sprintf(tmp, <FONT COLOR="#FF0000">"HSCX B EXIR %x Lost TX"</FONT>, exval);
					<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
				}
			}
		} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) {
			sprintf(tmp, <FONT COLOR="#FF0000">"HSCX B EXIR %x"</FONT>, exval);
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
		}
	}
	<FONT COLOR="#298C52">if</FONT> (val &amp; 0xf8) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) {
			sprintf(tmp, <FONT COLOR="#FF0000">"HSCX B interrupt %x"</FONT>, val);
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
		}
		<A HREF="#hscx_interrupt">hscx_interrupt</A>(cs, val, 1);
	}
	<FONT COLOR="#298C52">if</FONT> (val &amp; 0x02) {
		bcs = cs-&gt;bcs;
		exval = <A HREF="asuscom.c.shtml#READHSCX">READHSCX</A>(cs, 0, <A HREF="hscx.h.shtml#HSCX_EXIR">HSCX_EXIR</A>);
		<FONT COLOR="#298C52">if</FONT> (exval == 0x40) {
			<FONT COLOR="#298C52">if</FONT> (bcs-&gt;mode == <A HREF="hisax.h.shtml#L1_MODE_TRANS">L1_MODE_TRANS</A>)
				<A HREF="#hscx_fill_fifo">hscx_fill_fifo</A>(bcs);
			<FONT COLOR="#298C52">else</FONT> {
				<FONT COLOR=#0000FF>/* Here we lost an TX interrupt, so
				   * restart transmitting the whole frame.
				 */</FONT>
				<FONT COLOR="#298C52">if</FONT> (bcs-&gt;hw.hscx.tx_skb) {
					skb_push(bcs-&gt;hw.hscx.tx_skb, bcs-&gt;hw.hscx.count);
					bcs-&gt;tx_cnt += bcs-&gt;hw.hscx.count;
					bcs-&gt;hw.hscx.count = 0;
				}
				<A HREF="#WriteHSCXCMDR">WriteHSCXCMDR</A>(cs, bcs-&gt;channel, 0x01);
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_WARN">L1_DEB_WARN</A>) {
					sprintf(tmp, <FONT COLOR="#FF0000">"HSCX A EXIR %x Lost TX"</FONT>, exval);
					<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
				}
			}
		} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) {
			sprintf(tmp, <FONT COLOR="#FF0000">"HSCX A EXIR %x"</FONT>, exval);
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
		}
	}
	<FONT COLOR="#298C52">if</FONT> (val &amp; 0x04) {
		exval = <A HREF="asuscom.c.shtml#READHSCX">READHSCX</A>(cs, 0, <A HREF="hscx.h.shtml#HSCX_ISTA">HSCX_ISTA</A>);
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) {
			sprintf(tmp, <FONT COLOR="#FF0000">"HSCX A interrupt %x"</FONT>, exval);
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
		}
		<A HREF="#hscx_interrupt">hscx_interrupt</A>(cs, exval, 0);
	}
}
</BODY>

</HTML>
