<HTML>

<!-- Generated by c2html-1.0, Copyright 1998 by Dave Whittington -->
<HEAD>
<TITLE>elsa_ser.c</TITLE>
<!--#include virtual="/ssi/js.shtml" -->
<!--#include virtual="/ssi/buttondefs.shtml" -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<TABLE WIDTH="100%">
<TR>
<TD ALIGN=LEFT WIDTH="90"><!--#include virtual="/ssi/b_home.shtml" --></TD>
<TD ALIGN=RIGHT WIDTH="90"><!--#include virtual="/ssi/b_index.shtml" --></TD>
</TR>
</TABLE>
<CENTER><H1>elsa_ser.c</H1></CENTER>

<HR>
<PRE>
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/serial.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/serial_reg.h&gt;

<FONT COLOR=#A521F7>#define</FONT> MAX_MODEM_BUF	256
<FONT COLOR=#A521F7>#define</FONT> WAKEUP_CHARS	(MAX_MODEM_BUF/2)
<FONT COLOR=#A521F7>#define</FONT> RS_ISR_PASS_LIMIT 256
<FONT COLOR=#A521F7>#define</FONT> BASE_BAUD ( 1843200 / 16 )

<FONT COLOR=#A521F7>#ifndef</FONT> MIN
<FONT COLOR=#A521F7>#define</FONT> MIN(a,b)	((a) &lt; (b) ? (a) : (b))
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR=#A521F7>#define</FONT> SERIAL_DEBUG_OPEN 1
<FONT COLOR=#A521F7>#define</FONT> SERIAL_DEBUG_INTR 1
<FONT COLOR=#A521F7>#define</FONT> SERIAL_DEBUG_FLOW 1
<FONT COLOR=#A521F7>#undef</FONT> SERIAL_DEBUG_REG
<FONT COLOR=#0000FF>//#define SERIAL_DEBUG_REG</FONT>

<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_REG
<FONT COLOR="#298C52">static</FONT> u_char deb[32];
<FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *ModemIn[] = {<FONT COLOR="#FF0000">"RBR"</FONT>,<FONT COLOR="#FF0000">"IER"</FONT>,<FONT COLOR="#FF0000">"IIR"</FONT>,<FONT COLOR="#FF0000">"LCR"</FONT>,<FONT COLOR="#FF0000">"MCR"</FONT>,<FONT COLOR="#FF0000">"LSR"</FONT>,<FONT COLOR="#FF0000">"MSR"</FONT>,<FONT COLOR="#FF0000">"SCR"</FONT>};
<FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *ModemOut[] = {<FONT COLOR="#FF0000">"THR"</FONT>,<FONT COLOR="#FF0000">"IER"</FONT>,<FONT COLOR="#FF0000">"FCR"</FONT>,<FONT COLOR="#FF0000">"LCR"</FONT>,<FONT COLOR="#FF0000">"MCR"</FONT>,<FONT COLOR="#FF0000">"LSR"</FONT>,<FONT COLOR="#FF0000">"MSR"</FONT>,<FONT COLOR="#FF0000">"SCR"</FONT>};
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">char</FONT> *MInit_1 = <FONT COLOR="#FF0000">"AT &amp;F &amp;C1 E0 &amp;D2 L2 M1 S64=13\n\0"</FONT>;
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">char</FONT> *MInit_2 = <FONT COLOR="#FF0000">"AT+FCLASS=0 V1 S2=128 X1 \\V8\n\0"</FONT>;
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">char</FONT> *MInit_3 = <FONT COLOR="#FF0000">"AT %G0 %B2400 L0 M0 &amp;G0 %E1 %L1 %M0 %C3 \\N3\n\0"</FONT>;


<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> serial_in(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> offset)
{
<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_REG
	u_int val = inb(cs-&gt;hw.elsa.base + 8 + offset);
	sprintf(deb,<FONT COLOR="#FF0000">"in   %s %02x"</FONT>,ModemIn[offset], val);
	<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, deb);
	<FONT COLOR="#298C52">return</FONT>(val);
<FONT COLOR=#A521F7>#else</FONT>
	<FONT COLOR="#298C52">return</FONT> inb(cs-&gt;hw.elsa.base + 8 + offset);
<FONT COLOR=#A521F7>#endif</FONT>
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> serial_inp(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> offset)
{
<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_REG
<FONT COLOR=#A521F7>#ifdef</FONT> CONFIG_SERIAL_NOPAUSE_IO
	u_int val = inb(cs-&gt;hw.elsa.base + 8 + offset);
	sprintf(deb,<FONT COLOR="#FF0000">"inp  %s %02x"</FONT>,ModemIn[offset], val);
<FONT COLOR=#A521F7>#else</FONT>
	u_int val = inb_p(cs-&gt;hw.elsa.base + 8 + offset);
	sprintf(deb,<FONT COLOR="#FF0000">"inP  %s %02x"</FONT>,ModemIn[offset], val);
<FONT COLOR=#A521F7>#endif</FONT>
	<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, deb);
	<FONT COLOR="#298C52">return</FONT>(val);
<FONT COLOR=#A521F7>#else</FONT>
<FONT COLOR=#A521F7>#ifdef</FONT> CONFIG_SERIAL_NOPAUSE_IO
	<FONT COLOR="#298C52">return</FONT> inb(cs-&gt;hw.elsa.base + 8 + offset);
<FONT COLOR=#A521F7>#else</FONT>
	<FONT COLOR="#298C52">return</FONT> inb_p(cs-&gt;hw.elsa.base + 8 + offset);
<FONT COLOR=#A521F7>#endif</FONT>
<FONT COLOR=#A521F7>#endif</FONT>
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT> serial_out(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> offset, <FONT COLOR="#298C52">int</FONT> value)
{
<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_REG
	sprintf(deb,<FONT COLOR="#FF0000">"out  %s %02x"</FONT>,ModemOut[offset], value);
	<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, deb);
<FONT COLOR=#A521F7>#endif</FONT>
	outb(value, cs-&gt;hw.elsa.base + 8 + offset);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT> serial_outp(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> offset,
			       <FONT COLOR="#298C52">int</FONT> value)
{
<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_REG
<FONT COLOR=#A521F7>#ifdef</FONT> CONFIG_SERIAL_NOPAUSE_IO
	sprintf(deb,<FONT COLOR="#FF0000">"outp %s %02x"</FONT>,ModemOut[offset], value);
<FONT COLOR=#A521F7>#else</FONT>
	sprintf(deb,<FONT COLOR="#FF0000">"outP %s %02x"</FONT>,ModemOut[offset], value);
<FONT COLOR=#A521F7>#endif</FONT>
	<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, deb);
<FONT COLOR=#A521F7>#endif</FONT>
<FONT COLOR=#A521F7>#ifdef</FONT> CONFIG_SERIAL_NOPAUSE_IO
	outb(value, cs-&gt;hw.elsa.base + 8 + offset);
<FONT COLOR=#A521F7>#else</FONT>
    	outb_p(value, cs-&gt;hw.elsa.base + 8 + offset);
<FONT COLOR=#A521F7>#endif</FONT>
}

<FONT COLOR=#0000FF>/*
 * This routine is called to set the UART divisor registers to match
 * the specified baud rate for a serial port.
 */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> change_speed(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> baud)
{
	<FONT COLOR="#298C52">int</FONT>	quot = 0, baud_base;
	<FONT COLOR="#298C52">unsigned</FONT> cval, fcr = 0;
	<FONT COLOR="#298C52">int</FONT>	bits;
	<FONT COLOR="#298C52">char</FONT>	tmp[32];
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT>	flags;


	<FONT COLOR=#0000FF>/* byte size and parity */</FONT>
	cval = 0x03; bits = 10;
	<FONT COLOR=#0000FF>/* Determine divisor based on baud rate */</FONT>
	baud_base = BASE_BAUD;
	quot = baud_base / baud;
	<FONT COLOR=#0000FF>/* If the quotient is ever zero, default to 9600 bps */</FONT>
	<FONT COLOR="#298C52">if</FONT> (!quot)
		quot = baud_base / 9600;

	<FONT COLOR=#0000FF>/* Set up FIFO's */</FONT>
	<FONT COLOR="#298C52">if</FONT> ((baud_base / quot) &lt; 2400)
		fcr = UART_FCR_ENABLE_FIFO | UART_FCR_TRIGGER_1;
	<FONT COLOR="#298C52">else</FONT>
		fcr = UART_FCR_ENABLE_FIFO | UART_FCR_TRIGGER_8;
	serial_outp(cs, UART_FCR, fcr);
	<FONT COLOR=#0000FF>/* CTS flow control flag and modem status interrupts */</FONT>
	cs-&gt;hw.elsa.IER &amp;= ~UART_IER_MSI;
	cs-&gt;hw.elsa.IER |= UART_IER_MSI;
	serial_outp(cs, UART_IER, cs-&gt;hw.elsa.IER);

	sprintf(tmp,<FONT COLOR="#FF0000">"modem quot=0x%x"</FONT>, quot);
	<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	save_flags(flags); cli();
	serial_outp(cs, UART_LCR, cval | UART_LCR_DLAB);<FONT COLOR=#0000FF>/* set DLAB */</FONT>
	serial_outp(cs, UART_DLL, quot &amp; 0xff);		<FONT COLOR=#0000FF>/* LS of divisor */</FONT>
	serial_outp(cs, UART_DLM, quot &gt;&gt; 8);		<FONT COLOR=#0000FF>/* MS of divisor */</FONT>
	serial_outp(cs, UART_LCR, cval);		<FONT COLOR=#0000FF>/* reset DLAB */</FONT>
	restore_flags(flags);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> mstartup(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT> flags;
	<FONT COLOR="#298C52">int</FONT>	retval=0;


	save_flags(flags); cli();

	<FONT COLOR=#0000FF>/*
	 * Clear the FIFO buffers and disable them
	 * (they will be reenabled in change_speed())
	 */</FONT>
	serial_outp(cs, UART_FCR, (UART_FCR_CLEAR_RCVR | UART_FCR_CLEAR_XMIT));

	<FONT COLOR=#0000FF>/*
	 * At this point there's no way the LSR could still be 0xFF;
	 * if it is, then bail out, because there's likely no UART
	 * here.
	 */</FONT>
	<FONT COLOR="#298C52">if</FONT> (serial_inp(cs, UART_LSR) == 0xff) {
		retval = -ENODEV;
		<FONT COLOR="#298C52">goto</FONT> errout;
	}
	
	<FONT COLOR=#0000FF>/*
	 * Clear the interrupt registers.
	 */</FONT>
	(<FONT COLOR="#298C52">void</FONT>) serial_inp(cs, UART_RX);
	(<FONT COLOR="#298C52">void</FONT>) serial_inp(cs, UART_IIR);
	(<FONT COLOR="#298C52">void</FONT>) serial_inp(cs, UART_MSR);

	<FONT COLOR=#0000FF>/*
	 * Now, initialize the UART 
	 */</FONT>
	serial_outp(cs, UART_LCR, UART_LCR_WLEN8);	<FONT COLOR=#0000FF>/* reset DLAB */</FONT>

	cs-&gt;hw.elsa.MCR = 0;
	cs-&gt;hw.elsa.MCR = UART_MCR_DTR | UART_MCR_RTS | UART_MCR_OUT2;
	serial_outp(cs, UART_MCR, cs-&gt;hw.elsa.MCR);
	
	<FONT COLOR=#0000FF>/*
	 * Finally, enable interrupts
	 */</FONT>
	cs-&gt;hw.elsa.IER = UART_IER_MSI | UART_IER_RLSI | UART_IER_RDI;
	serial_outp(cs, UART_IER, cs-&gt;hw.elsa.IER);	<FONT COLOR=#0000FF>/* enable interrupts */</FONT>
	
	<FONT COLOR=#0000FF>/*
	 * And clear the interrupt registers again for luck.
	 */</FONT>
	(<FONT COLOR="#298C52">void</FONT>)serial_inp(cs, UART_LSR);
	(<FONT COLOR="#298C52">void</FONT>)serial_inp(cs, UART_RX);
	(<FONT COLOR="#298C52">void</FONT>)serial_inp(cs, UART_IIR);
	(<FONT COLOR="#298C52">void</FONT>)serial_inp(cs, UART_MSR);

	cs-&gt;hw.elsa.transcnt = cs-&gt;hw.elsa.transp = 0;
	cs-&gt;hw.elsa.rcvcnt = cs-&gt;hw.elsa.rcvp =0;

	<FONT COLOR=#0000FF>/*
	 * and set the speed of the serial port
	 */</FONT>
	change_speed(cs, 57600*2);
	cs-&gt;hw.elsa.MFlag = 1;
errout:
	restore_flags(flags);
	<FONT COLOR="#298C52">return</FONT> retval;
}

<FONT COLOR=#0000FF>/*
 * This routine will shutdown a serial port; interrupts are disabled, and
 * DTR is dropped if the hangup on close termio flag is on.
 */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> mshutdown(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT>	flags;


<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_OPEN
	printk(<FONT COLOR="#FF0000">"Shutting down serial ...."</FONT>);
<FONT COLOR=#A521F7>#endif</FONT>
	
	save_flags(flags); cli(); <FONT COLOR=#0000FF>/* Disable interrupts */</FONT>

	<FONT COLOR=#0000FF>/*
	 * clear delta_msr_wait queue to avoid mem leaks: we may free the irq
	 * here so the queue might never be waken up
	 */</FONT>

	cs-&gt;hw.elsa.IER = 0;
	serial_outp(cs, UART_IER, 0x00);	<FONT COLOR=#0000FF>/* disable all intrs */</FONT>
	cs-&gt;hw.elsa.MCR &amp;= ~UART_MCR_OUT2;
	
	<FONT COLOR=#0000FF>/* disable break condition */</FONT>
	serial_outp(cs, UART_LCR, serial_inp(cs, UART_LCR) &amp; ~UART_LCR_SBC);
	
	cs-&gt;hw.elsa.MCR &amp;= ~(UART_MCR_DTR|UART_MCR_RTS);
	serial_outp(cs, UART_MCR, cs-&gt;hw.elsa.MCR);

	<FONT COLOR=#0000FF>/* disable FIFO's */</FONT>	
	serial_outp(cs, UART_FCR, (UART_FCR_CLEAR_RCVR | UART_FCR_CLEAR_XMIT));
	serial_inp(cs, UART_RX);    <FONT COLOR=#0000FF>/* read data port to reset things */</FONT>
	
	restore_flags(flags);
}

<FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">int</FONT>
write_modem(<FONT COLOR="#298C52">struct</FONT> BCState *bcs) {
	<FONT COLOR="#298C52">int</FONT> ret=0;
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = bcs-&gt;cs;
	<FONT COLOR="#298C52">int</FONT> count, len, fp, buflen;
	<FONT COLOR="#298C52">long</FONT> flags;
	
	<FONT COLOR="#298C52">if</FONT> (!bcs-&gt;hw.hscx.tx_skb)
		<FONT COLOR="#298C52">return</FONT> 0;
	<FONT COLOR="#298C52">if</FONT> (bcs-&gt;hw.hscx.tx_skb-&gt;len &lt;= 0)
		<FONT COLOR="#298C52">return</FONT> 0;
	save_flags(flags);
	cli();
	buflen = MAX_MODEM_BUF - cs-&gt;hw.elsa.transcnt;
	len = MIN(buflen, bcs-&gt;hw.hscx.tx_skb-&gt;len);		
	fp = cs-&gt;hw.elsa.transcnt + cs-&gt;hw.elsa.transp;
	fp &amp;= (MAX_MODEM_BUF -1);
	count = MIN(len, MAX_MODEM_BUF - fp);
	<FONT COLOR="#298C52">if</FONT> (count &lt; len) {
		memcpy(cs-&gt;hw.elsa.transbuf + fp, skb_pull(bcs-&gt;hw.hscx.tx_skb, count), count);
		cs-&gt;hw.elsa.transcnt += count;
		ret = count;
		count = len - count;
		fp = 0;
	}
	memcpy(cs-&gt;hw.elsa.transbuf + fp, skb_pull(bcs-&gt;hw.hscx.tx_skb, count), count);
	cs-&gt;hw.elsa.transcnt += count;
	ret += count;
	
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.transcnt &amp;&amp; 
	    !(cs-&gt;hw.elsa.IER &amp; UART_IER_THRI)) {
		cs-&gt;hw.elsa.IER |= UART_IER_THRI;
		serial_outp(cs, UART_IER, cs-&gt;hw.elsa.IER);
	}
	restore_flags(flags);
	<FONT COLOR="#298C52">return</FONT>(ret);
}

<FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
modem_fill(<FONT COLOR="#298C52">struct</FONT> BCState *bcs) {
		
	<FONT COLOR="#298C52">if</FONT> (bcs-&gt;hw.hscx.tx_skb) {
		<FONT COLOR="#298C52">if</FONT> (bcs-&gt;hw.hscx.tx_skb-&gt;len) {
			write_modem(bcs);
			<FONT COLOR="#298C52">return</FONT>;
		} <FONT COLOR="#298C52">else</FONT> {
			<FONT COLOR="#298C52">if</FONT> (bcs-&gt;st-&gt;lli.l1writewakeup &amp;&amp;
				(<A HREF="hisax.h.shtml#PACKET_NOACK">PACKET_NOACK</A> != bcs-&gt;hw.hscx.tx_skb-&gt;pkt_type))
					bcs-&gt;st-&gt;lli.l1writewakeup(bcs-&gt;st,
						bcs-&gt;hw.hscx.count);
			dev_kfree_skb(bcs-&gt;hw.hscx.tx_skb);
			bcs-&gt;hw.hscx.tx_skb = NULL;
		}
	}
	<FONT COLOR="#298C52">if</FONT> ((bcs-&gt;hw.hscx.tx_skb = skb_dequeue(&amp;bcs-&gt;squeue))) {
		bcs-&gt;hw.hscx.count = 0;
		test_and_set_bit(<A HREF="hisax.h.shtml#BC_FLG_BUSY">BC_FLG_BUSY</A>, &amp;bcs-&gt;Flag);
		write_modem(bcs);
	} <FONT COLOR="#298C52">else</FONT> {
		test_and_clear_bit(<A HREF="hisax.h.shtml#BC_FLG_BUSY">BC_FLG_BUSY</A>, &amp;bcs-&gt;Flag);
		<A HREF="hscx.c.shtml#hscx_sched_event">hscx_sched_event</A>(bcs, <A HREF="isdnl1.h.shtml#B_XMTBUFREADY">B_XMTBUFREADY</A>);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT> receive_chars(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs,
				 <FONT COLOR="#298C52">int</FONT> *status)
{
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">char</FONT> ch;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;

	<FONT COLOR="#298C52">do</FONT> {
		ch = serial_in(cs, UART_RX);
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.rcvcnt &gt;= MAX_MODEM_BUF)
			<FONT COLOR="#298C52">break</FONT>;
		cs-&gt;hw.elsa.rcvbuf[cs-&gt;hw.elsa.rcvcnt++] = ch;
<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_INTR
		printk(<FONT COLOR="#FF0000">"DR%02x:%02x..."</FONT>, ch, *status);
<FONT COLOR=#A521F7>#endif</FONT>
		<FONT COLOR="#298C52">if</FONT> (*status &amp; (UART_LSR_BI | UART_LSR_PE |
			       UART_LSR_FE | UART_LSR_OE)) {
					
<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_INTR
			printk(<FONT COLOR="#FF0000">"handling exept...."</FONT>);
<FONT COLOR=#A521F7>#endif</FONT>
		}
		*status = serial_inp(cs, UART_LSR);
	} <FONT COLOR="#298C52">while</FONT> (*status &amp; UART_LSR_DR);
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.MFlag == 2) {
		<FONT COLOR="#298C52">if</FONT> (!(skb = dev_alloc_skb(cs-&gt;hw.elsa.rcvcnt)))
			printk(KERN_WARNING <FONT COLOR="#FF0000">"ElsaSER: receive out of memory\n"</FONT>);
		<FONT COLOR="#298C52">else</FONT> {
			memcpy(skb_put(skb, cs-&gt;hw.elsa.rcvcnt), cs-&gt;hw.elsa.rcvbuf, 
				cs-&gt;hw.elsa.rcvcnt);
			skb_queue_tail(&amp; cs-&gt;hw.elsa.bcs-&gt;rqueue, skb);
		}
		<A HREF="hscx.c.shtml#hscx_sched_event">hscx_sched_event</A>(cs-&gt;hw.elsa.bcs, <A HREF="isdnl1.h.shtml#B_RCVBUFREADY">B_RCVBUFREADY</A>);
	} <FONT COLOR="#298C52">else</FONT> {
		<FONT COLOR="#298C52">char</FONT> tmp[128];
		<FONT COLOR="#298C52">char</FONT> *t = tmp;

		t += sprintf(t, <FONT COLOR="#FF0000">"modem read cnt %d"</FONT>, cs-&gt;hw.elsa.rcvcnt);
		<A HREF="q931.c.shtml#QuickHex">QuickHex</A>(t, cs-&gt;hw.elsa.rcvbuf, cs-&gt;hw.elsa.rcvcnt);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	}
	cs-&gt;hw.elsa.rcvcnt = 0;
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT> transmit_chars(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> *intr_done)
{
	<FONT COLOR="#298C52">int</FONT> count;
	<FONT COLOR="#298C52">char</FONT> tmp[64];
	
	sprintf(tmp, <FONT COLOR="#FF0000">"transmit_chars: p(%x) cnt(%x)"</FONT>, cs-&gt;hw.elsa.transp, 
		cs-&gt;hw.elsa.transcnt);
	<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.transcnt &lt;= 0) {
		cs-&gt;hw.elsa.IER &amp;= ~UART_IER_THRI;
		serial_out(cs, UART_IER, cs-&gt;hw.elsa.IER);
		<FONT COLOR="#298C52">return</FONT>;
	}
	
	count = 16;
	<FONT COLOR="#298C52">do</FONT> {
		serial_outp(cs, UART_TX, cs-&gt;hw.elsa.transbuf[cs-&gt;hw.elsa.transp++]);
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.transp &gt;= MAX_MODEM_BUF)
			cs-&gt;hw.elsa.transp=0;
		<FONT COLOR="#298C52">if</FONT> (--cs-&gt;hw.elsa.transcnt &lt;= 0)
			<FONT COLOR="#298C52">break</FONT>;
	} <FONT COLOR="#298C52">while</FONT> (--count &gt; 0);
	<FONT COLOR="#298C52">if</FONT> ((cs-&gt;hw.elsa.transcnt &lt; WAKEUP_CHARS) &amp;&amp; (cs-&gt;hw.elsa.MFlag==2))
		modem_fill(cs-&gt;hw.elsa.bcs);

<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_INTR
	printk(<FONT COLOR="#FF0000">"THRE..."</FONT>);
<FONT COLOR=#A521F7>#endif</FONT>
	<FONT COLOR="#298C52">if</FONT> (intr_done)
		*intr_done = 0;
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.transcnt &lt;= 0) {
		cs-&gt;hw.elsa.IER &amp;= ~UART_IER_THRI;
		serial_outp(cs, UART_IER, cs-&gt;hw.elsa.IER);
	}
}

<FONT COLOR=#A521F7>#if</FONT> 0
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT> check_modem_status(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">int</FONT>	status;
	<FONT COLOR="#298C52">struct</FONT> async_struct *info = cs-&gt;hw.elsa.info;
	<FONT COLOR="#298C52">struct</FONT>	async_icount *icount;
	
	status = serial_inp(info, UART_MSR);

	<FONT COLOR="#298C52">if</FONT> (status &amp; UART_MSR_ANY_DELTA) {
		icount = &amp;info-&gt;state-&gt;icount;
		<FONT COLOR=#0000FF>/* update input line counters */</FONT>
		<FONT COLOR="#298C52">if</FONT> (status &amp; UART_MSR_TERI)
			icount-&gt;rng++;
		<FONT COLOR="#298C52">if</FONT> (status &amp; UART_MSR_DDSR)
			icount-&gt;dsr++;
		<FONT COLOR="#298C52">if</FONT> (status &amp; UART_MSR_DDCD) {
			icount-&gt;dcd++;
		}
		<FONT COLOR="#298C52">if</FONT> (status &amp; UART_MSR_DCTS)
			icount-&gt;cts++;
<FONT COLOR=#0000FF>//		wake_up_interruptible(&amp;info-&gt;delta_msr_wait);</FONT>
	}

	<FONT COLOR="#298C52">if</FONT> ((info-&gt;flags &amp; ASYNC_CHECK_CD) &amp;&amp; (status &amp; UART_MSR_DDCD)) {
<FONT COLOR=#A521F7>#if</FONT> (defined(SERIAL_DEBUG_OPEN) || defined(SERIAL_DEBUG_INTR))
		printk(<FONT COLOR="#FF0000">"ttys%d CD now %s..."</FONT>, info-&gt;line,
		       (status &amp; UART_MSR_DCD) ? <FONT COLOR="#FF0000">"on"</FONT> : <FONT COLOR="#FF0000">"off"</FONT>);
<FONT COLOR=#A521F7>#endif</FONT>		
		<FONT COLOR="#298C52">if</FONT> (status &amp; UART_MSR_DCD)
<FONT COLOR=#0000FF>//			wake_up_interruptible(&amp;info-&gt;open_wait);</FONT>
;
		<FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (!((info-&gt;flags &amp; ASYNC_CALLOUT_ACTIVE) &amp;&amp;
			   (info-&gt;flags &amp; ASYNC_CALLOUT_NOHUP))) {
<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_OPEN
			printk(<FONT COLOR="#FF0000">"doing serial hangup..."</FONT>);
<FONT COLOR=#A521F7>#endif</FONT>
			<FONT COLOR="#298C52">if</FONT> (info-&gt;tty)
				tty_hangup(info-&gt;tty);
		}
	}
<FONT COLOR=#A521F7>#if</FONT> 0
	<FONT COLOR="#298C52">if</FONT> (info-&gt;flags &amp; ASYNC_CTS_FLOW) {
		<FONT COLOR="#298C52">if</FONT> (info-&gt;tty-&gt;hw_stopped) {
			<FONT COLOR="#298C52">if</FONT> (status &amp; UART_MSR_CTS) {
<FONT COLOR=#A521F7>#if</FONT> (defined(SERIAL_DEBUG_INTR) || defined(SERIAL_DEBUG_FLOW))
				printk(<FONT COLOR="#FF0000">"CTS tx start..."</FONT>);
<FONT COLOR=#A521F7>#endif</FONT>
				info-&gt;tty-&gt;hw_stopped = 0;
				info-&gt;IER |= UART_IER_THRI;
				serial_outp(info, UART_IER, info-&gt;IER);
<FONT COLOR=#0000FF>//				rs_sched_event(info, RS_EVENT_WRITE_WAKEUP);</FONT>
				<FONT COLOR="#298C52">return</FONT>;
			}
		} <FONT COLOR="#298C52">else</FONT> {
			<FONT COLOR="#298C52">if</FONT> (!(status &amp; UART_MSR_CTS)) {
<FONT COLOR=#A521F7>#if</FONT> (defined(SERIAL_DEBUG_INTR) || defined(SERIAL_DEBUG_FLOW))
				printk(<FONT COLOR="#FF0000">"CTS tx stop..."</FONT>);
<FONT COLOR=#A521F7>#endif</FONT>
				info-&gt;tty-&gt;hw_stopped = 1;
				info-&gt;IER &amp;= ~UART_IER_THRI;
				serial_outp(info, UART_IER, info-&gt;IER);
			}
		}
	}
<FONT COLOR=#A521F7>#endif</FONT> 0
}
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> rs_interrupt_elsa(<FONT COLOR="#298C52">int</FONT> irq, <FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">int</FONT> status, iir, msr;
	<FONT COLOR="#298C52">int</FONT> pass_counter = 0;
	u_char tmp[64];
	
<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_INTR
	printk(<FONT COLOR="#FF0000">"rs_interrupt_single(%d)..."</FONT>, irq);
<FONT COLOR=#A521F7>#endif</FONT>

	<FONT COLOR="#298C52">do</FONT> {
		status = serial_inp(cs, UART_LSR);
		sprintf(tmp,<FONT COLOR="#FF0000">"rs LSR %02x"</FONT>, status);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_INTR
		printk(<FONT COLOR="#FF0000">"status = %x..."</FONT>, status);
<FONT COLOR=#A521F7>#endif</FONT>
		<FONT COLOR="#298C52">if</FONT> (status &amp; UART_LSR_DR)
			receive_chars(cs, &amp;status);
		<FONT COLOR="#298C52">if</FONT> (status &amp; UART_LSR_THRE)
			transmit_chars(cs, 0);
		<FONT COLOR="#298C52">if</FONT> (pass_counter++ &gt; RS_ISR_PASS_LIMIT) {
			printk(<FONT COLOR="#FF0000">"rs_single loop break.\n"</FONT>);
			<FONT COLOR="#298C52">break</FONT>;
		}
		iir = serial_inp(cs, UART_IIR);
		sprintf(tmp,<FONT COLOR="#FF0000">"rs IIR %02x"</FONT>, iir);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
		<FONT COLOR="#298C52">if</FONT> ((iir &amp; 0xf) == 0) {
			msr = serial_inp(cs, UART_MSR);
			sprintf(tmp,<FONT COLOR="#FF0000">"rs MSR %02x"</FONT>, msr);
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
		}
	} <FONT COLOR="#298C52">while</FONT> (!(iir &amp; UART_IIR_NO_INT));
<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_INTR
	printk(<FONT COLOR="#FF0000">"end.\n"</FONT>);
<FONT COLOR=#A521F7>#endif</FONT>
}

<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">int</FONT> <A HREF="hscx.c.shtml#open_hscxstate">open_hscxstate</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> bc);
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">void</FONT> <A HREF="hscx.c.shtml#modehscx">modehscx</A>(<FONT COLOR="#298C52">struct</FONT> BCState *bcs, <FONT COLOR="#298C52">int</FONT> mode, <FONT COLOR="#298C52">int</FONT> bc);
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">void</FONT> <A HREF="hscx.c.shtml#hscx_l2l1">hscx_l2l1</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> pr, <FONT COLOR="#298C52">void</FONT> *arg);

<FONT COLOR="#298C52">void</FONT>
close_elsastate(<FONT COLOR="#298C52">struct</FONT> BCState *bcs)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;

<FONT COLOR=#0000FF>//	modehscx(bcs, 0, 0);</FONT>
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#BC_FLG_INIT">BC_FLG_INIT</A>, &amp;bcs-&gt;Flag)) {
		<FONT COLOR="#298C52">if</FONT> (bcs-&gt;hw.hscx.rcvbuf) {
			<FONT COLOR="#298C52">if</FONT> (bcs-&gt;mode != <A HREF="hisax.h.shtml#L1_MODE_MODEM">L1_MODE_MODEM</A>)
				kfree(bcs-&gt;hw.hscx.rcvbuf);
			bcs-&gt;hw.hscx.rcvbuf = NULL;
		}
		<FONT COLOR="#298C52">while</FONT> ((skb = skb_dequeue(&amp;bcs-&gt;rqueue))) {
			dev_kfree_skb(skb);
		}
		<FONT COLOR="#298C52">while</FONT> ((skb = skb_dequeue(&amp;bcs-&gt;squeue))) {
			dev_kfree_skb(skb);
		}
		<FONT COLOR="#298C52">if</FONT> (bcs-&gt;hw.hscx.tx_skb) {
			dev_kfree_skb(bcs-&gt;hw.hscx.tx_skb);
			bcs-&gt;hw.hscx.tx_skb = NULL;
			test_and_clear_bit(<A HREF="hisax.h.shtml#BC_FLG_BUSY">BC_FLG_BUSY</A>, &amp;bcs-&gt;Flag);
		}
	}
}

<FONT COLOR="#298C52">void</FONT>
modem_l2l1(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">long</FONT> flags;

	<FONT COLOR="#298C52">if</FONT> (pr == (<A HREF="hisax.h.shtml#PH_DATA">PH_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>)) {
		save_flags(flags);
		cli();
		<FONT COLOR="#298C52">if</FONT> (st-&gt;l1.bcs-&gt;hw.hscx.tx_skb) {
			skb_queue_tail(&amp;st-&gt;l1.bcs-&gt;squeue, skb);
			restore_flags(flags);
		} <FONT COLOR="#298C52">else</FONT> {
			st-&gt;l1.bcs-&gt;hw.hscx.tx_skb = skb;
			test_and_set_bit(<A HREF="hisax.h.shtml#BC_FLG_BUSY">BC_FLG_BUSY</A>, &amp;st-&gt;l1.bcs-&gt;Flag);
			st-&gt;l1.bcs-&gt;hw.hscx.count = 0;
			restore_flags(flags);
			write_modem(st-&gt;l1.bcs);
		}
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (pr == (<A HREF="hisax.h.shtml#PH_ACTIVATE">PH_ACTIVATE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>)) {
		test_and_set_bit(<A HREF="hisax.h.shtml#BC_FLG_ACTIV">BC_FLG_ACTIV</A>, &amp;st-&gt;l1.bcs-&gt;Flag);
		st-&gt;l1.l1l2(st, <A HREF="hisax.h.shtml#PH_ACTIVATE">PH_ACTIVATE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, NULL);
		set_arcofi(st-&gt;l1.bcs-&gt;cs, st-&gt;l1.bc);
		st-&gt;l1.bcs-&gt;cs-&gt;hw.elsa.MFlag=2;
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (pr == (<A HREF="hisax.h.shtml#PH_DEACTIVATE">PH_DEACTIVATE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>)) {
		test_and_clear_bit(<A HREF="hisax.h.shtml#BC_FLG_ACTIV">BC_FLG_ACTIV</A>, &amp;st-&gt;l1.bcs-&gt;Flag);
		send_arcofi(st-&gt;l1.bcs-&gt;cs, ARCOFI_XOP_0, st-&gt;l1.bc, 0);
		st-&gt;l1.bcs-&gt;cs-&gt;hw.elsa.MFlag=1;
	} <FONT COLOR="#298C52">else</FONT> {
		printk(KERN_WARNING"ElsaSer: unknown pr %x\n", pr);
	}
}

<FONT COLOR="#298C52">void</FONT>
modem_write_cmd(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char *buf, <FONT COLOR="#298C52">int</FONT> len) {
	<FONT COLOR="#298C52">int</FONT> count, fp;
	u_char *msg = buf;
	<FONT COLOR="#298C52">long</FONT> flags;
	
	<FONT COLOR="#298C52">if</FONT> (!len)
		<FONT COLOR="#298C52">return</FONT>;
	save_flags(flags);
	cli();		
	<FONT COLOR="#298C52">if</FONT> (len &gt; (MAX_MODEM_BUF - cs-&gt;hw.elsa.transcnt)) {
		restore_flags(flags);
		<FONT COLOR="#298C52">return</FONT>;
	}
	fp = cs-&gt;hw.elsa.transcnt + cs-&gt;hw.elsa.transp;
	fp &amp;= (MAX_MODEM_BUF -1);
	count = MIN(len, MAX_MODEM_BUF - fp);
	<FONT COLOR="#298C52">if</FONT> (count &lt; len) {
		memcpy(cs-&gt;hw.elsa.transbuf + fp, msg, count);
		cs-&gt;hw.elsa.transcnt += count;
		msg += count;
		count = len - count;
		fp = 0;
	}
	memcpy(cs-&gt;hw.elsa.transbuf + fp, msg, count);
	cs-&gt;hw.elsa.transcnt += count;
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.transcnt &amp;&amp; 
	    !(cs-&gt;hw.elsa.IER &amp; UART_IER_THRI)) {
		cs-&gt;hw.elsa.IER |= UART_IER_THRI;
		serial_outp(cs, UART_IER, cs-&gt;hw.elsa.IER);
	}
	restore_flags(flags);
}

<FONT COLOR="#298C52">void</FONT>
modem_set_init(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs) {
	<FONT COLOR="#298C52">long</FONT> flags;
	<FONT COLOR="#298C52">int</FONT> timeout;
	
	save_flags(flags);
	sti();
	modem_write_cmd(cs, MInit_1, strlen(MInit_1));
	timeout = 1000;
	<FONT COLOR="#298C52">while</FONT>(timeout-- &amp;&amp; cs-&gt;hw.elsa.transcnt)
		udelay(1000);
	udelay(50000);
	modem_write_cmd(cs, MInit_2, strlen(MInit_2));
	timeout = 1000;
	<FONT COLOR="#298C52">while</FONT>(timeout-- &amp;&amp; cs-&gt;hw.elsa.transcnt)
		udelay(1000);
	udelay(50000);
	modem_write_cmd(cs, MInit_3, strlen(MInit_3));
	timeout = 1000;
	<FONT COLOR="#298C52">while</FONT>(timeout-- &amp;&amp; cs-&gt;hw.elsa.transcnt)
		udelay(1000);
	udelay(50000);
	restore_flags(flags);
}

<FONT COLOR="#298C52">int</FONT>
setstack_elsa(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">struct</FONT> BCState *bcs)
{

	<FONT COLOR="#298C52">switch</FONT> (st-&gt;l1.mode) {
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#L1_MODE_HDLC">L1_MODE_HDLC</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#L1_MODE_TRANS">L1_MODE_TRANS</A>:
			<FONT COLOR="#298C52">if</FONT> (<A HREF="hscx.c.shtml#open_hscxstate">open_hscxstate</A>(st-&gt;l1.hardware, bcs-&gt;channel))
				<FONT COLOR="#298C52">return</FONT> (-1);
			st-&gt;l2.l2l1 = <A HREF="hscx.c.shtml#hscx_l2l1">hscx_l2l1</A>;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#L1_MODE_MODEM">L1_MODE_MODEM</A>:
			bcs-&gt;mode = <A HREF="hisax.h.shtml#L1_MODE_MODEM">L1_MODE_MODEM</A>;
			<FONT COLOR="#298C52">if</FONT> (!test_and_set_bit(<A HREF="hisax.h.shtml#BC_FLG_INIT">BC_FLG_INIT</A>, &amp;bcs-&gt;Flag)) {
				bcs-&gt;hw.hscx.rcvbuf = bcs-&gt;cs-&gt;hw.elsa.rcvbuf;
				skb_queue_head_init(&amp;bcs-&gt;rqueue);
				skb_queue_head_init(&amp;bcs-&gt;squeue);
			}
			bcs-&gt;hw.hscx.tx_skb = NULL;
			test_and_clear_bit(<A HREF="hisax.h.shtml#BC_FLG_BUSY">BC_FLG_BUSY</A>, &amp;bcs-&gt;Flag);
			bcs-&gt;event = 0;
			bcs-&gt;hw.hscx.rcvidx = 0;
			bcs-&gt;tx_cnt = 0;
			bcs-&gt;cs-&gt;hw.elsa.bcs = bcs;
			st-&gt;l2.l2l1 = modem_l2l1;
			<FONT COLOR="#298C52">break</FONT>;
	}
	st-&gt;l1.bcs = bcs;
	<A HREF="lmgr.c.shtml#setstack_manager">setstack_manager</A>(st);
	bcs-&gt;st = st;
	<A HREF="isdnl1.c.shtml#setstack_l1_B">setstack_l1_B</A>(st);
	<FONT COLOR="#298C52">return</FONT> (0);
}

<FONT COLOR="#298C52">void</FONT>
init_modem(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs) {

	cs-&gt;bcs[0].BC_SetStack = setstack_elsa;
	cs-&gt;bcs[1].BC_SetStack = setstack_elsa;
	cs-&gt;bcs[0].BC_Close = close_elsastate;
	cs-&gt;bcs[1].BC_Close = close_elsastate;
	<FONT COLOR="#298C52">if</FONT> (!(cs-&gt;hw.elsa.rcvbuf = kmalloc(MAX_MODEM_BUF,
		GFP_ATOMIC))) {
		printk(KERN_WARNING
			<FONT COLOR="#FF0000">"Elsa: No modem mem hw.elsa.rcvbuf\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT>;
	}
	<FONT COLOR="#298C52">if</FONT> (!(cs-&gt;hw.elsa.transbuf = kmalloc(MAX_MODEM_BUF,
		GFP_ATOMIC))) {
		printk(KERN_WARNING
			<FONT COLOR="#FF0000">"Elsa: No modem mem hw.elsa.transbuf\n"</FONT>);
		kfree(cs-&gt;hw.elsa.rcvbuf);
		cs-&gt;hw.elsa.rcvbuf = NULL;
		<FONT COLOR="#298C52">return</FONT>;
	}
	<FONT COLOR="#298C52">if</FONT> (mstartup(cs)) {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"Elsa: problem startup modem\n"</FONT>);
	}
<FONT COLOR=#0000FF>//	modem_set_init(cs);</FONT>
}

<FONT COLOR="#298C52">void</FONT>
release_modem(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs) {

	cs-&gt;hw.elsa.MFlag = 0;
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.transbuf) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.rcvbuf) {
			mshutdown(cs);
			kfree(cs-&gt;hw.elsa.rcvbuf);
			cs-&gt;hw.elsa.rcvbuf = NULL;
		}
		kfree(cs-&gt;hw.elsa.transbuf);
		cs-&gt;hw.elsa.transbuf = NULL;
	}
}
</BODY>

</HTML>
