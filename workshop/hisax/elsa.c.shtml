<HTML>

<!-- Generated by c2html-1.0, Copyright 1998 by Dave Whittington -->
<HEAD>
<TITLE>elsa.c</TITLE>
<!--#include virtual="/ssi/js.shtml" -->
<!--#include virtual="/ssi/buttondefs.shtml" -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<TABLE WIDTH="100%">
<TR>
<TD ALIGN=LEFT WIDTH="90"><!--#include virtual="/ssi/b_home.shtml" --></TD>
<TD ALIGN=RIGHT WIDTH="90"><!--#include virtual="/ssi/b_index.shtml" --></TD>
</TR>
</TABLE>
<CENTER><H1>elsa.c</H1></CENTER>

<HR>
<PRE>
<FONT COLOR=#0000FF>/* $Id$

 * elsa.c     low level stuff for Elsa isdn cards
 *
 * Author     Karsten Keil (keil@temic-ech.spacenet.de)
 *
 * Thanks to    Elsa GmbH for documents and informations
 *
 *              Klaus Lichtenwalder (Klaus.Lichtenwalder@WebForum.DE)
 *              for ELSA PCMCIA support
 *
 *
 * $Log$
 * Revision 2.9  1998/05/25 12:57:48  keil
 * HiSax golden code from certification, Don't use !!!
 * No leased lines, no X75, but many changes.
 *
 * Revision 2.8  1998/04/15 16:41:42  keil
 * QS3000 PCI support
 * new init code
 * new PCI init (2.1.94)
 *
 * Revision 2.7  1998/03/07 22:56:58  tsbogend
 * made HiSax working on Linux/Alpha
 *
 * Revision 2.6  1998/02/02 13:29:40  keil
 * fast io
 *
 * Revision 2.5  1998/01/31 21:41:45  keil
 * changes for newer 2.1 kernels
 *
 * Revision 2.4  1997/11/08 21:35:46  keil
 * new l1 init
 *
 * Revision 2.3  1997/11/06 17:15:09  keil
 * New 2.1 init; PCMCIA wrapper changes
 *
 * Revision 2.2  1997/10/29 18:57:09  keil
 * changes for 2.1.60, arcofi support
 *
 * Revision 2.1  1997/07/27 21:47:08  keil
 * new interface structures
 *
 * Revision 2.0  1997/06/26 11:02:40  keil
 * New Layer and card interface
 *
 * old changes removed KKe
 *
 */</FONT>

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#__NO_VERSION__">__NO_VERSION__</A>
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/config.h&gt;
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hisax.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"arcofi.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isac.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"ipac.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hscx.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isdnl1.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/pci.h&gt;

<FONT COLOR=#0000FF>//#define KDEBUG_DEF</FONT>
<FONT COLOR=#0000FF>//#include "../kdebug.h"</FONT>

<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *CardType[];

<FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *Elsa_revision = <FONT COLOR="#FF0000">"$Revision$"</FONT>;
<FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *Elsa_Types[] =
{<FONT COLOR="#FF0000">"None"</FONT>, <FONT COLOR="#FF0000">"PC"</FONT>, <FONT COLOR="#FF0000">"PCC-8"</FONT>, <FONT COLOR="#FF0000">"PCC-16"</FONT>, <FONT COLOR="#FF0000">"PCF"</FONT>, <FONT COLOR="#FF0000">"PCF-Pro"</FONT>,
 <FONT COLOR="#FF0000">"PCMCIA"</FONT>, <FONT COLOR="#FF0000">"QS 1000"</FONT>, <FONT COLOR="#FF0000">"QS 3000"</FONT>, <FONT COLOR="#FF0000">"QS 1000 PCI"</FONT>, <FONT COLOR="#FF0000">"QS 3000 PCI"</FONT>};

<FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *ITACVer[] =
{<FONT COLOR="#FF0000">"?0?"</FONT>, <FONT COLOR="#FF0000">"?1?"</FONT>, <FONT COLOR="#FF0000">"?2?"</FONT>, <FONT COLOR="#FF0000">"?3?"</FONT>, <FONT COLOR="#FF0000">"?4?"</FONT>, <FONT COLOR="#FF0000">"V2.2"</FONT>,
 <FONT COLOR="#FF0000">"B1"</FONT>, <FONT COLOR="#FF0000">"A1"</FONT>};

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#byteout">byteout</A>(addr,val) outb(val,addr)
<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#bytein">bytein</A>(addr) inb(addr)

<FONT COLOR=#A521F7>#define</FONT> ELSA_ISAC	0
<FONT COLOR=#A521F7>#define</FONT> ELSA_ISAC_PCM	1
<FONT COLOR=#A521F7>#define</FONT> ELSA_ITAC	1
<FONT COLOR=#A521F7>#define</FONT> ELSA_HSCX	2
<FONT COLOR=#A521F7>#define</FONT> ELSA_ALE	3
<FONT COLOR=#A521F7>#define</FONT> ELSA_ALE_PCM	4
<FONT COLOR=#A521F7>#define</FONT> ELSA_CONTROL	4
<FONT COLOR=#A521F7>#define</FONT> ELSA_CONFIG	5
<FONT COLOR=#A521F7>#define</FONT> ELSA_START_TIMER 6
<FONT COLOR=#A521F7>#define</FONT> ELSA_TRIG_IRQ	7

<FONT COLOR=#A521F7>#define</FONT> ELSA_PC      1
<FONT COLOR=#A521F7>#define</FONT> ELSA_PCC8    2
<FONT COLOR=#A521F7>#define</FONT> ELSA_PCC16   3
<FONT COLOR=#A521F7>#define</FONT> ELSA_PCF     4
<FONT COLOR=#A521F7>#define</FONT> ELSA_PCFPRO  5
<FONT COLOR=#A521F7>#define</FONT> ELSA_PCMCIA  6
<FONT COLOR=#A521F7>#define</FONT> ELSA_QS1000  7
<FONT COLOR=#A521F7>#define</FONT> ELSA_QS3000  8
<FONT COLOR=#A521F7>#define</FONT> ELSA_QS1000PCI 9
<FONT COLOR=#A521F7>#define</FONT> ELSA_QS3000PCI 10

<FONT COLOR=#0000FF>/* PCI stuff */</FONT>
<FONT COLOR=#A521F7>#define</FONT> PCI_VENDOR_ELSA	0x1048
<FONT COLOR=#A521F7>#define</FONT> PCI_QS1000_ID	0x1000
<FONT COLOR=#A521F7>#define</FONT> PCI_QS3000_ID	0x3000
<FONT COLOR=#A521F7>#define</FONT> ELSA_PCI_IRQ_MASK	0x04

<FONT COLOR=#0000FF>/* ITAC Registeradressen (only Microlink PC) */</FONT>
<FONT COLOR=#A521F7>#define</FONT> ITAC_SYS	0x34
<FONT COLOR=#A521F7>#define</FONT> ITAC_ISEN	0x48
<FONT COLOR=#A521F7>#define</FONT> ITAC_RFIE	0x4A
<FONT COLOR=#A521F7>#define</FONT> ITAC_XFIE	0x4C
<FONT COLOR=#A521F7>#define</FONT> ITAC_SCIE	0x4E
<FONT COLOR=#A521F7>#define</FONT> ITAC_STIE	0x46

<FONT COLOR=#0000FF>/***                                                                    ***
 ***   Makros als Befehle fuer die Kartenregister                       ***
 ***   (mehrere Befehle werden durch Bit-Oderung kombiniert)            ***
 ***                                                                    ***/</FONT>

<FONT COLOR=#0000FF>/* Config-Register (Read) */</FONT>
<FONT COLOR=#A521F7>#define</FONT> ELSA_TIMER_RUN       0x02	<FONT COLOR=#0000FF>/* Bit 1 des Config-Reg     */</FONT>
<FONT COLOR=#A521F7>#define</FONT> ELSA_TIMER_RUN_PCC8  0x01	<FONT COLOR=#0000FF>/* Bit 0 des Config-Reg  bei PCC */</FONT>
<FONT COLOR=#A521F7>#define</FONT> ELSA_IRQ_IDX       0x38	<FONT COLOR=#0000FF>/* Bit 3,4,5 des Config-Reg */</FONT>
<FONT COLOR=#A521F7>#define</FONT> ELSA_IRQ_IDX_PCC8  0x30	<FONT COLOR=#0000FF>/* Bit 4,5 des Config-Reg */</FONT>
<FONT COLOR=#A521F7>#define</FONT> ELSA_IRQ_IDX_PC    0x0c	<FONT COLOR=#0000FF>/* Bit 2,3 des Config-Reg */</FONT>

<FONT COLOR=#0000FF>/* Control-Register (Write) */</FONT>
<FONT COLOR=#A521F7>#define</FONT> ELSA_LINE_LED        0x02	<FONT COLOR=#0000FF>/* Bit 1 Gelbe LED */</FONT>
<FONT COLOR=#A521F7>#define</FONT> ELSA_STAT_LED        0x08	<FONT COLOR=#0000FF>/* Bit 3 Gruene LED */</FONT>
<FONT COLOR=#A521F7>#define</FONT> ELSA_ISDN_RESET      0x20	<FONT COLOR=#0000FF>/* Bit 5 Reset-Leitung */</FONT>
<FONT COLOR=#A521F7>#define</FONT> ELSA_ENA_TIMER_INT   0x80	<FONT COLOR=#0000FF>/* Bit 7 Freigabe Timer Interrupt */</FONT>

<FONT COLOR=#0000FF>/* ALE-Register (Read) */</FONT>
<FONT COLOR=#A521F7>#define</FONT> ELSA_HW_RELEASE      0x07	<FONT COLOR=#0000FF>/* Bit 0-2 Hardwarerkennung */</FONT>
<FONT COLOR=#A521F7>#define</FONT> ELSA_S0_POWER_BAD    0x08	<FONT COLOR=#0000FF>/* Bit 3 S0-Bus Spannung fehlt */</FONT>

<FONT COLOR=#0000FF>/* Status Flags */</FONT>
<FONT COLOR=#A521F7>#define</FONT> ELSA_TIMER_AKTIV 1
<FONT COLOR=#A521F7>#define</FONT> ELSA_BAD_PWR     2
<FONT COLOR=#A521F7>#define</FONT> ELSA_ASSIGN      4

<FONT COLOR=#A521F7>#define</FONT> RS_ISR_PASS_LIMIT 256
<FONT COLOR=#A521F7>#define</FONT> _INLINE_ <FONT COLOR="#298C52">inline</FONT>
<FONT COLOR=#A521F7>#define</FONT> FLG_MODEM_ACTIVE 1
<FONT COLOR=#0000FF>/* IPAC AUX */</FONT>
<FONT COLOR=#A521F7>#define</FONT> ELSA_IPAC_LINE_LED	0x40	<FONT COLOR=#0000FF>/* Bit 6 Gelbe LED */</FONT>
<FONT COLOR=#A521F7>#define</FONT> ELSA_IPAC_STAT_LED	0x80	<FONT COLOR=#0000FF>/* Bit 7 Gruene LED */</FONT>

<FONT COLOR="#298C52">const</FONT> u_char ARCOFI_VERSION[] = {2,0xa0,0};
<FONT COLOR="#298C52">const</FONT> u_char ARCOFI_COP_5[] = {4,0xa1,0x25,0xbb,0x4a}; <FONT COLOR=#0000FF>/* GTX */</FONT>
<FONT COLOR="#298C52">const</FONT> u_char ARCOFI_COP_6[] = {6,0xa1,0x26,0,0,0x82,0x7c}; <FONT COLOR=#0000FF>/* GRL GRH */</FONT>
<FONT COLOR="#298C52">const</FONT> u_char ARCOFI_COP_7[] = {4,0xa1,0x27,0x80,0x80}; <FONT COLOR=#0000FF>/* GZ */</FONT>
<FONT COLOR="#298C52">const</FONT> u_char ARCOFI_COP_8[] = {10,0xa1,0x28,0x49,0x31,0x8,0x13,0x6e,0x88,0x2a,0x61}; <FONT COLOR=#0000FF>/* TX */</FONT>
<FONT COLOR="#298C52">const</FONT> u_char ARCOFI_COP_9[] = {10,0xa1,0x29,0x80,0xcb,0xe9,0x88,0x00,0xc8,0xd8,0x80}; <FONT COLOR=#0000FF>/* RX */</FONT>
<FONT COLOR="#298C52">const</FONT> u_char ARCOFI_XOP_0[] = {2,0xa1,0x30}; <FONT COLOR=#0000FF>/* PWR Down */</FONT>
<FONT COLOR="#298C52">const</FONT> u_char ARCOFI_XOP_1[] = {2,0xa1,0x31}; <FONT COLOR=#0000FF>/* PWR UP */</FONT>
<FONT COLOR="#298C52">const</FONT> u_char ARCOFI_XOP_F[] = {2,0xa1,0x3f}; <FONT COLOR=#0000FF>/* Normal OP */</FONT>
<FONT COLOR="#298C52">const</FONT> u_char ARCOFI_SOP_F[] = {10,0xa1,0x1f,0x00,0x50,0x10,0x00,0x00,0x80,0x02,0x12};
 
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> set_arcofi(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> bc);

<FONT COLOR=#A521F7>#if</FONT> <A HREF="isac.c.shtml#ARCOFI_USE">ARCOFI_USE</A>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"elsa_ser.c"</FONT>
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> u_char
<A HREF="asuscom.c.shtml#readreg">readreg</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> ale, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char off)
{
	<FONT COLOR="#298C52">register</FONT> u_char ret;
	<FONT COLOR="#298C52">long</FONT> flags;

	save_flags(flags);
	cli();
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(ale, off);
	ret = <A HREF="asuscom.c.shtml#bytein">bytein</A>(adr);
	restore_flags(flags);
	<FONT COLOR="#298C52">return</FONT> (ret);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#readfifo">readfifo</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> ale, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char off, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	<FONT COLOR=#0000FF>/* fifo read without cli because it's allready done  */</FONT>

	<A HREF="asuscom.c.shtml#byteout">byteout</A>(ale, off);
	insb(adr, data, size);
}


<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#writereg">writereg</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> ale, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char off, u_char data)
{
	<FONT COLOR="#298C52">long</FONT> flags;

	save_flags(flags);
	cli();
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(ale, off);
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(adr, data);
	restore_flags(flags);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#writefifo">writefifo</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> ale, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char off, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	<FONT COLOR=#0000FF>/* fifo write without cli because it's allready done  */</FONT>
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(ale, off);
	outsb(adr, data, size);
}

<FONT COLOR=#0000FF>/* Interface functions */</FONT>

<FONT COLOR="#298C52">static</FONT> u_char
<A HREF="asuscom.c.shtml#ReadISAC">ReadISAC</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char offset)
{
	<FONT COLOR="#298C52">return</FONT> (<A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.isac, offset));
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#WriteISAC">WriteISAC</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char offset, u_char value)
{
	<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.isac, offset, value);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#ReadISACfifo">ReadISACfifo</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	<A HREF="asuscom.c.shtml#readfifo">readfifo</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.isac, 0, data, size);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#WriteISACfifo">WriteISACfifo</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	<A HREF="asuscom.c.shtml#writefifo">writefifo</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.isac, 0, data, size);
}

<FONT COLOR="#298C52">static</FONT> u_char
ReadISAC_IPAC(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char offset)
{
	<FONT COLOR="#298C52">return</FONT> (<A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.isac, offset+0x80));
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
WriteISAC_IPAC(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char offset, u_char value)
{
	<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.isac, offset|0x80, value);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
ReadISACfifo_IPAC(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	<A HREF="asuscom.c.shtml#readfifo">readfifo</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.isac, 0x80, data, size);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
WriteISACfifo_IPAC(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	<A HREF="asuscom.c.shtml#writefifo">writefifo</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.isac, 0x80, data, size);
}

<FONT COLOR="#298C52">static</FONT> u_char
<A HREF="asuscom.c.shtml#ReadHSCX">ReadHSCX</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> hscx, u_char offset)
{
	<FONT COLOR="#298C52">return</FONT> (<A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.elsa.ale,
			cs-&gt;hw.elsa.hscx, offset + (hscx ? 0x40 : 0)));
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#WriteHSCX">WriteHSCX</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> hscx, u_char offset, u_char value)
{
	<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.elsa.ale,
		 cs-&gt;hw.elsa.hscx, offset + (hscx ? 0x40 : 0), value);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> u_char
readitac(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char off)
{
	<FONT COLOR="#298C52">register</FONT> u_char ret;
	<FONT COLOR="#298C52">long</FONT> flags;

	save_flags(flags);
	cli();
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.elsa.ale, off);
	ret = <A HREF="asuscom.c.shtml#bytein">bytein</A>(cs-&gt;hw.elsa.itac);
	restore_flags(flags);
	<FONT COLOR="#298C52">return</FONT> (ret);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
writeitac(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char off, u_char data)
{
	<FONT COLOR="#298C52">long</FONT> flags;

	save_flags(flags);
	cli();
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.elsa.ale, off);
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.elsa.itac, data);
	restore_flags(flags);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">int</FONT>
TimerRun(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">register</FONT> u_char v;

	v = <A HREF="asuscom.c.shtml#bytein">bytein</A>(cs-&gt;hw.elsa.cfg);
	<FONT COLOR="#298C52">if</FONT> ((cs-&gt;subtyp == ELSA_QS1000) || (cs-&gt;subtyp == ELSA_QS3000))
		<FONT COLOR="#298C52">return</FONT> (0 == (v &amp; ELSA_TIMER_RUN));
	<FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (cs-&gt;subtyp == ELSA_PCC8)
		<FONT COLOR="#298C52">return</FONT> (v &amp; ELSA_TIMER_RUN_PCC8);
	<FONT COLOR="#298C52">return</FONT> (v &amp; ELSA_TIMER_RUN);
}
<FONT COLOR=#0000FF>/*
 * fast interrupt HSCX stuff goes here
 */</FONT>

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#READHSCX">READHSCX</A>(cs, nr, reg) <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.elsa.ale, \
		cs-&gt;hw.elsa.hscx, reg + (nr ? 0x40 : 0))
<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#WRITEHSCX">WRITEHSCX</A>(cs, nr, reg, data) <A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.elsa.ale, \
		cs-&gt;hw.elsa.hscx, reg + (nr ? 0x40 : 0), data)

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#READHSCXFIFO">READHSCXFIFO</A>(cs, nr, ptr, cnt) <A HREF="asuscom.c.shtml#readfifo">readfifo</A>(cs-&gt;hw.elsa.ale, \
		cs-&gt;hw.elsa.hscx, (nr ? 0x40 : 0), ptr, cnt)

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#WRITEHSCXFIFO">WRITEHSCXFIFO</A>(cs, nr, ptr, cnt) <A HREF="asuscom.c.shtml#writefifo">writefifo</A>(cs-&gt;hw.elsa.ale, \
		cs-&gt;hw.elsa.hscx, (nr ? 0x40 : 0), ptr, cnt)

<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hscx_irq.c"</FONT>

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
elsa_interrupt(<FONT COLOR="#298C52">int</FONT> intno, <FONT COLOR="#298C52">void</FONT> *dev_id, <FONT COLOR="#298C52">struct</FONT> pt_regs *regs)
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = dev_id;
	u_char val;
	u_char tmp[32];
	<FONT COLOR="#298C52">int</FONT> icnt=20;

	<FONT COLOR="#298C52">if</FONT> (!cs) {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"Elsa: Spurious interrupt!\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT>;
	}
	<FONT COLOR="#298C52">if</FONT> ((cs-&gt;typ == <A HREF="hisax.h.shtml#ISDN_CTYPE_ELSA_PCMCIA">ISDN_CTYPE_ELSA_PCMCIA</A>) &amp;&amp; (*cs-&gt;busy_flag == 1)) {
	<FONT COLOR=#0000FF>/* The card tends to generate interrupts while being removed
	   causing us to just crash the kernel. bad. */</FONT>
		printk(KERN_WARNING <FONT COLOR="#FF0000">"Elsa: card not available!\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT>;
	}
<FONT COLOR=#A521F7>#if</FONT> <A HREF="isac.c.shtml#ARCOFI_USE">ARCOFI_USE</A>
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.MFlag) {
		val = serial_inp(cs, UART_IIR);
		<FONT COLOR="#298C52">if</FONT> (!(val &amp; UART_IIR_NO_INT)) {
			sprintf(tmp,<FONT COLOR="#FF0000">"IIR %02x"</FONT>, val);
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
			rs_interrupt_elsa(intno, cs);
		}
	}
<FONT COLOR=#A521F7>#endif</FONT>
	val = <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.hscx, <A HREF="hscx.h.shtml#HSCX_ISTA">HSCX_ISTA</A> + 0x40);
      Start_HSCX:
	<FONT COLOR="#298C52">if</FONT> (val) {
		<A HREF="hscx_irq.c.shtml#hscx_int_main">hscx_int_main</A>(cs, val);
	}
	val = <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.isac, <A HREF="isac.h.shtml#ISAC_ISTA">ISAC_ISTA</A>);
      Start_ISAC:
	<FONT COLOR="#298C52">if</FONT> (val) {
		<A HREF="isac.c.shtml#isac_interrupt">isac_interrupt</A>(cs, val);
	}
	val = <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.hscx, <A HREF="hscx.h.shtml#HSCX_ISTA">HSCX_ISTA</A> + 0x40);
	<FONT COLOR="#298C52">if</FONT> (val &amp;&amp; icnt) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>)
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"HSCX IntStat after IntRoutine"</FONT>);
		icnt--;
		<FONT COLOR="#298C52">goto</FONT> Start_HSCX;
	}
	val = <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.isac, <A HREF="isac.h.shtml#ISAC_ISTA">ISAC_ISTA</A>);
	<FONT COLOR="#298C52">if</FONT> (val &amp;&amp; icnt) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_ISAC">L1_DEB_ISAC</A>)
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"ISAC IntStat after IntRoutine"</FONT>);
		icnt--;
		<FONT COLOR="#298C52">goto</FONT> Start_ISAC;
	}
	<FONT COLOR="#298C52">if</FONT> (!icnt)
		printk(KERN_WARNING"ELSA IRQ LOOP\n");
	<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.hscx, <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A>, 0xFF);
	<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.hscx, <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A> + 0x40, 0xFF);
	<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.isac, <A HREF="isac.h.shtml#ISAC_MASK">ISAC_MASK</A>, 0xFF);
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.status &amp; ELSA_TIMER_AKTIV) {
		<FONT COLOR="#298C52">if</FONT> (!TimerRun(cs)) {
			<FONT COLOR=#0000FF>/* Timer Restart */</FONT>
			<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.elsa.timer, 0);
			cs-&gt;hw.elsa.counter++;
		}
	}
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.MFlag) {
		val = serial_inp(cs, UART_MCR);
		val ^= 0x8;
		serial_outp(cs, UART_MCR, val);
		val = serial_inp(cs, UART_MCR);
		val ^= 0x8;
		serial_outp(cs, UART_MCR, val);
	}
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.trig)
		<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.elsa.trig, 0x00);
	<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.hscx, <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A>, 0x0);
	<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.hscx, <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A> + 0x40, 0x0);
	<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.isac, <A HREF="isac.h.shtml#ISAC_MASK">ISAC_MASK</A>, 0x0);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
elsa_interrupt_ipac(<FONT COLOR="#298C52">int</FONT> intno, <FONT COLOR="#298C52">void</FONT> *dev_id, <FONT COLOR="#298C52">struct</FONT> pt_regs *regs)
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = dev_id;
	u_char ista,val;
	<FONT COLOR="#298C52">char</FONT>   tmp[64];
	<FONT COLOR="#298C52">int</FONT> icnt=20;

	<FONT COLOR="#298C52">if</FONT> (!cs) {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"Elsa: Spurious interrupt!\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT>;
	}
	val = <A HREF="asuscom.c.shtml#bytein">bytein</A>(cs-&gt;hw.elsa.cfg + 0x4c); <FONT COLOR=#0000FF>/* PCI IRQ */</FONT>
	<FONT COLOR="#298C52">if</FONT> (!(val &amp; ELSA_PCI_IRQ_MASK))
	  <FONT COLOR="#298C52">return</FONT>;
	ista = <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.isac, IPAC_ISTA);
Start_IPAC:
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_IPAC">L1_DEB_IPAC</A>) {
		sprintf(tmp, <FONT COLOR="#FF0000">"IPAC ISTA %02X"</FONT>, ista);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	}
	<FONT COLOR="#298C52">if</FONT> (ista &amp; 0x0f) {
		val = <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.hscx, <A HREF="hscx.h.shtml#HSCX_ISTA">HSCX_ISTA</A> + 0x40);
		<FONT COLOR="#298C52">if</FONT> (ista &amp; 0x01)
			val |= 0x01;
		<FONT COLOR="#298C52">if</FONT> (ista &amp; 0x04)
			val |= 0x02;
		<FONT COLOR="#298C52">if</FONT> (ista &amp; 0x08)
			val |= 0x04;
		<FONT COLOR="#298C52">if</FONT> (val)
			<A HREF="hscx_irq.c.shtml#hscx_int_main">hscx_int_main</A>(cs, val);
	}
	<FONT COLOR="#298C52">if</FONT> (ista &amp; 0x20) {
		val = 0xfe &amp; <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.isac, <A HREF="isac.h.shtml#ISAC_ISTA">ISAC_ISTA</A> + 0x80);
		<FONT COLOR="#298C52">if</FONT> (val) {
			<A HREF="isac.c.shtml#isac_interrupt">isac_interrupt</A>(cs, val);
		}
	}
	<FONT COLOR="#298C52">if</FONT> (ista &amp; 0x10) {
		val = 0x01;
		<A HREF="isac.c.shtml#isac_interrupt">isac_interrupt</A>(cs, val);
	}
	ista  = <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.isac, IPAC_ISTA);
	<FONT COLOR="#298C52">if</FONT> ((ista &amp; 0x3f) &amp;&amp; icnt) {
		icnt--;
		<FONT COLOR="#298C52">goto</FONT> Start_IPAC;
	}
	<FONT COLOR="#298C52">if</FONT> (!icnt)
		printk(KERN_WARNING <FONT COLOR="#FF0000">"ELSA IRQ LOOP\n"</FONT>);
	<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.isac, IPAC_MASK, 0xFF);
	<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.isac, IPAC_MASK, 0xC0);
}

<FONT COLOR="#298C52">void</FONT>
release_io_elsa(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">int</FONT> bytecnt = 8;

	del_timer(&amp;cs-&gt;hw.elsa.tl);
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.ctrl)
		<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.elsa.ctrl, 0);	<FONT COLOR=#0000FF>/* LEDs Out */</FONT>
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;subtyp == ELSA_QS1000PCI) {
		<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.elsa.cfg + 0x4c, 0x01);  <FONT COLOR=#0000FF>/* disable IRQ */</FONT>
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.isac, IPAC_ATX, 0xff);
		bytecnt = 2;
		release_region(cs-&gt;hw.elsa.cfg, 0x80);
	}
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;subtyp == ELSA_QS3000PCI) {
		<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.elsa.cfg + 0x4c, 0x03); <FONT COLOR=#0000FF>/* enable ELSA PCI IRQ */</FONT>
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.isac, IPAC_ATX, 0xff);
		release_region(cs-&gt;hw.elsa.cfg, 0x80);
	}
	<FONT COLOR="#298C52">if</FONT> ((cs-&gt;subtyp == ELSA_PCFPRO) || 
		(cs-&gt;subtyp == ELSA_QS3000) ||
		(cs-&gt;subtyp == ELSA_PCF) ||
		(cs-&gt;subtyp == ELSA_QS3000PCI)) {
		bytecnt = 16;
		release_modem(cs);
	}
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.base)
		release_region(cs-&gt;hw.elsa.base, bytecnt);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
reset_elsa(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">long</FONT> flags;

	<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.timer) {
		<FONT COLOR=#0000FF>/* Wait 1 Timer */</FONT>
		<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.elsa.timer, 0);
		<FONT COLOR="#298C52">while</FONT> (TimerRun(cs));
		cs-&gt;hw.elsa.ctrl_reg |= 0x50;
		cs-&gt;hw.elsa.ctrl_reg &amp;= ~ELSA_ISDN_RESET;	<FONT COLOR=#0000FF>/* Reset On */</FONT>
		<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.elsa.ctrl, cs-&gt;hw.elsa.ctrl_reg);
		<FONT COLOR=#0000FF>/* Wait 1 Timer */</FONT>
		<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.elsa.timer, 0);
		<FONT COLOR="#298C52">while</FONT> (TimerRun(cs));
		cs-&gt;hw.elsa.ctrl_reg |= ELSA_ISDN_RESET;	<FONT COLOR=#0000FF>/* Reset Off */</FONT>
		<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.elsa.ctrl, cs-&gt;hw.elsa.ctrl_reg);
		<FONT COLOR=#0000FF>/* Wait 1 Timer */</FONT>
		<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.elsa.timer, 0);
		<FONT COLOR="#298C52">while</FONT> (TimerRun(cs));
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.trig)
			<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.elsa.trig, 0xff);
	}
	<FONT COLOR="#298C52">if</FONT> ((cs-&gt;subtyp == ELSA_QS1000PCI) || (cs-&gt;subtyp == ELSA_QS3000PCI)) {
		save_flags(flags);
		sti();
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.isac, IPAC_POTA2, 0x20);
		current-&gt;state = TASK_INTERRUPTIBLE;
		current-&gt;timeout = jiffies + (10 * HZ) / 1000;	<FONT COLOR=#0000FF>/* Timeout 10ms */</FONT>
		schedule();
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.isac, IPAC_POTA2, 0x00);
		current-&gt;state = TASK_INTERRUPTIBLE;
		current-&gt;timeout = jiffies + (10 * HZ) / 1000;	<FONT COLOR=#0000FF>/* Timeout 10ms */</FONT>
		schedule();
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.isac, IPAC_MASK, 0xc0);
		schedule();
		restore_flags(flags);
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.isac, IPAC_ACFG, 0x0);
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.isac, IPAC_AOE, 0x3c);
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.isac, IPAC_ATX, 0xff);
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;subtyp == ELSA_QS1000PCI) 
		<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.elsa.cfg + 0x4c, 0x41); <FONT COLOR=#0000FF>/* enable ELSA PCI IRQ */</FONT>
		<FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (cs-&gt;subtyp == ELSA_QS3000PCI)
			<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.elsa.cfg + 0x4c, 0x43); <FONT COLOR=#0000FF>/* enable ELSA PCI IRQ */</FONT>
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
init_arcofi(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs) {
	send_arcofi(cs, ARCOFI_XOP_0, 1, 0);
<FONT COLOR=#0000FF>/*	send_arcofi(cs, ARCOFI_XOP_F, 1);
*/</FONT>
}

<FONT COLOR=#A521F7>#define</FONT> ARCDEL 500

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
set_arcofi(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> bc) {
	<FONT COLOR="#298C52">long</FONT> flags;
	<FONT COLOR="#298C52">char</FONT> tmp[32];
	
	sprintf(tmp,<FONT COLOR="#FF0000">"set_arcofi bc=%d"</FONT>, bc);
	<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	save_flags(flags);
	sti();
	send_arcofi(cs, ARCOFI_XOP_0, bc, 0);
	udelay(ARCDEL);
	send_arcofi(cs, ARCOFI_COP_5, bc, 0);
	udelay(ARCDEL);
	send_arcofi(cs, ARCOFI_COP_6, bc, 0);
	udelay(ARCDEL);
	send_arcofi(cs, ARCOFI_COP_7, bc, 0);
	udelay(ARCDEL);
	send_arcofi(cs, ARCOFI_COP_8, bc, 0);
	udelay(ARCDEL);
	send_arcofi(cs, ARCOFI_COP_9, bc, 0);
	udelay(ARCDEL);
	send_arcofi(cs, ARCOFI_SOP_F, bc, 0);
	udelay(ARCDEL);
	send_arcofi(cs, ARCOFI_XOP_1, bc, 0);
	udelay(ARCDEL);
	send_arcofi(cs, ARCOFI_XOP_F, bc, 0);
	restore_flags(flags);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
check_arcofi(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
<FONT COLOR=#A521F7>#if</FONT> <A HREF="isac.c.shtml#ARCOFI_USE">ARCOFI_USE</A>
	<FONT COLOR="#298C52">int</FONT> arcofi_present = 0;
	<FONT COLOR="#298C52">char</FONT> tmp[40];
	<FONT COLOR="#298C52">char</FONT> *t;
	u_char *p;

	<FONT COLOR="#298C52">if</FONT> (!cs-&gt;mon_tx)
		<FONT COLOR="#298C52">if</FONT> (!(cs-&gt;mon_tx=kmalloc(<A HREF="hisax.h.shtml#MAX_MON_FRAME">MAX_MON_FRAME</A>, GFP_ATOMIC))) {
			<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_WARN">L1_DEB_WARN</A>)
				<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"ISAC MON TX out of buffers!"</FONT>);
			<FONT COLOR="#298C52">return</FONT>(0);
		}
	send_arcofi(cs, ARCOFI_VERSION, 0, 1);
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#HW_MON1_TX_END">HW_MON1_TX_END</A>, &amp;cs-&gt;HW_Flags)) {
		<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#HW_MON1_RX_END">HW_MON1_RX_END</A>, &amp;cs-&gt;HW_Flags)) {
			sprintf(tmp, <FONT COLOR="#FF0000">"Arcofi response received %d bytes"</FONT>, cs-&gt;mon_rxp);
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
			p = cs-&gt;mon_rx;
			t = tmp;
			t += sprintf(tmp, <FONT COLOR="#FF0000">"Arcofi data"</FONT>);
			<A HREF="q931.c.shtml#QuickHex">QuickHex</A>(t, p, cs-&gt;mon_rxp);
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
			<FONT COLOR="#298C52">if</FONT> ((cs-&gt;mon_rxp == 2) &amp;&amp; (cs-&gt;mon_rx[0] == 0xa0)) {
				<FONT COLOR="#298C52">switch</FONT>(cs-&gt;mon_rx[1]) {
					<FONT COLOR="#298C52">case</FONT> 0x80:
						<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"Arcofi 2160 detected"</FONT>);
						arcofi_present = 1;
						<FONT COLOR="#298C52">break</FONT>;
					<FONT COLOR="#298C52">case</FONT> 0x82:
						<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"Arcofi 2165 detected"</FONT>);
						arcofi_present = 2;
						<FONT COLOR="#298C52">break</FONT>;
					<FONT COLOR="#298C52">case</FONT> 0x84:
						<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"Arcofi 2163 detected"</FONT>);
						arcofi_present = 3;
						<FONT COLOR="#298C52">break</FONT>;
					<FONT COLOR="#298C52">default</FONT>:
						<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"unknown Arcofi response"</FONT>);
						<FONT COLOR="#298C52">break</FONT>;
				}
			} <FONT COLOR="#298C52">else</FONT>
				<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"undefined Monitor response"</FONT>);
			cs-&gt;mon_rxp = 0;
		}
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (cs-&gt;mon_tx) {
		sprintf(tmp, <FONT COLOR="#FF0000">"Arcofi not detected"</FONT>);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	}
	<FONT COLOR="#298C52">if</FONT> (arcofi_present) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;subtyp==ELSA_QS1000) {
			cs-&gt;subtyp = ELSA_QS3000;
			printk(KERN_INFO
				<FONT COLOR="#FF0000">"Elsa: %s detected modem at 0x%x\n"</FONT>,
				Elsa_Types[cs-&gt;subtyp],
				cs-&gt;hw.elsa.base+8);
			release_region(cs-&gt;hw.elsa.base, 8);
			<FONT COLOR="#298C52">if</FONT> (check_region(cs-&gt;hw.elsa.base, 16)) {
				printk(KERN_WARNING
				<FONT COLOR="#FF0000">"HiSax: %s config port %x-%x already in use\n"</FONT>,
				Elsa_Types[cs-&gt;subtyp],
				cs-&gt;hw.elsa.base + 8,
				cs-&gt;hw.elsa.base + 16);
			} <FONT COLOR="#298C52">else</FONT>
				request_region(cs-&gt;hw.elsa.base, 16,
					<FONT COLOR="#FF0000">"elsa isdn modem"</FONT>);
		} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (cs-&gt;subtyp==ELSA_PCC16) {
			cs-&gt;subtyp = ELSA_PCF;
			printk(KERN_INFO
				<FONT COLOR="#FF0000">"Elsa: %s detected modem at 0x%x\n"</FONT>,
				Elsa_Types[cs-&gt;subtyp],
				cs-&gt;hw.elsa.base+8);
			release_region(cs-&gt;hw.elsa.base, 8);
			<FONT COLOR="#298C52">if</FONT> (check_region(cs-&gt;hw.elsa.base, 16)) {
				printk(KERN_WARNING
				<FONT COLOR="#FF0000">"HiSax: %s config port %x-%x already in use\n"</FONT>,
				Elsa_Types[cs-&gt;subtyp],
				cs-&gt;hw.elsa.base + 8,
				cs-&gt;hw.elsa.base + 16);
			} <FONT COLOR="#298C52">else</FONT>
				request_region(cs-&gt;hw.elsa.base, 16,
					<FONT COLOR="#FF0000">"elsa isdn modem"</FONT>);
		} <FONT COLOR="#298C52">else</FONT>
			printk(KERN_INFO
				<FONT COLOR="#FF0000">"Elsa: %s detected modem at 0x%x\n"</FONT>,
				Elsa_Types[cs-&gt;subtyp],
				cs-&gt;hw.elsa.base+8);
		init_arcofi(cs);
		<FONT COLOR="#298C52">return</FONT>(1);
	}
<FONT COLOR=#A521F7>#endif</FONT>
	<FONT COLOR="#298C52">return</FONT>(0);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
elsa_led_handler(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">int</FONT> blink = 0;

	<FONT COLOR="#298C52">if</FONT> (cs-&gt;subtyp == ELSA_PCMCIA)
		<FONT COLOR="#298C52">return</FONT>;
	del_timer(&amp;cs-&gt;hw.elsa.tl);
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.status &amp; ELSA_ASSIGN)
		cs-&gt;hw.elsa.ctrl_reg |= ELSA_STAT_LED;
	<FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.status &amp; ELSA_BAD_PWR)
		cs-&gt;hw.elsa.ctrl_reg &amp;= ~ELSA_STAT_LED;
	<FONT COLOR="#298C52">else</FONT> {
		cs-&gt;hw.elsa.ctrl_reg ^= ELSA_STAT_LED;
		blink = 250;
	}
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.status &amp; 0xf000)
		cs-&gt;hw.elsa.ctrl_reg |= ELSA_LINE_LED;
	<FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.status &amp; 0x0f00) {
		cs-&gt;hw.elsa.ctrl_reg ^= ELSA_LINE_LED;
		blink = 500;
	} <FONT COLOR="#298C52">else</FONT>
		cs-&gt;hw.elsa.ctrl_reg &amp;= ~ELSA_LINE_LED;

	<FONT COLOR="#298C52">if</FONT> ((cs-&gt;subtyp == ELSA_QS1000PCI) ||
		(cs-&gt;subtyp == ELSA_QS3000PCI)) {
		u_char led = 0xff;
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.ctrl_reg &amp; ELSA_LINE_LED) 
			led ^= ELSA_IPAC_LINE_LED;
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.ctrl_reg &amp; ELSA_STAT_LED)
			led ^= ELSA_IPAC_STAT_LED;
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.isac, IPAC_ATX, led);
	} <FONT COLOR="#298C52">else</FONT>	
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.elsa.ctrl, cs-&gt;hw.elsa.ctrl_reg);
	<FONT COLOR="#298C52">if</FONT> (blink) {
		init_timer(&amp;cs-&gt;hw.elsa.tl);
		cs-&gt;hw.elsa.tl.expires = jiffies + ((blink * HZ) / 1000);
		add_timer(&amp;cs-&gt;hw.elsa.tl);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
Elsa_card_msg(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> mt, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">int</FONT> pwr, len, ret = 0;
	u_char *msg;
	<FONT COLOR="#298C52">long</FONT> flags;

	<FONT COLOR="#298C52">switch</FONT> (mt) {
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_RESET">CARD_RESET</A>:
			reset_elsa(cs);
			<FONT COLOR="#298C52">return</FONT>(0);
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_RELEASE">CARD_RELEASE</A>:
			release_io_elsa(cs);
			<FONT COLOR="#298C52">return</FONT>(0);
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_SETIRQ">CARD_SETIRQ</A>:
			<FONT COLOR="#298C52">if</FONT> ((cs-&gt;subtyp == ELSA_QS1000PCI) ||
				(cs-&gt;subtyp == ELSA_QS3000PCI))
				ret = request_irq(cs-&gt;irq, &amp;elsa_interrupt_ipac,
					<A HREF="hisax.h.shtml#I4L_IRQ_FLAG">I4L_IRQ_FLAG</A>, <FONT COLOR="#FF0000">"HiSax"</FONT>, cs);
			<FONT COLOR="#298C52">else</FONT>
				ret = request_irq(cs-&gt;irq, &amp;elsa_interrupt,
					<A HREF="hisax.h.shtml#I4L_IRQ_FLAG">I4L_IRQ_FLAG</A>, <FONT COLOR="#FF0000">"HiSax"</FONT>, cs);
			<FONT COLOR="#298C52">return</FONT>(ret);
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_INIT">CARD_INIT</A>:
			cs-&gt;debug |= <A HREF="isdnl1.h.shtml#L1_DEB_IPAC">L1_DEB_IPAC</A>;
			inithscxisac(cs, 1);
			<FONT COLOR="#298C52">if</FONT> ((cs-&gt;subtyp == ELSA_QS1000) ||
			    (cs-&gt;subtyp == ELSA_QS3000)) 
			{
				<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.elsa.timer, 0);
			}
			<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.trig)
				<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.elsa.trig, 0xff);
			inithscxisac(cs, 2);
			<FONT COLOR="#298C52">return</FONT>(0);
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_TEST">CARD_TEST</A>:
			<FONT COLOR="#298C52">if</FONT> ((cs-&gt;subtyp == ELSA_PCMCIA) ||
				(cs-&gt;subtyp == ELSA_QS1000PCI)) {
				<FONT COLOR="#298C52">return</FONT>(0);
			} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (cs-&gt;subtyp == ELSA_QS3000PCI) {
				ret = 0;
			} <FONT COLOR="#298C52">else</FONT> {
				save_flags(flags);
				cs-&gt;hw.elsa.counter = 0;
				sti();
				cs-&gt;hw.elsa.ctrl_reg |= ELSA_ENA_TIMER_INT;
				cs-&gt;hw.elsa.status |= ELSA_TIMER_AKTIV;
				<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.elsa.ctrl, cs-&gt;hw.elsa.ctrl_reg);
				<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.elsa.timer, 0);
				current-&gt;state = TASK_INTERRUPTIBLE;
				current-&gt;timeout = jiffies + (110 * HZ) / 1000;		<FONT COLOR=#0000FF>/* Timeout 110ms */</FONT>
				schedule();
				restore_flags(flags);
				cs-&gt;hw.elsa.ctrl_reg &amp;= ~ELSA_ENA_TIMER_INT;
				<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.elsa.ctrl, cs-&gt;hw.elsa.ctrl_reg);
				cs-&gt;hw.elsa.status &amp;= ~ELSA_TIMER_AKTIV;
				printk(KERN_INFO <FONT COLOR="#FF0000">"Elsa: %d timer tics in 110 msek\n"</FONT>,
				       cs-&gt;hw.elsa.counter);
				<FONT COLOR="#298C52">if</FONT> (abs(cs-&gt;hw.elsa.counter - 13) &lt; 3) {
					printk(KERN_INFO <FONT COLOR="#FF0000">"Elsa: timer and irq OK\n"</FONT>);
					ret = 0;
				} <FONT COLOR="#298C52">else</FONT> {
					printk(KERN_WARNING
					       <FONT COLOR="#FF0000">"Elsa: timer tic problem (%d/12) maybe an IRQ(%d) conflict\n"</FONT>,
					       cs-&gt;hw.elsa.counter, cs-&gt;irq);
					ret = 1;
				}
			}
<FONT COLOR=#A521F7>#if</FONT> <A HREF="isac.c.shtml#ARCOFI_USE">ARCOFI_USE</A>
			<FONT COLOR="#298C52">if</FONT> (check_arcofi(cs)) {
				init_modem(cs);
			}
<FONT COLOR=#A521F7>#endif</FONT>
			elsa_led_handler(cs);
			<FONT COLOR="#298C52">return</FONT>(ret);
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#MDL_REMOVE">MDL_REMOVE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			cs-&gt;hw.elsa.status &amp;= 0;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#MDL_ASSIGN">MDL_ASSIGN</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			cs-&gt;hw.elsa.status |= ELSA_ASSIGN;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#MDL_INFO_SETUP">MDL_INFO_SETUP</A>:
			<FONT COLOR="#298C52">if</FONT> ((<FONT COLOR="#298C52">long</FONT>) arg)
				cs-&gt;hw.elsa.status |= 0x0200;
			<FONT COLOR="#298C52">else</FONT>
				cs-&gt;hw.elsa.status |= 0x0100;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#MDL_INFO_CONN">MDL_INFO_CONN</A>:
			<FONT COLOR="#298C52">if</FONT> ((<FONT COLOR="#298C52">long</FONT>) arg)
				cs-&gt;hw.elsa.status |= 0x2000;
			<FONT COLOR="#298C52">else</FONT>
				cs-&gt;hw.elsa.status |= 0x1000;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#MDL_INFO_REL">MDL_INFO_REL</A>:
			<FONT COLOR="#298C52">if</FONT> ((<FONT COLOR="#298C52">long</FONT>) arg) {
				cs-&gt;hw.elsa.status &amp;= ~0x2000;
				cs-&gt;hw.elsa.status &amp;= ~0x0200;
			} <FONT COLOR="#298C52">else</FONT> {
				cs-&gt;hw.elsa.status &amp;= ~0x1000;
				cs-&gt;hw.elsa.status &amp;= ~0x0100;
			}
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_AUX_IND">CARD_AUX_IND</A>:
			<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.MFlag) {
				<FONT COLOR="#298C52">if</FONT> (!arg)
					<FONT COLOR="#298C52">return</FONT>(0);
				msg = arg;
				len = *msg;
				msg++;
				modem_write_cmd(cs, msg, len);
			}
			<FONT COLOR="#298C52">break</FONT>;
	}
	pwr = <A HREF="asuscom.c.shtml#bytein">bytein</A>(cs-&gt;hw.elsa.ale);
	<FONT COLOR="#298C52">if</FONT> (pwr &amp; 0x08)
		cs-&gt;hw.elsa.status |= ELSA_BAD_PWR;
	<FONT COLOR="#298C52">else</FONT>
		cs-&gt;hw.elsa.status &amp;= ~ELSA_BAD_PWR;
	elsa_led_handler(cs);
	<FONT COLOR="#298C52">return</FONT>(ret);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">char</FONT>
probe_elsa_adr(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, <FONT COLOR="#298C52">int</FONT> typ)
{
	<FONT COLOR="#298C52">int</FONT> i, in1, in2, p16_1 = 0, p16_2 = 0, p8_1 = 0, p8_2 = 0, pc_1 = 0,
	 pc_2 = 0, pfp_1 = 0, pfp_2 = 0;
	<FONT COLOR="#298C52">long</FONT> flags;

	<FONT COLOR=#0000FF>/* In case of the elsa pcmcia card, this region is in use,
	   reserved for us by the card manager. So we do not check it
	   here, it would fail. */</FONT>
	<FONT COLOR="#298C52">if</FONT> (typ != <A HREF="hisax.h.shtml#ISDN_CTYPE_ELSA_PCMCIA">ISDN_CTYPE_ELSA_PCMCIA</A> &amp;&amp; check_region(adr, 8)) {
		printk(KERN_WARNING
		       <FONT COLOR="#FF0000">"Elsa: Probing Port 0x%x: already in use\n"</FONT>,
		       adr);
		<FONT COLOR="#298C52">return</FONT> (0);
	}
	save_flags(flags);
	cli();
	<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; 16; i++) {
		in1 = inb(adr + ELSA_CONFIG);	<FONT COLOR=#0000FF>/* 'toggelt' bei */</FONT>
		in2 = inb(adr + ELSA_CONFIG);	<FONT COLOR=#0000FF>/* jedem Zugriff */</FONT>
		p16_1 += 0x04 &amp; in1;
		p16_2 += 0x04 &amp; in2;
		p8_1 += 0x02 &amp; in1;
		p8_2 += 0x02 &amp; in2;
		pc_1 += 0x01 &amp; in1;
		pc_2 += 0x01 &amp; in2;
		pfp_1 += 0x40 &amp; in1;
		pfp_2 += 0x40 &amp; in2;
	}
	restore_flags(flags);
	printk(KERN_INFO <FONT COLOR="#FF0000">"Elsa: Probing IO 0x%x"</FONT>, adr);
	<FONT COLOR="#298C52">if</FONT> (65 == ++p16_1 * ++p16_2) {
		printk(<FONT COLOR="#FF0000">" PCC-16/PCF found\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT> (ELSA_PCC16);
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (1025 == ++pfp_1 * ++pfp_2) {
		printk(<FONT COLOR="#FF0000">" PCF-Pro found\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT> (ELSA_PCFPRO);
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (33 == ++p8_1 * ++p8_2) {
		printk(<FONT COLOR="#FF0000">" PCC8 found\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT> (ELSA_PCC8);
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (17 == ++pc_1 * ++pc_2) {
		printk(<FONT COLOR="#FF0000">" PC found\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT> (ELSA_PC);
	} <FONT COLOR="#298C52">else</FONT> {
		printk(<FONT COLOR="#FF0000">" failed\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT> (0);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT>
probe_elsa(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">int</FONT> i;
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> CARD_portlist[] =
	{0x160, 0x170, 0x260, 0x360, 0};

	<FONT COLOR="#298C52">for</FONT> (i = 0; CARD_portlist[i]; i++) {
		<FONT COLOR="#298C52">if</FONT> ((cs-&gt;subtyp = probe_elsa_adr(CARD_portlist[i], cs-&gt;typ)))
			<FONT COLOR="#298C52">break</FONT>;
	}
	<FONT COLOR="#298C52">return</FONT> (CARD_portlist[i]);
}

<FONT COLOR="#298C52">static</FONT> 	<FONT COLOR="#298C52">struct</FONT> pci_dev *dev_qs1000 __initdata = NULL;
<FONT COLOR="#298C52">static</FONT> 	<FONT COLOR="#298C52">struct</FONT> pci_dev *dev_qs3000 __initdata = NULL;

<FONT COLOR="#298C52">int</FONT>
setup_elsa(<FONT COLOR="#298C52">struct</FONT> IsdnCard *card)
{
	<FONT COLOR="#298C52">long</FONT> flags;
	<FONT COLOR="#298C52">int</FONT> bytecnt;
	u_char val;
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = card-&gt;cs;
	<FONT COLOR="#298C52">char</FONT> tmp[64];

	strcpy(tmp, Elsa_revision);
	printk(KERN_INFO <FONT COLOR="#FF0000">"HiSax: Elsa driver Rev. %s\n"</FONT>, HiSax_getrev(tmp));
	cs-&gt;hw.elsa.ctrl_reg = 0;
	cs-&gt;hw.elsa.status = 0;
	cs-&gt;hw.elsa.MFlag = 0;
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;typ == <A HREF="hisax.h.shtml#ISDN_CTYPE_ELSA">ISDN_CTYPE_ELSA</A>) {
		cs-&gt;hw.elsa.base = card-&gt;para[0];
		printk(KERN_INFO <FONT COLOR="#FF0000">"Elsa: Microlink IO probing\n"</FONT>);
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.base) {
			<FONT COLOR="#298C52">if</FONT> (!(cs-&gt;subtyp = probe_elsa_adr(cs-&gt;hw.elsa.base,
							  cs-&gt;typ))) {
				printk(KERN_WARNING
				     <FONT COLOR="#FF0000">"Elsa: no Elsa Microlink at 0x%x\n"</FONT>,
				       cs-&gt;hw.elsa.base);
				<FONT COLOR="#298C52">return</FONT> (0);
			}
		} <FONT COLOR="#298C52">else</FONT>
			cs-&gt;hw.elsa.base = probe_elsa(cs);
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.base) {
			cs-&gt;hw.elsa.cfg = cs-&gt;hw.elsa.base + ELSA_CONFIG;
			cs-&gt;hw.elsa.ctrl = cs-&gt;hw.elsa.base + ELSA_CONTROL;
			cs-&gt;hw.elsa.ale = cs-&gt;hw.elsa.base + ELSA_ALE;
			cs-&gt;hw.elsa.isac = cs-&gt;hw.elsa.base + ELSA_ISAC;
			cs-&gt;hw.elsa.itac = cs-&gt;hw.elsa.base + ELSA_ITAC;
			cs-&gt;hw.elsa.hscx = cs-&gt;hw.elsa.base + ELSA_HSCX;
			cs-&gt;hw.elsa.trig = cs-&gt;hw.elsa.base + ELSA_TRIG_IRQ;
			cs-&gt;hw.elsa.timer = cs-&gt;hw.elsa.base + ELSA_START_TIMER;
			val = <A HREF="asuscom.c.shtml#bytein">bytein</A>(cs-&gt;hw.elsa.cfg);
			<FONT COLOR="#298C52">if</FONT> (cs-&gt;subtyp == ELSA_PC) {
				<FONT COLOR="#298C52">const</FONT> u_char CARD_IrqTab[8] =
				{7, 3, 5, 9, 0, 0, 0, 0};
				cs-&gt;irq = CARD_IrqTab[(val &amp; ELSA_IRQ_IDX_PC) &gt;&gt; 2];
			} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (cs-&gt;subtyp == ELSA_PCC8) {
				<FONT COLOR="#298C52">const</FONT> u_char CARD_IrqTab[8] =
				{7, 3, 5, 9, 0, 0, 0, 0};
				cs-&gt;irq = CARD_IrqTab[(val &amp; ELSA_IRQ_IDX_PCC8) &gt;&gt; 4];
			} <FONT COLOR="#298C52">else</FONT> {
				<FONT COLOR="#298C52">const</FONT> u_char CARD_IrqTab[8] =
				{15, 10, 15, 3, 11, 5, 11, 9};
				cs-&gt;irq = CARD_IrqTab[(val &amp; ELSA_IRQ_IDX) &gt;&gt; 3];
			}
			val = <A HREF="asuscom.c.shtml#bytein">bytein</A>(cs-&gt;hw.elsa.ale) &amp; ELSA_HW_RELEASE;
			<FONT COLOR="#298C52">if</FONT> (val &lt; 3)
				val |= 8;
			val += <FONT COLOR="#FF0000">'A'</FONT> - 3;
			<FONT COLOR="#298C52">if</FONT> (val == <FONT COLOR="#FF0000">'B'</FONT> || val == <FONT COLOR="#FF0000">'C'</FONT>)
				val ^= 1;
			<FONT COLOR="#298C52">if</FONT> ((cs-&gt;subtyp == ELSA_PCFPRO) &amp;&amp; (val = <FONT COLOR="#FF0000">'G'</FONT>))
				val = <FONT COLOR="#FF0000">'C'</FONT>;
			printk(KERN_INFO
			       <FONT COLOR="#FF0000">"Elsa: %s found at 0x%x Rev.:%c IRQ %d\n"</FONT>,
			       Elsa_Types[cs-&gt;subtyp],
			       cs-&gt;hw.elsa.base,
			       val, cs-&gt;irq);
			val = <A HREF="asuscom.c.shtml#bytein">bytein</A>(cs-&gt;hw.elsa.ale) &amp; ELSA_S0_POWER_BAD;
			<FONT COLOR="#298C52">if</FONT> (val) {
				printk(KERN_WARNING
				   <FONT COLOR="#FF0000">"Elsa: Microlink S0 bus power bad\n"</FONT>);
				cs-&gt;hw.elsa.status |= ELSA_BAD_PWR;
			}
		} <FONT COLOR="#298C52">else</FONT> {
			printk(KERN_WARNING
			       <FONT COLOR="#FF0000">"No Elsa Microlink found\n"</FONT>);
			<FONT COLOR="#298C52">return</FONT> (0);
		}
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (cs-&gt;typ == <A HREF="hisax.h.shtml#ISDN_CTYPE_ELSA_PNP">ISDN_CTYPE_ELSA_PNP</A>) {
		cs-&gt;hw.elsa.base = card-&gt;para[1];
		cs-&gt;irq = card-&gt;para[0];
		cs-&gt;subtyp = ELSA_QS1000;
		cs-&gt;hw.elsa.cfg = cs-&gt;hw.elsa.base + ELSA_CONFIG;
		cs-&gt;hw.elsa.ale = cs-&gt;hw.elsa.base + ELSA_ALE;
		cs-&gt;hw.elsa.isac = cs-&gt;hw.elsa.base + ELSA_ISAC;
		cs-&gt;hw.elsa.hscx = cs-&gt;hw.elsa.base + ELSA_HSCX;
		cs-&gt;hw.elsa.trig = cs-&gt;hw.elsa.base + ELSA_TRIG_IRQ;
		cs-&gt;hw.elsa.timer = cs-&gt;hw.elsa.base + ELSA_START_TIMER;
		cs-&gt;hw.elsa.ctrl = cs-&gt;hw.elsa.base + ELSA_CONTROL;
		printk(KERN_INFO
		       <FONT COLOR="#FF0000">"Elsa: %s defined at 0x%x IRQ %d\n"</FONT>,
		       Elsa_Types[cs-&gt;subtyp],
		       cs-&gt;hw.elsa.base,
		       cs-&gt;irq);
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (cs-&gt;typ == <A HREF="hisax.h.shtml#ISDN_CTYPE_ELSA_PCMCIA">ISDN_CTYPE_ELSA_PCMCIA</A>) {
		cs-&gt;hw.elsa.base = card-&gt;para[1];
		cs-&gt;irq = card-&gt;para[0];
		cs-&gt;subtyp = ELSA_PCMCIA;
		cs-&gt;hw.elsa.ale = cs-&gt;hw.elsa.base + ELSA_ALE_PCM;
		cs-&gt;hw.elsa.isac = cs-&gt;hw.elsa.base + ELSA_ISAC_PCM;
		cs-&gt;hw.elsa.hscx = cs-&gt;hw.elsa.base + ELSA_HSCX;
		cs-&gt;hw.elsa.timer = 0;
		cs-&gt;hw.elsa.trig = 0;
		cs-&gt;hw.elsa.ctrl = 0;
		printk(KERN_INFO
		       <FONT COLOR="#FF0000">"Elsa: %s defined at 0x%x IRQ %d\n"</FONT>,
		       Elsa_Types[cs-&gt;subtyp],
		       cs-&gt;hw.elsa.base,
		       cs-&gt;irq);
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (cs-&gt;typ == <A HREF="hisax.h.shtml#ISDN_CTYPE_ELSA_PCI">ISDN_CTYPE_ELSA_PCI</A>) {
<FONT COLOR=#A521F7>#if</FONT> CONFIG_PCI
		<FONT COLOR="#298C52">if</FONT> (!pci_present()) {
			printk(KERN_ERR <FONT COLOR="#FF0000">"Elsa: no PCI bus present\n"</FONT>);
			<FONT COLOR="#298C52">return</FONT>(0);
		}
		cs-&gt;subtyp = 0;
		<FONT COLOR="#298C52">if</FONT> ((dev_qs1000 = pci_find_device(PCI_VENDOR_ELSA, PCI_QS1000_ID,
			 dev_qs1000))) {
				cs-&gt;subtyp = ELSA_QS1000PCI;
			cs-&gt;irq = dev_qs1000-&gt;irq;
			cs-&gt;hw.elsa.cfg = dev_qs1000-&gt;base_address[1] &amp; 
				PCI_BASE_ADDRESS_IO_MASK;
			cs-&gt;hw.elsa.base = dev_qs1000-&gt;base_address[3] &amp; 
				PCI_BASE_ADDRESS_IO_MASK;
		} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> ((dev_qs3000 = pci_find_device(PCI_VENDOR_ELSA,
			PCI_QS3000_ID, dev_qs3000))) {
			cs-&gt;subtyp = ELSA_QS3000PCI;
			cs-&gt;irq = dev_qs3000-&gt;irq;
			cs-&gt;hw.elsa.cfg = dev_qs3000-&gt;base_address[1] &amp; 
				PCI_BASE_ADDRESS_IO_MASK;
			cs-&gt;hw.elsa.base = dev_qs3000-&gt;base_address[3] &amp; 
				PCI_BASE_ADDRESS_IO_MASK;
		} <FONT COLOR="#298C52">else</FONT> {
			printk(KERN_WARNING <FONT COLOR="#FF0000">"Elsa: No PCI card found\n"</FONT>);
			<FONT COLOR="#298C52">return</FONT>(0);
		}
		<FONT COLOR="#298C52">if</FONT> (!cs-&gt;irq) {
			printk(KERN_WARNING <FONT COLOR="#FF0000">"Elsa: No IRQ for PCI card found\n"</FONT>);
			<FONT COLOR="#298C52">return</FONT>(0);
		}

		<FONT COLOR="#298C52">if</FONT> (!(cs-&gt;hw.elsa.base &amp;&amp; cs-&gt;hw.elsa.cfg)) {
			printk(KERN_WARNING <FONT COLOR="#FF0000">"Elsa: No IO-Adr for PCI card found\n"</FONT>);
			<FONT COLOR="#298C52">return</FONT>(0);
		}
		cs-&gt;hw.elsa.ale  = cs-&gt;hw.elsa.base;
		cs-&gt;hw.elsa.isac = cs-&gt;hw.elsa.base +1;
		cs-&gt;hw.elsa.hscx = cs-&gt;hw.elsa.base +1; 
		test_and_set_bit(<A HREF="hisax.h.shtml#HW_IPAC">HW_IPAC</A>, &amp;cs-&gt;HW_Flags);
		cs-&gt;hw.elsa.timer = 0;
		cs-&gt;hw.elsa.trig  = 0;
		printk(KERN_INFO
		       <FONT COLOR="#FF0000">"Elsa: %s defined at 0x%x/0x%x IRQ %d\n"</FONT>,
		       Elsa_Types[cs-&gt;subtyp],
		       cs-&gt;hw.elsa.base,
		       cs-&gt;hw.elsa.cfg,
		       cs-&gt;irq);
<FONT COLOR=#A521F7>#else</FONT>
		printk(KERN_WARNING <FONT COLOR="#FF0000">"Elsa: Elsa PCI and NO_PCI_BIOS\n"</FONT>);
		printk(KERN_WARNING <FONT COLOR="#FF0000">"Elsa: unable to config Elsa PCI\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT> (0);
<FONT COLOR=#A521F7>#endif</FONT> <FONT COLOR=#0000FF>/* CONFIG_PCI */</FONT>
	} <FONT COLOR="#298C52">else</FONT> 
		<FONT COLOR="#298C52">return</FONT> (0);

	<FONT COLOR="#298C52">switch</FONT> (cs-&gt;subtyp) {
		<FONT COLOR="#298C52">case</FONT> ELSA_PC:
		<FONT COLOR="#298C52">case</FONT> ELSA_PCC8:
		<FONT COLOR="#298C52">case</FONT> ELSA_PCC16:
		<FONT COLOR="#298C52">case</FONT> ELSA_QS1000:
		<FONT COLOR="#298C52">case</FONT> ELSA_PCMCIA:
			bytecnt = 8;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> ELSA_PCFPRO:
		<FONT COLOR="#298C52">case</FONT> ELSA_PCF:
		<FONT COLOR="#298C52">case</FONT> ELSA_QS3000PCI:
			bytecnt = 16;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> ELSA_QS1000PCI:
			bytecnt = 2;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">default</FONT>:
			printk(KERN_WARNING
			       <FONT COLOR="#FF0000">"Unknown ELSA subtype %d\n"</FONT>, cs-&gt;subtyp);
			<FONT COLOR="#298C52">return</FONT> (0);
	}
	<FONT COLOR=#0000FF>/* In case of the elsa pcmcia card, this region is in use,
	   reserved for us by the card manager. So we do not check it
	   here, it would fail. */</FONT>
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;typ != <A HREF="hisax.h.shtml#ISDN_CTYPE_ELSA_PCMCIA">ISDN_CTYPE_ELSA_PCMCIA</A> &amp;&amp; check_region(cs-&gt;hw.elsa.base, bytecnt)) {
		printk(KERN_WARNING
		       <FONT COLOR="#FF0000">"HiSax: %s config port %x-%x already in use\n"</FONT>,
		       CardType[card-&gt;typ],
		       cs-&gt;hw.elsa.base,
		       cs-&gt;hw.elsa.base + bytecnt);
		<FONT COLOR="#298C52">return</FONT> (0);
	} <FONT COLOR="#298C52">else</FONT> {
		request_region(cs-&gt;hw.elsa.base, bytecnt, <FONT COLOR="#FF0000">"elsa isdn"</FONT>);
	}
	<FONT COLOR="#298C52">if</FONT> ((cs-&gt;subtyp == ELSA_QS1000PCI) || (cs-&gt;subtyp == ELSA_QS3000PCI)) {
		<FONT COLOR="#298C52">if</FONT> (check_region(cs-&gt;hw.elsa.cfg, 0x80)) {
			printk(KERN_WARNING
			       <FONT COLOR="#FF0000">"HiSax: %s pci port %x-%x already in use\n"</FONT>,
				CardType[card-&gt;typ],
				cs-&gt;hw.elsa.cfg,
				cs-&gt;hw.elsa.cfg + 0x80);
			release_region(cs-&gt;hw.elsa.base, bytecnt);
			<FONT COLOR="#298C52">return</FONT> (0);
		} <FONT COLOR="#298C52">else</FONT> {
			request_region(cs-&gt;hw.elsa.cfg, 0x80, <FONT COLOR="#FF0000">"elsa isdn pci"</FONT>);
		}
	}
	cs-&gt;hw.elsa.tl.function = (<FONT COLOR="#298C52">void</FONT> *) elsa_led_handler;
	cs-&gt;hw.elsa.tl.data = (<FONT COLOR="#298C52">long</FONT>) cs;
	init_timer(&amp;cs-&gt;hw.elsa.tl);
	<FONT COLOR=#0000FF>/* Teste Timer */</FONT>
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.timer) {
		<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.elsa.trig, 0xff);
		<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.elsa.timer, 0);
		<FONT COLOR="#298C52">if</FONT> (!TimerRun(cs)) {
			<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.elsa.timer, 0);	<FONT COLOR=#0000FF>/* 2. Versuch */</FONT>
			<FONT COLOR="#298C52">if</FONT> (!TimerRun(cs)) {
				printk(KERN_WARNING
				       <FONT COLOR="#FF0000">"Elsa: timer do not start\n"</FONT>);
				release_io_elsa(cs);
				<FONT COLOR="#298C52">return</FONT> (0);
			}
		}
		save_flags(flags);
		sti();
		<A HREF="hisax.h.shtml#HZDELAY">HZDELAY</A>(1);	<FONT COLOR=#0000FF>/* wait &gt;=10 ms */</FONT>
		restore_flags(flags);
		<FONT COLOR="#298C52">if</FONT> (TimerRun(cs)) {
			printk(KERN_WARNING <FONT COLOR="#FF0000">"Elsa: timer do not run down\n"</FONT>);
			release_io_elsa(cs);
			<FONT COLOR="#298C52">return</FONT> (0);
		}
		printk(KERN_INFO <FONT COLOR="#FF0000">"Elsa: timer OK; resetting card\n"</FONT>);
	}
	reset_elsa(cs);
	cs-&gt;BC_Read_Reg = &amp;<A HREF="asuscom.c.shtml#ReadHSCX">ReadHSCX</A>;
	cs-&gt;BC_Write_Reg = &amp;<A HREF="asuscom.c.shtml#WriteHSCX">WriteHSCX</A>;
	cs-&gt;BC_Send_Data = &amp;<A HREF="hscx_irq.c.shtml#hscx_fill_fifo">hscx_fill_fifo</A>;
	cs-&gt;cardmsg = &amp;Elsa_card_msg;
	<FONT COLOR="#298C52">if</FONT> ((cs-&gt;subtyp == ELSA_QS1000PCI) || (cs-&gt;subtyp == ELSA_QS3000PCI)) {
		cs-&gt;readisac = &amp;ReadISAC_IPAC;
		cs-&gt;writeisac = &amp;WriteISAC_IPAC;
		cs-&gt;readisacfifo = &amp;ReadISACfifo_IPAC;
		cs-&gt;writeisacfifo = &amp;WriteISACfifo_IPAC;
		val = <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.elsa.ale, cs-&gt;hw.elsa.isac, IPAC_ID);
		printk(KERN_INFO <FONT COLOR="#FF0000">"Elsa: IPAC version %x\n"</FONT>, val);
	} <FONT COLOR="#298C52">else</FONT> {
		cs-&gt;readisac = &amp;<A HREF="asuscom.c.shtml#ReadISAC">ReadISAC</A>;
		cs-&gt;writeisac = &amp;<A HREF="asuscom.c.shtml#WriteISAC">WriteISAC</A>;
		cs-&gt;readisacfifo = &amp;<A HREF="asuscom.c.shtml#ReadISACfifo">ReadISACfifo</A>;
		cs-&gt;writeisacfifo = &amp;<A HREF="asuscom.c.shtml#WriteISACfifo">WriteISACfifo</A>;
		<A HREF="isac.c.shtml#ISACVersion">ISACVersion</A>(cs, <FONT COLOR="#FF0000">"Elsa:"</FONT>);
		<FONT COLOR="#298C52">if</FONT> (HscxVersion(cs, <FONT COLOR="#FF0000">"Elsa:"</FONT>)) {
			printk(KERN_WARNING
				<FONT COLOR="#FF0000">"Elsa: wrong HSCX versions check IO address\n"</FONT>);
			release_io_elsa(cs);
			<FONT COLOR="#298C52">return</FONT> (0);
		}
	}
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;subtyp == ELSA_PC) {
		val = readitac(cs, ITAC_SYS);
		printk(KERN_INFO <FONT COLOR="#FF0000">"Elsa: ITAC version %s\n"</FONT>, ITACVer[val &amp; 7]);
		writeitac(cs, ITAC_ISEN, 0);
		writeitac(cs, ITAC_RFIE, 0);
		writeitac(cs, ITAC_XFIE, 0);
		writeitac(cs, ITAC_SCIE, 0);
		writeitac(cs, ITAC_STIE, 0);
	}
	<FONT COLOR="#298C52">return</FONT> (1);
}
</BODY>

</HTML>
