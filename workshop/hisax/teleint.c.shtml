<HTML>

<!-- Generated by c2html-1.0, Copyright 1998 by Dave Whittington -->
<HEAD>
<TITLE>teleint.c</TITLE>
<!--#include virtual="/ssi/js.shtml" -->
<!--#include virtual="/ssi/buttondefs.shtml" -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<TABLE WIDTH="100%">
<TR>
<TD ALIGN=LEFT WIDTH="90"><!--#include virtual="/ssi/b_home.shtml" --></TD>
<TD ALIGN=RIGHT WIDTH="90"><!--#include virtual="/ssi/b_index.shtml" --></TD>
</TR>
</TABLE>
<CENTER><H1>teleint.c</H1></CENTER>

<HR>
<PRE>
<FONT COLOR=#0000FF>/* $Id$

 * teleint.c     low level stuff for TeleInt isdn cards
 *
 * Author     Karsten Keil (keil@temic-ech.spacenet.de)
 *
 *
 * $Log$
 * Revision 1.6  1998/04/15 16:45:31  keil
 * new init code
 *
 * Revision 1.5  1998/02/02 13:40:47  keil
 * fast io
 *
 * Revision 1.4  1997/11/08 21:35:53  keil
 * new l1 init
 *
 * Revision 1.3  1997/11/06 17:09:30  keil
 * New 2.1 init code
 *
 * Revision 1.2  1997/10/29 18:55:53  keil
 * changes for 2.1.60 (irq2dev_map)
 *
 * Revision 1.1  1997/09/11 17:32:32  keil
 * new
 *
 *
 */</FONT>

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#__NO_VERSION__">__NO_VERSION__</A>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hisax.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isac.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hfc_2bs0.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isdnl1.h"</FONT>

<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *CardType[];

<FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *TeleInt_revision = <FONT COLOR="#FF0000">"$Revision$"</FONT>;

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#byteout">byteout</A>(addr,val) outb(val,addr)
<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#bytein">bytein</A>(addr) inb(addr)

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> u_char
<A HREF="asuscom.c.shtml#readreg">readreg</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> ale, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char off)
{
	<FONT COLOR="#298C52">register</FONT> u_char ret;
	<FONT COLOR="#298C52">int</FONT> max_delay = 2000;
	<FONT COLOR="#298C52">long</FONT> flags;

	save_flags(flags);
	cli();
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(ale, off);
	ret = HFC_BUSY &amp; <A HREF="asuscom.c.shtml#bytein">bytein</A>(ale);
	<FONT COLOR="#298C52">while</FONT> (ret &amp;&amp; --max_delay)
		ret = HFC_BUSY &amp; <A HREF="asuscom.c.shtml#bytein">bytein</A>(ale);
	<FONT COLOR="#298C52">if</FONT> (!max_delay) {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"TeleInt Busy not inaktive\n"</FONT>);
		restore_flags(flags);
		<FONT COLOR="#298C52">return</FONT> (0);
	}
	ret = <A HREF="asuscom.c.shtml#bytein">bytein</A>(adr);
	restore_flags(flags);
	<FONT COLOR="#298C52">return</FONT> (ret);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#readfifo">readfifo</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> ale, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char off, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	<FONT COLOR="#298C52">register</FONT> u_char ret;
	<FONT COLOR="#298C52">int</FONT> max_delay = 2000;
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(ale, off);

	ret = HFC_BUSY &amp; <A HREF="asuscom.c.shtml#bytein">bytein</A>(ale);
	<FONT COLOR="#298C52">while</FONT> (ret &amp;&amp; --max_delay)
		ret = HFC_BUSY &amp; <A HREF="asuscom.c.shtml#bytein">bytein</A>(ale);
	<FONT COLOR="#298C52">if</FONT> (!max_delay) {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"TeleInt Busy not inaktive\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT>;
	}
	insb(adr, data, size);
}


<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#writereg">writereg</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> ale, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char off, u_char data)
{
	<FONT COLOR="#298C52">register</FONT> u_char ret;
	<FONT COLOR="#298C52">int</FONT> max_delay = 2000;
	<FONT COLOR="#298C52">long</FONT> flags;

	save_flags(flags);
	cli();
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(ale, off);
	ret = HFC_BUSY &amp; <A HREF="asuscom.c.shtml#bytein">bytein</A>(ale);
	<FONT COLOR="#298C52">while</FONT> (ret &amp;&amp; --max_delay)
		ret = HFC_BUSY &amp; <A HREF="asuscom.c.shtml#bytein">bytein</A>(ale);
	<FONT COLOR="#298C52">if</FONT> (!max_delay) {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"TeleInt Busy not inaktive\n"</FONT>);
		restore_flags(flags);
		<FONT COLOR="#298C52">return</FONT>;
	}
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(adr, data);
	restore_flags(flags);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#writefifo">writefifo</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> ale, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char off, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	<FONT COLOR="#298C52">register</FONT> u_char ret;
	<FONT COLOR="#298C52">int</FONT> max_delay = 2000;

	<FONT COLOR=#0000FF>/* fifo write without cli because it's allready done  */</FONT>
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(ale, off);
	ret = HFC_BUSY &amp; <A HREF="asuscom.c.shtml#bytein">bytein</A>(ale);
	<FONT COLOR="#298C52">while</FONT> (ret &amp;&amp; --max_delay)
		ret = HFC_BUSY &amp; <A HREF="asuscom.c.shtml#bytein">bytein</A>(ale);
	<FONT COLOR="#298C52">if</FONT> (!max_delay) {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"TeleInt Busy not inaktive\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT>;
	}
	outsb(adr, data, size);
}

<FONT COLOR=#0000FF>/* Interface functions */</FONT>

<FONT COLOR="#298C52">static</FONT> u_char
<A HREF="asuscom.c.shtml#ReadISAC">ReadISAC</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char offset)
{
	cs-&gt;hw.hfc.cip = offset;
	<FONT COLOR="#298C52">return</FONT> (<A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.hfc.addr | 1, cs-&gt;hw.hfc.addr, offset));
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#WriteISAC">WriteISAC</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char offset, u_char value)
{
	cs-&gt;hw.hfc.cip = offset;
	<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.hfc.addr | 1, cs-&gt;hw.hfc.addr, offset, value);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#ReadISACfifo">ReadISACfifo</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	cs-&gt;hw.hfc.cip = 0;
	<A HREF="asuscom.c.shtml#readfifo">readfifo</A>(cs-&gt;hw.hfc.addr | 1, cs-&gt;hw.hfc.addr, 0, data, size);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#WriteISACfifo">WriteISACfifo</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	cs-&gt;hw.hfc.cip = 0;
	<A HREF="asuscom.c.shtml#writefifo">writefifo</A>(cs-&gt;hw.hfc.addr | 1, cs-&gt;hw.hfc.addr, 0, data, size);
}

<FONT COLOR="#298C52">static</FONT> u_char
ReadHFC(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> data, u_char reg)
{
	<FONT COLOR="#298C52">register</FONT> u_char ret;

	<FONT COLOR="#298C52">if</FONT> (data) {
		cs-&gt;hw.hfc.cip = reg;
		<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.hfc.addr | 1, reg);
		ret = <A HREF="asuscom.c.shtml#bytein">bytein</A>(cs-&gt;hw.hfc.addr);
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX_FIFO">L1_DEB_HSCX_FIFO</A> &amp;&amp; (data != 2)) {
			<FONT COLOR="#298C52">char</FONT> tmp[32];
			sprintf(tmp, <FONT COLOR="#FF0000">"hfc RD %02x %02x"</FONT>, reg, ret);
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
		}
	} <FONT COLOR="#298C52">else</FONT>
		ret = <A HREF="asuscom.c.shtml#bytein">bytein</A>(cs-&gt;hw.hfc.addr | 1);
	<FONT COLOR="#298C52">return</FONT> (ret);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
WriteHFC(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> data, u_char reg, u_char value)
{
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.hfc.addr | 1, reg);
	cs-&gt;hw.hfc.cip = reg;
	<FONT COLOR="#298C52">if</FONT> (data)
		<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.hfc.addr, value);
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX_FIFO">L1_DEB_HSCX_FIFO</A> &amp;&amp; (data != 2)) {
		<FONT COLOR="#298C52">char</FONT> tmp[32];
		sprintf(tmp, <FONT COLOR="#FF0000">"hfc W%c %02x %02x"</FONT>, data ? <FONT COLOR="#FF0000">'D'</FONT> : <FONT COLOR="#FF0000">'C'</FONT>, reg, value);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
TeleInt_interrupt(<FONT COLOR="#298C52">int</FONT> intno, <FONT COLOR="#298C52">void</FONT> *dev_id, <FONT COLOR="#298C52">struct</FONT> pt_regs *regs)
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = dev_id;
	u_char val, stat = 0;

	<FONT COLOR="#298C52">if</FONT> (!cs) {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"TeleInt: Spurious interrupt!\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT>;
	}
	val = <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.hfc.addr | 1, cs-&gt;hw.hfc.addr, <A HREF="isac.h.shtml#ISAC_ISTA">ISAC_ISTA</A>);
      Start_ISAC:
	<FONT COLOR="#298C52">if</FONT> (val) {
		<A HREF="isac.c.shtml#isac_interrupt">isac_interrupt</A>(cs, val);
		stat |= 2;
	}
	val = <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.hfc.addr | 1, cs-&gt;hw.hfc.addr, <A HREF="isac.h.shtml#ISAC_ISTA">ISAC_ISTA</A>);
	<FONT COLOR="#298C52">if</FONT> (val) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_ISAC">L1_DEB_ISAC</A>)
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"ISAC IntStat after IntRoutine"</FONT>);
		<FONT COLOR="#298C52">goto</FONT> Start_ISAC;
	}
	<FONT COLOR="#298C52">if</FONT> (stat &amp; 2) {
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.hfc.addr | 1, cs-&gt;hw.hfc.addr, <A HREF="isac.h.shtml#ISAC_MASK">ISAC_MASK</A>, 0xFF);
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.hfc.addr | 1, cs-&gt;hw.hfc.addr, <A HREF="isac.h.shtml#ISAC_MASK">ISAC_MASK</A>, 0x0);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
TeleInt_Timer(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">int</FONT> stat = 0;

	<FONT COLOR="#298C52">if</FONT> (cs-&gt;bcs[0].mode) {
		stat |= 1;
		main_irq_hfc(&amp;cs-&gt;bcs[0]);
	}
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;bcs[1].mode) {
		stat |= 2;
		main_irq_hfc(&amp;cs-&gt;bcs[1]);
	}
	cs-&gt;hw.hfc.timer.expires = jiffies + 1;
	add_timer(&amp;cs-&gt;hw.hfc.timer);
}

<FONT COLOR="#298C52">void</FONT>
release_io_TeleInt(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	del_timer(&amp;cs-&gt;hw.hfc.timer);
	releasehfc(cs);
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.hfc.addr)
		release_region(cs-&gt;hw.hfc.addr, 2);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
reset_TeleInt(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">long</FONT> flags;

	printk(KERN_INFO <FONT COLOR="#FF0000">"TeleInt: resetting card\n"</FONT>);
	cs-&gt;hw.hfc.cirm |= HFC_RESET;
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.hfc.addr | 1, cs-&gt;hw.hfc.cirm);	<FONT COLOR=#0000FF>/* Reset On */</FONT>
	save_flags(flags);
	sti();
	current-&gt;state = TASK_INTERRUPTIBLE;
	current-&gt;timeout = jiffies + 3;
	schedule();
	cs-&gt;hw.hfc.cirm &amp;= ~HFC_RESET;
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.hfc.addr | 1, cs-&gt;hw.hfc.cirm);	<FONT COLOR=#0000FF>/* Reset Off */</FONT>
	current-&gt;state = TASK_INTERRUPTIBLE;
	current-&gt;timeout = jiffies + 1;
	schedule();
	restore_flags(flags);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
TeleInt_card_msg(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> mt, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">switch</FONT> (mt) {
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_RESET">CARD_RESET</A>:
			reset_TeleInt(cs);
			<FONT COLOR="#298C52">return</FONT>(0);
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_RELEASE">CARD_RELEASE</A>:
			release_io_TeleInt(cs);
			<FONT COLOR="#298C52">return</FONT>(0);
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_SETIRQ">CARD_SETIRQ</A>:
			<FONT COLOR="#298C52">return</FONT>(request_irq(cs-&gt;irq, &amp;TeleInt_interrupt,
					<A HREF="hisax.h.shtml#I4L_IRQ_FLAG">I4L_IRQ_FLAG</A>, <FONT COLOR="#FF0000">"HiSax"</FONT>, cs));
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_INIT">CARD_INIT</A>:
			inithfc(cs);
			clear_pending_isac_ints(cs);
			initisac(cs);
			<FONT COLOR=#0000FF>/* Reenable all IRQ */</FONT>
			cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_MASK">ISAC_MASK</A>, 0);
			cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_CMDR">ISAC_CMDR</A>, 0x41);
			cs-&gt;hw.hfc.timer.expires = jiffies + 1;
			add_timer(&amp;cs-&gt;hw.hfc.timer);
			<FONT COLOR="#298C52">return</FONT>(0);
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_TEST">CARD_TEST</A>:
			<FONT COLOR="#298C52">return</FONT>(0);
	}
	<FONT COLOR="#298C52">return</FONT>(0);
}

<A HREF="asuscom.c.shtml#__initfunc">__initfunc</A>(<FONT COLOR="#298C52">int</FONT>
setup_TeleInt(<FONT COLOR="#298C52">struct</FONT> IsdnCard *card))
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = card-&gt;cs;
	<FONT COLOR="#298C52">char</FONT> tmp[64];

	strcpy(tmp, TeleInt_revision);
	printk(KERN_INFO <FONT COLOR="#FF0000">"HiSax: TeleInt driver Rev. %s\n"</FONT>, HiSax_getrev(tmp));
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;typ != <A HREF="hisax.h.shtml#ISDN_CTYPE_TELEINT">ISDN_CTYPE_TELEINT</A>)
		<FONT COLOR="#298C52">return</FONT> (0);

	cs-&gt;hw.hfc.addr = card-&gt;para[1] &amp; 0x3fe;
	cs-&gt;irq = card-&gt;para[0];
	cs-&gt;hw.hfc.cirm = HFC_CIRM;
	cs-&gt;hw.hfc.isac_spcr = 0x00;
	cs-&gt;hw.hfc.cip = 0;
	cs-&gt;hw.hfc.ctmt = HFC_CTMT | HFC_CLTIMER;
	cs-&gt;bcs[0].hw.hfc.send = NULL;
	cs-&gt;bcs[1].hw.hfc.send = NULL;
	cs-&gt;hw.hfc.fifosize = 7 * 1024 + 512;
	cs-&gt;hw.hfc.timer.function = (<FONT COLOR="#298C52">void</FONT> *) TeleInt_Timer;
	cs-&gt;hw.hfc.timer.data = (<FONT COLOR="#298C52">long</FONT>) cs;
	init_timer(&amp;cs-&gt;hw.hfc.timer);
	<FONT COLOR="#298C52">if</FONT> (check_region((cs-&gt;hw.hfc.addr), 2)) {
		printk(KERN_WARNING
		       <FONT COLOR="#FF0000">"HiSax: %s config port %x-%x already in use\n"</FONT>,
		       CardType[card-&gt;typ],
		       cs-&gt;hw.hfc.addr,
		       cs-&gt;hw.hfc.addr + 2);
		<FONT COLOR="#298C52">return</FONT> (0);
	} <FONT COLOR="#298C52">else</FONT> {
		request_region(cs-&gt;hw.hfc.addr, 2, <FONT COLOR="#FF0000">"TeleInt isdn"</FONT>);
	}
	<FONT COLOR=#0000FF>/* HW IO = IO */</FONT>
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.hfc.addr, cs-&gt;hw.hfc.addr &amp; 0xff);
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.hfc.addr | 1, ((cs-&gt;hw.hfc.addr &amp; 0x300) &gt;&gt; 8) | 0x54);
	<FONT COLOR="#298C52">switch</FONT> (cs-&gt;irq) {
		<FONT COLOR="#298C52">case</FONT> 3:
			cs-&gt;hw.hfc.cirm |= HFC_INTA;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> 4:
			cs-&gt;hw.hfc.cirm |= HFC_INTB;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> 5:
			cs-&gt;hw.hfc.cirm |= HFC_INTC;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> 7:
			cs-&gt;hw.hfc.cirm |= HFC_INTD;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> 10:
			cs-&gt;hw.hfc.cirm |= HFC_INTE;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> 11:
			cs-&gt;hw.hfc.cirm |= HFC_INTF;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">default</FONT>:
			printk(KERN_WARNING <FONT COLOR="#FF0000">"TeleInt: wrong IRQ\n"</FONT>);
			release_io_TeleInt(cs);
			<FONT COLOR="#298C52">return</FONT> (0);
	}
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.hfc.addr | 1, cs-&gt;hw.hfc.cirm);
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.hfc.addr | 1, cs-&gt;hw.hfc.ctmt);

	printk(KERN_INFO
	       <FONT COLOR="#FF0000">"TeleInt: defined at 0x%x IRQ %d\n"</FONT>,
	       cs-&gt;hw.hfc.addr,
	       cs-&gt;irq);

	reset_TeleInt(cs);
	cs-&gt;readisac = &amp;<A HREF="asuscom.c.shtml#ReadISAC">ReadISAC</A>;
	cs-&gt;writeisac = &amp;<A HREF="asuscom.c.shtml#WriteISAC">WriteISAC</A>;
	cs-&gt;readisacfifo = &amp;<A HREF="asuscom.c.shtml#ReadISACfifo">ReadISACfifo</A>;
	cs-&gt;writeisacfifo = &amp;<A HREF="asuscom.c.shtml#WriteISACfifo">WriteISACfifo</A>;
	cs-&gt;BC_Read_Reg = &amp;ReadHFC;
	cs-&gt;BC_Write_Reg = &amp;WriteHFC;
	cs-&gt;cardmsg = &amp;TeleInt_card_msg;
	<A HREF="isac.c.shtml#ISACVersion">ISACVersion</A>(cs, <FONT COLOR="#FF0000">"TeleInt:"</FONT>);
	<FONT COLOR="#298C52">return</FONT> (1);
}
</BODY>

</HTML>
