<HTML>

<!-- Generated by c2html-1.0, Copyright 1998 by Dave Whittington -->
<HEAD>
<TITLE>l3_1tr6.c</TITLE>
<!--#include virtual="/ssi/js.shtml" -->
<!--#include virtual="/ssi/buttondefs.shtml" -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<TABLE WIDTH="100%">
<TR>
<TD ALIGN=LEFT WIDTH="90"><!--#include virtual="/ssi/b_home.shtml" --></TD>
<TD ALIGN=RIGHT WIDTH="90"><!--#include virtual="/ssi/b_index.shtml" --></TD>
</TR>
</TABLE>
<CENTER><H1>l3_1tr6.c</H1></CENTER>

<HR>
<PRE>
<FONT COLOR=#0000FF>/* $Id$

 *  German 1TR6 D-channel protocol
 *
 * Author       Karsten Keil (keil@temic-ech.spacenet.de)
 *
 *
 * $Log$
 * Revision 2.6  1998/05/25 14:10:18  keil
 * HiSax 3.0
 * X.75 and leased are working again.
 *
 * Revision 2.5  1998/05/25 12:58:14  keil
 * HiSax golden code from certification, Don't use !!!
 * No leased lines, no X75, but many changes.
 *
 * Revision 2.4  1998/02/12 23:07:57  keil
 * change for 2.1.86 (removing FREE_READ/FREE_WRITE from [dev]_kfree_skb()
 *
 * Revision 2.3  1997/11/06 17:12:24  keil
 * KERN_NOTICE --&gt; KERN_INFO
 *
 * Revision 2.2  1997/10/29 19:03:00  keil
 * changes for 2.1
 *
 * Revision 2.1  1997/08/03 15:28:09  keil
 * release L3 empty processes
 *
 * Revision 2.0  1997/07/27 21:15:45  keil
 * New Callref based layer3
 *
 * Revision 1.12  1997/06/26 11:11:45  keil
 * SET_SKBFREE now on creation of a SKB
 *
 * Revision 1.11  1997/04/06 22:54:18  keil
 * Using SKB's
 *
 * Old Log removed /KKe
 *
 */</FONT>

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#__NO_VERSION__">__NO_VERSION__</A>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hisax.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"l3_1tr6.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isdnl3.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/ctype.h&gt;

<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">char</FONT> *HiSax_getrev(<FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *revision);
<FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *l3_1tr6_revision = <FONT COLOR="#FF0000">"$Revision$"</FONT>;

<FONT COLOR=#A521F7>#define</FONT> <A HREF="l3dss1.c.shtml#MsgHead">MsgHead</A>(ptr, cref, mty, dis) \
	*ptr++ = dis; \
	*ptr++ = 0x1; \
	*ptr++ = cref ^ 0x80; \
	*ptr++ = mty

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
l3_1TR6_message(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char mt, u_char pd)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;
	u_char *p;

	<FONT COLOR="#298C52">if</FONT> (!(skb = <A HREF="isdnl3.c.shtml#l3_alloc_skb">l3_alloc_skb</A>(4)))
		<FONT COLOR="#298C52">return</FONT>;
	p = skb_put(skb, 4);
	<A HREF="l3dss1.c.shtml#MsgHead">MsgHead</A>(p, pc-&gt;callref, mt, pd);
	pc-&gt;st-&gt;l3.l3l2(pc-&gt;st, <A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, skb);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
l31tr6_check_messagetype_validity(<FONT COLOR="#298C52">int</FONT> mt, <FONT COLOR="#298C52">int</FONT> pd) {
<FONT COLOR=#0000FF>/* verify if a message type exists */</FONT>

	<FONT COLOR="#298C52">if</FONT> (pd == PROTO_DIS_N0)
		<FONT COLOR="#298C52">switch</FONT>(mt) {
		   <FONT COLOR="#298C52">case</FONT> MT_N0_REG_IND:
		   <FONT COLOR="#298C52">case</FONT> MT_N0_CANC_IND:
		   <FONT COLOR="#298C52">case</FONT> MT_N0_FAC_STA:
		   <FONT COLOR="#298C52">case</FONT> MT_N0_STA_ACK:
		   <FONT COLOR="#298C52">case</FONT> MT_N0_STA_REJ:
		   <FONT COLOR="#298C52">case</FONT> MT_N0_FAC_INF:
		   <FONT COLOR="#298C52">case</FONT> MT_N0_INF_ACK:
		   <FONT COLOR="#298C52">case</FONT> MT_N0_INF_REJ:
		   <FONT COLOR="#298C52">case</FONT> MT_N0_CLOSE:
		   <FONT COLOR="#298C52">case</FONT> MT_N0_CLO_ACK:
			<FONT COLOR="#298C52">return</FONT>(1);
		   <FONT COLOR="#298C52">default</FONT>:
			<FONT COLOR="#298C52">return</FONT>(0);
		}
	<FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (pd == PROTO_DIS_N1)
		<FONT COLOR="#298C52">switch</FONT>(mt) {
		   <FONT COLOR="#298C52">case</FONT> MT_N1_ESC:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_ALERT:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_CALL_SENT:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_CONN:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_CONN_ACK:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_SETUP:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_SETUP_ACK:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_RES:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_RES_ACK:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_RES_REJ:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_SUSP:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_SUSP_ACK:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_SUSP_REJ:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_USER_INFO:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_DET:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_DISC:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_REL:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_REL_ACK:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_CANC_ACK:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_CANC_REJ:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_CON_CON:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_FAC:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_FAC_ACK:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_FAC_CAN:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_FAC_REG:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_FAC_REJ:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_INFO:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_REG_ACK:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_REG_REJ:
		   <FONT COLOR="#298C52">case</FONT> MT_N1_STAT:
		   	<FONT COLOR="#298C52">return</FONT> (1);
		   <FONT COLOR="#298C52">default</FONT>:
		   	<FONT COLOR="#298C52">return</FONT>(0);
		}
	<FONT COLOR="#298C52">return</FONT>(0);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
l3_1tr6_setup_req(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;
	u_char tmp[128];
	u_char *p = tmp;
	u_char *teln;
	u_char *eaz;
	u_char channel = 0;
	<FONT COLOR="#298C52">int</FONT> l;

	<A HREF="l3dss1.c.shtml#MsgHead">MsgHead</A>(p, pc-&gt;callref, MT_N1_SETUP, PROTO_DIS_N1);
	teln = pc-&gt;para.setup.phone;
	pc-&gt;para.spv = 0;
	<FONT COLOR="#298C52">if</FONT> (!isdigit(*teln)) {
		<FONT COLOR="#298C52">switch</FONT> (0x5f &amp; *teln) {
			<FONT COLOR="#298C52">case</FONT> <FONT COLOR="#FF0000">'S'</FONT>:
				pc-&gt;para.spv = 1;
				<FONT COLOR="#298C52">break</FONT>;
			<FONT COLOR="#298C52">case</FONT> <FONT COLOR="#FF0000">'C'</FONT>:
				channel = 0x08;
			<FONT COLOR="#298C52">case</FONT> <FONT COLOR="#FF0000">'P'</FONT>:
				channel |= 0x80;
				teln++;
				<FONT COLOR="#298C52">if</FONT> (*teln == <FONT COLOR="#FF0000">'1'</FONT>)
					channel |= 0x01;
				<FONT COLOR="#298C52">else</FONT>
					channel |= 0x02;
				<FONT COLOR="#298C52">break</FONT>;
			<FONT COLOR="#298C52">default</FONT>:
				<FONT COLOR="#298C52">if</FONT> (pc-&gt;st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_WARN">L3_DEB_WARN</A>)
					<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"Wrong MSN Code"</FONT>);
				<FONT COLOR="#298C52">break</FONT>;
		}
		teln++;
	}
	<FONT COLOR="#298C52">if</FONT> (channel) {
		*p++ = 0x18;	<FONT COLOR=#0000FF>/* channel indicator */</FONT>
		*p++ = 1;
		*p++ = channel;
	}
	<FONT COLOR="#298C52">if</FONT> (pc-&gt;para.spv) {	<FONT COLOR=#0000FF>/* SPV ? */</FONT>
		<FONT COLOR=#0000FF>/* NSF SPV */</FONT>
		*p++ = WE0_netSpecFac;
		*p++ = 4;	<FONT COLOR=#0000FF>/* Laenge */</FONT>
		*p++ = 0;
		*p++ = FAC_SPV;	<FONT COLOR=#0000FF>/* SPV */</FONT>
		*p++ = pc-&gt;para.setup.si1;	<FONT COLOR=#0000FF>/* 0 for all Services */</FONT>
		*p++ = pc-&gt;para.setup.si2;	<FONT COLOR=#0000FF>/* 0 for all Services */</FONT>
		*p++ = WE0_netSpecFac;
		*p++ = 4;	<FONT COLOR=#0000FF>/* Laenge */</FONT>
		*p++ = 0;
		*p++ = FAC_Activate;	<FONT COLOR=#0000FF>/* aktiviere SPV (default) */</FONT>
		*p++ = pc-&gt;para.setup.si1;	<FONT COLOR=#0000FF>/* 0 for all Services */</FONT>
		*p++ = pc-&gt;para.setup.si2;	<FONT COLOR=#0000FF>/* 0 for all Services */</FONT>
	}
	eaz = pc-&gt;para.setup.eazmsn;
	<FONT COLOR="#298C52">if</FONT> (*eaz) {
		*p++ = WE0_origAddr;
		*p++ = strlen(eaz) + 1;
		<FONT COLOR=#0000FF>/* Classify as AnyPref. */</FONT>
		*p++ = 0x81;	<FONT COLOR=#0000FF>/* Ext = '1'B, Type = '000'B, Plan = '0001'B. */</FONT>
		<FONT COLOR="#298C52">while</FONT> (*eaz)
			*p++ = *eaz++ &amp; 0x7f;
	}
	*p++ = WE0_destAddr;
	*p++ = strlen(teln) + 1;
	<FONT COLOR=#0000FF>/* Classify as AnyPref. */</FONT>
	*p++ = 0x81;		<FONT COLOR=#0000FF>/* Ext = '1'B, Type = '000'B, Plan = '0001'B. */</FONT>
	<FONT COLOR="#298C52">while</FONT> (*teln)
		*p++ = *teln++ &amp; 0x7f;

	*p++ = WE_Shift_F6;
	<FONT COLOR=#0000FF>/* Codesatz 6 fuer Service */</FONT>
	*p++ = WE6_serviceInd;
	*p++ = 2;		<FONT COLOR=#0000FF>/* len=2 info,info2 */</FONT>
	*p++ = pc-&gt;para.setup.si1;
	*p++ = pc-&gt;para.setup.si2;

	l = p - tmp;
	<FONT COLOR="#298C52">if</FONT> (!(skb = <A HREF="isdnl3.c.shtml#l3_alloc_skb">l3_alloc_skb</A>(l)))
		<FONT COLOR="#298C52">return</FONT>;
	memcpy(skb_put(skb, l), tmp, l);
	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	<A HREF="isdnl3.c.shtml#L3AddTimer">L3AddTimer</A>(&amp;pc-&gt;timer, <A HREF="l3dss1.h.shtml#T303">T303</A>, <A HREF="hisax.h.shtml#CC_T303">CC_T303</A>);
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 1);
	pc-&gt;st-&gt;l3.l3l2(pc-&gt;st, <A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, skb);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
l3_1tr6_setup(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	u_char *p;
	<FONT COLOR="#298C52">int</FONT> bcfound = 0;
	<FONT COLOR="#298C52">char</FONT> tmp[80];
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

	p = skb-&gt;data;

	<FONT COLOR=#0000FF>/* Channel Identification */</FONT>
	p = skb-&gt;data;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, WE0_chanID, 0))) {
		pc-&gt;para.bchannel = p[2] &amp; 0x3;
		bcfound++;
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (pc-&gt;st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_WARN">L3_DEB_WARN</A>)
		<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"setup without bchannel"</FONT>);

	p = skb-&gt;data;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, WE6_serviceInd, 6))) {
		pc-&gt;para.setup.si1 = p[2];
		pc-&gt;para.setup.si2 = p[3];
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (pc-&gt;st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_WARN">L3_DEB_WARN</A>)
		<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"setup without service indicator"</FONT>);

	p = skb-&gt;data;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, WE0_destAddr, 0)))
		<A HREF="q931.c.shtml#iecpy">iecpy</A>(pc-&gt;para.setup.eazmsn, p, 1);
	<FONT COLOR="#298C52">else</FONT>
		pc-&gt;para.setup.eazmsn[0] = 0;

	p = skb-&gt;data;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, WE0_origAddr, 0))) {
		<A HREF="q931.c.shtml#iecpy">iecpy</A>(pc-&gt;para.setup.phone, p, 1);
	} <FONT COLOR="#298C52">else</FONT>
		pc-&gt;para.setup.phone[0] = 0;

	p = skb-&gt;data;
	pc-&gt;para.spv = 0;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, WE0_netSpecFac, 0))) {
		<FONT COLOR="#298C52">if</FONT> ((FAC_SPV == p[3]) || (FAC_Activate == p[3]))
			pc-&gt;para.spv = 1;
	}
	dev_kfree_skb(skb);

	<FONT COLOR=#0000FF>/* Signal all services, linklevel takes care of Service-Indicator */</FONT>
	<FONT COLOR="#298C52">if</FONT> (bcfound) {
		<FONT COLOR="#298C52">if</FONT> ((pc-&gt;para.setup.si1 != 7) &amp;&amp; (pc-&gt;st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_WARN">L3_DEB_WARN</A>)) {
			sprintf(tmp, <FONT COLOR="#FF0000">"non-digital call: %s -&gt; %s"</FONT>,
				pc-&gt;para.setup.phone,
				pc-&gt;para.setup.eazmsn);
			<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, tmp);
		}
		<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 6);
		pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_SETUP">CC_SETUP</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, pc);
	} <FONT COLOR="#298C52">else</FONT>
		<A HREF="isdnl3.c.shtml#release_l3_process">release_l3_process</A>(pc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
l3_1tr6_setup_ack(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	u_char *p;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	p = skb-&gt;data;
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 2);
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, WE0_chanID, 0))) {
		pc-&gt;para.bchannel = p[2] &amp; 0x3;
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (pc-&gt;st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_WARN">L3_DEB_WARN</A>)
		<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"setup answer without bchannel"</FONT>);
	dev_kfree_skb(skb);
	<A HREF="isdnl3.c.shtml#L3AddTimer">L3AddTimer</A>(&amp;pc-&gt;timer, <A HREF="l3dss1.h.shtml#T304">T304</A>, <A HREF="hisax.h.shtml#CC_T304">CC_T304</A>);
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_MORE_INFO">CC_MORE_INFO</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, pc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
l3_1tr6_call_sent(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	u_char *p;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	p = skb-&gt;data;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, WE0_chanID, 0))) {
		pc-&gt;para.bchannel = p[2] &amp; 0x3;
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (pc-&gt;st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_WARN">L3_DEB_WARN</A>)
		<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"setup answer without bchannel"</FONT>);
	dev_kfree_skb(skb);
	<A HREF="isdnl3.c.shtml#L3AddTimer">L3AddTimer</A>(&amp;pc-&gt;timer, <A HREF="l3dss1.h.shtml#T310">T310</A>, <A HREF="hisax.h.shtml#CC_T310">CC_T310</A>);
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 3);
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_PROCEEDING">CC_PROCEEDING</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, pc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
l3_1tr6_alert(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

	dev_kfree_skb(skb);
	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);	<FONT COLOR=#0000FF>/* T304 */</FONT>
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 4);
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_ALERTING">CC_ALERTING</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, pc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
l3_1tr6_info(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	u_char *p;
	<FONT COLOR="#298C52">int</FONT> i, tmpcharge = 0;
	<FONT COLOR="#298C52">char</FONT> a_charge[8], tmp[32];
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

	p = skb-&gt;data;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, WE6_chargingInfo, 6))) {
		<A HREF="q931.c.shtml#iecpy">iecpy</A>(a_charge, p, 1);
		<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; strlen(a_charge); i++) {
			tmpcharge *= 10;
			tmpcharge += a_charge[i] &amp; 0xf;
		}
		<FONT COLOR="#298C52">if</FONT> (tmpcharge &gt; pc-&gt;para.chargeinfo) {
			pc-&gt;para.chargeinfo = tmpcharge;
			pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_CHARGE">CC_CHARGE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, pc);
		}
		<FONT COLOR="#298C52">if</FONT> (pc-&gt;st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_CHARGE">L3_DEB_CHARGE</A>) {
			sprintf(tmp, <FONT COLOR="#FF0000">"charging info %d"</FONT>, pc-&gt;para.chargeinfo);
			<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, tmp);
		}
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (pc-&gt;st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_CHARGE">L3_DEB_CHARGE</A>)
		<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"charging info not found"</FONT>);
	dev_kfree_skb(skb);

}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
l3_1tr6_info_s2(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

	dev_kfree_skb(skb);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
l3_1tr6_connect(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);	<FONT COLOR=#0000FF>/* T310 */</FONT>
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 10);
	dev_kfree_skb(skb);
	pc-&gt;para.chargeinfo = 0;
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_SETUP">CC_SETUP</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, pc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
l3_1tr6_rel(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	u_char *p;

	p = skb-&gt;data;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, WE0_cause, 0))) {
		<FONT COLOR="#298C52">if</FONT> (p[1] &gt; 0) {
			pc-&gt;para.cause = p[2];
			<FONT COLOR="#298C52">if</FONT> (p[1] &gt; 1)
				pc-&gt;para.loc = p[3];
			<FONT COLOR="#298C52">else</FONT>
				pc-&gt;para.loc = 0;
		} <FONT COLOR="#298C52">else</FONT> {
			pc-&gt;para.cause = 0;
			pc-&gt;para.loc = 0;
		}
	} <FONT COLOR="#298C52">else</FONT>
		pc-&gt;para.cause = -1;
	dev_kfree_skb(skb);
	<A HREF="isdnl3.c.shtml#StopAllL3Timer">StopAllL3Timer</A>(pc);
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 0);
	l3_1TR6_message(pc, MT_N1_REL_ACK, PROTO_DIS_N1);
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_RELEASE">CC_RELEASE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, pc);
	<A HREF="isdnl3.c.shtml#release_l3_process">release_l3_process</A>(pc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
l3_1tr6_rel_ack(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

	dev_kfree_skb(skb);
	<A HREF="isdnl3.c.shtml#StopAllL3Timer">StopAllL3Timer</A>(pc);
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 0);
	pc-&gt;para.cause = -1;
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_RELEASE">CC_RELEASE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, pc);
	<A HREF="isdnl3.c.shtml#release_l3_process">release_l3_process</A>(pc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
l3_1tr6_disc(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	u_char *p;
	<FONT COLOR="#298C52">int</FONT> i, tmpcharge = 0;
	<FONT COLOR="#298C52">char</FONT> a_charge[8], tmp[32];

	<A HREF="isdnl3.c.shtml#StopAllL3Timer">StopAllL3Timer</A>(pc);
	p = skb-&gt;data;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, WE6_chargingInfo, 6))) {
		<A HREF="q931.c.shtml#iecpy">iecpy</A>(a_charge, p, 1);
		<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; strlen(a_charge); i++) {
			tmpcharge *= 10;
			tmpcharge += a_charge[i] &amp; 0xf;
		}
		<FONT COLOR="#298C52">if</FONT> (tmpcharge &gt; pc-&gt;para.chargeinfo) {
			pc-&gt;para.chargeinfo = tmpcharge;
			pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_CHARGE">CC_CHARGE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, pc);
		}
		<FONT COLOR="#298C52">if</FONT> (pc-&gt;st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_CHARGE">L3_DEB_CHARGE</A>) {
			sprintf(tmp, <FONT COLOR="#FF0000">"charging info %d"</FONT>, pc-&gt;para.chargeinfo);
			<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, tmp);
		}
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (pc-&gt;st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_CHARGE">L3_DEB_CHARGE</A>)
		<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"charging info not found"</FONT>);


	p = skb-&gt;data;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, WE0_cause, 0))) {
		<FONT COLOR="#298C52">if</FONT> (p[1] &gt; 0) {
			pc-&gt;para.cause = p[2];
			<FONT COLOR="#298C52">if</FONT> (p[1] &gt; 1)
				pc-&gt;para.loc = p[3];
			<FONT COLOR="#298C52">else</FONT>
				pc-&gt;para.loc = 0;
		} <FONT COLOR="#298C52">else</FONT> {
			pc-&gt;para.cause = 0;
			pc-&gt;para.loc = 0;
		}
	} <FONT COLOR="#298C52">else</FONT> {
		<FONT COLOR="#298C52">if</FONT> (pc-&gt;st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_WARN">L3_DEB_WARN</A>)
			<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"cause not found"</FONT>);
		pc-&gt;para.cause = -1;
	}
	dev_kfree_skb(skb);
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 12);
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_DISCONNECT">CC_DISCONNECT</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, pc);
}


<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
l3_1tr6_connect_ack(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

	dev_kfree_skb(skb);
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 10);
	pc-&gt;para.chargeinfo = 0;
	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_SETUP_COMPL">CC_SETUP_COMPL</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, pc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
l3_1tr6_alert_req(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 7);
	l3_1TR6_message(pc, MT_N1_ALERT, PROTO_DIS_N1);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
l3_1tr6_setup_rsp(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;
	u_char tmp[24];
	u_char *p = tmp;
	<FONT COLOR="#298C52">int</FONT> l;

	<A HREF="l3dss1.c.shtml#MsgHead">MsgHead</A>(p, pc-&gt;callref, MT_N1_CONN, PROTO_DIS_N1);
	<FONT COLOR="#298C52">if</FONT> (pc-&gt;para.spv) {	<FONT COLOR=#0000FF>/* SPV ? */</FONT>
		<FONT COLOR=#0000FF>/* NSF SPV */</FONT>
		*p++ = WE0_netSpecFac;
		*p++ = 4;	<FONT COLOR=#0000FF>/* Laenge */</FONT>
		*p++ = 0;
		*p++ = FAC_SPV;	<FONT COLOR=#0000FF>/* SPV */</FONT>
		*p++ = pc-&gt;para.setup.si1;
		*p++ = pc-&gt;para.setup.si2;
		*p++ = WE0_netSpecFac;
		*p++ = 4;	<FONT COLOR=#0000FF>/* Laenge */</FONT>
		*p++ = 0;
		*p++ = FAC_Activate;	<FONT COLOR=#0000FF>/* aktiviere SPV */</FONT>
		*p++ = pc-&gt;para.setup.si1;
		*p++ = pc-&gt;para.setup.si2;
	}
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 8);
	l = p - tmp;
	<FONT COLOR="#298C52">if</FONT> (!(skb = <A HREF="isdnl3.c.shtml#l3_alloc_skb">l3_alloc_skb</A>(l)))
		<FONT COLOR="#298C52">return</FONT>;
	memcpy(skb_put(skb, l), tmp, l);
	pc-&gt;st-&gt;l3.l3l2(pc-&gt;st, <A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, skb);
	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	<A HREF="isdnl3.c.shtml#L3AddTimer">L3AddTimer</A>(&amp;pc-&gt;timer, <A HREF="l3dss1.h.shtml#T313">T313</A>, <A HREF="hisax.h.shtml#CC_T313">CC_T313</A>);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
l3_1tr6_reset(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<A HREF="isdnl3.c.shtml#release_l3_process">release_l3_process</A>(pc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
l3_1tr6_disconnect_req(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;
	u_char tmp[16];
	u_char *p = tmp;
	<FONT COLOR="#298C52">int</FONT> l;
	u_char cause = 0x10;
	u_char clen = 1;

	<FONT COLOR="#298C52">if</FONT> (pc-&gt;para.cause &gt; 0)
		cause = pc-&gt;para.cause;
	<FONT COLOR=#0000FF>/* Map DSS1 causes */</FONT>
	<FONT COLOR="#298C52">switch</FONT> (cause &amp; 0x7f) {
		<FONT COLOR="#298C52">case</FONT> 0x10:
			clen = 0;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> 0x15:
			cause = CAUSE_CallRejected;
			<FONT COLOR="#298C52">break</FONT>;
	}
	<A HREF="isdnl3.c.shtml#StopAllL3Timer">StopAllL3Timer</A>(pc);
	<A HREF="l3dss1.c.shtml#MsgHead">MsgHead</A>(p, pc-&gt;callref, MT_N1_DISC, PROTO_DIS_N1);
	*p++ = WE0_cause;
	*p++ = clen;		<FONT COLOR=#0000FF>/* Laenge */</FONT>
	<FONT COLOR="#298C52">if</FONT> (clen)
		*p++ = cause | 0x80;
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 11);
	l = p - tmp;
	<FONT COLOR="#298C52">if</FONT> (!(skb = <A HREF="isdnl3.c.shtml#l3_alloc_skb">l3_alloc_skb</A>(l)))
		<FONT COLOR="#298C52">return</FONT>;
	memcpy(skb_put(skb, l), tmp, l);
	pc-&gt;st-&gt;l3.l3l2(pc-&gt;st, <A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, skb);
	<A HREF="isdnl3.c.shtml#L3AddTimer">L3AddTimer</A>(&amp;pc-&gt;timer, <A HREF="l3dss1.h.shtml#T305">T305</A>, <A HREF="hisax.h.shtml#CC_T305">CC_T305</A>);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
l3_1tr6_release_req(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<A HREF="isdnl3.c.shtml#StopAllL3Timer">StopAllL3Timer</A>(pc);
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 19);
	l3_1TR6_message(pc, MT_N1_REL, PROTO_DIS_N1);
	<A HREF="isdnl3.c.shtml#L3AddTimer">L3AddTimer</A>(&amp;pc-&gt;timer, <A HREF="l3dss1.h.shtml#T308">T308</A>, <A HREF="hisax.h.shtml#CC_T308_1">CC_T308_1</A>);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
l3_1tr6_t303(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">if</FONT> (pc-&gt;N303 &gt; 0) {
		pc-&gt;N303--;
		<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
		l3_1tr6_setup_req(pc, pr, arg);
	} <FONT COLOR="#298C52">else</FONT> {
		<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
		pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_NOSETUP_RSP">CC_NOSETUP_RSP</A>, pc);
		<A HREF="isdnl3.c.shtml#release_l3_process">release_l3_process</A>(pc);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
l3_1tr6_t304(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	pc-&gt;para.cause = 0xE6;
	l3_1tr6_disconnect_req(pc, pr, NULL);
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_SETUP_ERR">CC_SETUP_ERR</A>, pc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
l3_1tr6_t305(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;
	u_char tmp[16];
	u_char *p = tmp;
	<FONT COLOR="#298C52">int</FONT> l;
	u_char cause = 0x90;
	u_char clen = 1;

	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	<FONT COLOR="#298C52">if</FONT> (pc-&gt;para.cause &gt; 0)
		cause = pc-&gt;para.cause;
	<FONT COLOR=#0000FF>/* Map DSS1 causes */</FONT>
	<FONT COLOR="#298C52">switch</FONT> (cause &amp; 0x7f) {
		<FONT COLOR="#298C52">case</FONT> 0x10:
			clen = 0;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> 0x15:
			cause = CAUSE_CallRejected;
			<FONT COLOR="#298C52">break</FONT>;
	}
	<A HREF="l3dss1.c.shtml#MsgHead">MsgHead</A>(p, pc-&gt;callref, MT_N1_REL, PROTO_DIS_N1);
	*p++ = WE0_cause;
	*p++ = clen;		<FONT COLOR=#0000FF>/* Laenge */</FONT>
	<FONT COLOR="#298C52">if</FONT> (clen)
		*p++ = cause;
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 19);
	l = p - tmp;
	<FONT COLOR="#298C52">if</FONT> (!(skb = <A HREF="isdnl3.c.shtml#l3_alloc_skb">l3_alloc_skb</A>(l)))
		<FONT COLOR="#298C52">return</FONT>;
	memcpy(skb_put(skb, l), tmp, l);
	pc-&gt;st-&gt;l3.l3l2(pc-&gt;st, <A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, skb);
	<A HREF="isdnl3.c.shtml#L3AddTimer">L3AddTimer</A>(&amp;pc-&gt;timer, <A HREF="l3dss1.h.shtml#T308">T308</A>, <A HREF="hisax.h.shtml#CC_T308_1">CC_T308_1</A>);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
l3_1tr6_t310(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	pc-&gt;para.cause = 0xE6;
	l3_1tr6_disconnect_req(pc, pr, NULL);
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_SETUP_ERR">CC_SETUP_ERR</A>, pc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
l3_1tr6_t313(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	pc-&gt;para.cause = 0xE6;
	l3_1tr6_disconnect_req(pc, pr, NULL);
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_CONNECT_ERR">CC_CONNECT_ERR</A>, pc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
l3_1tr6_t308_1(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	l3_1TR6_message(pc, MT_N1_REL, PROTO_DIS_N1);
	<A HREF="isdnl3.c.shtml#L3AddTimer">L3AddTimer</A>(&amp;pc-&gt;timer, <A HREF="l3dss1.h.shtml#T308">T308</A>, <A HREF="hisax.h.shtml#CC_T308_2">CC_T308_2</A>);
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 19);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
l3_1tr6_t308_2(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_RELEASE_ERR">CC_RELEASE_ERR</A>, pc);
	<A HREF="isdnl3.c.shtml#release_l3_process">release_l3_process</A>(pc);
}
<FONT COLOR=#0000FF>/* *INDENT-OFF* */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">struct</FONT> stateentry downstl[] =
{
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(0),
	 <A HREF="hisax.h.shtml#CC_SETUP">CC_SETUP</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, l3_1tr6_setup_req},
   	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(1) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(2) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(3) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(4) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(6) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(7) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(8) |
    	 <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(10),
    	 <A HREF="hisax.h.shtml#CC_DISCONNECT">CC_DISCONNECT</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, l3_1tr6_disconnect_req},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(12),
	 <A HREF="hisax.h.shtml#CC_RELEASE">CC_RELEASE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, l3_1tr6_release_req},
	{<A HREF="isdnl3.h.shtml#ALL_STATES">ALL_STATES</A>,
	 <A HREF="hisax.h.shtml#CC_DLRL">CC_DLRL</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, l3_1tr6_reset},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(6),
	 <A HREF="hisax.h.shtml#CC_IGNORE">CC_IGNORE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, l3_1tr6_reset},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(6),
	 <A HREF="hisax.h.shtml#CC_REJECT">CC_REJECT</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, l3_1tr6_disconnect_req},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(6),
	 <A HREF="hisax.h.shtml#CC_ALERTING">CC_ALERTING</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, l3_1tr6_alert_req},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(6) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(7),
	 <A HREF="hisax.h.shtml#CC_SETUP">CC_SETUP</A> | <A HREF="hisax.h.shtml#RESPONSE">RESPONSE</A>, l3_1tr6_setup_rsp},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(1),
	 <A HREF="hisax.h.shtml#CC_T303">CC_T303</A>, l3_1tr6_t303},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(2),
	 <A HREF="hisax.h.shtml#CC_T304">CC_T304</A>, l3_1tr6_t304},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(3),
	 <A HREF="hisax.h.shtml#CC_T310">CC_T310</A>, l3_1tr6_t310},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(8),
	 <A HREF="hisax.h.shtml#CC_T313">CC_T313</A>, l3_1tr6_t313},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(11),
	 <A HREF="hisax.h.shtml#CC_T305">CC_T305</A>, l3_1tr6_t305},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(19),
	 <A HREF="hisax.h.shtml#CC_T308_1">CC_T308_1</A>, l3_1tr6_t308_1},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(19),
	 <A HREF="hisax.h.shtml#CC_T308_2">CC_T308_2</A>, l3_1tr6_t308_2},
};

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> downstl_len = <FONT COLOR="#298C52">sizeof</FONT>(downstl) /
<FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> stateentry);

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">struct</FONT> stateentry datastln1[] =
{
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(0),
	 MT_N1_SETUP, l3_1tr6_setup},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(1),
	 MT_N1_SETUP_ACK, l3_1tr6_setup_ack},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(1) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(2),
	 MT_N1_CALL_SENT, l3_1tr6_call_sent},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(1) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(2) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(3) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(4) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(7) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(8) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(10),
	 MT_N1_DISC, l3_1tr6_disc},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(2) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(3) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(4),
	 MT_N1_ALERT, l3_1tr6_alert},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(2) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(3) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(4),
	 MT_N1_CONN, l3_1tr6_connect},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(2),
	 MT_N1_INFO, l3_1tr6_info_s2},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(8),
	 MT_N1_CONN_ACK, l3_1tr6_connect_ack},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(10),
	 MT_N1_INFO, l3_1tr6_info},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(0) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(1) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(2) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(3) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(4) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(7) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(8) |
	 <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(10) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(11) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(12) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(15) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(17) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(19),
	 MT_N1_REL, l3_1tr6_rel},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(19),
	 MT_N1_REL_ACK, l3_1tr6_rel_ack}
};
<FONT COLOR=#0000FF>/* *INDENT-ON* */</FONT>




<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> datastln1_len = <FONT COLOR="#298C52">sizeof</FONT>(datastln1) /
<FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> stateentry);

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
up1tr6(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">int</FONT> i, mt, cr;
	<FONT COLOR="#298C52">struct</FONT> l3_process *proc;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">char</FONT> tmp[80];

	<FONT COLOR="#298C52">switch</FONT> (pr) {
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_UNIT_DATA">DL_UNIT_DATA</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_ESTABLISH">DL_ESTABLISH</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>):
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_ESTABLISH">DL_ESTABLISH</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>):
			<A HREF="isdnl3.c.shtml#l3_msg">l3_msg</A>(st, pr, arg);
			<FONT COLOR="#298C52">return</FONT>;
			<FONT COLOR="#298C52">break</FONT>;
	}
	<FONT COLOR="#298C52">if</FONT> (skb-&gt;len &lt; 4) {
		<FONT COLOR="#298C52">if</FONT> (st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_PROTERR">L3_DEB_PROTERR</A>) {
			sprintf(tmp, <FONT COLOR="#FF0000">"up1tr6 len only %d"</FONT>, skb-&gt;len);
			<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(st, tmp);
		}
		dev_kfree_skb(skb);
		<FONT COLOR="#298C52">return</FONT>;
	}
	<FONT COLOR="#298C52">if</FONT> ((skb-&gt;data[0] &amp; 0xfe) != PROTO_DIS_N0) {
		<FONT COLOR="#298C52">if</FONT> (st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_PROTERR">L3_DEB_PROTERR</A>) {
			sprintf(tmp, <FONT COLOR="#FF0000">"up1tr6%sunexpected discriminator %x message len %d"</FONT>,
				(pr == (<A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>)) ? <FONT COLOR="#FF0000">" "</FONT> : <FONT COLOR="#FF0000">"(broadcast) "</FONT>,
				skb-&gt;data[0], skb-&gt;len);
			<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(st, tmp);
		}
		dev_kfree_skb(skb);
		<FONT COLOR="#298C52">return</FONT>;
	}
	<FONT COLOR="#298C52">if</FONT> (skb-&gt;data[1] != 1) {
		<FONT COLOR="#298C52">if</FONT> (st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_PROTERR">L3_DEB_PROTERR</A>) {
			sprintf(tmp, <FONT COLOR="#FF0000">"up1tr6 CR len not 1"</FONT>);
			<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(st, tmp);
		}
		dev_kfree_skb(skb);
		<FONT COLOR="#298C52">return</FONT>;
	}
	cr = skb-&gt;data[2];
	mt = skb-&gt;data[3];
	<FONT COLOR="#298C52">if</FONT> (skb-&gt;data[0] == PROTO_DIS_N0) {
		dev_kfree_skb(skb);
		<FONT COLOR="#298C52">if</FONT> (st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_STATE">L3_DEB_STATE</A>) {
			sprintf(tmp, <FONT COLOR="#FF0000">"up1tr6%s N0 mt %x unhandled"</FONT>,
			     (pr == (<A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>)) ? <FONT COLOR="#FF0000">" "</FONT> : <FONT COLOR="#FF0000">"(broadcast) "</FONT>, mt);
			<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(st, tmp);
		}
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (skb-&gt;data[0] == PROTO_DIS_N1) {
		<FONT COLOR="#298C52">if</FONT> (!(proc = <A HREF="isdnl3.c.shtml#getl3proc">getl3proc</A>(st, cr))) {
			<FONT COLOR="#298C52">if</FONT> ((mt == MT_N1_SETUP) &amp;&amp; (cr &lt; 128)) {
				<FONT COLOR="#298C52">if</FONT> (!(proc = <A HREF="isdnl3.c.shtml#new_l3_process">new_l3_process</A>(st, cr))) {
					<FONT COLOR="#298C52">if</FONT> (st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_PROTERR">L3_DEB_PROTERR</A>) {
						sprintf(tmp, <FONT COLOR="#FF0000">"up1tr6 no roc mem"</FONT>);
						<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(st, tmp);
					}
					dev_kfree_skb(skb);
					<FONT COLOR="#298C52">return</FONT>;
				}
			} <FONT COLOR="#298C52">else</FONT> {
				dev_kfree_skb(skb);
				<FONT COLOR="#298C52">return</FONT>;
			}
		}
		<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; datastln1_len; i++)
			<FONT COLOR="#298C52">if</FONT> ((mt == datastln1[i].primitive) &amp;&amp;
			    ((1 &lt;&lt; proc-&gt;state) &amp; datastln1[i].state))
				<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">if</FONT> (i == datastln1_len) {
			dev_kfree_skb(skb);
			<FONT COLOR="#298C52">if</FONT> (st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_STATE">L3_DEB_STATE</A>) {
				sprintf(tmp, <FONT COLOR="#FF0000">"up1tr6%sstate %d mt %x unhandled"</FONT>,
				  (pr == (<A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>)) ? <FONT COLOR="#FF0000">" "</FONT> : <FONT COLOR="#FF0000">"(broadcast) "</FONT>,
					proc-&gt;state, mt);
				<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(st, tmp);
			}
			<FONT COLOR="#298C52">return</FONT>;
		} <FONT COLOR="#298C52">else</FONT> {
			<FONT COLOR="#298C52">if</FONT> (st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_STATE">L3_DEB_STATE</A>) {
				sprintf(tmp, <FONT COLOR="#FF0000">"up1tr6%sstate %d mt %x"</FONT>,
				  (pr == (<A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>)) ? <FONT COLOR="#FF0000">" "</FONT> : <FONT COLOR="#FF0000">"(broadcast) "</FONT>,
					proc-&gt;state, mt);
				<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(st, tmp);
			}
			datastln1[i].rout(proc, pr, skb);
		}
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
down1tr6(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">int</FONT> i, cr;
	<FONT COLOR="#298C52">struct</FONT> l3_process *proc;
	<FONT COLOR="#298C52">struct</FONT> Channel *chan;
	<FONT COLOR="#298C52">char</FONT> tmp[80];

	<FONT COLOR="#298C52">if</FONT> (((<A HREF="hisax.h.shtml#DL_ESTABLISH">DL_ESTABLISH</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>)== pr) || ((<A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>)== pr)) {
		<A HREF="isdnl3.c.shtml#l3_msg">l3_msg</A>(st, pr, NULL);
		<FONT COLOR="#298C52">return</FONT>;
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> ((<A HREF="hisax.h.shtml#CC_SETUP">CC_SETUP</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>) == pr) {
		chan = arg;
		cr = <A HREF="isdnl3.c.shtml#newcallref">newcallref</A>();
		cr |= 0x80;
		<FONT COLOR="#298C52">if</FONT> (!(proc = <A HREF="isdnl3.c.shtml#new_l3_process">new_l3_process</A>(st, cr))) {
			<FONT COLOR="#298C52">return</FONT>;
		} <FONT COLOR="#298C52">else</FONT> {
			proc-&gt;chan = chan;
			chan-&gt;proc = proc;
			proc-&gt;para.setup = chan-&gt;setup;
			proc-&gt;callref = cr;
		}
	} <FONT COLOR="#298C52">else</FONT> {
		proc = arg;
	}

	<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; downstl_len; i++)
		<FONT COLOR="#298C52">if</FONT> ((pr == downstl[i].primitive) &amp;&amp;
		    ((1 &lt;&lt; proc-&gt;state) &amp; downstl[i].state))
			<FONT COLOR="#298C52">break</FONT>;
	<FONT COLOR="#298C52">if</FONT> (i == downstl_len) {
		<FONT COLOR="#298C52">if</FONT> (st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_STATE">L3_DEB_STATE</A>) {
			sprintf(tmp, <FONT COLOR="#FF0000">"down1tr6 state %d prim %d unhandled"</FONT>,
				proc-&gt;state, pr);
			<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(st, tmp);
		}
	} <FONT COLOR="#298C52">else</FONT> {
		<FONT COLOR="#298C52">if</FONT> (st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_STATE">L3_DEB_STATE</A>) {
			sprintf(tmp, <FONT COLOR="#FF0000">"down1tr6 state %d prim %d"</FONT>,
				proc-&gt;state, pr);
			<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(st, tmp);
		}
		downstl[i].rout(proc, pr, arg);
	}
}

<FONT COLOR="#298C52">void</FONT>
setstack_1tr6(<FONT COLOR="#298C52">struct</FONT> PStack *st)
{
	<FONT COLOR="#298C52">char</FONT> tmp[64];

	st-&gt;lli.l4l3 = down1tr6;
	st-&gt;l2.l2l3 = up1tr6;
	st-&gt;l3.N303 = 0;

	strcpy(tmp, l3_1tr6_revision);
	printk(KERN_INFO <FONT COLOR="#FF0000">"HiSax: 1TR6 Rev. %s\n"</FONT>, HiSax_getrev(tmp));
}
</BODY>

</HTML>
