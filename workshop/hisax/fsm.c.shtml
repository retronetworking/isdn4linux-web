<HTML>

<!-- Generated by c2html-1.0, Copyright 1998 by Dave Whittington -->
<HEAD>
<TITLE>fsm.c</TITLE>
<!--#include virtual="/ssi/js.shtml" -->
<!--#include virtual="/ssi/buttondefs.shtml" -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<TABLE WIDTH="100%">
<TR>
<TD ALIGN=LEFT WIDTH="90"><!--#include virtual="/ssi/b_home.shtml" --></TD>
<TD ALIGN=RIGHT WIDTH="90"><!--#include virtual="/ssi/b_index.shtml" --></TD>
</TR>
</TABLE>
<CENTER><H1>fsm.c</H1></CENTER>

<HR>
<PRE>
<FONT COLOR=#0000FF>/* $Id$

 * Author       Karsten Keil (keil@temic-ech.spacenet.de)
 *              based on the teles driver from Jan den Ouden
 *
 * Thanks to    Jan den Ouden
 *              Fritz Elfert
 *
 * $Log$
 * Revision 1.9  1998/03/26 07:10:02  paul
 * The jumpmatrix table in struct Fsm was an array of "int". This is not
 * large enough for pointers to functions on Linux/Alpha (instant crash
 * on "insmod hisax). Now there is a typedef for the pointer to function.
 * This also prevents warnings about "incompatible pointer types".
 *
 * Revision 1.8  1998/03/07 22:56:59  tsbogend
 * made HiSax working on Linux/Alpha
 *
 * Revision 1.7  1997/11/06 17:09:13  keil
 * New 2.1 init code
 *
 * Revision 1.6  1997/07/27 21:42:25  keil
 * proof Fsm routines
 *
 * Revision 1.5  1997/06/26 11:10:05  keil
 * Restart timer function added
 *
 * Revision 1.4  1997/04/06 22:56:42  keil
 * Some cosmetic changes
 *
 * Revision 1.3  1997/02/16 01:04:08  fritz
 * Bugfix: Changed timer handling caused hang with 2.1.X
 *
 * Revision 1.2  1997/01/09 20:57:27  keil
 * cleanup &amp; FSM_TIMER_DEBUG
 *
 * Revision 1.1  1996/10/13 20:04:52  keil
 * Initial revision
 *
 *
 */</FONT>
<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#__NO_VERSION__">__NO_VERSION__</A>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hisax.h"</FONT>

<FONT COLOR=#A521F7>#define</FONT> <A NAME="FSM_TIMER_DEBUG">FSM_TIMER_DEBUG</A> 0

<A HREF="callc.c.shtml#HISAX_INITFUNC">HISAX_INITFUNC</A>(<FONT COLOR="#298C52">void</FONT>
FsmNew(<FONT COLOR="#298C52">struct</FONT> Fsm *fsm,
       <FONT COLOR="#298C52">struct</FONT> FsmNode *fnlist, <FONT COLOR="#298C52">int</FONT> fncount))
{
	<FONT COLOR="#298C52">int</FONT> i;

	fsm-&gt;jumpmatrix = (<A HREF="hisax.h.shtml#FSMFNPTR">FSMFNPTR</A> *)
		kmalloc(<FONT COLOR="#298C52">sizeof</FONT> (<A HREF="hisax.h.shtml#FSMFNPTR">FSMFNPTR</A>) * fsm-&gt;state_count * fsm-&gt;event_count, GFP_KERNEL);
	memset(fsm-&gt;jumpmatrix, 0, <FONT COLOR="#298C52">sizeof</FONT> (<A HREF="hisax.h.shtml#FSMFNPTR">FSMFNPTR</A>) * fsm-&gt;state_count * fsm-&gt;event_count);

	<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; fncount; i++) 
		<FONT COLOR="#298C52">if</FONT> ((fnlist[i].state&gt;=fsm-&gt;state_count) || (fnlist[i].event&gt;=fsm-&gt;event_count)) {
			printk(KERN_ERR <FONT COLOR="#FF0000">"FsmNew Error line %d st(%ld/%ld) ev(%ld/%ld)\n"</FONT>,
				i,(<FONT COLOR="#298C52">long</FONT>)fnlist[i].state,(<FONT COLOR="#298C52">long</FONT>)fsm-&gt;state_count,
				(<FONT COLOR="#298C52">long</FONT>)fnlist[i].event,(<FONT COLOR="#298C52">long</FONT>)fsm-&gt;event_count);
		} <FONT COLOR="#298C52">else</FONT>		
			fsm-&gt;jumpmatrix[fsm-&gt;state_count * fnlist[i].event +
				fnlist[i].state] = (<A HREF="hisax.h.shtml#FSMFNPTR">FSMFNPTR</A>) fnlist[i].routine;
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="FsmFree">FsmFree</A>(<FONT COLOR="#298C52">struct</FONT> Fsm *fsm)
{
	kfree((<FONT COLOR="#298C52">void</FONT> *) fsm-&gt;jumpmatrix);
}

<FONT COLOR="#298C52">int</FONT>
<A HREF="#FsmEvent">FsmEvent</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<A HREF="hisax.h.shtml#FSMFNPTR">FSMFNPTR</A> r;
	<FONT COLOR="#298C52">char</FONT> str[80];

	<FONT COLOR="#298C52">if</FONT> ((fi-&gt;state&gt;=fi-&gt;fsm-&gt;state_count) || (event &gt;= fi-&gt;fsm-&gt;event_count)) {
		printk(KERN_ERR <FONT COLOR="#FF0000">"FsmEvent Error st(%ld/%ld) ev(%d/%ld)\n"</FONT>,
			(<FONT COLOR="#298C52">long</FONT>)fi-&gt;state,(<FONT COLOR="#298C52">long</FONT>)fi-&gt;fsm-&gt;state_count,event,(<FONT COLOR="#298C52">long</FONT>)fi-&gt;fsm-&gt;event_count);
		<FONT COLOR="#298C52">return</FONT>(1);
	}
	r = fi-&gt;fsm-&gt;jumpmatrix[fi-&gt;fsm-&gt;state_count * event + fi-&gt;state];
	<FONT COLOR="#298C52">if</FONT> (r) {
		<FONT COLOR="#298C52">if</FONT> (fi-&gt;debug) {
			sprintf(str, <FONT COLOR="#FF0000">"State %s Event %s"</FONT>,
				fi-&gt;fsm-&gt;strState[fi-&gt;state],
				fi-&gt;fsm-&gt;strEvent[event]);
			fi-&gt;printdebug(fi, str);
		}
		r(fi, event, arg);
		<FONT COLOR="#298C52">return</FONT> (0);
	} <FONT COLOR="#298C52">else</FONT> {
		<FONT COLOR="#298C52">if</FONT> (fi-&gt;debug) {
			sprintf(str, <FONT COLOR="#FF0000">"State %s Event %s no routine"</FONT>,
				fi-&gt;fsm-&gt;strState[fi-&gt;state],
				fi-&gt;fsm-&gt;strEvent[event]);
			fi-&gt;printdebug(fi, str);
		}
		<FONT COLOR="#298C52">return</FONT> (!0);
	}
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="FsmChangeState">FsmChangeState</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> newstate)
{
	<FONT COLOR="#298C52">char</FONT> str[80];

	fi-&gt;state = newstate;
	<FONT COLOR="#298C52">if</FONT> (fi-&gt;debug) {
		sprintf(str, <FONT COLOR="#FF0000">"ChangeState %s"</FONT>,
			fi-&gt;fsm-&gt;strState[newstate]);
		fi-&gt;printdebug(fi, str);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="FsmExpireTimer">FsmExpireTimer</A>(<FONT COLOR="#298C52">struct</FONT> FsmTimer *ft)
{
<FONT COLOR=#A521F7>#if</FONT> <A HREF="#FSM_TIMER_DEBUG">FSM_TIMER_DEBUG</A>
	<FONT COLOR="#298C52">if</FONT> (ft-&gt;fi-&gt;debug) {
		<FONT COLOR="#298C52">char</FONT> str[40];
		sprintf(str, <FONT COLOR="#FF0000">"FsmExpireTimer %lx"</FONT>, (<FONT COLOR="#298C52">long</FONT>) ft);
		ft-&gt;fi-&gt;printdebug(ft-&gt;fi, str);
	}
<FONT COLOR=#A521F7>#endif</FONT>
	<A HREF="#FsmEvent">FsmEvent</A>(ft-&gt;fi, ft-&gt;event, ft-&gt;arg);
}

<FONT COLOR="#298C52">void</FONT>
<A HREF="#FsmInitTimer">FsmInitTimer</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">struct</FONT> FsmTimer *ft)
{
	ft-&gt;fi = fi;
	ft-&gt;tl.function = (<FONT COLOR="#298C52">void</FONT> *) <A HREF="#FsmExpireTimer">FsmExpireTimer</A>;
	ft-&gt;tl.data = (<FONT COLOR="#298C52">long</FONT>) ft;
<FONT COLOR=#A521F7>#if</FONT> <A HREF="#FSM_TIMER_DEBUG">FSM_TIMER_DEBUG</A>
	<FONT COLOR="#298C52">if</FONT> (ft-&gt;fi-&gt;debug) {
		<FONT COLOR="#298C52">char</FONT> str[40];
		sprintf(str, <FONT COLOR="#FF0000">"FsmInitTimer %lx"</FONT>, (<FONT COLOR="#298C52">long</FONT>) ft);
		ft-&gt;fi-&gt;printdebug(ft-&gt;fi, str);
	}
<FONT COLOR=#A521F7>#endif</FONT>
	init_timer(&amp;ft-&gt;tl);
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="FsmDelTimer">FsmDelTimer</A>(<FONT COLOR="#298C52">struct</FONT> FsmTimer *ft, <FONT COLOR="#298C52">int</FONT> where)
{
<FONT COLOR=#A521F7>#if</FONT> <A HREF="#FSM_TIMER_DEBUG">FSM_TIMER_DEBUG</A>
	<FONT COLOR="#298C52">if</FONT> (ft-&gt;fi-&gt;debug) {
		<FONT COLOR="#298C52">char</FONT> str[40];
		sprintf(str, <FONT COLOR="#FF0000">"FsmDelTimer %lx %d"</FONT>, (<FONT COLOR="#298C52">long</FONT>) ft, where);
		ft-&gt;fi-&gt;printdebug(ft-&gt;fi, str);
	}
<FONT COLOR=#A521F7>#endif</FONT>
	del_timer(&amp;ft-&gt;tl);
}

<FONT COLOR="#298C52">int</FONT>
<A NAME="FsmAddTimer">FsmAddTimer</A>(<FONT COLOR="#298C52">struct</FONT> FsmTimer *ft,
	    <FONT COLOR="#298C52">int</FONT> millisec, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg, <FONT COLOR="#298C52">int</FONT> where)
{

<FONT COLOR=#A521F7>#if</FONT> <A HREF="#FSM_TIMER_DEBUG">FSM_TIMER_DEBUG</A>
	<FONT COLOR="#298C52">if</FONT> (ft-&gt;fi-&gt;debug) {
		<FONT COLOR="#298C52">char</FONT> str[40];
		sprintf(str, <FONT COLOR="#FF0000">"FsmAddTimer %lx %d %d"</FONT>, (<FONT COLOR="#298C52">long</FONT>) ft, millisec, where);
		ft-&gt;fi-&gt;printdebug(ft-&gt;fi, str);
	}
<FONT COLOR=#A521F7>#endif</FONT>

	<FONT COLOR="#298C52">if</FONT> (ft-&gt;tl.next || ft-&gt;tl.prev) {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"FsmAddTimer: timer already active!\n"</FONT>);
		ft-&gt;fi-&gt;printdebug(ft-&gt;fi, <FONT COLOR="#FF0000">"FsmAddTimer already active!"</FONT>);
		<FONT COLOR="#298C52">return</FONT> -1;
	}
	init_timer(&amp;ft-&gt;tl);
	ft-&gt;event = event;
	ft-&gt;arg = arg;
	ft-&gt;tl.expires = jiffies + (millisec * HZ) / 1000;
	add_timer(&amp;ft-&gt;tl);
	<FONT COLOR="#298C52">return</FONT> 0;
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="FsmRestartTimer">FsmRestartTimer</A>(<FONT COLOR="#298C52">struct</FONT> FsmTimer *ft,
	    <FONT COLOR="#298C52">int</FONT> millisec, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg, <FONT COLOR="#298C52">int</FONT> where)
{

<FONT COLOR=#A521F7>#if</FONT> <A HREF="#FSM_TIMER_DEBUG">FSM_TIMER_DEBUG</A>
	<FONT COLOR="#298C52">if</FONT> (ft-&gt;fi-&gt;debug) {
		<FONT COLOR="#298C52">char</FONT> str[40];
		sprintf(str, <FONT COLOR="#FF0000">"FsmRestartTimer %lx %d %d"</FONT>, (<FONT COLOR="#298C52">long</FONT>) ft, millisec, where);
		ft-&gt;fi-&gt;printdebug(ft-&gt;fi, str);
	}
<FONT COLOR=#A521F7>#endif</FONT>

	<FONT COLOR="#298C52">if</FONT> (ft-&gt;tl.next || ft-&gt;tl.prev)
		del_timer(&amp;ft-&gt;tl);
	init_timer(&amp;ft-&gt;tl);
	ft-&gt;event = event;
	ft-&gt;arg = arg;
	ft-&gt;tl.expires = jiffies + (millisec * HZ) / 1000;
	add_timer(&amp;ft-&gt;tl);
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="jiftime">jiftime</A>(<FONT COLOR="#298C52">char</FONT> *s, <FONT COLOR="#298C52">long</FONT> mark)
{
	s += 8;

	*s-- = <FONT COLOR="#FF0000">'\0'</FONT>;
	*s-- = mark % 10 + <FONT COLOR="#FF0000">'0'</FONT>;
	mark /= 10;
	*s-- = mark % 10 + <FONT COLOR="#FF0000">'0'</FONT>;
	mark /= 10;
	*s-- = <FONT COLOR="#FF0000">'.'</FONT>;
	*s-- = mark % 10 + <FONT COLOR="#FF0000">'0'</FONT>;
	mark /= 10;
	*s-- = mark % 6 + <FONT COLOR="#FF0000">'0'</FONT>;
	mark /= 6;
	*s-- = <FONT COLOR="#FF0000">':'</FONT>;
	*s-- = mark % 10 + <FONT COLOR="#FF0000">'0'</FONT>;
	mark /= 10;
	*s-- = mark % 10 + <FONT COLOR="#FF0000">'0'</FONT>;
}
</BODY>

</HTML>
