<HTML>

<!-- Generated by c2html-1.0, Copyright 1998 by Dave Whittington -->
<HEAD>
<TITLE>diva.c</TITLE>
<!--#include virtual="/ssi/js.shtml" -->
<!--#include virtual="/ssi/buttondefs.shtml" -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<TABLE WIDTH="100%">
<TR>
<TD ALIGN=LEFT WIDTH="90"><!--#include virtual="/ssi/b_home.shtml" --></TD>
<TD ALIGN=RIGHT WIDTH="90"><!--#include virtual="/ssi/b_index.shtml" --></TD>
</TR>
</TABLE>
<CENTER><H1>diva.c</H1></CENTER>

<HR>
<PRE>
<FONT COLOR=#0000FF>/* $Id$

 * diva.c     low level stuff for Eicon.Diehl Diva Family ISDN cards
 *
 * Author     Karsten Keil (keil@temic-ech.spacenet.de)
 *
 * Thanks to Eicon Technology Diehl GmbH &amp; Co. oHG for documents and informations
 *
 *
 * $Log$
 * Revision 1.8  1998/05/25 12:57:46  keil
 * HiSax golden code from certification, Don't use !!!
 * No leased lines, no X75, but many changes.
 *
 * Revision 1.7  1998/04/15 16:42:36  keil
 * new init code
 * new PCI init (2.1.94)
 *
 * Revision 1.6  1998/03/07 22:56:57  tsbogend
 * made HiSax working on Linux/Alpha
 *
 * Revision 1.5  1998/02/02 13:29:38  keil
 * fast io
 *
 * Revision 1.4  1997/11/08 21:35:44  keil
 * new l1 init
 *
 * Revision 1.3  1997/11/06 17:13:33  keil
 * New 2.1 init code
 *
 * Revision 1.2  1997/10/29 18:55:55  keil
 * changes for 2.1.60 (irq2dev_map)
 *
 * Revision 1.1  1997/09/18 17:11:20  keil
 * first version
 *
 *
 */</FONT>

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#__NO_VERSION__">__NO_VERSION__</A>
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/config.h&gt;
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hisax.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isac.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hscx.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isdnl1.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/pci.h&gt;

<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *CardType[];

<FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *Diva_revision = <FONT COLOR="#FF0000">"$Revision$"</FONT>;

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#byteout">byteout</A>(addr,val) outb(val,addr)
<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#bytein">bytein</A>(addr) inb(addr)

<FONT COLOR=#A521F7>#define</FONT> DIVA_HSCX_DATA		0
<FONT COLOR=#A521F7>#define</FONT> DIVA_HSCX_ADR		4
<FONT COLOR=#A521F7>#define</FONT> DIVA_ISA_ISAC_DATA	2
<FONT COLOR=#A521F7>#define</FONT> DIVA_ISA_ISAC_ADR	6
<FONT COLOR=#A521F7>#define</FONT> DIVA_ISA_CTRL		7

<FONT COLOR=#A521F7>#define</FONT> DIVA_PCI_ISAC_DATA	8
<FONT COLOR=#A521F7>#define</FONT> DIVA_PCI_ISAC_ADR	0xc
<FONT COLOR=#A521F7>#define</FONT> DIVA_PCI_CTRL		0x10

<FONT COLOR=#0000FF>/* SUB Types */</FONT>
<FONT COLOR=#A521F7>#define</FONT> DIVA_ISA	1
<FONT COLOR=#A521F7>#define</FONT> DIVA_PCI	2

<FONT COLOR=#0000FF>/* PCI stuff */</FONT>
<FONT COLOR=#A521F7>#define</FONT> PCI_VENDOR_EICON_DIEHL	0x1133
<FONT COLOR=#A521F7>#define</FONT> PCI_DIVA20PRO_ID	0xe001
<FONT COLOR=#A521F7>#define</FONT> PCI_DIVA20_ID		0xe002
<FONT COLOR=#A521F7>#define</FONT> PCI_DIVA20PRO_U_ID	0xe003
<FONT COLOR=#A521F7>#define</FONT> PCI_DIVA20_U_ID		0xe004

<FONT COLOR=#0000FF>/* CTRL (Read) */</FONT>
<FONT COLOR=#A521F7>#define</FONT> DIVA_IRQ_STAT	0x01
<FONT COLOR=#A521F7>#define</FONT> DIVA_EEPROM_SDA	0x02
<FONT COLOR=#0000FF>/* CTRL (Write) */</FONT>
<FONT COLOR=#A521F7>#define</FONT> DIVA_IRQ_REQ	0x01
<FONT COLOR=#A521F7>#define</FONT> DIVA_RESET	0x08
<FONT COLOR=#A521F7>#define</FONT> DIVA_EEPROM_CLK	0x40
<FONT COLOR=#A521F7>#define</FONT> DIVA_PCI_LED_A	0x10
<FONT COLOR=#A521F7>#define</FONT> DIVA_PCI_LED_B	0x20
<FONT COLOR=#A521F7>#define</FONT> DIVA_ISA_LED_A	0x20
<FONT COLOR=#A521F7>#define</FONT> DIVA_ISA_LED_B	0x40
<FONT COLOR=#A521F7>#define</FONT> DIVA_IRQ_CLR	0x80

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> u_char
<A HREF="asuscom.c.shtml#readreg">readreg</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> ale, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char off)
{
	<FONT COLOR="#298C52">register</FONT> u_char ret;
	<FONT COLOR="#298C52">long</FONT> flags;

	save_flags(flags);
	cli();
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(ale, off);
	ret = <A HREF="asuscom.c.shtml#bytein">bytein</A>(adr);
	restore_flags(flags);
	<FONT COLOR="#298C52">return</FONT> (ret);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#readfifo">readfifo</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> ale, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char off, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	<FONT COLOR=#0000FF>/* fifo read without cli because it's allready done  */</FONT>

	<A HREF="asuscom.c.shtml#byteout">byteout</A>(ale, off);
	insb(adr, data, size);
}


<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#writereg">writereg</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> ale, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char off, u_char data)
{
	<FONT COLOR="#298C52">long</FONT> flags;

	save_flags(flags);
	cli();
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(ale, off);
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(adr, data);
	restore_flags(flags);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#writefifo">writefifo</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> ale, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> adr, u_char off, u_char *data, <FONT COLOR="#298C52">int</FONT> size)
{
	<FONT COLOR=#0000FF>/* fifo write without cli because it's allready done  */</FONT>
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(ale, off);
	outsb(adr, data, size);
}

<FONT COLOR=#0000FF>/* Interface functions */</FONT>

<FONT COLOR="#298C52">static</FONT> u_char
<A HREF="asuscom.c.shtml#ReadISAC">ReadISAC</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char offset)
{
	<FONT COLOR="#298C52">return</FONT>(<A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.diva.isac_adr, cs-&gt;hw.diva.isac, offset));
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#WriteISAC">WriteISAC</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char offset, u_char value)
{
	<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.diva.isac_adr, cs-&gt;hw.diva.isac, offset, value);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#ReadISACfifo">ReadISACfifo</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char *data, <FONT COLOR="#298C52">int</FONT> size)
{
	<A HREF="asuscom.c.shtml#readfifo">readfifo</A>(cs-&gt;hw.diva.isac_adr, cs-&gt;hw.diva.isac, 0, data, size);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> 
<A HREF="asuscom.c.shtml#WriteISACfifo">WriteISACfifo</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char *data, <FONT COLOR="#298C52">int</FONT> size)
{
	<A HREF="asuscom.c.shtml#writefifo">writefifo</A>(cs-&gt;hw.diva.isac_adr, cs-&gt;hw.diva.isac, 0, data, size);
}

<FONT COLOR="#298C52">static</FONT> u_char
<A HREF="asuscom.c.shtml#ReadHSCX">ReadHSCX</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> hscx, u_char offset)
{
	<FONT COLOR="#298C52">return</FONT>(<A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.diva.hscx_adr,
		cs-&gt;hw.diva.hscx, offset + (hscx ? 0x40 : 0)));
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="asuscom.c.shtml#WriteHSCX">WriteHSCX</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> hscx, u_char offset, u_char value)
{
	<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.diva.hscx_adr,
		cs-&gt;hw.diva.hscx, offset + (hscx ? 0x40 : 0), value);
}

<FONT COLOR=#0000FF>/*
 * fast interrupt HSCX stuff goes here
 */</FONT>

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#READHSCX">READHSCX</A>(cs, nr, reg) <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.diva.hscx_adr, \
		cs-&gt;hw.diva.hscx, reg + (nr ? 0x40 : 0))
<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#WRITEHSCX">WRITEHSCX</A>(cs, nr, reg, data) <A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.diva.hscx_adr, \
                cs-&gt;hw.diva.hscx, reg + (nr ? 0x40 : 0), data)
                
<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#READHSCXFIFO">READHSCXFIFO</A>(cs, nr, ptr, cnt) <A HREF="asuscom.c.shtml#readfifo">readfifo</A>(cs-&gt;hw.diva.hscx_adr, \
		cs-&gt;hw.diva.hscx, (nr ? 0x40 : 0), ptr, cnt)
		
<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#WRITEHSCXFIFO">WRITEHSCXFIFO</A>(cs, nr, ptr, cnt) <A HREF="asuscom.c.shtml#writefifo">writefifo</A>(cs-&gt;hw.diva.hscx_adr, \
		cs-&gt;hw.diva.hscx, (nr ? 0x40 : 0), ptr, cnt)
		
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hscx_irq.c"</FONT>

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
diva_interrupt(<FONT COLOR="#298C52">int</FONT> intno, <FONT COLOR="#298C52">void</FONT> *dev_id, <FONT COLOR="#298C52">struct</FONT> pt_regs *regs)
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = dev_id;
	u_char val, sval, stat = 0;
	<FONT COLOR="#298C52">int</FONT> cnt=8;

	<FONT COLOR="#298C52">if</FONT> (!cs) {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"Diva: Spurious interrupt!\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT>;
	}
	<FONT COLOR="#298C52">while</FONT> (((sval = <A HREF="asuscom.c.shtml#bytein">bytein</A>(cs-&gt;hw.diva.ctrl)) &amp; DIVA_IRQ_REQ) &amp;&amp; cnt) {
		val = <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.diva.hscx_adr, cs-&gt;hw.diva.hscx, <A HREF="hscx.h.shtml#HSCX_ISTA">HSCX_ISTA</A> + 0x40);
		<FONT COLOR="#298C52">if</FONT> (val) {
			<A HREF="hscx_irq.c.shtml#hscx_int_main">hscx_int_main</A>(cs, val);
			stat |= 1;
		}
		val = <A HREF="asuscom.c.shtml#readreg">readreg</A>(cs-&gt;hw.diva.isac_adr, cs-&gt;hw.diva.isac, <A HREF="isac.h.shtml#ISAC_ISTA">ISAC_ISTA</A>);
		<FONT COLOR="#298C52">if</FONT> (val) {
			<A HREF="isac.c.shtml#isac_interrupt">isac_interrupt</A>(cs, val);
			stat |= 2;
		}
		cnt--;
	}
	<FONT COLOR="#298C52">if</FONT> (!cnt)
		printk(KERN_WARNING <FONT COLOR="#FF0000">"Diva: IRQ LOOP\n"</FONT>);
	<FONT COLOR="#298C52">if</FONT> (stat &amp; 1) {
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.diva.hscx_adr, cs-&gt;hw.diva.hscx, <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A>, 0xFF);
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.diva.hscx_adr, cs-&gt;hw.diva.hscx, <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A> + 0x40, 0xFF);
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.diva.hscx_adr, cs-&gt;hw.diva.hscx, <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A>, 0x0);
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.diva.hscx_adr, cs-&gt;hw.diva.hscx, <A HREF="hscx.h.shtml#HSCX_MASK">HSCX_MASK</A> + 0x40, 0x0);
	}
	<FONT COLOR="#298C52">if</FONT> (stat &amp; 2) {
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.diva.isac_adr, cs-&gt;hw.diva.isac, <A HREF="isac.h.shtml#ISAC_MASK">ISAC_MASK</A>, 0xFF);
		<A HREF="asuscom.c.shtml#writereg">writereg</A>(cs-&gt;hw.diva.isac_adr, cs-&gt;hw.diva.isac, <A HREF="isac.h.shtml#ISAC_MASK">ISAC_MASK</A>, 0x0);
	}
}

<FONT COLOR="#298C52">void</FONT>
release_io_diva(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">int</FONT> bytecnt;
	
	del_timer(&amp;cs-&gt;hw.diva.tl);
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;subtyp == DIVA_ISA)
		bytecnt = 8;
	<FONT COLOR="#298C52">else</FONT>
		bytecnt = 32;
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.diva.cfg_reg) {
		<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.diva.ctrl, 0); <FONT COLOR=#0000FF>/* LED off, Reset */</FONT>
		release_region(cs-&gt;hw.diva.cfg_reg, bytecnt);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
reset_diva(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">long</FONT> flags;

	save_flags(flags);
	sti();
	cs-&gt;hw.diva.ctrl_reg = 0;        <FONT COLOR=#0000FF>/* Reset On */</FONT>
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.diva.ctrl, cs-&gt;hw.diva.ctrl_reg);
	current-&gt;state = TASK_INTERRUPTIBLE;
	current-&gt;timeout = jiffies + (10 * HZ) / 1000;	<FONT COLOR=#0000FF>/* Timeout 10ms */</FONT>
	schedule();
	cs-&gt;hw.diva.ctrl_reg |= DIVA_RESET;  <FONT COLOR=#0000FF>/* Reset Off */</FONT>
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.diva.ctrl, cs-&gt;hw.diva.ctrl_reg);
	current-&gt;state = TASK_INTERRUPTIBLE;
	current-&gt;timeout = jiffies + (10 * HZ) / 1000;	<FONT COLOR=#0000FF>/* Timeout 10ms */</FONT>
	schedule();
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;subtyp == DIVA_ISA)
		cs-&gt;hw.diva.ctrl_reg |= DIVA_ISA_LED_A;
	<FONT COLOR="#298C52">else</FONT>
		cs-&gt;hw.diva.ctrl_reg |= DIVA_PCI_LED_A;
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.diva.ctrl, cs-&gt;hw.diva.ctrl_reg);
}

<FONT COLOR=#A521F7>#define</FONT> DIVA_ASSIGN 1

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
diva_led_handler(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">int</FONT> blink = 0;

	del_timer(&amp;cs-&gt;hw.diva.tl);
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.diva.status &amp; DIVA_ASSIGN)
		cs-&gt;hw.diva.ctrl_reg |= (DIVA_ISA == cs-&gt;subtyp) ?
			DIVA_ISA_LED_A : DIVA_PCI_LED_A;
	<FONT COLOR="#298C52">else</FONT> {
		cs-&gt;hw.diva.ctrl_reg ^= (DIVA_ISA == cs-&gt;subtyp) ?
			DIVA_ISA_LED_A : DIVA_PCI_LED_A;
		blink = 250;
	}
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.diva.status &amp; 0xf000)
		cs-&gt;hw.diva.ctrl_reg |= (DIVA_ISA == cs-&gt;subtyp) ?
			DIVA_ISA_LED_B : DIVA_PCI_LED_B;
	<FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.diva.status &amp; 0x0f00) { 
		cs-&gt;hw.diva.ctrl_reg ^= (DIVA_ISA == cs-&gt;subtyp) ?
			DIVA_ISA_LED_B : DIVA_PCI_LED_B;
		blink = 500;
	} <FONT COLOR="#298C52">else</FONT>
		cs-&gt;hw.diva.ctrl_reg &amp;= ~((DIVA_ISA == cs-&gt;subtyp) ?
			DIVA_ISA_LED_B : DIVA_PCI_LED_B);
	
	<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.diva.ctrl, cs-&gt;hw.diva.ctrl_reg);
	<FONT COLOR="#298C52">if</FONT> (blink) {
		init_timer(&amp;cs-&gt;hw.diva.tl);
		cs-&gt;hw.diva.tl.expires = jiffies + ((blink * HZ) / 1000);
		add_timer(&amp;cs-&gt;hw.diva.tl);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
Diva_card_msg(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> mt, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">switch</FONT> (mt) {
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_RESET">CARD_RESET</A>:
			reset_diva(cs);
			<FONT COLOR="#298C52">return</FONT>(0);
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_RELEASE">CARD_RELEASE</A>:
			release_io_diva(cs);
			<FONT COLOR="#298C52">return</FONT>(0);
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_SETIRQ">CARD_SETIRQ</A>:
			<FONT COLOR="#298C52">return</FONT>(request_irq(cs-&gt;irq, &amp;diva_interrupt,
					<A HREF="hisax.h.shtml#I4L_IRQ_FLAG">I4L_IRQ_FLAG</A>, <FONT COLOR="#FF0000">"HiSax"</FONT>, cs));
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_INIT">CARD_INIT</A>:
			inithscxisac(cs, 3);
			<FONT COLOR="#298C52">return</FONT>(0);
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#CARD_TEST">CARD_TEST</A>:
			<FONT COLOR="#298C52">return</FONT>(0);
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#MDL_REMOVE">MDL_REMOVE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			cs-&gt;hw.diva.status = 0;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#MDL_ASSIGN">MDL_ASSIGN</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			cs-&gt;hw.diva.status |= DIVA_ASSIGN;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#MDL_INFO_SETUP">MDL_INFO_SETUP</A>:
			<FONT COLOR="#298C52">if</FONT> ((<FONT COLOR="#298C52">long</FONT>)arg) 
				cs-&gt;hw.diva.status |=  0x0200;
			<FONT COLOR="#298C52">else</FONT>
				cs-&gt;hw.diva.status |=  0x0100;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#MDL_INFO_CONN">MDL_INFO_CONN</A>:
			<FONT COLOR="#298C52">if</FONT> ((<FONT COLOR="#298C52">long</FONT>)arg) 
				cs-&gt;hw.diva.status |=  0x2000;
			<FONT COLOR="#298C52">else</FONT>
				cs-&gt;hw.diva.status |=  0x1000;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#MDL_INFO_REL">MDL_INFO_REL</A>:
			<FONT COLOR="#298C52">if</FONT> ((<FONT COLOR="#298C52">long</FONT>)arg) {
				cs-&gt;hw.diva.status &amp;=  ~0x2000;
				cs-&gt;hw.diva.status &amp;=  ~0x0200;
			} <FONT COLOR="#298C52">else</FONT> {
				cs-&gt;hw.diva.status &amp;=  ~0x1000;
				cs-&gt;hw.diva.status &amp;=  ~0x0100;
			}
			<FONT COLOR="#298C52">break</FONT>;
	}
	diva_led_handler(cs);
	<FONT COLOR="#298C52">return</FONT>(0);
}

<FONT COLOR="#298C52">static</FONT> 	<FONT COLOR="#298C52">struct</FONT> pci_dev *dev_diva __initdata = NULL;
<FONT COLOR="#298C52">static</FONT> 	<FONT COLOR="#298C52">struct</FONT> pci_dev *dev_diva_u __initdata = NULL;

<A HREF="asuscom.c.shtml#__initfunc">__initfunc</A>(<FONT COLOR="#298C52">int</FONT>
setup_diva(<FONT COLOR="#298C52">struct</FONT> IsdnCard *card))
{
	<FONT COLOR="#298C52">int</FONT> bytecnt;
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = card-&gt;cs;
	<FONT COLOR="#298C52">char</FONT> tmp[64];

	strcpy(tmp, Diva_revision);
	printk(KERN_INFO <FONT COLOR="#FF0000">"HiSax: Eicon.Diehl Diva driver Rev. %s\n"</FONT>, HiSax_getrev(tmp));
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;typ != <A HREF="hisax.h.shtml#ISDN_CTYPE_DIEHLDIVA">ISDN_CTYPE_DIEHLDIVA</A>)
		<FONT COLOR="#298C52">return</FONT>(0);
	cs-&gt;hw.diva.status = 0;
	<FONT COLOR="#298C52">if</FONT> (card-&gt;para[1]) {
		cs-&gt;subtyp = DIVA_ISA;
		cs-&gt;hw.diva.ctrl_reg = 0;
		cs-&gt;hw.diva.cfg_reg = card-&gt;para[1];
		cs-&gt;hw.diva.ctrl = card-&gt;para[1] + DIVA_ISA_CTRL;
		cs-&gt;hw.diva.isac = card-&gt;para[1] + DIVA_ISA_ISAC_DATA;
		cs-&gt;hw.diva.hscx = card-&gt;para[1] + DIVA_HSCX_DATA;
		cs-&gt;hw.diva.isac_adr = card-&gt;para[1] + DIVA_ISA_ISAC_ADR;
		cs-&gt;hw.diva.hscx_adr = card-&gt;para[1] + DIVA_HSCX_ADR;
		cs-&gt;irq = card-&gt;para[0];
		bytecnt = 8;
	} <FONT COLOR="#298C52">else</FONT> {
<FONT COLOR=#A521F7>#if</FONT> CONFIG_PCI
		<FONT COLOR="#298C52">if</FONT> (!pci_present()) {
			printk(KERN_ERR <FONT COLOR="#FF0000">"Diva: no PCI bus present\n"</FONT>);
			<FONT COLOR="#298C52">return</FONT>(0);
		}

		cs-&gt;subtyp = 0;
		<FONT COLOR="#298C52">if</FONT> ((dev_diva = pci_find_device(PCI_VENDOR_EICON_DIEHL,
			PCI_DIVA20_ID, dev_diva))) {
				cs-&gt;subtyp = DIVA_PCI;
			<FONT COLOR=#0000FF>/* get IRQ */</FONT>
			cs-&gt;irq = dev_diva-&gt;irq;
			<FONT COLOR=#0000FF>/* get IO address */</FONT>
			cs-&gt;hw.diva.cfg_reg = dev_diva-&gt;base_address[2]
				&amp; PCI_BASE_ADDRESS_IO_MASK;
		} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> ((dev_diva_u = pci_find_device(PCI_VENDOR_EICON_DIEHL,
			PCI_DIVA20_U_ID, dev_diva_u))) {
			   	cs-&gt;subtyp = DIVA_PCI;
			<FONT COLOR=#0000FF>/* get IRQ */</FONT>
			cs-&gt;irq = dev_diva_u-&gt;irq;
			<FONT COLOR=#0000FF>/* get IO address */</FONT>
			cs-&gt;hw.diva.cfg_reg = dev_diva_u-&gt;base_address[2]
				&amp; PCI_BASE_ADDRESS_IO_MASK;
		} <FONT COLOR="#298C52">else</FONT> {
			printk(KERN_WARNING <FONT COLOR="#FF0000">"Diva: No PCI card found\n"</FONT>);
			<FONT COLOR="#298C52">return</FONT>(0);
		}

		<FONT COLOR="#298C52">if</FONT> (!cs-&gt;irq) {
			printk(KERN_WARNING <FONT COLOR="#FF0000">"Diva: No IRQ for PCI card found\n"</FONT>);
			<FONT COLOR="#298C52">return</FONT>(0);
		}

		<FONT COLOR="#298C52">if</FONT> (!cs-&gt;hw.diva.cfg_reg) {
			printk(KERN_WARNING <FONT COLOR="#FF0000">"Diva: No IO-Adr for PCI card found\n"</FONT>);
			<FONT COLOR="#298C52">return</FONT>(0);
		}
		cs-&gt;hw.diva.ctrl = cs-&gt;hw.diva.cfg_reg + DIVA_PCI_CTRL;
		cs-&gt;hw.diva.isac = cs-&gt;hw.diva.cfg_reg + DIVA_PCI_ISAC_DATA;
		cs-&gt;hw.diva.hscx = cs-&gt;hw.diva.cfg_reg + DIVA_HSCX_DATA;
		cs-&gt;hw.diva.isac_adr = cs-&gt;hw.diva.cfg_reg + DIVA_PCI_ISAC_ADR;
		cs-&gt;hw.diva.hscx_adr = cs-&gt;hw.diva.cfg_reg + DIVA_HSCX_ADR;
		bytecnt = 32;
<FONT COLOR=#A521F7>#else</FONT>
		printk(KERN_WARNING <FONT COLOR="#FF0000">"Diva: cfgreg 0 and NO_PCI_BIOS\n"</FONT>);
		printk(KERN_WARNING <FONT COLOR="#FF0000">"Diva: unable to config DIVA PCI\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT> (0);
<FONT COLOR=#A521F7>#endif</FONT> <FONT COLOR=#0000FF>/* CONFIG_PCI */</FONT>
	}

	printk(KERN_INFO
		<FONT COLOR="#FF0000">"Diva: %s card configured at 0x%x IRQ %d\n"</FONT>,
		(cs-&gt;subtyp == DIVA_ISA) ? <FONT COLOR="#FF0000">"ISA"</FONT> : <FONT COLOR="#FF0000">"PCI"</FONT>,
		cs-&gt;hw.diva.cfg_reg, cs-&gt;irq);
	<FONT COLOR="#298C52">if</FONT> (check_region(cs-&gt;hw.diva.cfg_reg, bytecnt)) {
		printk(KERN_WARNING
		       <FONT COLOR="#FF0000">"HiSax: %s config port %x-%x already in use\n"</FONT>,
		       CardType[card-&gt;typ],
		       cs-&gt;hw.diva.cfg_reg,
		       cs-&gt;hw.diva.cfg_reg + bytecnt);
		<FONT COLOR="#298C52">return</FONT> (0);
	} <FONT COLOR="#298C52">else</FONT> {
		request_region(cs-&gt;hw.diva.cfg_reg, bytecnt, <FONT COLOR="#FF0000">"diva isdn"</FONT>);
	}

	reset_diva(cs);
	cs-&gt;hw.diva.tl.function = (<FONT COLOR="#298C52">void</FONT> *) diva_led_handler;
	cs-&gt;hw.diva.tl.data = (<FONT COLOR="#298C52">long</FONT>) cs;
	init_timer(&amp;cs-&gt;hw.diva.tl);
	cs-&gt;readisac  = &amp;<A HREF="asuscom.c.shtml#ReadISAC">ReadISAC</A>;
	cs-&gt;writeisac = &amp;<A HREF="asuscom.c.shtml#WriteISAC">WriteISAC</A>;
	cs-&gt;readisacfifo  = &amp;<A HREF="asuscom.c.shtml#ReadISACfifo">ReadISACfifo</A>;
	cs-&gt;writeisacfifo = &amp;<A HREF="asuscom.c.shtml#WriteISACfifo">WriteISACfifo</A>;
	cs-&gt;BC_Read_Reg  = &amp;<A HREF="asuscom.c.shtml#ReadHSCX">ReadHSCX</A>;
	cs-&gt;BC_Write_Reg = &amp;<A HREF="asuscom.c.shtml#WriteHSCX">WriteHSCX</A>;
	cs-&gt;BC_Send_Data = &amp;<A HREF="hscx_irq.c.shtml#hscx_fill_fifo">hscx_fill_fifo</A>;
	cs-&gt;cardmsg = &amp;Diva_card_msg;

	<A HREF="isac.c.shtml#ISACVersion">ISACVersion</A>(cs, <FONT COLOR="#FF0000">"Diva:"</FONT>);
	<FONT COLOR="#298C52">if</FONT> (HscxVersion(cs, <FONT COLOR="#FF0000">"Diva:"</FONT>)) {
		printk(KERN_WARNING
		       <FONT COLOR="#FF0000">"Diva: wrong HSCX versions check IO address\n"</FONT>);
		release_io_diva(cs);
		<FONT COLOR="#298C52">return</FONT> (0);
	}
	<FONT COLOR="#298C52">return</FONT> (1);
}
</BODY>

</HTML>
