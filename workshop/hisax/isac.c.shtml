<HTML>

<!-- Generated by c2html-1.0, Copyright 1998 by Dave Whittington -->
<HEAD>
<TITLE>isac.c</TITLE>
<!--#include virtual="/ssi/js.shtml" -->
<!--#include virtual="/ssi/buttondefs.shtml" -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<TABLE WIDTH="100%">
<TR>
<TD ALIGN=LEFT WIDTH="90"><!--#include virtual="/ssi/b_home.shtml" --></TD>
<TD ALIGN=RIGHT WIDTH="90"><!--#include virtual="/ssi/b_index.shtml" --></TD>
</TR>
</TABLE>
<CENTER><H1>isac.c</H1></CENTER>

<HR>
<PRE>
<FONT COLOR=#0000FF>/* $Id$

 * isac.c   ISAC specific routines
 *
 * Author       Karsten Keil (keil@temic-ech.spacenet.de)
 *
 *
 * $Log$
 * Revision 1.16  1998/05/25 12:58:01  keil
 * HiSax golden code from certification, Don't use !!!
 * No leased lines, no X75, but many changes.
 *
 * Revision 1.15  1998/04/15 16:45:32  keil
 * new init code
 *
 * Revision 1.14  1998/04/10 10:35:26  paul
 * fixed (silly?) warnings from egcs on Alpha.
 *
 * Revision 1.13  1998/03/07 22:57:01  tsbogend
 * made HiSax working on Linux/Alpha
 *
 * Revision 1.12  1998/02/12 23:07:40  keil
 * change for 2.1.86 (removing FREE_READ/FREE_WRITE from [dev]_kfree_skb()
 *
 * Revision 1.11  1998/02/09 10:54:49  keil
 * fixes for leased mode
 *
 * Revision 1.10  1998/02/02 13:37:37  keil
 * new init
 *
 * Revision 1.9  1997/11/06 17:09:07  keil
 * New 2.1 init code
 *
 * Revision 1.8  1997/10/29 19:00:03  keil
 * new layer1,changes for 2.1
 *
 * Revision 1.7  1997/10/01 09:21:37  fritz
 * Removed old compatibility stuff for 2.0.X kernels.
 * From now on, this code is for 2.1.X ONLY!
 * Old stuff is still in the separate branch.
 *
 * Revision 1.6  1997/08/15 17:47:08  keil
 * avoid oops because a uninitialised timer
 *
 * Revision 1.5  1997/08/07 17:48:49  keil
 * fix wrong parenthesis
 *
 * Revision 1.4  1997/07/30 17:11:59  keil
 * fixed Timer3
 *
 * Revision 1.3  1997/07/27 21:37:40  keil
 * T3 implemented; supervisor l1timer; B-channel TEST_LOOP
 *
 * Revision 1.2  1997/06/26 11:16:15  keil
 * first version
 *
 *
 */</FONT>

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#__NO_VERSION__">__NO_VERSION__</A>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hisax.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isac.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isdnl1.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/interrupt.h&gt;

<FONT COLOR=#A521F7>#define</FONT> <A NAME="DBUSY_TIMER_VALUE">DBUSY_TIMER_VALUE</A> 80
<FONT COLOR=#A521F7>#define</FONT> <A NAME="ARCOFI_USE">ARCOFI_USE</A> 1

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">char</FONT> *ISACVer[] <A HREF="hisax.h.shtml#HISAX_INITDATA">HISAX_INITDATA</A> =
{<FONT COLOR="#FF0000">"2086/2186 V1.1"</FONT>, <FONT COLOR="#FF0000">"2085 B1"</FONT>, <FONT COLOR="#FF0000">"2085 B2"</FONT>,
 <FONT COLOR="#FF0000">"2085 V2.3"</FONT>};

<FONT COLOR="#298C52">void</FONT>
<A NAME="ISACVersion">ISACVersion</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">char</FONT> *s)
{
	<FONT COLOR="#298C52">int</FONT> val;

	val = cs-&gt;readisac(cs, <A HREF="isac.h.shtml#ISAC_RBCH">ISAC_RBCH</A>);
	printk(KERN_INFO <FONT COLOR="#FF0000">"%s ISAC version (%x): %s\n"</FONT>, s, val, ISACVer[(val &gt;&gt; 5) &amp; 3]);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#ph_command">ph_command</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> command)
{
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_ISAC">L1_DEB_ISAC</A>) {
		<FONT COLOR="#298C52">char</FONT> tmp[32];
		sprintf(tmp, <FONT COLOR="#FF0000">"ph_command %x"</FONT>, command);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	}
	cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_CIX0">ISAC_CIX0</A>, (command &lt;&lt; 2) | 3);
}


<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="isac_new_ph">isac_new_ph</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">switch</FONT> (cs-&gt;ph_state) {
		<FONT COLOR="#298C52">case</FONT> (<A HREF="isac.h.shtml#ISAC_IND_RS">ISAC_IND_RS</A>):
		<FONT COLOR="#298C52">case</FONT> (<A HREF="isac.h.shtml#ISAC_IND_EI">ISAC_IND_EI</A>):
			<A HREF="#ph_command">ph_command</A>(cs, <A HREF="isac.h.shtml#ISAC_CMD_DUI">ISAC_CMD_DUI</A>);
			<A HREF="isdnl1.c.shtml#l1_msg">l1_msg</A>(cs, <A HREF="hisax.h.shtml#HW_RESET">HW_RESET</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="isac.h.shtml#ISAC_IND_DID">ISAC_IND_DID</A>):
			<A HREF="isdnl1.c.shtml#l1_msg">l1_msg</A>(cs, <A HREF="hisax.h.shtml#HW_DEACTIVATE">HW_DEACTIVATE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="isac.h.shtml#ISAC_IND_DR">ISAC_IND_DR</A>):
			<A HREF="isdnl1.c.shtml#l1_msg">l1_msg</A>(cs, <A HREF="hisax.h.shtml#HW_DEACTIVATE">HW_DEACTIVATE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="isac.h.shtml#ISAC_IND_PU">ISAC_IND_PU</A>):
			<A HREF="isdnl1.c.shtml#l1_msg">l1_msg</A>(cs, <A HREF="hisax.h.shtml#HW_POWERUP">HW_POWERUP</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="isac.h.shtml#ISAC_IND_RSY">ISAC_IND_RSY</A>):
			<A HREF="isdnl1.c.shtml#l1_msg">l1_msg</A>(cs, <A HREF="hisax.h.shtml#HW_RSYNC">HW_RSYNC</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="isac.h.shtml#ISAC_IND_ARD">ISAC_IND_ARD</A>):
			<A HREF="isdnl1.c.shtml#l1_msg">l1_msg</A>(cs, <A HREF="hisax.h.shtml#HW_INFO2">HW_INFO2</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="isac.h.shtml#ISAC_IND_AI8">ISAC_IND_AI8</A>):
			<A HREF="isdnl1.c.shtml#l1_msg">l1_msg</A>(cs, <A HREF="hisax.h.shtml#HW_INFO4_P8">HW_INFO4_P8</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="isac.h.shtml#ISAC_IND_AI10">ISAC_IND_AI10</A>):
			<A HREF="isdnl1.c.shtml#l1_msg">l1_msg</A>(cs, <A HREF="hisax.h.shtml#HW_INFO4_P10">HW_INFO4_P10</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">default</FONT>:
			<FONT COLOR="#298C52">break</FONT>;
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="isac_bh">isac_bh</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *stptr;
	
	<FONT COLOR="#298C52">if</FONT> (!cs)
		<FONT COLOR="#298C52">return</FONT>;

	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="isdnl1.h.shtml#D_CLEARBUSY">D_CLEARBUSY</A>, &amp;cs-&gt;event)) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug)
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"D-Channel Busy cleared"</FONT>);
		stptr = cs-&gt;stlist;
		<FONT COLOR="#298C52">while</FONT> (stptr != NULL) {
			stptr-&gt;l1.l1l2(stptr, <A HREF="hisax.h.shtml#PH_PAUSE">PH_PAUSE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, NULL);
			stptr = stptr-&gt;next;
		}
	}
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="isdnl1.h.shtml#D_L1STATECHANGE">D_L1STATECHANGE</A>, &amp;cs-&gt;event))
		<A HREF="#isac_new_ph">isac_new_ph</A>(cs);		
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="isdnl1.h.shtml#D_RCVBUFREADY">D_RCVBUFREADY</A>, &amp;cs-&gt;event))
		<A HREF="isdnl1.c.shtml#DChannel_proc_rcv">DChannel_proc_rcv</A>(cs);
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="isdnl1.h.shtml#D_XMTBUFREADY">D_XMTBUFREADY</A>, &amp;cs-&gt;event))
		<A HREF="isdnl1.c.shtml#DChannel_proc_xmt">DChannel_proc_xmt</A>(cs);
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="isdnl1.h.shtml#D_RX_MON0">D_RX_MON0</A>, &amp;cs-&gt;event))
		test_and_set_bit(<A HREF="hisax.h.shtml#HW_MON0_RX_END">HW_MON0_RX_END</A>, &amp;cs-&gt;HW_Flags);
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="isdnl1.h.shtml#D_RX_MON1">D_RX_MON1</A>, &amp;cs-&gt;event))
		test_and_set_bit(<A HREF="hisax.h.shtml#HW_MON1_RX_END">HW_MON1_RX_END</A>, &amp;cs-&gt;HW_Flags);
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="isdnl1.h.shtml#D_TX_MON0">D_TX_MON0</A>, &amp;cs-&gt;event))
		test_and_set_bit(<A HREF="hisax.h.shtml#HW_MON0_TX_END">HW_MON0_TX_END</A>, &amp;cs-&gt;HW_Flags);
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="isdnl1.h.shtml#D_TX_MON1">D_TX_MON1</A>, &amp;cs-&gt;event))
		test_and_set_bit(<A HREF="hisax.h.shtml#HW_MON1_TX_END">HW_MON1_TX_END</A>, &amp;cs-&gt;HW_Flags);
}

<FONT COLOR="#298C52">void</FONT>
<A HREF="#isac_empty_fifo">isac_empty_fifo</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> count)
{
	u_char *ptr;
	<FONT COLOR="#298C52">long</FONT> flags;

	<FONT COLOR="#298C52">if</FONT> ((cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_ISAC">L1_DEB_ISAC</A>) &amp;&amp; !(cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_ISAC_FIFO">L1_DEB_ISAC_FIFO</A>))
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"isac_empty_fifo"</FONT>);

	<FONT COLOR="#298C52">if</FONT> ((cs-&gt;rcvidx + count) &gt;= <A HREF="hisax.h.shtml#MAX_DFRAME_LEN">MAX_DFRAME_LEN</A>) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_WARN">L1_DEB_WARN</A>) {
			<FONT COLOR="#298C52">char</FONT> tmp[40];
			sprintf(tmp, <FONT COLOR="#FF0000">"isac_empty_fifo overrun %d"</FONT>,
				cs-&gt;rcvidx + count);
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
		}
		cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_CMDR">ISAC_CMDR</A>, 0x80);
		cs-&gt;rcvidx = 0;
		<FONT COLOR="#298C52">return</FONT>;
	}
	ptr = cs-&gt;rcvbuf + cs-&gt;rcvidx;
	cs-&gt;rcvidx += count;
	save_flags(flags);
	cli();
	cs-&gt;readisacfifo(cs, ptr, count);
	cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_CMDR">ISAC_CMDR</A>, 0x80);
	restore_flags(flags);
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_ISAC_FIFO">L1_DEB_ISAC_FIFO</A>) {
		<FONT COLOR="#298C52">char</FONT> tmp[128];
		<FONT COLOR="#298C52">char</FONT> *t = tmp;

		t += sprintf(t, <FONT COLOR="#FF0000">"isac_empty_fifo cnt %d"</FONT>, count);
		<A HREF="q931.c.shtml#QuickHex">QuickHex</A>(t, ptr, count);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="isac_fill_fifo">isac_fill_fifo</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">int</FONT> count, more;
	u_char *ptr;
	<FONT COLOR="#298C52">long</FONT> flags;

	<FONT COLOR="#298C52">if</FONT> ((cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_ISAC">L1_DEB_ISAC</A>) &amp;&amp; !(cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_ISAC_FIFO">L1_DEB_ISAC_FIFO</A>))
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"isac_fill_fifo"</FONT>);

	<FONT COLOR="#298C52">if</FONT> (!cs-&gt;tx_skb)
		<FONT COLOR="#298C52">return</FONT>;

	count = cs-&gt;tx_skb-&gt;len;
	<FONT COLOR="#298C52">if</FONT> (count &lt;= 0)
		<FONT COLOR="#298C52">return</FONT>;

	more = 0;
	<FONT COLOR="#298C52">if</FONT> (count &gt; 32) {
		more = !0;
		count = 32;
	}
	save_flags(flags);
	cli();
	ptr = cs-&gt;tx_skb-&gt;data;
	skb_pull(cs-&gt;tx_skb, count);
	cs-&gt;tx_cnt += count;
	cs-&gt;writeisacfifo(cs, ptr, count);
	cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_CMDR">ISAC_CMDR</A>, more ? 0x8 : 0xa);
	restore_flags(flags);
	<FONT COLOR="#298C52">if</FONT> (test_and_set_bit(<A HREF="hisax.h.shtml#FLG_DBUSY_TIMER">FLG_DBUSY_TIMER</A>, &amp;cs-&gt;HW_Flags)) {
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"isac_fill_fifo dbusytimer running"</FONT>);
		del_timer(&amp;cs-&gt;dbusytimer);
	}
	init_timer(&amp;cs-&gt;dbusytimer);
	cs-&gt;dbusytimer.expires = jiffies + ((<A HREF="#DBUSY_TIMER_VALUE">DBUSY_TIMER_VALUE</A> * HZ)/1000);
	add_timer(&amp;cs-&gt;dbusytimer);
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_ISAC_FIFO">L1_DEB_ISAC_FIFO</A>) {
		<FONT COLOR="#298C52">char</FONT> tmp[128];
		<FONT COLOR="#298C52">char</FONT> *t = tmp;

		t += sprintf(t, <FONT COLOR="#FF0000">"isac_fill_fifo cnt %d"</FONT>, count);
		<A HREF="q931.c.shtml#QuickHex">QuickHex</A>(t, ptr, count);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	}
}

<FONT COLOR="#298C52">void</FONT>
<A HREF="#isac_sched_event">isac_sched_event</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> event)
{
	test_and_set_bit(event, &amp;cs-&gt;event);
	queue_task(&amp;cs-&gt;tqueue, &amp;tq_immediate);
	mark_bh(IMMEDIATE_BH);
}

<FONT COLOR="#298C52">void</FONT>
<A HREF="#isac_interrupt">isac_interrupt</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char val)
{
	u_char exval, v1;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> count;
	<FONT COLOR="#298C52">long</FONT> flags;
	<FONT COLOR="#298C52">char</FONT> tmp[32];

	<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_ISAC">L1_DEB_ISAC</A>) {
		sprintf(tmp, <FONT COLOR="#FF0000">"ISAC interrupt %x"</FONT>, val);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	}
	<FONT COLOR="#298C52">if</FONT> (val &amp; 0x80) {	<FONT COLOR=#0000FF>/* RME */</FONT>
		exval = cs-&gt;readisac(cs, <A HREF="isac.h.shtml#ISAC_RSTA">ISAC_RSTA</A>);
		<FONT COLOR="#298C52">if</FONT> ((exval &amp; 0x70) != 0x20) {
			<FONT COLOR="#298C52">if</FONT> (exval &amp; 0x40)
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_WARN">L1_DEB_WARN</A>)
					<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"ISAC RDO"</FONT>);
			<FONT COLOR="#298C52">if</FONT> (!(exval &amp; 0x20))
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_WARN">L1_DEB_WARN</A>)
					<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"ISAC CRC error"</FONT>);
			cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_CMDR">ISAC_CMDR</A>, 0x80);
		} <FONT COLOR="#298C52">else</FONT> {
			count = cs-&gt;readisac(cs, <A HREF="isac.h.shtml#ISAC_RBCL">ISAC_RBCL</A>) &amp; 0x1f;
			<FONT COLOR="#298C52">if</FONT> (count == 0)
				count = 32;
			<A HREF="#isac_empty_fifo">isac_empty_fifo</A>(cs, count);
			save_flags(flags);
			cli();
			<FONT COLOR="#298C52">if</FONT> ((count = cs-&gt;rcvidx) &gt; 0) {
				cs-&gt;rcvidx = 0;
				<FONT COLOR="#298C52">if</FONT> (!(skb = alloc_skb(count, GFP_ATOMIC)))
					printk(KERN_WARNING <FONT COLOR="#FF0000">"HiSax: D receive out of memory\n"</FONT>);
				<FONT COLOR="#298C52">else</FONT> {
					memcpy(skb_put(skb, count), cs-&gt;rcvbuf, count);
					skb_queue_tail(&amp;cs-&gt;rq, skb);
				}
			}
			restore_flags(flags);
		}
		cs-&gt;rcvidx = 0;
		<A HREF="#isac_sched_event">isac_sched_event</A>(cs, <A HREF="isdnl1.h.shtml#D_RCVBUFREADY">D_RCVBUFREADY</A>);
	}
	<FONT COLOR="#298C52">if</FONT> (val &amp; 0x40) {	<FONT COLOR=#0000FF>/* RPF */</FONT>
		<A HREF="#isac_empty_fifo">isac_empty_fifo</A>(cs, 32);
	}
	<FONT COLOR="#298C52">if</FONT> (val &amp; 0x20) {	<FONT COLOR=#0000FF>/* RSC */</FONT>
		<FONT COLOR=#0000FF>/* never */</FONT>
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_WARN">L1_DEB_WARN</A>)
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"ISAC RSC interrupt"</FONT>);
	}
	<FONT COLOR="#298C52">if</FONT> (val &amp; 0x10) {	<FONT COLOR=#0000FF>/* XPR */</FONT>
		<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_DBUSY_TIMER">FLG_DBUSY_TIMER</A>, &amp;cs-&gt;HW_Flags))
			del_timer(&amp;cs-&gt;dbusytimer);
		<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_L1_DBUSY">FLG_L1_DBUSY</A>, &amp;cs-&gt;HW_Flags))
			<A HREF="#isac_sched_event">isac_sched_event</A>(cs, <A HREF="isdnl1.h.shtml#D_CLEARBUSY">D_CLEARBUSY</A>);
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;tx_skb) {
			<FONT COLOR="#298C52">if</FONT> (cs-&gt;tx_skb-&gt;len) {
				<A HREF="#isac_fill_fifo">isac_fill_fifo</A>(cs);
				<FONT COLOR="#298C52">goto</FONT> afterXPR;
			} <FONT COLOR="#298C52">else</FONT> {
				dev_kfree_skb(cs-&gt;tx_skb);
				cs-&gt;tx_cnt = 0;
				cs-&gt;tx_skb = NULL;
			}
		}
		<FONT COLOR="#298C52">if</FONT> ((cs-&gt;tx_skb = skb_dequeue(&amp;cs-&gt;sq))) {
			cs-&gt;tx_cnt = 0;
			<A HREF="#isac_fill_fifo">isac_fill_fifo</A>(cs);
		} <FONT COLOR="#298C52">else</FONT>
			<A HREF="#isac_sched_event">isac_sched_event</A>(cs, <A HREF="isdnl1.h.shtml#D_XMTBUFREADY">D_XMTBUFREADY</A>);
	}
      afterXPR:
	<FONT COLOR="#298C52">if</FONT> (val &amp; 0x04) {	<FONT COLOR=#0000FF>/* CISQ */</FONT>
		exval = cs-&gt;readisac(cs, <A HREF="isac.h.shtml#ISAC_CIR0">ISAC_CIR0</A>);
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_ISAC">L1_DEB_ISAC</A>) {
			sprintf(tmp, <FONT COLOR="#FF0000">"ISAC CIR0 %02X"</FONT>, exval );
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
		}
		<FONT COLOR="#298C52">if</FONT> (exval &amp; 2) {
			cs-&gt;ph_state = (exval &gt;&gt; 2) &amp; 0xf;
			<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_ISAC">L1_DEB_ISAC</A>) {
				sprintf(tmp, <FONT COLOR="#FF0000">"ph_state change %x"</FONT>, cs-&gt;ph_state);
				<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
			}
			<A HREF="#isac_sched_event">isac_sched_event</A>(cs, <A HREF="isdnl1.h.shtml#D_L1STATECHANGE">D_L1STATECHANGE</A>);
		}
		<FONT COLOR="#298C52">if</FONT> (exval &amp; 1) {
			exval = cs-&gt;readisac(cs, <A HREF="isac.h.shtml#ISAC_CIR1">ISAC_CIR1</A>);
			<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_ISAC">L1_DEB_ISAC</A>) {
				sprintf(tmp, <FONT COLOR="#FF0000">"ISAC CIR1 %02X"</FONT>, exval );
				<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
			}
		}
	}
	<FONT COLOR="#298C52">if</FONT> (val &amp; 0x02) {	<FONT COLOR=#0000FF>/* SIN */</FONT>
		<FONT COLOR=#0000FF>/* never */</FONT>
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_WARN">L1_DEB_WARN</A>)
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"ISAC SIN interrupt"</FONT>);
	}
	<FONT COLOR="#298C52">if</FONT> (val &amp; 0x01) {	<FONT COLOR=#0000FF>/* EXI */</FONT>
		exval = cs-&gt;readisac(cs, <A HREF="isac.h.shtml#ISAC_EXIR">ISAC_EXIR</A>);
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_WARN">L1_DEB_WARN</A>) {
			sprintf(tmp, <FONT COLOR="#FF0000">"ISAC EXIR %02x"</FONT>, exval);
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
		}
		<FONT COLOR="#298C52">if</FONT> (exval &amp; 0x04) {
			v1 = cs-&gt;readisac(cs, <A HREF="isac.h.shtml#ISAC_MOSR">ISAC_MOSR</A>);
			<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_MONITOR">L1_DEB_MONITOR</A>) {
				sprintf(tmp, <FONT COLOR="#FF0000">"ISAC MOSR %02x"</FONT>, v1);
				<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
			}
<FONT COLOR=#A521F7>#if</FONT> <A HREF="#ARCOFI_USE">ARCOFI_USE</A>
			<FONT COLOR="#298C52">if</FONT> (v1 &amp; 0x08) {
				<FONT COLOR="#298C52">if</FONT> (!cs-&gt;mon_rx) {
					<FONT COLOR="#298C52">if</FONT> (!(cs-&gt;mon_rx = kmalloc(<A HREF="hisax.h.shtml#MAX_MON_FRAME">MAX_MON_FRAME</A>, GFP_ATOMIC))) {
						<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_WARN">L1_DEB_WARN</A>)
							<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"ISAC MON RX out of memory!"</FONT>);
						cs-&gt;mocr &amp;= 0xf0;
						cs-&gt;mocr |= 0x0a;
						cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_MOCR">ISAC_MOCR</A>, cs-&gt;mocr);
						<FONT COLOR="#298C52">goto</FONT> afterMONR0;
					} <FONT COLOR="#298C52">else</FONT>
						cs-&gt;mon_rxp = 0;
				}
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;mon_rxp &gt;= <A HREF="hisax.h.shtml#MAX_MON_FRAME">MAX_MON_FRAME</A>) {
					cs-&gt;mocr &amp;= 0xf0;
					cs-&gt;mocr |= 0x0a;
					cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_MOCR">ISAC_MOCR</A>, cs-&gt;mocr);
					cs-&gt;mon_rxp = 0;
					<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_WARN">L1_DEB_WARN</A>)
						<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"ISAC MON RX overflow!"</FONT>);
					<FONT COLOR="#298C52">goto</FONT> afterMONR0;
				}
				cs-&gt;mon_rx[cs-&gt;mon_rxp++] = cs-&gt;readisac(cs, <A HREF="isac.h.shtml#ISAC_MOR0">ISAC_MOR0</A>);
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_MONITOR">L1_DEB_MONITOR</A>) {
					sprintf(tmp, <FONT COLOR="#FF0000">"ISAC MOR0 %02x"</FONT>, cs-&gt;mon_rx[cs-&gt;mon_rxp -1]);
					<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
				}
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;mon_rxp == 1) {
					cs-&gt;mocr |= 0x04;
					cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_MOCR">ISAC_MOCR</A>, cs-&gt;mocr);
				}
			}
		      afterMONR0:
			<FONT COLOR="#298C52">if</FONT> (v1 &amp; 0x80) {
				<FONT COLOR="#298C52">if</FONT> (!cs-&gt;mon_rx) {
					<FONT COLOR="#298C52">if</FONT> (!(cs-&gt;mon_rx = kmalloc(<A HREF="hisax.h.shtml#MAX_MON_FRAME">MAX_MON_FRAME</A>, GFP_ATOMIC))) {
						<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_WARN">L1_DEB_WARN</A>)
							<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"ISAC MON RX out of memory!"</FONT>);
						cs-&gt;mocr &amp;= 0x0f;
						cs-&gt;mocr |= 0xa0;
						cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_MOCR">ISAC_MOCR</A>, cs-&gt;mocr);
						<FONT COLOR="#298C52">goto</FONT> afterMONR1;
					} <FONT COLOR="#298C52">else</FONT>
						cs-&gt;mon_rxp = 0;
				}
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;mon_rxp &gt;= <A HREF="hisax.h.shtml#MAX_MON_FRAME">MAX_MON_FRAME</A>) {
					cs-&gt;mocr &amp;= 0x0f;
					cs-&gt;mocr |= 0xa0;
					cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_MOCR">ISAC_MOCR</A>, cs-&gt;mocr);
					cs-&gt;mon_rxp = 0;
					<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_WARN">L1_DEB_WARN</A>)
						<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"ISAC MON RX overflow!"</FONT>);
					<FONT COLOR="#298C52">goto</FONT> afterMONR1;
				}
				cs-&gt;mon_rx[cs-&gt;mon_rxp++] = cs-&gt;readisac(cs, <A HREF="isac.h.shtml#ISAC_MOR1">ISAC_MOR1</A>);
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_MONITOR">L1_DEB_MONITOR</A>) {
					sprintf(tmp, <FONT COLOR="#FF0000">"ISAC MOR1 %02x"</FONT>, cs-&gt;mon_rx[cs-&gt;mon_rxp -1]);
					<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
				}
				cs-&gt;mocr |= 0x40;
				cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_MOCR">ISAC_MOCR</A>, cs-&gt;mocr);
			}
		      afterMONR1:
			<FONT COLOR="#298C52">if</FONT> (v1 &amp; 0x04) {
				cs-&gt;mocr &amp;= 0xf0;
				cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_MOCR">ISAC_MOCR</A>, cs-&gt;mocr);
				cs-&gt;mocr |= 0x0a;
				cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_MOCR">ISAC_MOCR</A>, cs-&gt;mocr);
				test_and_set_bit(<A HREF="hisax.h.shtml#HW_MON0_RX_END">HW_MON0_RX_END</A>, &amp;cs-&gt;HW_Flags);
			}
			<FONT COLOR="#298C52">if</FONT> (v1 &amp; 0x40) {
				cs-&gt;mocr &amp;= 0x0f;
				cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_MOCR">ISAC_MOCR</A>, cs-&gt;mocr);
				cs-&gt;mocr |= 0xa0;
				cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_MOCR">ISAC_MOCR</A>, cs-&gt;mocr);
				test_and_set_bit(<A HREF="hisax.h.shtml#HW_MON1_RX_END">HW_MON1_RX_END</A>, &amp;cs-&gt;HW_Flags);
			}
			<FONT COLOR="#298C52">if</FONT> (v1 &amp; 0x02) {
				<FONT COLOR="#298C52">if</FONT> ((!cs-&gt;mon_tx) || (cs-&gt;mon_txc &amp;&amp; 
					(cs-&gt;mon_txp &gt;= cs-&gt;mon_txc) &amp;&amp; 
					!(v1 &amp; 0x08))) {
					cs-&gt;mocr &amp;= 0xf0;
					cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_MOCR">ISAC_MOCR</A>, cs-&gt;mocr);
					cs-&gt;mocr |= 0x0a;
					cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_MOCR">ISAC_MOCR</A>, cs-&gt;mocr);
					<FONT COLOR="#298C52">if</FONT> (cs-&gt;mon_txc &amp;&amp;
						(cs-&gt;mon_txp &gt;= cs-&gt;mon_txc))
						test_and_set_bit(<A HREF="hisax.h.shtml#HW_MON0_TX_END">HW_MON0_TX_END</A>, &amp;cs-&gt;HW_Flags);
					<FONT COLOR="#298C52">goto</FONT> AfterMOX0;
				}
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;mon_txc &amp;&amp; (cs-&gt;mon_txp &gt;= cs-&gt;mon_txc)) {
					test_and_set_bit(<A HREF="hisax.h.shtml#HW_MON0_TX_END">HW_MON0_TX_END</A>, &amp;cs-&gt;HW_Flags);
					<FONT COLOR="#298C52">goto</FONT> AfterMOX0;
				}
				cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_MOX0">ISAC_MOX0</A>,
					cs-&gt;mon_tx[cs-&gt;mon_txp++]);
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_MONITOR">L1_DEB_MONITOR</A>) {
					sprintf(tmp, <FONT COLOR="#FF0000">"ISAC %02x -&gt; MOX0"</FONT>, cs-&gt;mon_tx[cs-&gt;mon_txp -1]);
					<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
				}
			}
		      AfterMOX0:
			<FONT COLOR="#298C52">if</FONT> (v1 &amp; 0x20) {
				<FONT COLOR="#298C52">if</FONT> ((!cs-&gt;mon_tx) || (cs-&gt;mon_txc &amp;&amp; 
					(cs-&gt;mon_txp &gt;= cs-&gt;mon_txc) &amp;&amp; 
					!(v1 &amp; 0x80))) {
					cs-&gt;mocr &amp;= 0x0f;
					cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_MOCR">ISAC_MOCR</A>, cs-&gt;mocr);
					cs-&gt;mocr |= 0xa0;
					cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_MOCR">ISAC_MOCR</A>, cs-&gt;mocr);
					<FONT COLOR="#298C52">if</FONT> (cs-&gt;mon_txc &amp;&amp;
						(cs-&gt;mon_txp &gt;= cs-&gt;mon_txc))
						test_and_set_bit(<A HREF="hisax.h.shtml#HW_MON1_TX_END">HW_MON1_TX_END</A>, &amp;cs-&gt;HW_Flags);
					<FONT COLOR="#298C52">goto</FONT> AfterMOX1;
				}
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;mon_txc &amp;&amp; (cs-&gt;mon_txp &gt;= cs-&gt;mon_txc)) {
					test_and_set_bit(<A HREF="hisax.h.shtml#HW_MON1_TX_END">HW_MON1_TX_END</A>, &amp;cs-&gt;HW_Flags);
					<FONT COLOR="#298C52">goto</FONT> AfterMOX1;
				}
				cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_MOX1">ISAC_MOX1</A>,
					cs-&gt;mon_tx[cs-&gt;mon_txp++]);
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_MONITOR">L1_DEB_MONITOR</A>) {
					sprintf(tmp, <FONT COLOR="#FF0000">"ISAC %02x -&gt; MOX1"</FONT>, cs-&gt;mon_tx[cs-&gt;mon_txp -1]);
					<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
				}
			}
		      AfterMOX1:
<FONT COLOR=#A521F7>#endif</FONT>
		}
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="ISAC_l1hw">ISAC_l1hw</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = (<FONT COLOR="#298C52">struct</FONT> IsdnCardState *) st-&gt;l1.hardware;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">int</FONT>  val;
	<FONT COLOR="#298C52">char</FONT> str[64];

	<FONT COLOR="#298C52">switch</FONT> (pr) {
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_DATA">PH_DATA</A> |<A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			<FONT COLOR="#298C52">if</FONT> (cs-&gt;tx_skb) {
				skb_queue_tail(&amp;cs-&gt;sq, skb);
<FONT COLOR=#A521F7>#ifdef</FONT> <A HREF="isdnl1.h.shtml#L2FRAME_DEBUG">L2FRAME_DEBUG</A>		<FONT COLOR=#0000FF>/* psa */</FONT>
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_LAPD">L1_DEB_LAPD</A>)
					<A HREF="isdnl1.c.shtml#Logl2Frame">Logl2Frame</A>(cs, skb, <FONT COLOR="#FF0000">"PH_DATA Queued"</FONT>, 0);
<FONT COLOR=#A521F7>#endif</FONT>
			} <FONT COLOR="#298C52">else</FONT> {
				<FONT COLOR="#298C52">if</FONT> ((cs-&gt;dlogflag) &amp;&amp; (!(skb-&gt;data[2] &amp; 1))) {	<FONT COLOR=#0000FF>/* I-FRAME */</FONT>
					<A HREF="q931.c.shtml#LogFrame">LogFrame</A>(cs, skb-&gt;data, skb-&gt;len);
					sprintf(str, <FONT COLOR="#FF0000">"Q.931 frame user-&gt;network tei %d"</FONT>, st-&gt;l2.tei);
					<A HREF="q931.c.shtml#dlogframe">dlogframe</A>(cs, skb-&gt;data + 4, skb-&gt;len - 4,
						  str);
				}
				cs-&gt;tx_skb = skb;
				cs-&gt;tx_cnt = 0;
<FONT COLOR=#A521F7>#ifdef</FONT> <A HREF="isdnl1.h.shtml#L2FRAME_DEBUG">L2FRAME_DEBUG</A>		<FONT COLOR=#0000FF>/* psa */</FONT>
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_LAPD">L1_DEB_LAPD</A>)
					<A HREF="isdnl1.c.shtml#Logl2Frame">Logl2Frame</A>(cs, skb, <FONT COLOR="#FF0000">"PH_DATA"</FONT>, 0);
<FONT COLOR=#A521F7>#endif</FONT>
				<A HREF="#isac_fill_fifo">isac_fill_fifo</A>(cs);
			}
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_PULL">PH_PULL</A> |<A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
			<FONT COLOR="#298C52">if</FONT> (cs-&gt;tx_skb) {
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_WARN">L1_DEB_WARN</A>)
					<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">" l2l1 tx_skb exist this shouldn't happen"</FONT>);
				skb_queue_tail(&amp;cs-&gt;sq, skb);
				<FONT COLOR="#298C52">break</FONT>;
			}
			<FONT COLOR="#298C52">if</FONT> ((cs-&gt;dlogflag) &amp;&amp; (!(skb-&gt;data[2] &amp; 1))) {	<FONT COLOR=#0000FF>/* I-FRAME */</FONT>
				<A HREF="q931.c.shtml#LogFrame">LogFrame</A>(cs, skb-&gt;data, skb-&gt;len);
				sprintf(str, <FONT COLOR="#FF0000">"Q.931 frame user-&gt;network tei %d"</FONT>, st-&gt;l2.tei);
				<A HREF="q931.c.shtml#dlogframe">dlogframe</A>(cs, skb-&gt;data + 4, skb-&gt;len - 4,
					  str);
			}
			cs-&gt;tx_skb = skb;
			cs-&gt;tx_cnt = 0;
<FONT COLOR=#A521F7>#ifdef</FONT> <A HREF="isdnl1.h.shtml#L2FRAME_DEBUG">L2FRAME_DEBUG</A>		<FONT COLOR=#0000FF>/* psa */</FONT>
			<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_LAPD">L1_DEB_LAPD</A>)
				<A HREF="isdnl1.c.shtml#Logl2Frame">Logl2Frame</A>(cs, skb, <FONT COLOR="#FF0000">"PH_DATA_PULLED"</FONT>, 0);
<FONT COLOR=#A521F7>#endif</FONT>
			<A HREF="#isac_fill_fifo">isac_fill_fifo</A>(cs);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_PULL">PH_PULL</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
<FONT COLOR=#A521F7>#ifdef</FONT> <A HREF="isdnl1.h.shtml#L2FRAME_DEBUG">L2FRAME_DEBUG</A>		<FONT COLOR=#0000FF>/* psa */</FONT>
			<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_LAPD">L1_DEB_LAPD</A>)
				<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"-&gt; PH_REQUEST_PULL"</FONT>);
<FONT COLOR=#A521F7>#endif</FONT>
			<FONT COLOR="#298C52">if</FONT> (!cs-&gt;tx_skb) {
				test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_L1_PULL_REQ">FLG_L1_PULL_REQ</A>, &amp;st-&gt;l1.Flags);
				st-&gt;l1.l1l2(st, <A HREF="hisax.h.shtml#PH_PULL">PH_PULL</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, NULL);
			} <FONT COLOR="#298C52">else</FONT>
				test_and_set_bit(<A HREF="hisax.h.shtml#FLG_L1_PULL_REQ">FLG_L1_PULL_REQ</A>, &amp;st-&gt;l1.Flags);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#HW_RESET">HW_RESET</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			<FONT COLOR="#298C52">if</FONT> ((cs-&gt;ph_state == <A HREF="isac.h.shtml#ISAC_IND_EI">ISAC_IND_EI</A>) ||
				(cs-&gt;ph_state == <A HREF="isac.h.shtml#ISAC_IND_DR">ISAC_IND_DR</A>) ||
				(cs-&gt;ph_state == <A HREF="isac.h.shtml#ISAC_IND_RS">ISAC_IND_RS</A>))
			        <A HREF="#ph_command">ph_command</A>(cs, <A HREF="isac.h.shtml#ISAC_CMD_TIM">ISAC_CMD_TIM</A>);
			<FONT COLOR="#298C52">else</FONT>
				<A HREF="#ph_command">ph_command</A>(cs, <A HREF="isac.h.shtml#ISAC_CMD_RS">ISAC_CMD_RS</A>);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#HW_ENABLE">HW_ENABLE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			<A HREF="#ph_command">ph_command</A>(cs, <A HREF="isac.h.shtml#ISAC_CMD_TIM">ISAC_CMD_TIM</A>);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#HW_INFO3">HW_INFO3</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			<A HREF="#ph_command">ph_command</A>(cs, <A HREF="isac.h.shtml#ISAC_CMD_AR8">ISAC_CMD_AR8</A>);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#HW_TESTLOOP">HW_TESTLOOP</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			val = 0;
			<FONT COLOR="#298C52">if</FONT> (1 &amp; (<FONT COLOR="#298C52">long</FONT>) arg)
				val |= 0x0c;
			<FONT COLOR="#298C52">if</FONT> (2 &amp; (<FONT COLOR="#298C52">long</FONT>) arg)
				val |= 0x3;
			<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#HW_IOM1">HW_IOM1</A>, &amp;cs-&gt;HW_Flags)) {
				<FONT COLOR=#0000FF>/* IOM 1 Mode */</FONT>
				<FONT COLOR="#298C52">if</FONT> (!val) {
					cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_SPCR">ISAC_SPCR</A>, 0xa);
					cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_ADF1">ISAC_ADF1</A>, 0x2);
				} <FONT COLOR="#298C52">else</FONT> {
					cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_SPCR">ISAC_SPCR</A>, val);
					cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_ADF1">ISAC_ADF1</A>, 0xa);
				}
			} <FONT COLOR="#298C52">else</FONT> {
				<FONT COLOR=#0000FF>/* IOM 2 Mode */</FONT>
				cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_SPCR">ISAC_SPCR</A>, val);
				<FONT COLOR="#298C52">if</FONT> (val)
					cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_ADF1">ISAC_ADF1</A>, 0x8);
				<FONT COLOR="#298C52">else</FONT>
					cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_ADF1">ISAC_ADF1</A>, 0x0);
			}
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#HW_DEACTIVATE">HW_DEACTIVATE</A> | <A HREF="hisax.h.shtml#RESPONSE">RESPONSE</A>):
			<A HREF="callc.c.shtml#discard_queue">discard_queue</A>(&amp;cs-&gt;rq);
			<A HREF="callc.c.shtml#discard_queue">discard_queue</A>(&amp;cs-&gt;sq);
			<FONT COLOR="#298C52">if</FONT> (cs-&gt;tx_skb) {
				dev_kfree_skb(cs-&gt;tx_skb);
				cs-&gt;tx_skb = NULL;
			}
			<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_DBUSY_TIMER">FLG_DBUSY_TIMER</A>, &amp;cs-&gt;HW_Flags))
				del_timer(&amp;cs-&gt;dbusytimer);
			<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_L1_DBUSY">FLG_L1_DBUSY</A>, &amp;cs-&gt;HW_Flags))
				<A HREF="#isac_sched_event">isac_sched_event</A>(cs, <A HREF="isdnl1.h.shtml#D_CLEARBUSY">D_CLEARBUSY</A>);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">default</FONT>:
			<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_WARN">L1_DEB_WARN</A>) {
				sprintf(str, <FONT COLOR="#FF0000">"isac_l1hw unknown %04x"</FONT>, pr);
				<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, str);
			}
			<FONT COLOR="#298C52">break</FONT>;
	}
}

<FONT COLOR="#298C52">void</FONT>
<A HREF="#setstack_isac">setstack_isac</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	st-&gt;l1.l1hw = <A HREF="#ISAC_l1hw">ISAC_l1hw</A>;
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="dbusy_timer_handler">dbusy_timer_handler</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *stptr;
	<FONT COLOR="#298C52">int</FONT>	val;

	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_DBUSY_TIMER">FLG_DBUSY_TIMER</A>, &amp;cs-&gt;HW_Flags)) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug) {
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"D-Channel Busy"</FONT>);
			val = cs-&gt;readisac(cs, <A HREF="isac.h.shtml#ISAC_RBCH">ISAC_RBCH</A>);
			<FONT COLOR="#298C52">if</FONT> (val &amp; <A HREF="isac.h.shtml#ISAC_RBCH_XAC">ISAC_RBCH_XAC</A>)
				<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"ISAC XAC"</FONT>);
			<FONT COLOR="#298C52">else</FONT>
				<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"ISAC No XAC"</FONT>);
		}
		test_and_set_bit(<A HREF="hisax.h.shtml#FLG_L1_DBUSY">FLG_L1_DBUSY</A>, &amp;cs-&gt;HW_Flags);
		stptr = cs-&gt;stlist;
		
		<FONT COLOR="#298C52">while</FONT> (stptr != NULL) {
			stptr-&gt;l1.l1l2(stptr, <A HREF="hisax.h.shtml#PH_PAUSE">PH_PAUSE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);
			stptr = stptr-&gt;next;
		}
	}
}

<A HREF="callc.c.shtml#HISAX_INITFUNC">HISAX_INITFUNC</A>(<FONT COLOR="#298C52">void</FONT>
initisac(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs))
{
	cs-&gt;tqueue.routine = (<FONT COLOR="#298C52">void</FONT> *) (<FONT COLOR="#298C52">void</FONT> *) <A HREF="#isac_bh">isac_bh</A>;
	cs-&gt;setstack_d = <A HREF="#setstack_isac">setstack_isac</A>;
	cs-&gt;dbusytimer.function = (<FONT COLOR="#298C52">void</FONT> *) <A HREF="#dbusy_timer_handler">dbusy_timer_handler</A>;
	cs-&gt;dbusytimer.data = (<FONT COLOR="#298C52">long</FONT>) cs;
	init_timer(&amp;cs-&gt;dbusytimer);
  	cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_MASK">ISAC_MASK</A>, 0xff);
  	cs-&gt;mocr = 0xaa;
	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#HW_IOM1">HW_IOM1</A>, &amp;cs-&gt;HW_Flags)) {
		<FONT COLOR=#0000FF>/* IOM 1 Mode */</FONT>
		cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_ADF2">ISAC_ADF2</A>, 0x0);
		cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_SPCR">ISAC_SPCR</A>, 0xa);
		cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_ADF1">ISAC_ADF1</A>, 0x2);
		cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_STCR">ISAC_STCR</A>, 0x70);
		cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_MODE">ISAC_MODE</A>, 0xc9);
	} <FONT COLOR="#298C52">else</FONT> {
		<FONT COLOR=#0000FF>/* IOM 2 Mode */</FONT>
		cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_ADF2">ISAC_ADF2</A>, 0x80);
		cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_SQXR">ISAC_SQXR</A>, 0x2f);
		cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_SPCR">ISAC_SPCR</A>, 0x00);
		cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_STCR">ISAC_STCR</A>, 0x70);
		cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_MODE">ISAC_MODE</A>, 0xc9);
		cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_TIMR">ISAC_TIMR</A>, 0x00);
		cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_ADF1">ISAC_ADF1</A>, 0x00);
	}
	<A HREF="#ph_command">ph_command</A>(cs, <A HREF="isac.h.shtml#ISAC_CMD_RS">ISAC_CMD_RS</A>);
	cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_MASK">ISAC_MASK</A>, 0x0);
}

<A HREF="callc.c.shtml#HISAX_INITFUNC">HISAX_INITFUNC</A>(<FONT COLOR="#298C52">void</FONT>
clear_pending_isac_ints(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs))
{
	<FONT COLOR="#298C52">int</FONT> val, eval;
	<FONT COLOR="#298C52">char</FONT> tmp[64];

	val = cs-&gt;readisac(cs, <A HREF="isac.h.shtml#ISAC_STAR">ISAC_STAR</A>);
	sprintf(tmp, <FONT COLOR="#FF0000">"ISAC STAR %x"</FONT>, val);
	<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	val = cs-&gt;readisac(cs, <A HREF="isac.h.shtml#ISAC_MODE">ISAC_MODE</A>);
	sprintf(tmp, <FONT COLOR="#FF0000">"ISAC MODE %x"</FONT>, val);
	<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	val = cs-&gt;readisac(cs, <A HREF="isac.h.shtml#ISAC_ADF2">ISAC_ADF2</A>);
	sprintf(tmp, <FONT COLOR="#FF0000">"ISAC ADF2 %x"</FONT>, val);
	<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	val = cs-&gt;readisac(cs, <A HREF="isac.h.shtml#ISAC_ISTA">ISAC_ISTA</A>);
	sprintf(tmp, <FONT COLOR="#FF0000">"ISAC ISTA %x"</FONT>, val);
	<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	<FONT COLOR="#298C52">if</FONT> (val &amp; 0x01) {
		eval = cs-&gt;readisac(cs, <A HREF="isac.h.shtml#ISAC_EXIR">ISAC_EXIR</A>);
		sprintf(tmp, <FONT COLOR="#FF0000">"ISAC EXIR %x"</FONT>, eval);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	}
		val = cs-&gt;readisac(cs, <A HREF="isac.h.shtml#ISAC_CIR0">ISAC_CIR0</A>);
		sprintf(tmp, <FONT COLOR="#FF0000">"ISAC CIR0 %x"</FONT>, val);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
		cs-&gt;ph_state = (val &gt;&gt; 2) &amp; 0xf;
	<A HREF="#isac_sched_event">isac_sched_event</A>(cs, <A HREF="isdnl1.h.shtml#D_L1STATECHANGE">D_L1STATECHANGE</A>);
	<FONT COLOR=#0000FF>/* Disable all IRQ */</FONT>
	cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_MASK">ISAC_MASK</A>, 0xFF);
}
</BODY>

</HTML>
