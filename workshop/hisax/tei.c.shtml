<HTML>

<!-- Generated by c2html-1.0, Copyright 1998 by Dave Whittington -->
<HEAD>
<TITLE>tei.c</TITLE>
<!--#include virtual="/ssi/js.shtml" -->
<!--#include virtual="/ssi/buttondefs.shtml" -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<TABLE WIDTH="100%">
<TR>
<TD ALIGN=LEFT WIDTH="90"><!--#include virtual="/ssi/b_home.shtml" --></TD>
<TD ALIGN=RIGHT WIDTH="90"><!--#include virtual="/ssi/b_index.shtml" --></TD>
</TR>
</TABLE>
<CENTER><H1>tei.c</H1></CENTER>

<HR>
<PRE>
<FONT COLOR=#0000FF>/* $Id$

 * Author       Karsten Keil (keil@temic-ech.spacenet.de)
 *              based on the teles driver from Jan den Ouden
 *
 * Thanks to    Jan den Ouden
 *              Fritz Elfert
 *
 * $Log$
 * Revision 2.10  1998/05/25 14:08:10  keil
 * HiSax 3.0
 * fixed X.75 and leased line to work again
 * Point2Point and fixed TEI are runtime options now:
 *    hisaxctrl &lt;id&gt; 7 1  set PTP
 *    hisaxctrl &lt;id&gt; 8 &lt;TEIVALUE *2 &gt;
 *    set fixed TEI to TEIVALUE (0-63)
 *
 * Revision 2.9  1998/05/25 12:58:23  keil
 * HiSax golden code from certification, Don't use !!!
 * No leased lines, no X75, but many changes.
 *
 * Revision 2.8  1998/03/07 22:57:07  tsbogend
 * made HiSax working on Linux/Alpha
 *
 * Revision 2.7  1998/02/12 23:08:11  keil
 * change for 2.1.86 (removing FREE_READ/FREE_WRITE from [dev]_kfree_skb()
 *
 * Revision 2.6  1998/02/02 13:41:42  keil
 * fix MDL_ASSIGN for PtP
 *
 * Revision 2.5  1997/11/06 17:09:12  keil
 * New 2.1 init code
 *
 * Revision 2.4  1997/10/29 19:04:46  keil
 * changes for 2.1
 *
 * Revision 2.3  1997/10/01 09:21:43  fritz
 * Removed old compatibility stuff for 2.0.X kernels.
 * From now on, this code is for 2.1.X ONLY!
 * Old stuff is still in the separate branch.
 *
 * Revision 2.2  1997/07/31 19:24:39  keil
 * fixed a warning
 *
 * Revision 2.1  1997/07/31 11:50:16  keil
 * ONE TEI and FIXED TEI handling
 *
 * Revision 2.0  1997/07/27 21:13:30  keil
 * New TEI managment
 *
 * Revision 1.9  1997/06/26 11:18:02  keil
 * New managment
 *
 * Revision 1.8  1997/04/07 22:59:08  keil
 * GFP_KERNEL --&gt; GFP_ATOMIC
 *
 * Revision 1.7  1997/04/06 22:54:03  keil
 * Using SKB's
 *
 * Old log removed/ KKe
 *
 */</FONT>
<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#__NO_VERSION__">__NO_VERSION__</A>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hisax.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isdnl2.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/random.h&gt;

<FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *tei_revision = <FONT COLOR="#FF0000">"$Revision$"</FONT>;

<FONT COLOR=#A521F7>#define</FONT> <A NAME="ID_REQUEST">ID_REQUEST</A>	1
<FONT COLOR=#A521F7>#define</FONT> <A NAME="ID_ASSIGNED">ID_ASSIGNED</A>	2
<FONT COLOR=#A521F7>#define</FONT> <A NAME="ID_DENIED">ID_DENIED</A>	3
<FONT COLOR=#A521F7>#define</FONT> <A NAME="ID_CHK_REQ">ID_CHK_REQ</A>	4
<FONT COLOR=#A521F7>#define</FONT> <A NAME="ID_CHK_RES">ID_CHK_RES</A>	5
<FONT COLOR=#A521F7>#define</FONT> <A NAME="ID_REMOVE">ID_REMOVE</A>	6
<FONT COLOR=#A521F7>#define</FONT> <A NAME="ID_VERIFY">ID_VERIFY</A>	7

<FONT COLOR=#A521F7>#define</FONT> <A NAME="TEI_ENTITY_ID">TEI_ENTITY_ID</A>	0xf

<FONT COLOR="#298C52">static</FONT>
<FONT COLOR="#298C52">struct</FONT> Fsm teifsm =
{NULL, 0, 0, NULL, NULL};

<FONT COLOR="#298C52">void</FONT> tei_handler(<FONT COLOR="#298C52">struct</FONT> PStack *st, u_char pr, <FONT COLOR="#298C52">struct</FONT> sk_buff *skb);

<FONT COLOR="#298C52">enum</FONT> {
	ST_TEI_NOP,
	ST_TEI_IDREQ,
	ST_TEI_IDVERIFY,
};

<FONT COLOR=#A521F7>#define</FONT> <A NAME="TEI_STATE_COUNT">TEI_STATE_COUNT</A> (ST_TEI_IDVERIFY+1)

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">char</FONT> *strTeiState[] =
{
	<FONT COLOR="#FF0000">"ST_TEI_NOP"</FONT>,
	<FONT COLOR="#FF0000">"ST_TEI_IDREQ"</FONT>,
	<FONT COLOR="#FF0000">"ST_TEI_IDVERIFY"</FONT>,
};

<FONT COLOR="#298C52">enum</FONT> {
	EV_IDREQ,
	EV_ASSIGN,
	EV_DENIED,
	EV_CHKREQ,
	EV_REMOVE,
	EV_VERIFY,
	EV_T202,
};

<FONT COLOR=#A521F7>#define</FONT> <A NAME="TEI_EVENT_COUNT">TEI_EVENT_COUNT</A> (EV_T202+1)

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">char</FONT> *strTeiEvent[] =
{
	<FONT COLOR="#FF0000">"EV_IDREQ"</FONT>,
	<FONT COLOR="#FF0000">"EV_ASSIGN"</FONT>,
	<FONT COLOR="#FF0000">"EV_DENIED"</FONT>,
	<FONT COLOR="#FF0000">"EV_CHKREQ"</FONT>,
	<FONT COLOR="#FF0000">"EV_REMOVE"</FONT>,
	<FONT COLOR="#FF0000">"EV_VERIFY"</FONT>,
	<FONT COLOR="#FF0000">"EV_T202"</FONT>,
};

<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT>
<A NAME="random_ri">random_ri</A>(<FONT COLOR="#298C52">void</FONT>)
{
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> x;

	get_random_bytes(&amp;x, <FONT COLOR="#298C52">sizeof</FONT>(x));
	<FONT COLOR="#298C52">return</FONT> (x &amp; 0xffff);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">struct</FONT> PStack *
<A NAME="findtei">findtei</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> tei)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *ptr = *(st-&gt;l1.stlistp);

	<FONT COLOR="#298C52">if</FONT> (tei == 127)
		<FONT COLOR="#298C52">return</FONT> (NULL);

	<FONT COLOR="#298C52">while</FONT> (ptr)
		<FONT COLOR="#298C52">if</FONT> (ptr-&gt;l2.tei == tei)
			<FONT COLOR="#298C52">return</FONT> (ptr);
		<FONT COLOR="#298C52">else</FONT>
			ptr = ptr-&gt;next;
	<FONT COLOR="#298C52">return</FONT> (NULL);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#put_tei_msg">put_tei_msg</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, u_char m_id, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> ri, u_char tei)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;
	u_char *bp;

	<FONT COLOR="#298C52">if</FONT> (!(skb = alloc_skb(8, GFP_ATOMIC))) {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"HiSax: No skb for TEI manager\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT>;
	}
	bp = skb_put(skb, 3);
	bp[0] = (<A HREF="hisax.h.shtml#TEI_SAPI">TEI_SAPI</A> &lt;&lt; 2);
	bp[1] = (<A HREF="hisax.h.shtml#GROUP_TEI">GROUP_TEI</A> &lt;&lt; 1) | 0x1;
	bp[2] = <A HREF="isdnl2.h.shtml#UI">UI</A>;
	bp = skb_put(skb, 5);
	bp[0] = <A HREF="#TEI_ENTITY_ID">TEI_ENTITY_ID</A>;
	bp[1] = ri &gt;&gt; 8;
	bp[2] = ri &amp; 0xff;
	bp[3] = m_id;
	bp[4] = (tei &lt;&lt; 1) | 1;
	st-&gt;l2.l2l1(st, <A HREF="hisax.h.shtml#PH_DATA">PH_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, skb);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#tei_id_request">tei_id_request</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	<FONT COLOR="#298C52">char</FONT> tmp[64];

	<FONT COLOR="#298C52">if</FONT> (st-&gt;l2.tei != -1) {
		sprintf(tmp, <FONT COLOR="#FF0000">"assign request for allready asigned tei %d"</FONT>,
			st-&gt;l2.tei);
		st-&gt;ma.tei_m.printdebug(&amp;st-&gt;ma.tei_m, tmp);
		<FONT COLOR="#298C52">return</FONT>;
	}
	st-&gt;ma.ri = <A HREF="#random_ri">random_ri</A>();
	<FONT COLOR="#298C52">if</FONT> (st-&gt;ma.debug) {
		sprintf(tmp, <FONT COLOR="#FF0000">"assign request ri %d"</FONT>, st-&gt;ma.ri);
		st-&gt;ma.tei_m.printdebug(&amp;st-&gt;ma.tei_m, tmp);
	}
	<A HREF="#put_tei_msg">put_tei_msg</A>(st, <A HREF="#ID_REQUEST">ID_REQUEST</A>, st-&gt;ma.ri, 127);
	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(&amp;st-&gt;ma.tei_m, ST_TEI_IDREQ);
	<A HREF="fsm.c.shtml#FsmAddTimer">FsmAddTimer</A>(&amp;st-&gt;ma.t202, st-&gt;ma.T202, EV_T202, NULL, 1);
	st-&gt;ma.N202 = 3;
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#tei_id_assign">tei_id_assign</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *ost, *st = fi-&gt;userdata;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs;
	<FONT COLOR="#298C52">int</FONT> ri, tei;
	<FONT COLOR="#298C52">char</FONT> tmp[64];

	ri = ((<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT>) skb-&gt;data[1] &lt;&lt; 8) + skb-&gt;data[2];
	tei = skb-&gt;data[4] &gt;&gt; 1;
	<FONT COLOR="#298C52">if</FONT> (st-&gt;ma.debug) {
		sprintf(tmp, <FONT COLOR="#FF0000">"identity assign ri %d tei %d"</FONT>, ri, tei);
		st-&gt;ma.tei_m.printdebug(&amp;st-&gt;ma.tei_m, tmp);
	}
	<FONT COLOR="#298C52">if</FONT> ((ost = <A HREF="#findtei">findtei</A>(st, tei))) {		<FONT COLOR=#0000FF>/* same tei is in use */</FONT>
		<FONT COLOR="#298C52">if</FONT> (ri != ost-&gt;ma.ri) {
			sprintf(tmp, <FONT COLOR="#FF0000">"possible duplicate assignment tei %d"</FONT>, tei);
			st-&gt;ma.tei_m.printdebug(&amp;st-&gt;ma.tei_m, tmp);
			ost-&gt;l2.l2tei(ost, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#RESPONSE">RESPONSE</A>, NULL);
		}
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (ri == st-&gt;ma.ri) {
		<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;st-&gt;ma.t202, 1);
		<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(&amp;st-&gt;ma.tei_m, ST_TEI_NOP);
		st-&gt;l3.l3l2(st, <A HREF="hisax.h.shtml#MDL_ASSIGN">MDL_ASSIGN</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, (<FONT COLOR="#298C52">void</FONT> *) (<FONT COLOR="#298C52">long</FONT>) tei);
		cs = (<FONT COLOR="#298C52">struct</FONT> IsdnCardState *) st-&gt;l1.hardware;
		cs-&gt;cardmsg(cs, <A HREF="hisax.h.shtml#MDL_ASSIGN">MDL_ASSIGN</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#tei_id_denied">tei_id_denied</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">int</FONT> ri, tei;
	<FONT COLOR="#298C52">char</FONT> tmp[64];

	ri = ((<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT>) skb-&gt;data[1] &lt;&lt; 8) + skb-&gt;data[2];
	tei = skb-&gt;data[4] &gt;&gt; 1;
	<FONT COLOR="#298C52">if</FONT> (st-&gt;ma.debug) {
		sprintf(tmp, <FONT COLOR="#FF0000">"identity denied ri %d tei %d"</FONT>, ri, tei);
		st-&gt;ma.tei_m.printdebug(&amp;st-&gt;ma.tei_m, tmp);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#tei_id_chk_req">tei_id_chk_req</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">int</FONT> tei;
	<FONT COLOR="#298C52">char</FONT> tmp[64];

	tei = skb-&gt;data[4] &gt;&gt; 1;
	<FONT COLOR="#298C52">if</FONT> (st-&gt;ma.debug) {
		sprintf(tmp, <FONT COLOR="#FF0000">"identity check req tei %d"</FONT>, tei);
		st-&gt;ma.tei_m.printdebug(&amp;st-&gt;ma.tei_m, tmp);
	}
	<FONT COLOR="#298C52">if</FONT> ((st-&gt;l2.tei != -1) &amp;&amp; ((tei == <A HREF="hisax.h.shtml#GROUP_TEI">GROUP_TEI</A>) || (tei == st-&gt;l2.tei))) {
		<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;st-&gt;ma.t202, 4);
		<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(&amp;st-&gt;ma.tei_m, ST_TEI_NOP);
		<A HREF="#put_tei_msg">put_tei_msg</A>(st, <A HREF="#ID_CHK_RES">ID_CHK_RES</A>, <A HREF="#random_ri">random_ri</A>(), st-&gt;l2.tei);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#tei_id_remove">tei_id_remove</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs;
	<FONT COLOR="#298C52">int</FONT> tei;
	<FONT COLOR="#298C52">char</FONT> tmp[64];

	tei = skb-&gt;data[4] &gt;&gt; 1;
	<FONT COLOR="#298C52">if</FONT> (st-&gt;ma.debug) {
		sprintf(tmp, <FONT COLOR="#FF0000">"identity remove tei %d"</FONT>, tei);
		st-&gt;ma.tei_m.printdebug(&amp;st-&gt;ma.tei_m, tmp);
	}
	<FONT COLOR="#298C52">if</FONT> ((st-&gt;l2.tei != -1) &amp;&amp; ((tei == <A HREF="hisax.h.shtml#GROUP_TEI">GROUP_TEI</A>) || (tei == st-&gt;l2.tei))) {
		<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;st-&gt;ma.t202, 5);
		<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(&amp;st-&gt;ma.tei_m, ST_TEI_NOP);
		st-&gt;l3.l3l2(st, <A HREF="hisax.h.shtml#MDL_REMOVE">MDL_REMOVE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, 0);
		cs = (<FONT COLOR="#298C52">struct</FONT> IsdnCardState *) st-&gt;l1.hardware;
		cs-&gt;cardmsg(cs, <A HREF="hisax.h.shtml#MDL_REMOVE">MDL_REMOVE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#tei_id_verify">tei_id_verify</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	<FONT COLOR="#298C52">char</FONT> tmp[64];

	<FONT COLOR="#298C52">if</FONT> (st-&gt;ma.debug) {
		sprintf(tmp, <FONT COLOR="#FF0000">"id verify request for tei %d"</FONT>, st-&gt;l2.tei);
		st-&gt;ma.tei_m.printdebug(&amp;st-&gt;ma.tei_m, tmp);
	}
	<A HREF="#put_tei_msg">put_tei_msg</A>(st, <A HREF="#ID_VERIFY">ID_VERIFY</A>, 0, st-&gt;l2.tei);
	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(&amp;st-&gt;ma.tei_m, ST_TEI_IDVERIFY);
	<A HREF="fsm.c.shtml#FsmAddTimer">FsmAddTimer</A>(&amp;st-&gt;ma.t202, st-&gt;ma.T202, EV_T202, NULL, 2);
	st-&gt;ma.N202 = 2;
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#tei_id_req_tout">tei_id_req_tout</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	<FONT COLOR="#298C52">char</FONT> tmp[64];
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs;

	<FONT COLOR="#298C52">if</FONT> (--st-&gt;ma.N202) {
		st-&gt;ma.ri = <A HREF="#random_ri">random_ri</A>();
		<FONT COLOR="#298C52">if</FONT> (st-&gt;ma.debug) {
			sprintf(tmp, <FONT COLOR="#FF0000">"assign req(%d) ri %d"</FONT>,
				4 - st-&gt;ma.N202, st-&gt;ma.ri);
			st-&gt;ma.tei_m.printdebug(&amp;st-&gt;ma.tei_m, tmp);
		}
		<A HREF="#put_tei_msg">put_tei_msg</A>(st, <A HREF="#ID_REQUEST">ID_REQUEST</A>, st-&gt;ma.ri, 127);
		<A HREF="fsm.c.shtml#FsmAddTimer">FsmAddTimer</A>(&amp;st-&gt;ma.t202, st-&gt;ma.T202, EV_T202, NULL, 3);
	} <FONT COLOR="#298C52">else</FONT> {
		sprintf(tmp, <FONT COLOR="#FF0000">"assign req failed"</FONT>);
		st-&gt;ma.tei_m.printdebug(&amp;st-&gt;ma.tei_m, tmp);
		st-&gt;l3.l3l2(st, <A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#RESPONSE">RESPONSE</A>, 0);
		cs = (<FONT COLOR="#298C52">struct</FONT> IsdnCardState *) st-&gt;l1.hardware;
		cs-&gt;cardmsg(cs, <A HREF="hisax.h.shtml#MDL_REMOVE">MDL_REMOVE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
		<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_TEI_NOP);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#tei_id_ver_tout">tei_id_ver_tout</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	<FONT COLOR="#298C52">char</FONT> tmp[64];
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs;

	<FONT COLOR="#298C52">if</FONT> (--st-&gt;ma.N202) {
		<FONT COLOR="#298C52">if</FONT> (st-&gt;ma.debug) {
			sprintf(tmp, <FONT COLOR="#FF0000">"id verify req(%d) for tei %d"</FONT>,
				3 - st-&gt;ma.N202, st-&gt;l2.tei);
			st-&gt;ma.tei_m.printdebug(&amp;st-&gt;ma.tei_m, tmp);
		}
		<A HREF="#put_tei_msg">put_tei_msg</A>(st, <A HREF="#ID_VERIFY">ID_VERIFY</A>, 0, st-&gt;l2.tei);
		<A HREF="fsm.c.shtml#FsmAddTimer">FsmAddTimer</A>(&amp;st-&gt;ma.t202, st-&gt;ma.T202, EV_T202, NULL, 4);
	} <FONT COLOR="#298C52">else</FONT> {
		sprintf(tmp, <FONT COLOR="#FF0000">"verify req for tei %d failed"</FONT>, st-&gt;l2.tei);
		st-&gt;ma.tei_m.printdebug(&amp;st-&gt;ma.tei_m, tmp);
		st-&gt;l3.l3l2(st, <A HREF="hisax.h.shtml#MDL_REMOVE">MDL_REMOVE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, 0);
		cs = (<FONT COLOR="#298C52">struct</FONT> IsdnCardState *) st-&gt;l1.hardware;
		cs-&gt;cardmsg(cs, <A HREF="hisax.h.shtml#MDL_REMOVE">MDL_REMOVE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
		<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_TEI_NOP);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="tei_l1l2">tei_l1l2</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">int</FONT> mt;
	<FONT COLOR="#298C52">char</FONT> tmp[64];

	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_FIXED_TEI">FLG_FIXED_TEI</A>, &amp;st-&gt;l2.flag)) {
		dev_kfree_skb(skb);
		<FONT COLOR="#298C52">return</FONT>;
	}

	<FONT COLOR="#298C52">if</FONT> (pr == (<A HREF="hisax.h.shtml#PH_DATA">PH_DATA</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>)) {
		<FONT COLOR="#298C52">if</FONT> (skb-&gt;len &lt; 3) {
			sprintf(tmp, <FONT COLOR="#FF0000">"short mgr frame %d/3"</FONT>, skb-&gt;len);
			st-&gt;ma.tei_m.printdebug(&amp;st-&gt;ma.tei_m, tmp);
		} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (((skb-&gt;data[0] &gt;&gt; 2) != <A HREF="hisax.h.shtml#TEI_SAPI">TEI_SAPI</A>) ||
			   ((skb-&gt;data[1] &gt;&gt; 1) != <A HREF="hisax.h.shtml#GROUP_TEI">GROUP_TEI</A>)) {
			sprintf(tmp, <FONT COLOR="#FF0000">"wrong mgr sapi/tei %x/%x"</FONT>,
				skb-&gt;data[0], skb-&gt;data[1]);
			st-&gt;ma.tei_m.printdebug(&amp;st-&gt;ma.tei_m, tmp);
		} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> ((skb-&gt;data[2] &amp; 0xef) != <A HREF="isdnl2.h.shtml#UI">UI</A>) {
			sprintf(tmp, <FONT COLOR="#FF0000">"mgr frame is not ui %x"</FONT>,
				skb-&gt;data[2]);
			st-&gt;ma.tei_m.printdebug(&amp;st-&gt;ma.tei_m, tmp);
		} <FONT COLOR="#298C52">else</FONT> {
			skb_pull(skb, 3);
			<FONT COLOR="#298C52">if</FONT> (skb-&gt;len &lt; 5) {
				sprintf(tmp, <FONT COLOR="#FF0000">"short mgr frame %d/5"</FONT>, skb-&gt;len);
				st-&gt;ma.tei_m.printdebug(&amp;st-&gt;ma.tei_m, tmp);
			} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (skb-&gt;data[0] != <A HREF="#TEI_ENTITY_ID">TEI_ENTITY_ID</A>) {
				<FONT COLOR=#0000FF>/* wrong management entity identifier, ignore */</FONT>
				sprintf(tmp, <FONT COLOR="#FF0000">"tei handler wrong entity id %x\n"</FONT>,
					skb-&gt;data[0]);
				st-&gt;ma.tei_m.printdebug(&amp;st-&gt;ma.tei_m, tmp);
			} <FONT COLOR="#298C52">else</FONT> {
				mt = skb-&gt;data[3];
				<FONT COLOR="#298C52">if</FONT> (mt == <A HREF="#ID_ASSIGNED">ID_ASSIGNED</A>)
					<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;ma.tei_m, EV_ASSIGN, skb);
				<FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (mt == <A HREF="#ID_DENIED">ID_DENIED</A>)
					<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;ma.tei_m, EV_DENIED, skb);
				<FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (mt == <A HREF="#ID_CHK_REQ">ID_CHK_REQ</A>)
					<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;ma.tei_m, EV_CHKREQ, skb);
				<FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (mt == <A HREF="#ID_REMOVE">ID_REMOVE</A>)
					<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;ma.tei_m, EV_REMOVE, skb);
				<FONT COLOR="#298C52">else</FONT> {
					sprintf(tmp, <FONT COLOR="#FF0000">"tei handler wrong mt %x\n"</FONT>,
						mt);
					st-&gt;ma.tei_m.printdebug(&amp;st-&gt;ma.tei_m, tmp);
				}
			}
		}
	} <FONT COLOR="#298C52">else</FONT> {
		sprintf(tmp, <FONT COLOR="#FF0000">"tei handler wrong pr %x\n"</FONT>, pr);
		st-&gt;ma.tei_m.printdebug(&amp;st-&gt;ma.tei_m, tmp);
	}
	dev_kfree_skb(skb);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="tei_l2tei">tei_l2tei</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs;

	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_FIXED_TEI">FLG_FIXED_TEI</A>, &amp;st-&gt;l2.flag)) {
		<FONT COLOR="#298C52">if</FONT> (pr == (<A HREF="hisax.h.shtml#MDL_ASSIGN">MDL_ASSIGN</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>)) {
			<FONT COLOR="#298C52">if</FONT> (st-&gt;ma.debug) {
				<FONT COLOR="#298C52">char</FONT> tmp[64];
				sprintf(tmp, <FONT COLOR="#FF0000">"fixed assign tei %d"</FONT>, st-&gt;l2.tei);
				st-&gt;ma.tei_m.printdebug(&amp;st-&gt;ma.tei_m, tmp);
			}
			st-&gt;l3.l3l2(st, <A HREF="hisax.h.shtml#MDL_ASSIGN">MDL_ASSIGN</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, (<FONT COLOR="#298C52">void</FONT> *) (<FONT COLOR="#298C52">long</FONT>) st-&gt;l2.tei);
			cs = (<FONT COLOR="#298C52">struct</FONT> IsdnCardState *) st-&gt;l1.hardware;
			cs-&gt;cardmsg(cs, <A HREF="hisax.h.shtml#MDL_ASSIGN">MDL_ASSIGN</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
		}
		<FONT COLOR="#298C52">return</FONT>;
	}
	<FONT COLOR="#298C52">switch</FONT> (pr) {
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#MDL_ASSIGN">MDL_ASSIGN</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;ma.tei_m, EV_IDREQ, arg);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#MDL_ERROR">MDL_ERROR</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;ma.tei_m, EV_VERIFY, arg);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">default</FONT>:
			<FONT COLOR="#298C52">break</FONT>;
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="tei_debug">tei_debug</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">char</FONT> *s)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	<FONT COLOR="#298C52">char</FONT> tm[32], str[256];

	<A HREF="fsm.c.shtml#jiftime">jiftime</A>(tm, jiffies);
	sprintf(str, <FONT COLOR="#FF0000">"%s Tei %s\n"</FONT>, tm, s);
	<A HREF="isdnl1.c.shtml#HiSax_putstatus">HiSax_putstatus</A>(st-&gt;l1.hardware, str);
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="setstack_tei">setstack_tei</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st)
{
	st-&gt;l2.l2tei = <A HREF="#tei_l2tei">tei_l2tei</A>;
	st-&gt;ma.T202 = 2000;	<FONT COLOR=#0000FF>/* T202  2000 milliseconds */</FONT>
	st-&gt;l1.l1tei = <A HREF="#tei_l1l2">tei_l1l2</A>;
	st-&gt;ma.debug = 1;
	st-&gt;ma.tei_m.fsm = &amp;teifsm;
	st-&gt;ma.tei_m.state = ST_TEI_NOP;
	st-&gt;ma.tei_m.debug = 1;
	st-&gt;ma.tei_m.userdata = st;
	st-&gt;ma.tei_m.userint = 0;
	st-&gt;ma.tei_m.printdebug = <A HREF="#tei_debug">tei_debug</A>;
	<A HREF="fsm.c.shtml#FsmInitTimer">FsmInitTimer</A>(&amp;st-&gt;ma.tei_m, &amp;st-&gt;ma.t202);
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="init_tei">init_tei</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *sp, <FONT COLOR="#298C52">int</FONT> protocol)
{

}

<FONT COLOR="#298C52">void</FONT>
<A NAME="release_tei">release_tei</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = cs-&gt;stlist;

	<FONT COLOR="#298C52">while</FONT> (st) {
		<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;st-&gt;ma.t202, 1);
		st = st-&gt;next;
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">struct</FONT> FsmNode TeiFnList[] <A HREF="hisax.h.shtml#HISAX_INITDATA">HISAX_INITDATA</A> =
{
	{ST_TEI_NOP, EV_IDREQ, <A HREF="#tei_id_request">tei_id_request</A>},
	{ST_TEI_NOP, EV_VERIFY, <A HREF="#tei_id_verify">tei_id_verify</A>},
	{ST_TEI_NOP, EV_REMOVE, <A HREF="#tei_id_remove">tei_id_remove</A>},
	{ST_TEI_NOP, EV_CHKREQ, <A HREF="#tei_id_chk_req">tei_id_chk_req</A>},
	{ST_TEI_IDREQ, EV_T202, <A HREF="#tei_id_req_tout">tei_id_req_tout</A>},
	{ST_TEI_IDREQ, EV_ASSIGN, <A HREF="#tei_id_assign">tei_id_assign</A>},
	{ST_TEI_IDREQ, EV_DENIED, <A HREF="#tei_id_denied">tei_id_denied</A>},
	{ST_TEI_IDVERIFY, EV_T202, <A HREF="#tei_id_ver_tout">tei_id_ver_tout</A>},
	{ST_TEI_IDVERIFY, EV_REMOVE, <A HREF="#tei_id_remove">tei_id_remove</A>},
	{ST_TEI_IDVERIFY, EV_CHKREQ, <A HREF="#tei_id_chk_req">tei_id_chk_req</A>},
};

<FONT COLOR=#A521F7>#define</FONT> <A NAME="TEI_FN_COUNT">TEI_FN_COUNT</A> (<FONT COLOR="#298C52">sizeof</FONT>(TeiFnList)/<FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> FsmNode))

<A HREF="callc.c.shtml#HISAX_INITFUNC">HISAX_INITFUNC</A>(<FONT COLOR="#298C52">void</FONT>
TeiNew(<FONT COLOR="#298C52">void</FONT>))
{
	teifsm.state_count = <A HREF="#TEI_STATE_COUNT">TEI_STATE_COUNT</A>;
	teifsm.event_count = <A HREF="#TEI_EVENT_COUNT">TEI_EVENT_COUNT</A>;
	teifsm.strEvent = strTeiEvent;
	teifsm.strState = strTeiState;
	FsmNew(&amp;teifsm, TeiFnList, <A HREF="#TEI_FN_COUNT">TEI_FN_COUNT</A>);
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="TeiFree">TeiFree</A>(<FONT COLOR="#298C52">void</FONT>)
{
	<A HREF="fsm.c.shtml#FsmFree">FsmFree</A>(&amp;teifsm);
}
</BODY>

</HTML>
