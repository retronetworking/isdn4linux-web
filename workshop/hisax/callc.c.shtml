<HTML>

<!-- Generated by c2html-1.0, Copyright 1998 by Dave Whittington -->
<HEAD>
<TITLE>callc.c</TITLE>
<!--#include virtual="/ssi/js.shtml" -->
<!--#include virtual="/ssi/buttondefs.shtml" -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<TABLE WIDTH="100%">
<TR>
<TD ALIGN=LEFT WIDTH="90"><!--#include virtual="/ssi/b_home.shtml" --></TD>
<TD ALIGN=RIGHT WIDTH="90"><!--#include virtual="/ssi/b_index.shtml" --></TD>
</TR>
</TABLE>
<CENTER><H1>callc.c</H1></CENTER>

<HR>
<PRE>
<FONT COLOR=#0000FF>/* $Id$

 * Author       Karsten Keil (keil@temic-ech.spacenet.de)
 *              based on the teles driver from Jan den Ouden
 *
 * Thanks to    Jan den Ouden
 *              Fritz Elfert
 *
 * $Log$
 * Revision 2.19  1998/05/25 14:08:06  keil
 * HiSax 3.0
 * fixed X.75 and leased line to work again
 * Point2Point and fixed TEI are runtime options now:
 *    hisaxctrl &lt;id&gt; 7 1  set PTP
 *    hisaxctrl &lt;id&gt; 8 &lt;TEIVALUE *2 &gt;
 *    set fixed TEI to TEIVALUE (0-63)
 *
 * Revision 2.18  1998/05/25 12:57:40  keil
 * HiSax golden code from certification, Don't use !!!
 * No leased lines, no X75, but many changes.
 *
 * Revision 2.17  1998/04/15 16:46:06  keil
 * RESUME support
 *
 * Revision 2.16  1998/04/10 10:35:17  paul
 * fixed (silly?) warnings from egcs on Alpha.
 *
 * Revision 2.15  1998/03/19 13:18:37  keil
 * Start of a CAPI like interface for supplementary Service
 * first service: SUSPEND
 *
 * Revision 2.14  1998/03/07 22:56:54  tsbogend
 * made HiSax working on Linux/Alpha
 *
 * Revision 2.13  1998/02/12 23:07:16  keil
 * change for 2.1.86 (removing FREE_READ/FREE_WRITE from [dev]_kfree_skb()
 *
 * Revision 2.12  1998/02/09 10:55:54  keil
 * New leased line mode
 *
 * Revision 2.11  1998/02/02 13:35:19  keil
 * config B-channel delay
 *
 * Revision 2.10  1997/11/06 17:09:15  keil
 * New 2.1 init code
 *
 * Revision 2.9  1997/10/29 19:01:58  keil
 * new LL interface
 *
 * Revision 2.8  1997/10/10 20:56:44  fritz
 * New HL interface.
 *
 * Revision 2.7  1997/10/01 09:21:28  fritz
 * Removed old compatibility stuff for 2.0.X kernels.
 * From now on, this code is for 2.1.X ONLY!
 * Old stuff is still in the separate branch.
 *
 * Revision 2.6  1997/09/11 17:26:58  keil
 * Open B-channel if here are incomming packets
 *
 * Revision 2.5  1997/08/07 17:46:05  keil
 * Fix Incomming Call without broadcast
 *
 * Revision 2.4  1997/08/03 14:37:58  keil
 * Activate Layer2 in PtP mode
 *
 * Revision 2.3  1997/07/31 19:23:40  keil
 * LAYER2_WATCHING for PtP
 *
 * Revision 2.2  1997/07/31 11:48:18  keil
 * experimental REJECT after ALERTING
 *
 * Revision 2.1  1997/07/30 17:12:59  keil
 * more changes for 'One TEI per card'
 *
 * Revision 2.0  1997/07/27 21:12:21  keil
 * CRef based L3; new channel handling; many other stuff
 *
 * Revision 1.31  1997/06/26 11:09:23  keil
 * New managment and minor changes
 *
 * old logs removed /KKe
 *
 */</FONT>

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#__NO_VERSION__">__NO_VERSION__</A>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hisax.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"../avmb1/capicmd.h"</FONT>  <FONT COLOR=#0000FF>/* this should be moved in a common place */</FONT>

<FONT COLOR=#A521F7>#ifdef</FONT> MODULE
<FONT COLOR=#A521F7>#define</FONT> <A NAME="MOD_USE_COUNT">MOD_USE_COUNT</A> ((&amp;__this_module)-&gt;usecount)
<FONT COLOR=#A521F7>#endif</FONT>				<FONT COLOR=#0000FF>/* MODULE */</FONT>

<FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *lli_revision = <FONT COLOR="#FF0000">"$Revision$"</FONT>;

<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">struct</FONT> IsdnCard cards[];
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">int</FONT> nrcards;
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">void</FONT> <A HREF="config.c.shtml#HiSax_mod_dec_use_count">HiSax_mod_dec_use_count</A>(<FONT COLOR="#298C52">void</FONT>);
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">void</FONT> <A HREF="config.c.shtml#HiSax_mod_inc_use_count">HiSax_mod_inc_use_count</A>(<FONT COLOR="#298C52">void</FONT>);

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> <A HREF="#init_b_st">init_b_st</A>(<FONT COLOR="#298C52">struct</FONT> Channel *chanp, <FONT COLOR="#298C52">int</FONT> incoming);
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> <A HREF="#release_b_st">release_b_st</A>(<FONT COLOR="#298C52">struct</FONT> Channel *chanp);

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">struct</FONT> Fsm callcfsm =
{NULL, 0, 0, NULL, NULL};

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> chancount = 0;

<FONT COLOR=#0000FF>/* experimental REJECT after ALERTING for CALLBACK to beat the 4s delay */</FONT> 
<FONT COLOR=#A521F7>#define</FONT> <A NAME="ALERT_REJECT">ALERT_REJECT</A> 1

<FONT COLOR=#0000FF>/* Value to delay the sending of the first B-channel paket after CONNECT
 * here is no value given by ITU, but experience shows that 300 ms will
 * work on many networks, if you or your other side is behind local exchanges
 * a greater value may be recommented. If the delay is to short the first paket
 * will be lost and autodetect on many comercial routers goes wrong !
 * You can adjust this value on runtime with 
 * hisaxctrl &lt;id&gt; 2 &lt;value&gt;
 * value is in milliseconds
 */</FONT>
<FONT COLOR=#A521F7>#define</FONT> <A NAME="DEFAULT_B_DELAY">DEFAULT_B_DELAY</A>	300

<FONT COLOR=#0000FF>/* Flags for remembering action done in lli */</FONT>

<FONT COLOR=#A521F7>#define</FONT>  <A NAME="FLG_START_D">FLG_START_D</A>	0
<FONT COLOR=#A521F7>#define</FONT>  <A NAME="FLG_ESTAB_D">FLG_ESTAB_D</A>	1
<FONT COLOR=#A521F7>#define</FONT>  <A NAME="FLG_CALL_SEND">FLG_CALL_SEND</A>	2
<FONT COLOR=#A521F7>#define</FONT>  <A NAME="FLG_CALL_REC">FLG_CALL_REC</A>   3
<FONT COLOR=#A521F7>#define</FONT>  <A NAME="FLG_CALL_ALERT">FLG_CALL_ALERT</A>	4
<FONT COLOR=#A521F7>#define</FONT>  <A NAME="FLG_START_B">FLG_START_B</A>	5
<FONT COLOR=#A521F7>#define</FONT>  <A NAME="FLG_CONNECT_B">FLG_CONNECT_B</A>	6
<FONT COLOR=#A521F7>#define</FONT>  <A NAME="FLG_LL_DCONN">FLG_LL_DCONN</A>	7
<FONT COLOR=#A521F7>#define</FONT>  <A NAME="FLG_LL_BCONN">FLG_LL_BCONN</A>	8
<FONT COLOR=#A521F7>#define</FONT>  <A NAME="FLG_DISC_SEND">FLG_DISC_SEND</A>	9
<FONT COLOR=#A521F7>#define</FONT>  <A NAME="FLG_DISC_REC">FLG_DISC_REC</A>	10
<FONT COLOR=#A521F7>#define</FONT>  <A NAME="FLG_REL_REC">FLG_REL_REC</A>	11
<FONT COLOR=#A521F7>#define</FONT>  <A NAME="FLG_DO_ALERT">FLG_DO_ALERT</A>	12
<FONT COLOR=#A521F7>#define</FONT>  <A NAME="FLG_DO_HANGUP">FLG_DO_HANGUP</A>	13
<FONT COLOR=#A521F7>#define</FONT>  <A NAME="FLG_DO_CONNECT">FLG_DO_CONNECT</A>	14
<FONT COLOR=#A521F7>#define</FONT>  <A NAME="FLG_DO_ESTAB">FLG_DO_ESTAB</A>	15
<FONT COLOR=#A521F7>#define</FONT>  <A NAME="FLG_RESUME">FLG_RESUME</A>	16

<FONT COLOR=#0000FF>/*
 * Because of callback it's a good idea to delay the shutdown of the d-channel
 */</FONT>
<FONT COLOR=#A521F7>#define</FONT>	<A NAME="DREL_TIMER_VALUE">DREL_TIMER_VALUE</A> 40000

<FONT COLOR=#0000FF>/*
 * Find card with given driverId
 */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">struct</FONT> IsdnCardState
*
<A NAME="hisax_findcard">hisax_findcard</A>(<FONT COLOR="#298C52">int</FONT> driverid)
{
	<FONT COLOR="#298C52">int</FONT> i;

	<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; nrcards; i++)
		<FONT COLOR="#298C52">if</FONT> (cards[i].cs)
			<FONT COLOR="#298C52">if</FONT> (cards[i].cs-&gt;myid == driverid)
				<FONT COLOR="#298C52">return</FONT> (cards[i].cs);
	<FONT COLOR="#298C52">return</FONT> (<FONT COLOR="#298C52">struct</FONT> IsdnCardState *) 0;
}

<FONT COLOR="#298C52">int</FONT>
<A NAME="discard_queue">discard_queue</A>(<FONT COLOR="#298C52">struct</FONT> sk_buff_head *q)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;
	<FONT COLOR="#298C52">int</FONT> ret=0;

	<FONT COLOR="#298C52">while</FONT> ((skb = skb_dequeue(q))) {
		dev_kfree_skb(skb);
		ret++;
	}
	<FONT COLOR="#298C52">return</FONT>(ret);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#link_debug">link_debug</A>(<FONT COLOR="#298C52">struct</FONT> Channel *chanp, <FONT COLOR="#298C52">char</FONT> *s, <FONT COLOR="#298C52">int</FONT> direction)
{
	<FONT COLOR="#298C52">char</FONT> tmp[100], tm[32];

	<A HREF="fsm.c.shtml#jiftime">jiftime</A>(tm, jiffies);
	sprintf(tmp, <FONT COLOR="#FF0000">"%s Channel %d %s %s\n"</FONT>, tm, chanp-&gt;chan,
		direction ? <FONT COLOR="#FF0000">"LL-&gt;HL"</FONT> : <FONT COLOR="#FF0000">"HL-&gt;LL"</FONT>, s);
	<A HREF="isdnl1.c.shtml#HiSax_putstatus">HiSax_putstatus</A>(chanp-&gt;cs, tmp);
}


<FONT COLOR="#298C52">enum</FONT> {
	ST_NULL,		<FONT COLOR=#0000FF>/*  0 inactive */</FONT>
	ST_OUT_WAIT_D,		<FONT COLOR=#0000FF>/*  1 outgoing, awaiting d-channel establishment */</FONT>
	ST_IN_WAIT_D,		<FONT COLOR=#0000FF>/*  2 incoming, awaiting d-channel establishment */</FONT>
	ST_OUT_DIAL,		<FONT COLOR=#0000FF>/*  3 outgoing, SETUP send; awaiting confirm */</FONT>
	ST_IN_WAIT_LL,		<FONT COLOR=#0000FF>/*  4 incoming call received; wait for LL confirm */</FONT>
	ST_IN_ALERT_SEND,	<FONT COLOR=#0000FF>/*  5 incoming call received; ALERT send */</FONT>
	ST_IN_WAIT_CONN_ACK,	<FONT COLOR=#0000FF>/*  6 incoming CONNECT send; awaiting CONN_ACK */</FONT>
	ST_WAIT_BCONN,		<FONT COLOR=#0000FF>/*  7 CONNECT/CONN_ACK received, awaiting b-channel prot. estbl. */</FONT>
	ST_ACTIVE,		<FONT COLOR=#0000FF>/*  8 active, b channel prot. established */</FONT>
	ST_WAIT_BRELEASE,	<FONT COLOR=#0000FF>/*  9 call clear. (initiator), awaiting b channel prot. rel. */</FONT>
	ST_WAIT_BREL_DISC,	<FONT COLOR=#0000FF>/* 10 call clear. (receiver), DISCONNECT req. received */</FONT>
	ST_WAIT_DCOMMAND,	<FONT COLOR=#0000FF>/* 11 call clear. (receiver), awaiting DCHANNEL message */</FONT>
	ST_WAIT_DRELEASE,	<FONT COLOR=#0000FF>/* 12 DISCONNECT sent, awaiting RELEASE */</FONT>
	ST_WAIT_D_REL_CNF,	<FONT COLOR=#0000FF>/* 13 RELEASE sent, awaiting RELEASE confirm */</FONT>
	ST_WAIT_DSHUTDOWN,	<FONT COLOR=#0000FF>/*  14 awaiting d-channel shutdown */</FONT>
};

<FONT COLOR=#A521F7>#define</FONT> <A NAME="STATE_COUNT">STATE_COUNT</A> (ST_WAIT_DSHUTDOWN +1)

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">char</FONT> *strState[] =
{
	<FONT COLOR="#FF0000">"ST_NULL"</FONT>,
	<FONT COLOR="#FF0000">"ST_OUT_WAIT_D"</FONT>,
	<FONT COLOR="#FF0000">"ST_IN_WAIT_D"</FONT>,
	<FONT COLOR="#FF0000">"ST_OUT_DIAL"</FONT>,
	<FONT COLOR="#FF0000">"ST_IN_WAIT_LL"</FONT>,
	<FONT COLOR="#FF0000">"ST_IN_ALERT_SEND"</FONT>,
	<FONT COLOR="#FF0000">"ST_IN_WAIT_CONN_ACK"</FONT>,
	<FONT COLOR="#FF0000">"ST_WAIT_BCONN"</FONT>,
	<FONT COLOR="#FF0000">"ST_ACTIVE"</FONT>,
	<FONT COLOR="#FF0000">"ST_WAIT_BRELEASE"</FONT>,
	<FONT COLOR="#FF0000">"ST_WAIT_BREL_DISC"</FONT>,
	<FONT COLOR="#FF0000">"ST_WAIT_DCOMMAND"</FONT>,
	<FONT COLOR="#FF0000">"ST_WAIT_DRELEASE"</FONT>,
	<FONT COLOR="#FF0000">"ST_WAIT_D_REL_CNF"</FONT>,
	<FONT COLOR="#FF0000">"ST_WAIT_DSHUTDOWN"</FONT>,
};

<FONT COLOR="#298C52">enum</FONT> {
	EV_DIAL,		<FONT COLOR=#0000FF>/*  0 */</FONT>
	EV_SETUP_CNF,		<FONT COLOR=#0000FF>/*  1 */</FONT>
	EV_ACCEPTB,		<FONT COLOR=#0000FF>/*  2 */</FONT>
	EV_DISCONNECT_IND,	<FONT COLOR=#0000FF>/*  3 */</FONT>
	EV_RELEASE_CNF,		<FONT COLOR=#0000FF>/*  4 */</FONT>
	EV_DLEST,		<FONT COLOR=#0000FF>/*  5 */</FONT>
	EV_DLRL,		<FONT COLOR=#0000FF>/*  6 */</FONT>
	EV_SETUP_IND,		<FONT COLOR=#0000FF>/*  7 */</FONT>
	EV_RELEASE_IND,		<FONT COLOR=#0000FF>/*  8 */</FONT>
	EV_ACCEPTD,		<FONT COLOR=#0000FF>/*  9 */</FONT>
	EV_SETUP_CMPL_IND,	<FONT COLOR=#0000FF>/* 10 */</FONT>
	EV_BC_EST,		<FONT COLOR=#0000FF>/* 11 */</FONT>
	EV_WRITEBUF,		<FONT COLOR=#0000FF>/* 12 */</FONT>
	EV_ESTABLISH,		<FONT COLOR=#0000FF>/* 13 */</FONT>
	EV_HANGUP,		<FONT COLOR=#0000FF>/* 14 */</FONT>
	EV_BC_REL,		<FONT COLOR=#0000FF>/* 15 */</FONT>
	EV_CINF,		<FONT COLOR=#0000FF>/* 16 */</FONT>
	EV_SUSPEND,		<FONT COLOR=#0000FF>/* 17 */</FONT>
	EV_RESUME,		<FONT COLOR=#0000FF>/* 18 */</FONT>
	EV_SHUTDOWN_D,		<FONT COLOR=#0000FF>/* 19 */</FONT>
	EV_NOSETUP_RSP,		<FONT COLOR=#0000FF>/* 20 */</FONT>
	EV_SETUP_ERR,		<FONT COLOR=#0000FF>/* 21 */</FONT>
	EV_CONNECT_ERR,		<FONT COLOR=#0000FF>/* 22 */</FONT>
	EV_RELEASE_ERR,		<FONT COLOR=#0000FF>/* 23 */</FONT>
};

<FONT COLOR=#A521F7>#define</FONT> <A NAME="EVENT_COUNT">EVENT_COUNT</A> (EV_RELEASE_ERR +1)

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">char</FONT> *strEvent[] =
{
	<FONT COLOR="#FF0000">"EV_DIAL"</FONT>,
	<FONT COLOR="#FF0000">"EV_SETUP_CNF"</FONT>,
	<FONT COLOR="#FF0000">"EV_ACCEPTB"</FONT>,
	<FONT COLOR="#FF0000">"EV_DISCONNECT_IND"</FONT>,
	<FONT COLOR="#FF0000">"EV_RELEASE_CNF"</FONT>,
	<FONT COLOR="#FF0000">"EV_DLEST"</FONT>,
	<FONT COLOR="#FF0000">"EV_DLRL"</FONT>,
	<FONT COLOR="#FF0000">"EV_SETUP_IND"</FONT>,
	<FONT COLOR="#FF0000">"EV_RELEASE_IND"</FONT>,
	<FONT COLOR="#FF0000">"EV_ACCEPTD"</FONT>,
	<FONT COLOR="#FF0000">"EV_SETUP_CMPL_IND"</FONT>,
	<FONT COLOR="#FF0000">"EV_BC_EST"</FONT>,
	<FONT COLOR="#FF0000">"EV_WRITEBUF"</FONT>,
	<FONT COLOR="#FF0000">"EV_ESTABLISH"</FONT>,
	<FONT COLOR="#FF0000">"EV_HANGUP"</FONT>,
	<FONT COLOR="#FF0000">"EV_BC_REL"</FONT>,
	<FONT COLOR="#FF0000">"EV_CINF"</FONT>,
	<FONT COLOR="#FF0000">"EV_SUSPEND"</FONT>,
	<FONT COLOR="#FF0000">"EV_RESUME"</FONT>,
	<FONT COLOR="#FF0000">"EV_SHUTDOWN_D"</FONT>,
	<FONT COLOR="#FF0000">"EV_NOSETUP_RSP"</FONT>,
	<FONT COLOR="#FF0000">"EV_SETUP_ERR"</FONT>,
	<FONT COLOR="#FF0000">"EV_CONNECT_ERR"</FONT>,
	<FONT COLOR="#FF0000">"EV_RELEASE_ERR"</FONT>,
};

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="lli_deliver_cause">lli_deliver_cause</A>(<FONT COLOR="#298C52">struct</FONT> Channel *chanp)
{
	isdn_ctrl ic;

	<FONT COLOR="#298C52">if</FONT> (chanp-&gt;proc-&gt;para.cause &lt; 0)
		<FONT COLOR="#298C52">return</FONT>;
	ic.driver = chanp-&gt;cs-&gt;myid;
	ic.command = ISDN_STAT_CAUSE;
	ic.arg = chanp-&gt;chan;
	<FONT COLOR="#298C52">if</FONT> (chanp-&gt;cs-&gt;protocol == ISDN_PTYPE_EURO)
		sprintf(ic.parm.num, <FONT COLOR="#FF0000">"E%02X%02X"</FONT>, chanp-&gt;proc-&gt;para.loc &amp; 0x7f,
			chanp-&gt;proc-&gt;para.cause &amp; 0x7f);
	<FONT COLOR="#298C52">else</FONT>
		sprintf(ic.parm.num, <FONT COLOR="#FF0000">"%02X%02X"</FONT>, chanp-&gt;proc-&gt;para.loc &amp; 0x7f,
			chanp-&gt;proc-&gt;para.cause &amp; 0x7f);
	chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_d_established">lli_d_established</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;

	test_and_set_bit(<A HREF="#FLG_ESTAB_D">FLG_ESTAB_D</A>, &amp;chanp-&gt;Flags);
	<FONT COLOR="#298C52">if</FONT> (chanp-&gt;leased) {
		isdn_ctrl ic;
		<FONT COLOR="#298C52">int</FONT> ret;
		<FONT COLOR="#298C52">char</FONT> txt[32];

		chanp-&gt;cs-&gt;cardmsg(chanp-&gt;cs, <A HREF="hisax.h.shtml#MDL_INFO_SETUP">MDL_INFO_SETUP</A>, (<FONT COLOR="#298C52">void</FONT> *) (<FONT COLOR="#298C52">long</FONT>)chanp-&gt;chan);
		<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_IN_WAIT_LL);
		test_and_set_bit(<A HREF="#FLG_CALL_REC">FLG_CALL_REC</A>, &amp;chanp-&gt;Flags);
		<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1)
			<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"STAT_ICALL_LEASED"</FONT>, 0);
		ic.driver = chanp-&gt;cs-&gt;myid;
		ic.command = ISDN_STAT_ICALL;
		ic.arg = chanp-&gt;chan;
		ic.parm.setup.si1 = 7;
		ic.parm.setup.si2 = 0;
		ic.parm.setup.plan = 0;
		ic.parm.setup.screen = 0;
		sprintf(ic.parm.setup.eazmsn,<FONT COLOR="#FF0000">"%d"</FONT>, chanp-&gt;chan + 1); 
		sprintf(ic.parm.setup.phone,<FONT COLOR="#FF0000">"LEASED%d"</FONT>, chanp-&gt;cs-&gt;myid);
		ret = chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
		<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1) {
			sprintf(txt, <FONT COLOR="#FF0000">"statcallb ret=%d"</FONT>, ret);
			<A HREF="#link_debug">link_debug</A>(chanp, txt, 1);
		}
		<FONT COLOR="#298C52">if</FONT> (!ret) {
			chanp-&gt;cs-&gt;cardmsg(chanp-&gt;cs, <A HREF="hisax.h.shtml#MDL_INFO_REL">MDL_INFO_REL</A>, (<FONT COLOR="#298C52">void</FONT> *) (<FONT COLOR="#298C52">long</FONT>)chanp-&gt;chan);
			<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_NULL);
		}
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (fi-&gt;state == ST_WAIT_DSHUTDOWN)
		<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_NULL);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_d_released">lli_d_released</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;

	test_and_clear_bit(<A HREF="#FLG_START_D">FLG_START_D</A>, &amp;chanp-&gt;Flags);
}

<FONT COLOR=#0000FF>/*
 * Dial out
 */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_prep_dialout">lli_prep_dialout</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;

	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_OUT_WAIT_D);
	<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;chanp-&gt;drel_timer, 60);
	<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;chanp-&gt;dial_timer, 73);
	chanp-&gt;l2_active_protocol = chanp-&gt;l2_protocol;
	chanp-&gt;incoming = 0;
	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="#FLG_ESTAB_D">FLG_ESTAB_D</A>, &amp;chanp-&gt;Flags)) {
		<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(fi, EV_DLEST, NULL);
	} <FONT COLOR="#298C52">else</FONT> {
		chanp-&gt;Flags = 0;
		<FONT COLOR="#298C52">if</FONT> (EV_RESUME == event)
			test_and_set_bit(<A HREF="#FLG_RESUME">FLG_RESUME</A>, &amp;chanp-&gt;Flags);
		test_and_set_bit(<A HREF="#FLG_START_D">FLG_START_D</A>, &amp;chanp-&gt;Flags);
		chanp-&gt;d_st-&gt;lli.l4l3(chanp-&gt;d_st, <A HREF="hisax.h.shtml#DL_ESTABLISH">DL_ESTABLISH</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_do_dialout">lli_do_dialout</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;
	<FONT COLOR="#298C52">int</FONT> ev;

	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_OUT_DIAL);
	chanp-&gt;cs-&gt;cardmsg(chanp-&gt;cs, <A HREF="hisax.h.shtml#MDL_INFO_SETUP">MDL_INFO_SETUP</A>, (<FONT COLOR="#298C52">void</FONT> *) (<FONT COLOR="#298C52">long</FONT>)chanp-&gt;chan);
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="#FLG_RESUME">FLG_RESUME</A>, &amp;chanp-&gt;Flags))
		ev = <A HREF="hisax.h.shtml#CC_RESUME">CC_RESUME</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>;
	<FONT COLOR="#298C52">else</FONT>
		ev = <A HREF="hisax.h.shtml#CC_SETUP">CC_SETUP</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>;
	<FONT COLOR="#298C52">if</FONT> (chanp-&gt;leased) {
		<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;chanp-&gt;fi, EV_SETUP_CNF, NULL);
	} <FONT COLOR="#298C52">else</FONT> {
		test_and_set_bit(<A HREF="#FLG_ESTAB_D">FLG_ESTAB_D</A>, &amp;chanp-&gt;Flags);
		chanp-&gt;d_st-&gt;lli.l4l3(chanp-&gt;d_st, ev, chanp);
		test_and_set_bit(<A HREF="#FLG_CALL_SEND">FLG_CALL_SEND</A>, &amp;chanp-&gt;Flags);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_init_bchan_out">lli_init_bchan_out</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;
	isdn_ctrl ic;

	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_WAIT_BCONN);
	test_and_set_bit(<A HREF="#FLG_LL_DCONN">FLG_LL_DCONN</A>, &amp;chanp-&gt;Flags);
	<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1)
		<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"STAT_DCONN"</FONT>, 0);
	ic.driver = chanp-&gt;cs-&gt;myid;
	ic.command = ISDN_STAT_DCONN;
	ic.arg = chanp-&gt;chan;
	chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
	<A HREF="#init_b_st">init_b_st</A>(chanp, 0);
	test_and_set_bit(<A HREF="#FLG_START_B">FLG_START_B</A>, &amp;chanp-&gt;Flags);
	chanp-&gt;b_st-&gt;lli.l4l3(chanp-&gt;b_st, <A HREF="hisax.h.shtml#DL_ESTABLISH">DL_ESTABLISH</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_go_active">lli_go_active</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;
	isdn_ctrl ic;

	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_ACTIVE);
	chanp-&gt;data_open = !0;
	test_and_set_bit(<A HREF="#FLG_CONNECT_B">FLG_CONNECT_B</A>, &amp;chanp-&gt;Flags);
	<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1)
		<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"STAT_BCONN"</FONT>, 0);
	test_and_set_bit(<A HREF="#FLG_LL_BCONN">FLG_LL_BCONN</A>, &amp;chanp-&gt;Flags);
	ic.driver = chanp-&gt;cs-&gt;myid;
	ic.command = ISDN_STAT_BCONN;
	ic.arg = chanp-&gt;chan;
	chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
	chanp-&gt;cs-&gt;cardmsg(chanp-&gt;cs, <A HREF="hisax.h.shtml#MDL_INFO_CONN">MDL_INFO_CONN</A>, (<FONT COLOR="#298C52">void</FONT> *) (<FONT COLOR="#298C52">long</FONT>)chanp-&gt;chan);
}

<FONT COLOR=#0000FF>/*
 * RESUME
 */</FONT>

<FONT COLOR=#0000FF>/* incomming call */</FONT>

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_start_dchan">lli_start_dchan</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;

	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_IN_WAIT_D);
	<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;chanp-&gt;drel_timer, 61);
	<FONT COLOR="#298C52">if</FONT> (event == EV_ACCEPTD)
		test_and_set_bit(<A HREF="#FLG_DO_CONNECT">FLG_DO_CONNECT</A>, &amp;chanp-&gt;Flags);
	<FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (event == EV_HANGUP) {
		test_and_set_bit(<A HREF="#FLG_DO_HANGUP">FLG_DO_HANGUP</A>, &amp;chanp-&gt;Flags);
<FONT COLOR=#A521F7>#ifdef</FONT> <A HREF="#ALERT_REJECT">ALERT_REJECT</A>		
		test_and_set_bit(<A HREF="#FLG_DO_ALERT">FLG_DO_ALERT</A>, &amp;chanp-&gt;Flags);
<FONT COLOR=#A521F7>#endif</FONT>
	} 
	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="#FLG_ESTAB_D">FLG_ESTAB_D</A>, &amp;chanp-&gt;Flags)) {
		<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(fi, EV_DLEST, NULL);
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (!test_and_set_bit(<A HREF="#FLG_START_D">FLG_START_D</A>, &amp;chanp-&gt;Flags))
		chanp-&gt;d_st-&gt;lli.l4l3(chanp-&gt;d_st, <A HREF="hisax.h.shtml#DL_ESTABLISH">DL_ESTABLISH</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_deliver_call">lli_deliver_call</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;
	isdn_ctrl ic;
	<FONT COLOR="#298C52">int</FONT> ret;
	<FONT COLOR="#298C52">char</FONT> txt[32];

	chanp-&gt;cs-&gt;cardmsg(chanp-&gt;cs, <A HREF="hisax.h.shtml#MDL_INFO_SETUP">MDL_INFO_SETUP</A>, (<FONT COLOR="#298C52">void</FONT> *) (<FONT COLOR="#298C52">long</FONT>)chanp-&gt;chan);
	<FONT COLOR=#0000FF>/*
	 * Report incoming calls only once to linklevel, use CallFlags
	 * which is set to 3 with each broadcast message in isdnl1.c
	 * and resetted if a interface  answered the STAT_ICALL.
	 */</FONT>
	<FONT COLOR="#298C52">if</FONT> (1) { <FONT COLOR=#0000FF>/* for only one TEI */</FONT>
		<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_IN_WAIT_LL);
		test_and_set_bit(<A HREF="#FLG_CALL_REC">FLG_CALL_REC</A>, &amp;chanp-&gt;Flags);
		<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1)
			<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"STAT_ICALL"</FONT>, 0);
		ic.driver = chanp-&gt;cs-&gt;myid;
		ic.command = ISDN_STAT_ICALL;
		ic.arg = chanp-&gt;chan;
		<FONT COLOR=#0000FF>/*
		 * No need to return "unknown" for calls without OAD,
		 * cause that's handled in linklevel now (replaced by '0')
		 */</FONT>
		ic.parm.setup = chanp-&gt;proc-&gt;para.setup;
		ret = chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
		<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1) {
			sprintf(txt, <FONT COLOR="#FF0000">"statcallb ret=%d"</FONT>, ret);
			<A HREF="#link_debug">link_debug</A>(chanp, txt, 1);
		}
		<FONT COLOR="#298C52">switch</FONT> (ret) {
			<FONT COLOR="#298C52">case</FONT> 1:	<FONT COLOR=#0000FF>/* OK, anybody likes this call */</FONT>
				<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;chanp-&gt;drel_timer, 61);
				<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="#FLG_ESTAB_D">FLG_ESTAB_D</A>, &amp;chanp-&gt;Flags)) {
					<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_IN_ALERT_SEND);
					test_and_set_bit(<A HREF="#FLG_CALL_ALERT">FLG_CALL_ALERT</A>, &amp;chanp-&gt;Flags);
					chanp-&gt;d_st-&gt;lli.l4l3(chanp-&gt;d_st, <A HREF="hisax.h.shtml#CC_ALERTING">CC_ALERTING</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, chanp-&gt;proc);
				} <FONT COLOR="#298C52">else</FONT> {
					test_and_set_bit(<A HREF="#FLG_DO_ALERT">FLG_DO_ALERT</A>, &amp;chanp-&gt;Flags);
					<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_IN_WAIT_D);
					test_and_set_bit(<A HREF="#FLG_START_D">FLG_START_D</A>, &amp;chanp-&gt;Flags);
					chanp-&gt;d_st-&gt;lli.l4l3(chanp-&gt;d_st,
						<A HREF="hisax.h.shtml#DL_ESTABLISH">DL_ESTABLISH</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
				}
				<FONT COLOR="#298C52">break</FONT>;
			<FONT COLOR="#298C52">case</FONT> 2:	<FONT COLOR=#0000FF>/* Rejecting Call */</FONT>
				test_and_clear_bit(<A HREF="#FLG_CALL_REC">FLG_CALL_REC</A>, &amp;chanp-&gt;Flags);
				<FONT COLOR="#298C52">break</FONT>;
			<FONT COLOR="#298C52">case</FONT> 0:	<FONT COLOR=#0000FF>/* OK, nobody likes this call */</FONT>
			<FONT COLOR="#298C52">default</FONT>:	<FONT COLOR=#0000FF>/* statcallb problems */</FONT>
				chanp-&gt;d_st-&gt;lli.l4l3(chanp-&gt;d_st, <A HREF="hisax.h.shtml#CC_IGNORE">CC_IGNORE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, chanp-&gt;proc);
				chanp-&gt;cs-&gt;cardmsg(chanp-&gt;cs, <A HREF="hisax.h.shtml#MDL_INFO_REL">MDL_INFO_REL</A>, (<FONT COLOR="#298C52">void</FONT> *) (<FONT COLOR="#298C52">long</FONT>)chanp-&gt;chan);
				<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_NULL);
				<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="#FLG_ESTAB_D">FLG_ESTAB_D</A>, &amp;chanp-&gt;Flags) &amp;&amp;
					!test_bit(<A HREF="hisax.h.shtml#FLG_PTP">FLG_PTP</A>, &amp;chanp-&gt;d_st-&gt;l2.flag))
					<A HREF="fsm.c.shtml#FsmRestartTimer">FsmRestartTimer</A>(&amp;chanp-&gt;drel_timer, <A HREF="#DREL_TIMER_VALUE">DREL_TIMER_VALUE</A>, EV_SHUTDOWN_D, NULL, 61);
				<FONT COLOR="#298C52">break</FONT>;
		}
	} <FONT COLOR="#298C52">else</FONT> {
		chanp-&gt;d_st-&gt;lli.l4l3(chanp-&gt;d_st, <A HREF="hisax.h.shtml#CC_IGNORE">CC_IGNORE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, chanp-&gt;proc);
		chanp-&gt;cs-&gt;cardmsg(chanp-&gt;cs, <A HREF="hisax.h.shtml#MDL_INFO_REL">MDL_INFO_REL</A>, (<FONT COLOR="#298C52">void</FONT> *)(<FONT COLOR="#298C52">long</FONT>)chanp-&gt;chan);
		<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_NULL);
		<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="#FLG_ESTAB_D">FLG_ESTAB_D</A>, &amp;chanp-&gt;Flags) &amp;&amp;
			!test_bit(<A HREF="hisax.h.shtml#FLG_PTP">FLG_PTP</A>, &amp;chanp-&gt;d_st-&gt;l2.flag))
			<A HREF="fsm.c.shtml#FsmRestartTimer">FsmRestartTimer</A>(&amp;chanp-&gt;drel_timer, <A HREF="#DREL_TIMER_VALUE">DREL_TIMER_VALUE</A>, EV_SHUTDOWN_D, NULL, 62);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_establish_d">lli_establish_d</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR=#0000FF>/* This establish the D-channel for pending L3 messages 
	 * without blocking the channel
	 */</FONT>
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;

	test_and_set_bit(<A HREF="#FLG_DO_ESTAB">FLG_DO_ESTAB</A>, &amp;chanp-&gt;Flags);
	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_IN_WAIT_D);
	test_and_set_bit(<A HREF="#FLG_START_D">FLG_START_D</A>, &amp;chanp-&gt;Flags);
	chanp-&gt;d_st-&gt;lli.l4l3(chanp-&gt;d_st, <A HREF="hisax.h.shtml#DL_ESTABLISH">DL_ESTABLISH</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_do_action">lli_do_action</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;

	test_and_set_bit(<A HREF="#FLG_ESTAB_D">FLG_ESTAB_D</A>, &amp;chanp-&gt;Flags);
	<FONT COLOR="#298C52">if</FONT> (chanp-&gt;leased) {
		<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_IN_WAIT_CONN_ACK);
		test_and_clear_bit(<A HREF="#FLG_DO_ALERT">FLG_DO_ALERT</A>, &amp;chanp-&gt;Flags);
		test_and_clear_bit(<A HREF="#FLG_DO_CONNECT">FLG_DO_CONNECT</A>, &amp;chanp-&gt;Flags);
		<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;chanp-&gt;fi, EV_SETUP_CMPL_IND, NULL);
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="#FLG_DO_CONNECT">FLG_DO_CONNECT</A>, &amp;chanp-&gt;Flags) &amp;&amp;
		!test_bit(<A HREF="#FLG_DO_HANGUP">FLG_DO_HANGUP</A>, &amp;chanp-&gt;Flags)) {
		<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_IN_WAIT_CONN_ACK);
		test_and_clear_bit(<A HREF="#FLG_DO_ALERT">FLG_DO_ALERT</A>, &amp;chanp-&gt;Flags);
		chanp-&gt;d_st-&gt;lli.l4l3(chanp-&gt;d_st, <A HREF="hisax.h.shtml#CC_SETUP">CC_SETUP</A> | <A HREF="hisax.h.shtml#RESPONSE">RESPONSE</A>, chanp-&gt;proc);
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="#FLG_DO_ALERT">FLG_DO_ALERT</A>, &amp;chanp-&gt;Flags)) {
		<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="#FLG_DO_HANGUP">FLG_DO_HANGUP</A>, &amp;chanp-&gt;Flags))
			<A HREF="fsm.c.shtml#FsmRestartTimer">FsmRestartTimer</A>(&amp;chanp-&gt;drel_timer, 40, EV_HANGUP, NULL, 63);
		<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_IN_ALERT_SEND);
		test_and_set_bit(<A HREF="#FLG_CALL_ALERT">FLG_CALL_ALERT</A>, &amp;chanp-&gt;Flags);
		chanp-&gt;d_st-&gt;lli.l4l3(chanp-&gt;d_st, <A HREF="hisax.h.shtml#CC_ALERTING">CC_ALERTING</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, chanp-&gt;proc);
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="#FLG_DO_HANGUP">FLG_DO_HANGUP</A>, &amp;chanp-&gt;Flags)) {
		<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_WAIT_DRELEASE);
		chanp-&gt;proc-&gt;para.cause = 0x15;		<FONT COLOR=#0000FF>/* Call Rejected */</FONT>
		chanp-&gt;d_st-&gt;lli.l4l3(chanp-&gt;d_st, <A HREF="hisax.h.shtml#CC_REJECT">CC_REJECT</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, chanp-&gt;proc);
		test_and_set_bit(<A HREF="#FLG_DISC_SEND">FLG_DISC_SEND</A>, &amp;chanp-&gt;Flags);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_send_dconnect">lli_send_dconnect</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;

	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_IN_WAIT_CONN_ACK);
	chanp-&gt;d_st-&gt;lli.l4l3(chanp-&gt;d_st, <A HREF="hisax.h.shtml#CC_SETUP">CC_SETUP</A> | <A HREF="hisax.h.shtml#RESPONSE">RESPONSE</A>, chanp-&gt;proc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_init_bchan_in">lli_init_bchan_in</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;
	isdn_ctrl ic;

	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_WAIT_BCONN);
	test_and_set_bit(<A HREF="#FLG_LL_DCONN">FLG_LL_DCONN</A>, &amp;chanp-&gt;Flags);
	<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1)
		<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"STAT_DCONN"</FONT>, 0);
	ic.driver = chanp-&gt;cs-&gt;myid;
	ic.command = ISDN_STAT_DCONN;
	ic.arg = chanp-&gt;chan;
	chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
	chanp-&gt;l2_active_protocol = chanp-&gt;l2_protocol;
	chanp-&gt;incoming = !0;
	<A HREF="#init_b_st">init_b_st</A>(chanp, !0);
	test_and_set_bit(<A HREF="#FLG_START_B">FLG_START_B</A>, &amp;chanp-&gt;Flags);
	chanp-&gt;b_st-&gt;lli.l4l3(chanp-&gt;b_st, <A HREF="hisax.h.shtml#DL_ESTABLISH">DL_ESTABLISH</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
}

<FONT COLOR=#0000FF>/* Call suspend */</FONT>

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_suspend">lli_suspend</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;

	chanp-&gt;d_st-&gt;lli.l4l3(chanp-&gt;d_st, <A HREF="hisax.h.shtml#CC_SUSPEND">CC_SUSPEND</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, chanp-&gt;proc);
}

<FONT COLOR=#0000FF>/* Call clearing */</FONT>

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_cancel_call">lli_cancel_call</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;
	isdn_ctrl ic;

	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_WAIT_DRELEASE);
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="#FLG_LL_BCONN">FLG_LL_BCONN</A>, &amp;chanp-&gt;Flags)) {
		<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1)
			<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"STAT_BHUP"</FONT>, 0);
		ic.driver = chanp-&gt;cs-&gt;myid;
		ic.command = ISDN_STAT_BHUP;
		ic.arg = chanp-&gt;chan;
		chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
	}
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="#FLG_START_B">FLG_START_B</A>, &amp;chanp-&gt;Flags))
		<A HREF="#release_b_st">release_b_st</A>(chanp);
	chanp-&gt;proc-&gt;para.cause = 0x10;		<FONT COLOR=#0000FF>/* Normal Call Clearing */</FONT>
	chanp-&gt;d_st-&gt;lli.l4l3(chanp-&gt;d_st, <A HREF="hisax.h.shtml#CC_DISCONNECT">CC_DISCONNECT</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, chanp-&gt;proc);
	test_and_set_bit(<A HREF="#FLG_DISC_SEND">FLG_DISC_SEND</A>, &amp;chanp-&gt;Flags);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_shutdown_d">lli_shutdown_d</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;

	<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;chanp-&gt;drel_timer, 62);
	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_PTP">FLG_PTP</A>, &amp;chanp-&gt;d_st-&gt;l2.flag)) {
	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_NULL);
	} <FONT COLOR="#298C52">else</FONT> {
	<FONT COLOR="#298C52">if</FONT> (!test_bit(<A HREF="hisax.h.shtml#FLG_TWO_DCHAN">FLG_TWO_DCHAN</A>, &amp;chanp-&gt;cs-&gt;HW_Flags)) {
		<FONT COLOR="#298C52">if</FONT> (chanp-&gt;chan) {
			<FONT COLOR="#298C52">if</FONT> (chanp-&gt;cs-&gt;channel[0].fi.state != ST_NULL)
				<FONT COLOR="#298C52">return</FONT>;
		} <FONT COLOR="#298C52">else</FONT> {
			<FONT COLOR="#298C52">if</FONT> (chanp-&gt;cs-&gt;channel[1].fi.state != ST_NULL)
				<FONT COLOR="#298C52">return</FONT>;
		}
	}
	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_WAIT_DSHUTDOWN);
	test_and_clear_bit(<A HREF="#FLG_ESTAB_D">FLG_ESTAB_D</A>, &amp;chanp-&gt;Flags);
	chanp-&gt;d_st-&gt;lli.l4l3(chanp-&gt;d_st, <A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_timeout_d">lli_timeout_d</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;
	isdn_ctrl ic;

	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="#FLG_LL_DCONN">FLG_LL_DCONN</A>, &amp;chanp-&gt;Flags)) {
		<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1)
			<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"STAT_DHUP"</FONT>, 0);
		<A HREF="#lli_deliver_cause">lli_deliver_cause</A>(chanp);
		ic.driver = chanp-&gt;cs-&gt;myid;
		ic.command = ISDN_STAT_DHUP;
		ic.arg = chanp-&gt;chan;
		chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
	}
	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_NULL);
	chanp-&gt;Flags = 0;
	test_and_set_bit(<A HREF="#FLG_ESTAB_D">FLG_ESTAB_D</A>, &amp;chanp-&gt;Flags);
	<FONT COLOR="#298C52">if</FONT> (!test_bit(<A HREF="hisax.h.shtml#FLG_PTP">FLG_PTP</A>, &amp;chanp-&gt;d_st-&gt;l2.flag))
	<A HREF="fsm.c.shtml#FsmAddTimer">FsmAddTimer</A>(&amp;chanp-&gt;drel_timer, <A HREF="#DREL_TIMER_VALUE">DREL_TIMER_VALUE</A>, EV_SHUTDOWN_D, NULL, 60);
	chanp-&gt;cs-&gt;cardmsg(chanp-&gt;cs, <A HREF="hisax.h.shtml#MDL_INFO_REL">MDL_INFO_REL</A>, (<FONT COLOR="#298C52">void</FONT> *) (<FONT COLOR="#298C52">long</FONT>)chanp-&gt;chan);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_go_null">lli_go_null</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;

	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_NULL);
	chanp-&gt;Flags = 0;
	<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;chanp-&gt;drel_timer, 63);
	chanp-&gt;cs-&gt;cardmsg(chanp-&gt;cs, <A HREF="hisax.h.shtml#MDL_INFO_REL">MDL_INFO_REL</A>, (<FONT COLOR="#298C52">void</FONT> *) (<FONT COLOR="#298C52">long</FONT>)chanp-&gt;chan);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_disconn_bchan">lli_disconn_bchan</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;

	chanp-&gt;data_open = 0;
	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_WAIT_BRELEASE);
	test_and_clear_bit(<A HREF="#FLG_CONNECT_B">FLG_CONNECT_B</A>, &amp;chanp-&gt;Flags);
	chanp-&gt;b_st-&gt;lli.l4l3(chanp-&gt;b_st, <A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_send_d_disc">lli_send_d_disc</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;
	isdn_ctrl ic;

	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="#FLG_DISC_REC">FLG_DISC_REC</A>, &amp;chanp-&gt;Flags) ||
		test_bit(<A HREF="#FLG_REL_REC">FLG_REL_REC</A>, &amp;chanp-&gt;Flags))
		<FONT COLOR="#298C52">return</FONT>;
	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_WAIT_DRELEASE);
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="#FLG_LL_BCONN">FLG_LL_BCONN</A>, &amp;chanp-&gt;Flags)) {
		<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1)
			<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"STAT_BHUP"</FONT>, 0);
		ic.driver = chanp-&gt;cs-&gt;myid;
		ic.command = ISDN_STAT_BHUP;
		ic.arg = chanp-&gt;chan;
		chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
	}
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="#FLG_START_B">FLG_START_B</A>, &amp;chanp-&gt;Flags))
		<A HREF="#release_b_st">release_b_st</A>(chanp);
	<FONT COLOR="#298C52">if</FONT> (chanp-&gt;leased) {
		ic.command = ISDN_STAT_CAUSE;
		ic.arg = chanp-&gt;chan;
		sprintf(ic.parm.num, <FONT COLOR="#FF0000">"L0010"</FONT>);
		chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
		<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1)
			<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"STAT_DHUP"</FONT>, 0);
		ic.driver = chanp-&gt;cs-&gt;myid;
		ic.command = ISDN_STAT_DHUP;
		ic.arg = chanp-&gt;chan;
		chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
		<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_WAIT_DSHUTDOWN);
		test_and_clear_bit(<A HREF="#FLG_ESTAB_D">FLG_ESTAB_D</A>, &amp;chanp-&gt;Flags);
		chanp-&gt;d_st-&gt;lli.l4l3(chanp-&gt;d_st, <A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
	} <FONT COLOR="#298C52">else</FONT> {
		<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="#FLG_DO_HANGUP">FLG_DO_HANGUP</A>, &amp;chanp-&gt;Flags))
			chanp-&gt;proc-&gt;para.cause = 0x15;		<FONT COLOR=#0000FF>/* Call Reject */</FONT>
		<FONT COLOR="#298C52">else</FONT>
			chanp-&gt;proc-&gt;para.cause = 0x10;		<FONT COLOR=#0000FF>/* Normal Call Clearing */</FONT>
		chanp-&gt;d_st-&gt;lli.l4l3(chanp-&gt;d_st, <A HREF="hisax.h.shtml#CC_DISCONNECT">CC_DISCONNECT</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, chanp-&gt;proc);
		test_and_set_bit(<A HREF="#FLG_DISC_SEND">FLG_DISC_SEND</A>, &amp;chanp-&gt;Flags);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_released_bchan">lli_released_bchan</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;
	isdn_ctrl ic;

	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_WAIT_DCOMMAND);
	chanp-&gt;data_open = 0;
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="#FLG_LL_BCONN">FLG_LL_BCONN</A>, &amp;chanp-&gt;Flags)) {
		<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1)
			<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"STAT_BHUP"</FONT>, 0);
		ic.driver = chanp-&gt;cs-&gt;myid;
		ic.command = ISDN_STAT_BHUP;
		ic.arg = chanp-&gt;chan;
		chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
	}
	<A HREF="#release_b_st">release_b_st</A>(chanp);
	test_and_clear_bit(<A HREF="#FLG_START_B">FLG_START_B</A>, &amp;chanp-&gt;Flags);
}


<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_release_bchan">lli_release_bchan</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;

	chanp-&gt;data_open = 0;
	test_and_set_bit(<A HREF="#FLG_DISC_REC">FLG_DISC_REC</A>, &amp;chanp-&gt;Flags);
	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_WAIT_BREL_DISC);
	test_and_clear_bit(<A HREF="#FLG_CONNECT_B">FLG_CONNECT_B</A>, &amp;chanp-&gt;Flags);
	chanp-&gt;b_st-&gt;lli.l4l3(chanp-&gt;b_st, <A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_received_d_rel">lli_received_d_rel</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;
	isdn_ctrl ic;

	chanp-&gt;data_open = 0;
	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_NULL);
	test_and_set_bit(<A HREF="#FLG_REL_REC">FLG_REL_REC</A>, &amp;chanp-&gt;Flags);
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="#FLG_CONNECT_B">FLG_CONNECT_B</A>, &amp;chanp-&gt;Flags)) {
		chanp-&gt;b_st-&gt;lli.l4l3(chanp-&gt;b_st, <A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
	}
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="#FLG_LL_BCONN">FLG_LL_BCONN</A>, &amp;chanp-&gt;Flags)) {
		<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1)
			<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"STAT_BHUP"</FONT>, 0);
		ic.driver = chanp-&gt;cs-&gt;myid;
		ic.command = ISDN_STAT_BHUP;
		ic.arg = chanp-&gt;chan;
		chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
	}
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="#FLG_START_B">FLG_START_B</A>, &amp;chanp-&gt;Flags))
		<A HREF="#release_b_st">release_b_st</A>(chanp);
	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="#FLG_LL_DCONN">FLG_LL_DCONN</A>, &amp;chanp-&gt;Flags) ||
		test_bit(<A HREF="#FLG_CALL_SEND">FLG_CALL_SEND</A>, &amp;chanp-&gt;Flags) ||
		test_bit(<A HREF="#FLG_CALL_ALERT">FLG_CALL_ALERT</A>, &amp;chanp-&gt;Flags)) {
		<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1)
			<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"STAT_DHUP"</FONT>, 0);
		<A HREF="#lli_deliver_cause">lli_deliver_cause</A>(chanp);
		ic.driver = chanp-&gt;cs-&gt;myid;
		ic.command = ISDN_STAT_DHUP;
		ic.arg = chanp-&gt;chan;
		chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
	}
	test_and_clear_bit(<A HREF="#FLG_DISC_SEND">FLG_DISC_SEND</A>, &amp;chanp-&gt;Flags);
	test_and_clear_bit(<A HREF="#FLG_CALL_REC">FLG_CALL_REC</A>, &amp;chanp-&gt;Flags);
	test_and_clear_bit(<A HREF="#FLG_CALL_ALERT">FLG_CALL_ALERT</A>, &amp;chanp-&gt;Flags);
	test_and_clear_bit(<A HREF="#FLG_LL_DCONN">FLG_LL_DCONN</A>, &amp;chanp-&gt;Flags);
	test_and_clear_bit(<A HREF="#FLG_CALL_SEND">FLG_CALL_SEND</A>, &amp;chanp-&gt;Flags);
	<A HREF="#lli_timeout_d">lli_timeout_d</A>(fi, event, arg);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_received_d_relcnf">lli_received_d_relcnf</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;
	isdn_ctrl ic;

	chanp-&gt;data_open = 0;
	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_NULL);
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="#FLG_CONNECT_B">FLG_CONNECT_B</A>, &amp;chanp-&gt;Flags)) {
		chanp-&gt;b_st-&gt;lli.l4l3(chanp-&gt;b_st, <A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
	}
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="#FLG_LL_BCONN">FLG_LL_BCONN</A>, &amp;chanp-&gt;Flags)) {
		<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1)
			<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"STAT_BHUP"</FONT>, 0);
		ic.driver = chanp-&gt;cs-&gt;myid;
		ic.command = ISDN_STAT_BHUP;
		ic.arg = chanp-&gt;chan;
		chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
	}
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="#FLG_START_B">FLG_START_B</A>, &amp;chanp-&gt;Flags))
		<A HREF="#release_b_st">release_b_st</A>(chanp);
	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="#FLG_LL_DCONN">FLG_LL_DCONN</A>, &amp;chanp-&gt;Flags) ||
		test_bit(<A HREF="#FLG_CALL_SEND">FLG_CALL_SEND</A>, &amp;chanp-&gt;Flags) ||
		test_bit(<A HREF="#FLG_CALL_ALERT">FLG_CALL_ALERT</A>, &amp;chanp-&gt;Flags)) {
		<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1)
			<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"STAT_DHUP"</FONT>, 0);
		<A HREF="#lli_deliver_cause">lli_deliver_cause</A>(chanp);
		ic.driver = chanp-&gt;cs-&gt;myid;
		ic.command = ISDN_STAT_DHUP;
		ic.arg = chanp-&gt;chan;
		chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
	}
	test_and_clear_bit(<A HREF="#FLG_DISC_SEND">FLG_DISC_SEND</A>, &amp;chanp-&gt;Flags);
	test_and_clear_bit(<A HREF="#FLG_CALL_REC">FLG_CALL_REC</A>, &amp;chanp-&gt;Flags);
	test_and_clear_bit(<A HREF="#FLG_CALL_ALERT">FLG_CALL_ALERT</A>, &amp;chanp-&gt;Flags);
	test_and_clear_bit(<A HREF="#FLG_LL_DCONN">FLG_LL_DCONN</A>, &amp;chanp-&gt;Flags);
	test_and_clear_bit(<A HREF="#FLG_CALL_SEND">FLG_CALL_SEND</A>, &amp;chanp-&gt;Flags);
	<A HREF="#lli_timeout_d">lli_timeout_d</A>(fi, event, arg);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_received_d_disc">lli_received_d_disc</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;
	isdn_ctrl ic;

	chanp-&gt;data_open = 0;
	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_WAIT_D_REL_CNF);
	test_and_set_bit(<A HREF="#FLG_DISC_REC">FLG_DISC_REC</A>, &amp;chanp-&gt;Flags);
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="#FLG_LL_BCONN">FLG_LL_BCONN</A>, &amp;chanp-&gt;Flags)) {
		<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1)
			<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"STAT_BHUP"</FONT>, 0);
		ic.driver = chanp-&gt;cs-&gt;myid;
		ic.command = ISDN_STAT_BHUP;
		ic.arg = chanp-&gt;chan;
		chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
	}
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="#FLG_START_B">FLG_START_B</A>, &amp;chanp-&gt;Flags))
		<A HREF="#release_b_st">release_b_st</A>(chanp);
	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="#FLG_LL_DCONN">FLG_LL_DCONN</A>, &amp;chanp-&gt;Flags) ||
		test_bit(<A HREF="#FLG_CALL_SEND">FLG_CALL_SEND</A>, &amp;chanp-&gt;Flags) ||
		test_bit(<A HREF="#FLG_CALL_ALERT">FLG_CALL_ALERT</A>, &amp;chanp-&gt;Flags)) {
		<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1)
			<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"STAT_DHUP"</FONT>, 0);
		<A HREF="#lli_deliver_cause">lli_deliver_cause</A>(chanp);
		ic.driver = chanp-&gt;cs-&gt;myid;
		ic.command = ISDN_STAT_DHUP;
		ic.arg = chanp-&gt;chan;
		chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
	}
	test_and_clear_bit(<A HREF="#FLG_CALL_ALERT">FLG_CALL_ALERT</A>, &amp;chanp-&gt;Flags);
	test_and_clear_bit(<A HREF="#FLG_LL_DCONN">FLG_LL_DCONN</A>, &amp;chanp-&gt;Flags);
	test_and_clear_bit(<A HREF="#FLG_CALL_SEND">FLG_CALL_SEND</A>, &amp;chanp-&gt;Flags);
	chanp-&gt;d_st-&gt;lli.l4l3(chanp-&gt;d_st, <A HREF="hisax.h.shtml#CC_RELEASE">CC_RELEASE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, chanp-&gt;proc);
}

<FONT COLOR=#0000FF>/* processing charge info */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_charge_info">lli_charge_info</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;
	isdn_ctrl ic;

	ic.driver = chanp-&gt;cs-&gt;myid;
	ic.command = ISDN_STAT_CINF;
	ic.arg = chanp-&gt;chan;
	sprintf(ic.parm.num, <FONT COLOR="#FF0000">"%d"</FONT>, chanp-&gt;proc-&gt;para.chargeinfo);
	chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
}

<FONT COLOR=#0000FF>/* error procedures */</FONT>

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_no_dchan">lli_no_dchan</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;
	isdn_ctrl ic;

	<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1)
		<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"STAT_NODCH"</FONT>, 0);
	ic.driver = chanp-&gt;cs-&gt;myid;
	ic.command = ISDN_STAT_NODCH;
	ic.arg = chanp-&gt;chan;
	chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
	chanp-&gt;Flags = 0;
	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_NULL);
	chanp-&gt;d_st-&gt;lli.l4l3(chanp-&gt;d_st, <A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_no_dchan_ready">lli_no_dchan_ready</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;
	isdn_ctrl ic;

	<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1)
		<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"STAT_DHUP"</FONT>, 0);
	ic.driver = chanp-&gt;cs-&gt;myid;
	ic.command = ISDN_STAT_DHUP;
	ic.arg = chanp-&gt;chan;
	chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_no_dchan_in">lli_no_dchan_in</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;
	isdn_ctrl ic;

	<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1)
		<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"STAT_DHUP"</FONT>, 0);
	ic.driver = chanp-&gt;cs-&gt;myid;
	ic.command = ISDN_STAT_DHUP;
	ic.arg = chanp-&gt;chan;
	chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
	chanp-&gt;d_st-&gt;lli.l4l3(chanp-&gt;d_st, <A HREF="hisax.h.shtml#CC_DLRL">CC_DLRL</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, chanp-&gt;proc);
	chanp-&gt;Flags = 0;
	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_NULL);
	chanp-&gt;d_st-&gt;lli.l4l3(chanp-&gt;d_st, <A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_no_setup_rsp">lli_no_setup_rsp</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;
	isdn_ctrl ic;

	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_NULL);
	test_and_clear_bit(<A HREF="#FLG_CALL_SEND">FLG_CALL_SEND</A>, &amp;chanp-&gt;Flags);
	<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1)
		<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"STAT_DHUP"</FONT>, 0);
	ic.driver = chanp-&gt;cs-&gt;myid;
	ic.command = ISDN_STAT_DHUP;
	ic.arg = chanp-&gt;chan;
	chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
	<A HREF="#lli_shutdown_d">lli_shutdown_d</A>(fi, event, arg);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_setup_err">lli_setup_err</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;
	isdn_ctrl ic;

	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_WAIT_DRELEASE);
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="#FLG_LL_DCONN">FLG_LL_DCONN</A>, &amp;chanp-&gt;Flags)) {
		<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1)
			<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"STAT_DHUP"</FONT>, 0);
		<A HREF="#lli_deliver_cause">lli_deliver_cause</A>(chanp);
		ic.driver = chanp-&gt;cs-&gt;myid;
		ic.command = ISDN_STAT_DHUP;
		ic.arg = chanp-&gt;chan;
		chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
	}
	test_and_set_bit(<A HREF="#FLG_DISC_SEND">FLG_DISC_SEND</A>, &amp;chanp-&gt;Flags);	<FONT COLOR=#0000FF>/* DISCONN was sent from L3 */</FONT>
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_connect_err">lli_connect_err</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;
	isdn_ctrl ic;

	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_WAIT_DRELEASE);
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="#FLG_LL_DCONN">FLG_LL_DCONN</A>, &amp;chanp-&gt;Flags)) {
		<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1)
			<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"STAT_DHUP"</FONT>, 0);
		<A HREF="#lli_deliver_cause">lli_deliver_cause</A>(chanp);
		ic.driver = chanp-&gt;cs-&gt;myid;
		ic.command = ISDN_STAT_DHUP;
		ic.arg = chanp-&gt;chan;
		chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
	}
	test_and_set_bit(<A HREF="#FLG_DISC_SEND">FLG_DISC_SEND</A>, &amp;chanp-&gt;Flags);	<FONT COLOR=#0000FF>/* DISCONN was sent from L3 */</FONT>
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_got_dlrl">lli_got_dlrl</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;
	isdn_ctrl ic;

	chanp-&gt;data_open = 0;
	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_NULL);
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="#FLG_CONNECT_B">FLG_CONNECT_B</A>, &amp;chanp-&gt;Flags)) {
		chanp-&gt;b_st-&gt;lli.l4l3(chanp-&gt;b_st, <A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
	}
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="#FLG_LL_BCONN">FLG_LL_BCONN</A>, &amp;chanp-&gt;Flags)) {
		<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1)
			<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"STAT_BHUP"</FONT>, 0);
		ic.driver = chanp-&gt;cs-&gt;myid;
		ic.command = ISDN_STAT_BHUP;
		ic.arg = chanp-&gt;chan;
		chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
	}
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="#FLG_START_B">FLG_START_B</A>, &amp;chanp-&gt;Flags))
		<A HREF="#release_b_st">release_b_st</A>(chanp);
	<FONT COLOR="#298C52">if</FONT> (chanp-&gt;leased) {
		ic.driver = chanp-&gt;cs-&gt;myid;
		ic.command = ISDN_STAT_CAUSE;
		ic.arg = chanp-&gt;chan;
		sprintf(ic.parm.num, <FONT COLOR="#FF0000">"L%02X%02X"</FONT>, 0, 0x2f);
		chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
		ic.driver = chanp-&gt;cs-&gt;myid;
		ic.command = ISDN_STAT_DHUP;
		ic.arg = chanp-&gt;chan;
		chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
		chanp-&gt;Flags = 0;
	} <FONT COLOR="#298C52">else</FONT> {
		<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="#FLG_LL_DCONN">FLG_LL_DCONN</A>, &amp;chanp-&gt;Flags)) {
			<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1)
				<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"STAT_DHUP"</FONT>, 0);
			<FONT COLOR="#298C52">if</FONT> (chanp-&gt;cs-&gt;protocol == ISDN_PTYPE_EURO) {
				chanp-&gt;proc-&gt;para.cause = 0x2f;
				chanp-&gt;proc-&gt;para.loc = 0;
			} <FONT COLOR="#298C52">else</FONT> {
				chanp-&gt;proc-&gt;para.cause = 0x70;
				chanp-&gt;proc-&gt;para.loc = 0;
			}
			<A HREF="#lli_deliver_cause">lli_deliver_cause</A>(chanp);
			ic.driver = chanp-&gt;cs-&gt;myid;
			ic.command = ISDN_STAT_DHUP;
			ic.arg = chanp-&gt;chan;
			chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
		}
		chanp-&gt;d_st-&gt;lli.l4l3(chanp-&gt;d_st, <A HREF="hisax.h.shtml#CC_DLRL">CC_DLRL</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, chanp-&gt;proc);
		chanp-&gt;Flags = 0;
		chanp-&gt;d_st-&gt;lli.l4l3(chanp-&gt;d_st, <A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
	}
	chanp-&gt;cs-&gt;cardmsg(chanp-&gt;cs, <A HREF="hisax.h.shtml#MDL_INFO_REL">MDL_INFO_REL</A>, (<FONT COLOR="#298C52">void</FONT> *) (<FONT COLOR="#298C52">long</FONT>)chanp-&gt;chan);
}

<FONT COLOR=#0000FF>/* *INDENT-OFF* */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">struct</FONT> FsmNode fnlist[] <A HREF="hisax.h.shtml#HISAX_INITDATA">HISAX_INITDATA</A> =
{
	{ST_NULL,		EV_DIAL,		<A HREF="#lli_prep_dialout">lli_prep_dialout</A>},
	{ST_NULL,		EV_RESUME,		<A HREF="#lli_prep_dialout">lli_prep_dialout</A>},
	{ST_NULL,		EV_SETUP_IND,		<A HREF="#lli_deliver_call">lli_deliver_call</A>},
	{ST_NULL,		EV_SHUTDOWN_D,		<A HREF="#lli_shutdown_d">lli_shutdown_d</A>},
	{ST_NULL,		EV_DLRL,		<A HREF="#lli_go_null">lli_go_null</A>},
	{ST_NULL,		EV_DLEST,		<A HREF="#lli_d_established">lli_d_established</A>},
	{ST_NULL,		EV_ESTABLISH,		<A HREF="#lli_establish_d">lli_establish_d</A>},
	{ST_OUT_WAIT_D,		EV_DLEST,		<A HREF="#lli_do_dialout">lli_do_dialout</A>},
	{ST_OUT_WAIT_D,		EV_DLRL,		<A HREF="#lli_no_dchan">lli_no_dchan</A>},
	{ST_OUT_WAIT_D,		EV_HANGUP,		<A HREF="#lli_no_dchan">lli_no_dchan</A>},
	{ST_IN_WAIT_D,		EV_DLEST,		<A HREF="#lli_do_action">lli_do_action</A>},
	{ST_IN_WAIT_D,		EV_DLRL,		<A HREF="#lli_no_dchan_in">lli_no_dchan_in</A>},
	{ST_IN_WAIT_D,		EV_ACCEPTD,		<A HREF="#lli_start_dchan">lli_start_dchan</A>},
	{ST_IN_WAIT_D,		EV_HANGUP,		<A HREF="#lli_start_dchan">lli_start_dchan</A>},
	{ST_OUT_DIAL,		EV_SETUP_CNF,		<A HREF="#lli_init_bchan_out">lli_init_bchan_out</A>},
	{ST_OUT_DIAL,		EV_HANGUP,		<A HREF="#lli_cancel_call">lli_cancel_call</A>},
	{ST_OUT_DIAL,		EV_DISCONNECT_IND,	<A HREF="#lli_received_d_disc">lli_received_d_disc</A>},
	{ST_OUT_DIAL,		EV_RELEASE_IND,		<A HREF="#lli_received_d_rel">lli_received_d_rel</A>},
	{ST_OUT_DIAL,		EV_RELEASE_CNF,		<A HREF="#lli_received_d_relcnf">lli_received_d_relcnf</A>},
	{ST_OUT_DIAL,		EV_NOSETUP_RSP,		<A HREF="#lli_no_setup_rsp">lli_no_setup_rsp</A>},
	{ST_OUT_DIAL,		EV_SETUP_ERR,		<A HREF="#lli_setup_err">lli_setup_err</A>},
	{ST_OUT_DIAL,		EV_DLRL,		<A HREF="#lli_got_dlrl">lli_got_dlrl</A>},
	{ST_IN_WAIT_LL,		EV_DLEST,		<A HREF="#lli_d_established">lli_d_established</A>},
	{ST_IN_WAIT_LL,		EV_DLRL,		<A HREF="#lli_d_released">lli_d_released</A>},
	{ST_IN_WAIT_LL,		EV_ACCEPTD,		<A HREF="#lli_start_dchan">lli_start_dchan</A>},
	{ST_IN_WAIT_LL,		EV_HANGUP,		<A HREF="#lli_start_dchan">lli_start_dchan</A>},
	{ST_IN_WAIT_LL,		EV_DISCONNECT_IND,	<A HREF="#lli_received_d_disc">lli_received_d_disc</A>},
	{ST_IN_WAIT_LL,		EV_RELEASE_IND,		<A HREF="#lli_received_d_rel">lli_received_d_rel</A>},
	{ST_IN_WAIT_LL,		EV_RELEASE_CNF,		<A HREF="#lli_received_d_relcnf">lli_received_d_relcnf</A>},
	{ST_IN_ALERT_SEND,	EV_SETUP_CMPL_IND,	<A HREF="#lli_init_bchan_in">lli_init_bchan_in</A>},
	{ST_IN_ALERT_SEND,	EV_ACCEPTD,		<A HREF="#lli_send_dconnect">lli_send_dconnect</A>},
	{ST_IN_ALERT_SEND,	EV_HANGUP,		<A HREF="#lli_send_d_disc">lli_send_d_disc</A>},
	{ST_IN_ALERT_SEND,	EV_DISCONNECT_IND,	<A HREF="#lli_received_d_disc">lli_received_d_disc</A>},
	{ST_IN_ALERT_SEND,	EV_RELEASE_IND,		<A HREF="#lli_received_d_rel">lli_received_d_rel</A>},
	{ST_IN_ALERT_SEND,	EV_RELEASE_CNF,		<A HREF="#lli_received_d_relcnf">lli_received_d_relcnf</A>},
	{ST_IN_ALERT_SEND,	EV_DLRL,		<A HREF="#lli_got_dlrl">lli_got_dlrl</A>},
	{ST_IN_WAIT_CONN_ACK,	EV_SETUP_CMPL_IND,	<A HREF="#lli_init_bchan_in">lli_init_bchan_in</A>},
	{ST_IN_WAIT_CONN_ACK,	EV_HANGUP,		<A HREF="#lli_send_d_disc">lli_send_d_disc</A>},
	{ST_IN_WAIT_CONN_ACK,	EV_DISCONNECT_IND,	<A HREF="#lli_received_d_disc">lli_received_d_disc</A>},
	{ST_IN_WAIT_CONN_ACK,	EV_RELEASE_IND,		<A HREF="#lli_received_d_rel">lli_received_d_rel</A>},
	{ST_IN_WAIT_CONN_ACK,	EV_RELEASE_CNF,		<A HREF="#lli_received_d_relcnf">lli_received_d_relcnf</A>},
	{ST_IN_WAIT_CONN_ACK,	EV_CONNECT_ERR,		<A HREF="#lli_connect_err">lli_connect_err</A>},
	{ST_IN_WAIT_CONN_ACK,	EV_DLRL,		<A HREF="#lli_got_dlrl">lli_got_dlrl</A>},
	{ST_WAIT_BCONN,		EV_BC_EST,		<A HREF="#lli_go_active">lli_go_active</A>},
	{ST_WAIT_BCONN,		EV_BC_REL,		<A HREF="#lli_send_d_disc">lli_send_d_disc</A>},
	{ST_WAIT_BCONN,		EV_HANGUP,		<A HREF="#lli_send_d_disc">lli_send_d_disc</A>},
	{ST_WAIT_BCONN,		EV_DISCONNECT_IND,	<A HREF="#lli_received_d_disc">lli_received_d_disc</A>},
	{ST_WAIT_BCONN,		EV_RELEASE_IND,		<A HREF="#lli_received_d_rel">lli_received_d_rel</A>},
	{ST_WAIT_BCONN,		EV_RELEASE_CNF,		<A HREF="#lli_received_d_relcnf">lli_received_d_relcnf</A>},
	{ST_WAIT_BCONN,		EV_DLRL,		<A HREF="#lli_got_dlrl">lli_got_dlrl</A>},
	{ST_WAIT_BCONN,		EV_CINF,		<A HREF="#lli_charge_info">lli_charge_info</A>},
	{ST_ACTIVE,		EV_CINF,		<A HREF="#lli_charge_info">lli_charge_info</A>},
	{ST_ACTIVE,		EV_BC_REL,		<A HREF="#lli_released_bchan">lli_released_bchan</A>},
	{ST_ACTIVE,		EV_SUSPEND,		<A HREF="#lli_suspend">lli_suspend</A>},
	{ST_ACTIVE,		EV_HANGUP,		<A HREF="#lli_disconn_bchan">lli_disconn_bchan</A>},
	{ST_ACTIVE,		EV_DISCONNECT_IND,	<A HREF="#lli_release_bchan">lli_release_bchan</A>},
	{ST_ACTIVE,		EV_RELEASE_CNF,		<A HREF="#lli_received_d_relcnf">lli_received_d_relcnf</A>},
	{ST_ACTIVE,		EV_RELEASE_IND,		<A HREF="#lli_received_d_rel">lli_received_d_rel</A>},
	{ST_ACTIVE,		EV_DLRL,		<A HREF="#lli_got_dlrl">lli_got_dlrl</A>},
	{ST_WAIT_BRELEASE,	EV_BC_REL,		<A HREF="#lli_send_d_disc">lli_send_d_disc</A>},
	{ST_WAIT_BRELEASE,	EV_DISCONNECT_IND,	<A HREF="#lli_received_d_disc">lli_received_d_disc</A>},
	{ST_WAIT_BRELEASE,	EV_RELEASE_CNF,		<A HREF="#lli_received_d_relcnf">lli_received_d_relcnf</A>},
	{ST_WAIT_BRELEASE,	EV_RELEASE_IND,		<A HREF="#lli_received_d_rel">lli_received_d_rel</A>},
	{ST_WAIT_BRELEASE,	EV_DLRL,		<A HREF="#lli_got_dlrl">lli_got_dlrl</A>},
	{ST_WAIT_BREL_DISC,	EV_BC_REL,		<A HREF="#lli_received_d_disc">lli_received_d_disc</A>},
	{ST_WAIT_BREL_DISC,	EV_RELEASE_CNF,		<A HREF="#lli_received_d_relcnf">lli_received_d_relcnf</A>},
	{ST_WAIT_BREL_DISC,	EV_RELEASE_IND,		<A HREF="#lli_received_d_rel">lli_received_d_rel</A>},
	{ST_WAIT_BREL_DISC,	EV_DLRL,		<A HREF="#lli_got_dlrl">lli_got_dlrl</A>},
	{ST_WAIT_DCOMMAND,	EV_HANGUP,		<A HREF="#lli_send_d_disc">lli_send_d_disc</A>},
	{ST_WAIT_DCOMMAND,	EV_DISCONNECT_IND,	<A HREF="#lli_received_d_disc">lli_received_d_disc</A>},
	{ST_WAIT_DCOMMAND,	EV_RELEASE_CNF,		<A HREF="#lli_received_d_relcnf">lli_received_d_relcnf</A>},
	{ST_WAIT_DCOMMAND,	EV_RELEASE_IND,		<A HREF="#lli_received_d_rel">lli_received_d_rel</A>},
	{ST_WAIT_DCOMMAND,	EV_DLRL,		<A HREF="#lli_got_dlrl">lli_got_dlrl</A>},
	{ST_WAIT_DRELEASE,	EV_RELEASE_IND,		<A HREF="#lli_timeout_d">lli_timeout_d</A>},
	{ST_WAIT_DRELEASE,	EV_RELEASE_CNF,		<A HREF="#lli_timeout_d">lli_timeout_d</A>},
	{ST_WAIT_DRELEASE,	EV_RELEASE_ERR,		<A HREF="#lli_timeout_d">lli_timeout_d</A>},
	{ST_WAIT_DRELEASE,	EV_DIAL,		<A HREF="#lli_no_dchan_ready">lli_no_dchan_ready</A>},
	{ST_WAIT_DRELEASE,	EV_DLRL,		<A HREF="#lli_got_dlrl">lli_got_dlrl</A>},
	{ST_WAIT_D_REL_CNF,	EV_RELEASE_CNF,		<A HREF="#lli_timeout_d">lli_timeout_d</A>},
	{ST_WAIT_D_REL_CNF,	EV_RELEASE_ERR,		<A HREF="#lli_timeout_d">lli_timeout_d</A>},
<FONT COLOR=#0000FF>/* ETS 300-104 16.1 */</FONT>
	{ST_WAIT_D_REL_CNF,     EV_RELEASE_IND,         <A HREF="#lli_timeout_d">lli_timeout_d</A>},
	{ST_WAIT_D_REL_CNF,	EV_DIAL,		<A HREF="#lli_no_dchan_ready">lli_no_dchan_ready</A>},
	{ST_WAIT_D_REL_CNF,	EV_DLRL,		<A HREF="#lli_got_dlrl">lli_got_dlrl</A>},
	{ST_WAIT_DSHUTDOWN,	EV_DLRL,		<A HREF="#lli_go_null">lli_go_null</A>},
	{ST_WAIT_DSHUTDOWN,	EV_DLEST,		<A HREF="#lli_d_established">lli_d_established</A>},
	{ST_WAIT_DSHUTDOWN,	EV_DIAL,		<A HREF="#lli_prep_dialout">lli_prep_dialout</A>},
	{ST_WAIT_DSHUTDOWN,	EV_RESUME,		<A HREF="#lli_prep_dialout">lli_prep_dialout</A>},
	{ST_WAIT_DSHUTDOWN,	EV_SETUP_IND,		<A HREF="#lli_deliver_call">lli_deliver_call</A>},
};
<FONT COLOR=#0000FF>/* *INDENT-ON* */</FONT>


<FONT COLOR=#A521F7>#define</FONT> <A NAME="FNCOUNT">FNCOUNT</A> (<FONT COLOR="#298C52">sizeof</FONT>(fnlist)/<FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> FsmNode))

<A NAME="HISAX_INITFUNC">HISAX_INITFUNC</A>(<FONT COLOR="#298C52">void</FONT>
CallcNew(<FONT COLOR="#298C52">void</FONT>))
{
	callcfsm.state_count = <A HREF="#STATE_COUNT">STATE_COUNT</A>;
	callcfsm.event_count = <A HREF="#EVENT_COUNT">EVENT_COUNT</A>;
	callcfsm.strEvent = strEvent;
	callcfsm.strState = strState;
	FsmNew(&amp;callcfsm, fnlist, <A HREF="#FNCOUNT">FNCOUNT</A>);
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="CallcFree">CallcFree</A>(<FONT COLOR="#298C52">void</FONT>)
{
	<A HREF="fsm.c.shtml#FsmFree">FsmFree</A>(&amp;callcfsm);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="release_b_st">release_b_st</A>(<FONT COLOR="#298C52">struct</FONT> Channel *chanp)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = chanp-&gt;b_st;

	chanp-&gt;bcs-&gt;BC_Close(chanp-&gt;bcs);
	<FONT COLOR="#298C52">switch</FONT> (chanp-&gt;l2_active_protocol) {
		<FONT COLOR="#298C52">case</FONT> (ISDN_PROTO_L2_X75I):
			<A HREF="isdnl2.c.shtml#releasestack_isdnl2">releasestack_isdnl2</A>(st);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (ISDN_PROTO_L2_HDLC):
		<FONT COLOR="#298C52">case</FONT> (ISDN_PROTO_L2_TRANS):
		<FONT COLOR="#298C52">case</FONT> (ISDN_PROTO_L2_MODEM):
			<A HREF="isdnl2.c.shtml#releasestack_transl2">releasestack_transl2</A>(st);
			<FONT COLOR="#298C52">break</FONT>;
	}
}

<FONT COLOR="#298C52">struct</FONT> Channel
*<A NAME="selectfreechannel">selectfreechannel</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st)
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = st-&gt;l1.hardware;
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = st-&gt;lli.userdata;
	<FONT COLOR="#298C52">int</FONT> i;

	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_TWO_DCHAN">FLG_TWO_DCHAN</A>, &amp;cs-&gt;HW_Flags))
		i=1;
	<FONT COLOR="#298C52">else</FONT>
		i=0;
	<FONT COLOR="#298C52">while</FONT> (i&lt;2) {
		<FONT COLOR="#298C52">if</FONT> (chanp-&gt;fi.state == ST_NULL)
			<FONT COLOR="#298C52">return</FONT> (chanp);
		chanp++;
		i++;
	}		
	<FONT COLOR="#298C52">return</FONT> (NULL);
}

<FONT COLOR="#298C52">int</FONT>
<A NAME="is_activ">is_activ</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st)
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = st-&gt;l1.hardware;
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = st-&gt;lli.userdata;
	<FONT COLOR="#298C52">int</FONT> i;

	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_TWO_DCHAN">FLG_TWO_DCHAN</A>, &amp;cs-&gt;HW_Flags))
		i=1;
	<FONT COLOR="#298C52">else</FONT>
		i=0;
	<FONT COLOR="#298C52">while</FONT> (i&lt;2) {
		<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="#FLG_ESTAB_D">FLG_ESTAB_D</A>, &amp;chanp-&gt;Flags))
			<FONT COLOR="#298C52">return</FONT> (1);
		chanp++;
		i++;
	}		
	<FONT COLOR="#298C52">return</FONT> (0);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="dchan_l3l4">dchan_l3l4</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> l3_process *pc = arg;
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = st-&gt;l1.hardware;
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp;
	<FONT COLOR="#298C52">int</FONT> event;
	<FONT COLOR="#298C52">char</FONT> tmp[64], tm[32];


	<FONT COLOR="#298C52">switch</FONT> (pr) {
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_ESTABLISH">DL_ESTABLISH</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
			event = EV_DLEST;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
			event = EV_DLRL;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">default</FONT>:
			event = -1;
			<FONT COLOR="#298C52">break</FONT>;
	}
	<FONT COLOR="#298C52">if</FONT> (event &gt;= 0) {
		<FONT COLOR="#298C52">int</FONT> i;
		
		chanp = st-&gt;lli.userdata;
		<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_TWO_DCHAN">FLG_TWO_DCHAN</A>, &amp;cs-&gt;HW_Flags))
			i = 1;
		<FONT COLOR="#298C52">else</FONT>
			i = 0;
		<FONT COLOR="#298C52">while</FONT> (i &lt; 2) {
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;chanp-&gt;fi, event, NULL);
			chanp++;
			i++;
		}
		<FONT COLOR="#298C52">return</FONT>;
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (pr == (<A HREF="hisax.h.shtml#CC_SETUP">CC_SETUP</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>)) {
		<FONT COLOR="#298C52">if</FONT> (!(chanp = <A HREF="#selectfreechannel">selectfreechannel</A>(pc-&gt;st))) {
			pc-&gt;st-&gt;lli.l4l3(pc-&gt;st, <A HREF="hisax.h.shtml#CC_DLRL">CC_DLRL</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, pc);
		} <FONT COLOR="#298C52">else</FONT> {
			chanp-&gt;proc = pc;
			pc-&gt;chan = chanp;
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;chanp-&gt;fi, EV_SETUP_IND, NULL);
		}
		<FONT COLOR="#298C52">return</FONT>;
	}
	chanp = pc-&gt;chan;
	<FONT COLOR="#298C52">switch</FONT> (pr) {
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#CC_DISCONNECT">CC_DISCONNECT</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;chanp-&gt;fi, EV_DISCONNECT_IND, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#CC_RELEASE">CC_RELEASE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;chanp-&gt;fi, EV_RELEASE_CNF, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#CC_SUSPEND">CC_SUSPEND</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;chanp-&gt;fi, EV_RELEASE_CNF, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#CC_RESUME">CC_RESUME</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;chanp-&gt;fi, EV_SETUP_CNF, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#CC_RESUME_ERR">CC_RESUME_ERR</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;chanp-&gt;fi, EV_RELEASE_CNF, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#CC_RELEASE">CC_RELEASE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;chanp-&gt;fi, EV_RELEASE_IND, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#CC_SETUP_COMPL">CC_SETUP_COMPL</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;chanp-&gt;fi, EV_SETUP_CMPL_IND, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#CC_SETUP">CC_SETUP</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;chanp-&gt;fi, EV_SETUP_CNF, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#CC_CHARGE">CC_CHARGE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;chanp-&gt;fi, EV_CINF, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#CC_NOSETUP_RSP">CC_NOSETUP_RSP</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;chanp-&gt;fi, EV_NOSETUP_RSP, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#CC_SETUP_ERR">CC_SETUP_ERR</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;chanp-&gt;fi, EV_SETUP_ERR, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#CC_CONNECT_ERR">CC_CONNECT_ERR</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;chanp-&gt;fi, EV_CONNECT_ERR, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#CC_RELEASE_ERR">CC_RELEASE_ERR</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;chanp-&gt;fi, EV_RELEASE_ERR, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#CC_PROCEEDING">CC_PROCEEDING</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#CC_ALERTING">CC_ALERTING</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">default</FONT>:
			<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 0x800) {
				<A HREF="fsm.c.shtml#jiftime">jiftime</A>(tm, jiffies);
				sprintf(tmp, <FONT COLOR="#FF0000">"%s Channel %d L3-&gt;L4 unknown primitiv %d\n"</FONT>,
					tm, chanp-&gt;chan, pr);
				<A HREF="isdnl1.c.shtml#HiSax_putstatus">HiSax_putstatus</A>(chanp-&gt;cs, tmp);
			}
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="init_d_st">init_d_st</A>(<FONT COLOR="#298C52">struct</FONT> Channel *chanp)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = chanp-&gt;d_st;
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = chanp-&gt;cs;
	<FONT COLOR="#298C52">char</FONT> tmp[128];

	<A HREF="isdnl1.c.shtml#HiSax_addlist">HiSax_addlist</A>(cs, st);
	<A HREF="isdnl1.c.shtml#setstack_HiSax">setstack_HiSax</A>(st, cs);
	st-&gt;l2.sap = 0;
	st-&gt;l2.tei = -1;
	st-&gt;l2.flag = 0;
	test_and_set_bit(<A HREF="hisax.h.shtml#FLG_MOD128">FLG_MOD128</A>, &amp;st-&gt;l2.flag);
	test_and_set_bit(<A HREF="hisax.h.shtml#FLG_LAPD">FLG_LAPD</A>, &amp;st-&gt;l2.flag);
	test_and_set_bit(<A HREF="hisax.h.shtml#FLG_ORIG">FLG_ORIG</A>, &amp;st-&gt;l2.flag);
	st-&gt;l2.maxlen = <A HREF="hisax.h.shtml#MAX_DFRAME_LEN">MAX_DFRAME_LEN</A>;
	st-&gt;l2.window = 1;
	st-&gt;l2.T200 = 1000;	<FONT COLOR=#0000FF>/* 1000 milliseconds  */</FONT>
	st-&gt;l2.N200 = 3;	<FONT COLOR=#0000FF>/* try 3 times        */</FONT>
	<FONT COLOR="#298C52">if</FONT> (st-&gt;protocol == ISDN_PTYPE_1TR6)
		st-&gt;l2.T203 = 10000;	<FONT COLOR=#0000FF>/* 10000 milliseconds */</FONT>
	<FONT COLOR="#298C52">else</FONT>
		st-&gt;l2.T203 = 10000;	<FONT COLOR=#0000FF>/* 5000 milliseconds  */</FONT>
	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_TWO_DCHAN">FLG_TWO_DCHAN</A>, &amp;cs-&gt;HW_Flags))
		sprintf(tmp, <FONT COLOR="#FF0000">"DCh%d Q.921"</FONT>, chanp-&gt;chan);
	<FONT COLOR="#298C52">else</FONT>
		sprintf(tmp, <FONT COLOR="#FF0000">"DCh Q.921"</FONT>);
	<A HREF="isdnl2.c.shtml#setstack_isdnl2">setstack_isdnl2</A>(st, tmp);
	<A HREF="isdnl3.c.shtml#setstack_l3dc">setstack_l3dc</A>(st, chanp);
	st-&gt;lli.userdata = chanp;
	st-&gt;lli.l2writewakeup = NULL;
	st-&gt;l3.l3l4 = <A HREF="#dchan_l3l4">dchan_l3l4</A>;
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="callc_debug">callc_debug</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">char</FONT> *s)
{
	<FONT COLOR="#298C52">char</FONT> str[80], tm[32];
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = fi-&gt;userdata;

	<A HREF="fsm.c.shtml#jiftime">jiftime</A>(tm, jiffies);
	sprintf(str, <FONT COLOR="#FF0000">"%s Channel %d callc %s\n"</FONT>, tm, chanp-&gt;chan, s);
	<A HREF="isdnl1.c.shtml#HiSax_putstatus">HiSax_putstatus</A>(chanp-&gt;cs, str);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#dummy_pstack">dummy_pstack</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> pr, <FONT COLOR="#298C52">void</FONT> *arg) {
	printk(KERN_WARNING"call to <A HREF="#dummy_pstack">dummy_pstack</A> pr=%04x arg %lx\n", pr, (<FONT COLOR="#298C52">long</FONT>)arg);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="init_PStack">init_PStack</A>(<FONT COLOR="#298C52">struct</FONT> PStack **stp) {
	*stp = kmalloc(<FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> PStack), GFP_ATOMIC);
	(*stp)-&gt;next = NULL;
	(*stp)-&gt;l1.l1l2 = <A HREF="#dummy_pstack">dummy_pstack</A>;
	(*stp)-&gt;l1.l1hw = <A HREF="#dummy_pstack">dummy_pstack</A>;
	(*stp)-&gt;l1.l1tei = <A HREF="#dummy_pstack">dummy_pstack</A>;
	(*stp)-&gt;l2.l2tei = <A HREF="#dummy_pstack">dummy_pstack</A>;
	(*stp)-&gt;l2.l2l1 = <A HREF="#dummy_pstack">dummy_pstack</A>;
	(*stp)-&gt;l2.l2l3 = <A HREF="#dummy_pstack">dummy_pstack</A>;
	(*stp)-&gt;l3.l3l2 = <A HREF="#dummy_pstack">dummy_pstack</A>;
	(*stp)-&gt;l3.l3l4 = <A HREF="#dummy_pstack">dummy_pstack</A>;
	(*stp)-&gt;lli.l4l3 = <A HREF="#dummy_pstack">dummy_pstack</A>;
	(*stp)-&gt;ma.layer = <A HREF="#dummy_pstack">dummy_pstack</A>;
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="init_chan">init_chan</A>(<FONT COLOR="#298C52">int</FONT> chan, <FONT COLOR="#298C52">struct</FONT> IsdnCardState *csta)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = csta-&gt;channel + chan;

	chanp-&gt;cs = csta;
	chanp-&gt;bcs = csta-&gt;bcs + chan;
	chanp-&gt;chan = chan;
	chanp-&gt;incoming = 0;
	chanp-&gt;debug = 0;
	chanp-&gt;Flags = 0;
	chanp-&gt;leased = 0;
	<A HREF="#init_PStack">init_PStack</A>(&amp;chanp-&gt;b_st);
	chanp-&gt;b_st-&gt;l1.delay = <A HREF="#DEFAULT_B_DELAY">DEFAULT_B_DELAY</A>;
	chanp-&gt;fi.fsm = &amp;callcfsm;
	chanp-&gt;fi.state = ST_NULL;
	chanp-&gt;fi.debug = 0;
	chanp-&gt;fi.userdata = chanp;
	chanp-&gt;fi.printdebug = <A HREF="#callc_debug">callc_debug</A>;
	<A HREF="fsm.c.shtml#FsmInitTimer">FsmInitTimer</A>(&amp;chanp-&gt;fi, &amp;chanp-&gt;dial_timer);
	<A HREF="fsm.c.shtml#FsmInitTimer">FsmInitTimer</A>(&amp;chanp-&gt;fi, &amp;chanp-&gt;drel_timer);
	<FONT COLOR="#298C52">if</FONT> (!chan || test_bit(<A HREF="hisax.h.shtml#FLG_TWO_DCHAN">FLG_TWO_DCHAN</A>, &amp;csta-&gt;HW_Flags)) {
		<A HREF="#init_PStack">init_PStack</A>(&amp;chanp-&gt;d_st);
		<FONT COLOR="#298C52">if</FONT> (chan)
			csta-&gt;channel-&gt;d_st-&gt;next = chanp-&gt;d_st;
		chanp-&gt;d_st-&gt;next = NULL;
		<A HREF="#init_d_st">init_d_st</A>(chanp);
	} <FONT COLOR="#298C52">else</FONT> {
		chanp-&gt;d_st = csta-&gt;channel-&gt;d_st;
	}
	chanp-&gt;data_open = 0;
}

<FONT COLOR="#298C52">int</FONT>
<A NAME="CallcNewChan">CallcNewChan</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *csta)
{
	chancount += 2;
	<A HREF="#init_chan">init_chan</A>(0, csta);
	<A HREF="#init_chan">init_chan</A>(1, csta);
	printk(KERN_INFO <FONT COLOR="#FF0000">"HiSax: 2 channels added\n"</FONT>);
	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_PTP">FLG_PTP</A>, &amp;csta-&gt;channel-&gt;d_st-&gt;l2.flag)) {
		printk(KERN_INFO <FONT COLOR="#FF0000">"LAYER2 WATCHING ESTABLISH\n"</FONT>);
	test_and_set_bit(<A HREF="#FLG_START_D">FLG_START_D</A>, &amp;csta-&gt;channel-&gt;Flags);
	csta-&gt;channel-&gt;d_st-&gt;lli.l4l3(csta-&gt;channel-&gt;d_st,
		<A HREF="hisax.h.shtml#DL_ESTABLISH">DL_ESTABLISH</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
	}
	<FONT COLOR="#298C52">return</FONT> (2);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="release_d_st">release_d_st</A>(<FONT COLOR="#298C52">struct</FONT> Channel *chanp)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = chanp-&gt;d_st;

	<FONT COLOR="#298C52">if</FONT> (!st)
		<FONT COLOR="#298C52">return</FONT>;
	<A HREF="isdnl2.c.shtml#releasestack_isdnl2">releasestack_isdnl2</A>(st);
	<A HREF="isdnl3.c.shtml#releasestack_isdnl3">releasestack_isdnl3</A>(st);
	<A HREF="isdnl1.c.shtml#HiSax_rmlist">HiSax_rmlist</A>(st-&gt;l1.hardware, st);
	kfree(st);
	chanp-&gt;d_st = NULL;
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="CallcFreeChan">CallcFreeChan</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *csta)
{
	<FONT COLOR="#298C52">int</FONT> i;

	<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; 2; i++) {
		<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;csta-&gt;channel[i].drel_timer, 74);
		<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;csta-&gt;channel[i].dial_timer, 75);
		<FONT COLOR="#298C52">if</FONT> (i || test_bit(<A HREF="hisax.h.shtml#FLG_TWO_DCHAN">FLG_TWO_DCHAN</A>, &amp;csta-&gt;HW_Flags))
			<A HREF="#release_d_st">release_d_st</A>(csta-&gt;channel + i);
		<FONT COLOR="#298C52">if</FONT> (csta-&gt;channel[i].b_st) {
			<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="#FLG_START_B">FLG_START_B</A>, &amp;csta-&gt;channel[i].Flags))
				<A HREF="#release_b_st">release_b_st</A>(csta-&gt;channel + i);
			kfree(csta-&gt;channel[i].b_st);
			csta-&gt;channel[i].b_st = NULL;
		} <FONT COLOR="#298C52">else</FONT>
			printk(KERN_WARNING <FONT COLOR="#FF0000">"CallcFreeChan b_st ch%d allready freed\n"</FONT>, i);
		<FONT COLOR="#298C52">if</FONT> (i || test_bit(<A HREF="hisax.h.shtml#FLG_TWO_DCHAN">FLG_TWO_DCHAN</A>, &amp;csta-&gt;HW_Flags)) {
			<A HREF="#release_d_st">release_d_st</A>(csta-&gt;channel + i);
		} <FONT COLOR="#298C52">else</FONT>
			csta-&gt;channel[i].d_st = NULL;
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lldata_handler">lldata_handler</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = (<FONT COLOR="#298C52">struct</FONT> Channel *) st-&gt;lli.userdata;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

	<FONT COLOR="#298C52">switch</FONT> (pr) {
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A>  | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
			<FONT COLOR="#298C52">if</FONT> (chanp-&gt;data_open)
				chanp-&gt;cs-&gt;iif.rcvcallb_skb(chanp-&gt;cs-&gt;myid, chanp-&gt;chan, skb);
			<FONT COLOR="#298C52">else</FONT> {
				dev_kfree_skb(skb);
			}
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_ESTABLISH">DL_ESTABLISH</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_ESTABLISH">DL_ESTABLISH</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;chanp-&gt;fi, EV_BC_EST, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;chanp-&gt;fi, EV_BC_REL, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">default</FONT>:
			printk(KERN_WARNING <FONT COLOR="#FF0000">"lldata_handler unknown primitive %d\n"</FONT>,
			       pr);
			<FONT COLOR="#298C52">break</FONT>;
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#lltrans_handler">lltrans_handler</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = (<FONT COLOR="#298C52">struct</FONT> Channel *) st-&gt;lli.userdata;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

	<FONT COLOR="#298C52">switch</FONT> (pr) {
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_DATA">PH_DATA</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
			<FONT COLOR="#298C52">if</FONT> (chanp-&gt;data_open)
				chanp-&gt;cs-&gt;iif.rcvcallb_skb(chanp-&gt;cs-&gt;myid, chanp-&gt;chan, skb);
			<FONT COLOR="#298C52">else</FONT> {
				<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"channel not open"</FONT>, 0);
				dev_kfree_skb(skb);
			}
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_ACTIVATE">PH_ACTIVATE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_ACTIVATE">PH_ACTIVATE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;chanp-&gt;fi, EV_BC_EST, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_DEACTIVATE">PH_DEACTIVATE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_DEACTIVATE">PH_DEACTIVATE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;chanp-&gt;fi, EV_BC_REL, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">default</FONT>:
			printk(KERN_WARNING <FONT COLOR="#FF0000">"lltrans_handler unknown primitive %d\n"</FONT>,
			       pr);
			<FONT COLOR="#298C52">break</FONT>;
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="ll_writewakeup">ll_writewakeup</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> len)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = st-&gt;lli.userdata;
	isdn_ctrl ic;

	ic.driver = chanp-&gt;cs-&gt;myid;
	ic.command = ISDN_STAT_BSENT;
	ic.arg = chanp-&gt;chan;
	ic.parm.length = len;
	chanp-&gt;cs-&gt;iif.statcallb(&amp;ic);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
<A NAME="init_b_st">init_b_st</A>(<FONT COLOR="#298C52">struct</FONT> Channel *chanp, <FONT COLOR="#298C52">int</FONT> incoming)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = chanp-&gt;b_st;
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = chanp-&gt;cs;
	<FONT COLOR="#298C52">char</FONT> tmp[128];

	st-&gt;l1.hardware = cs;
	chanp-&gt;bcs-&gt;mode = 2;
	<FONT COLOR="#298C52">switch</FONT> (chanp-&gt;l2_active_protocol) {
		<FONT COLOR="#298C52">case</FONT> (ISDN_PROTO_L2_X75I):
		<FONT COLOR="#298C52">case</FONT> (ISDN_PROTO_L2_HDLC):
			st-&gt;l1.mode = <A HREF="hisax.h.shtml#L1_MODE_HDLC">L1_MODE_HDLC</A>;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (ISDN_PROTO_L2_TRANS):
			st-&gt;l1.mode = <A HREF="hisax.h.shtml#L1_MODE_TRANS">L1_MODE_TRANS</A>;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (ISDN_PROTO_L2_MODEM):
			st-&gt;l1.mode = <A HREF="hisax.h.shtml#L1_MODE_MODEM">L1_MODE_MODEM</A>;
			<FONT COLOR="#298C52">break</FONT>;
	}
	<FONT COLOR="#298C52">if</FONT> (chanp-&gt;bcs-&gt;BC_SetStack(st, chanp-&gt;bcs))
		<FONT COLOR="#298C52">return</FONT> (-1);
	st-&gt;l2.flag = 0;
	test_and_set_bit(<A HREF="hisax.h.shtml#FLG_LAPB">FLG_LAPB</A>, &amp;st-&gt;l2.flag);
	st-&gt;l2.maxlen = <A HREF="hisax.h.shtml#MAX_DATA_SIZE">MAX_DATA_SIZE</A>;
	<FONT COLOR="#298C52">if</FONT> (!incoming)
		test_and_set_bit(<A HREF="hisax.h.shtml#FLG_ORIG">FLG_ORIG</A>, &amp;st-&gt;l2.flag);
	st-&gt;l2.T200 = 1000;	<FONT COLOR=#0000FF>/* 1000 milliseconds */</FONT>
	st-&gt;l2.window = 7;
	st-&gt;l2.N200 = 4;	<FONT COLOR=#0000FF>/* try 4 times       */</FONT>
	st-&gt;l2.T203 = 5000;	<FONT COLOR=#0000FF>/* 5000 milliseconds */</FONT>
	st-&gt;l3.debug = 0;
	<FONT COLOR="#298C52">switch</FONT> (chanp-&gt;l2_active_protocol) {
		<FONT COLOR="#298C52">case</FONT> (ISDN_PROTO_L2_X75I):
			sprintf(tmp, <FONT COLOR="#FF0000">"Ch%d X.75"</FONT>, chanp-&gt;chan);
			<A HREF="isdnl2.c.shtml#setstack_isdnl2">setstack_isdnl2</A>(st, tmp);
			<A HREF="isdnl3.c.shtml#setstack_l3bc">setstack_l3bc</A>(st, chanp);
			st-&gt;l2.l2l3 = <A HREF="#lldata_handler">lldata_handler</A>;
			st-&gt;lli.userdata = chanp;
			st-&gt;lli.l1writewakeup = NULL;
			st-&gt;lli.l2writewakeup = <A HREF="#ll_writewakeup">ll_writewakeup</A>;
			st-&gt;l2.l2m.debug = chanp-&gt;debug &amp; 16;
			st-&gt;l2.debug = chanp-&gt;debug &amp; 64;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (ISDN_PROTO_L2_HDLC):
		<FONT COLOR="#298C52">case</FONT> (ISDN_PROTO_L2_TRANS):
		<FONT COLOR="#298C52">case</FONT> (ISDN_PROTO_L2_MODEM):
			st-&gt;l1.l1l2 = <A HREF="#lltrans_handler">lltrans_handler</A>;
			st-&gt;lli.userdata = chanp;
			st-&gt;lli.l1writewakeup = <A HREF="#ll_writewakeup">ll_writewakeup</A>;
			<A HREF="isdnl2.c.shtml#setstack_transl2">setstack_transl2</A>(st);
			<A HREF="isdnl3.c.shtml#setstack_l3bc">setstack_l3bc</A>(st, chanp);
			<FONT COLOR="#298C52">break</FONT>;
	}
	<FONT COLOR="#298C52">if</FONT> (chanp-&gt;leased)
		st-&gt;l1.bc = chanp-&gt;chan &amp; 1;
	<FONT COLOR="#298C52">else</FONT>
		st-&gt;l1.bc = chanp-&gt;proc-&gt;para.bchannel - 1;
	<FONT COLOR="#298C52">return</FONT> (0);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="leased_l4l3">leased_l4l3</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = (<FONT COLOR="#298C52">struct</FONT> Channel *) st-&gt;lli.userdata;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

	<FONT COLOR="#298C52">switch</FONT> (pr) {
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"leased line d-channel DATA"</FONT>, 0);
			dev_kfree_skb(skb);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_ESTABLISH">DL_ESTABLISH</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			st-&gt;l2.l2l1(st, <A HREF="hisax.h.shtml#PH_ACTIVATE">PH_ACTIVATE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">default</FONT>:
			printk(KERN_WARNING <FONT COLOR="#FF0000">"transd_l4l3 unknown primitive %d\n"</FONT>,
			       pr);
			<FONT COLOR="#298C52">break</FONT>;
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="leased_l1l2">leased_l1l2</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = (<FONT COLOR="#298C52">struct</FONT> Channel *) st-&gt;lli.userdata;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">int</FONT> i,event = EV_DLRL;

	<FONT COLOR="#298C52">switch</FONT> (pr) {
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_DATA">PH_DATA</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
			<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"leased line d-channel DATA"</FONT>, 0);
			dev_kfree_skb(skb);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_ACTIVATE">PH_ACTIVATE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_ACTIVATE">PH_ACTIVATE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>):
			event = EV_DLEST;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_DEACTIVATE">PH_DEACTIVATE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_DEACTIVATE">PH_DEACTIVATE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>):
			<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_TWO_DCHAN">FLG_TWO_DCHAN</A>, &amp;chanp-&gt;cs-&gt;HW_Flags))
				i = 1;
			<FONT COLOR="#298C52">else</FONT>
				i = 0;
			<FONT COLOR="#298C52">while</FONT> (i &lt; 2) {
				<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;chanp-&gt;fi, event, NULL);
				chanp++;
				i++;
			}
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">default</FONT>:
			printk(KERN_WARNING
				<FONT COLOR="#FF0000">"transd_l1l2 unknown primitive %d\n"</FONT>, pr);
			<FONT COLOR="#298C52">break</FONT>;
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="channel_report">channel_report</A>(<FONT COLOR="#298C52">struct</FONT> Channel *chanp)
{
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#distr_debug">distr_debug</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *csta, <FONT COLOR="#298C52">int</FONT> debugflags)
{
	<FONT COLOR="#298C52">int</FONT> i;
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp = csta-&gt;channel;

	<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; 2; i++) {
		chanp[i].debug = debugflags;
		chanp[i].fi.debug = debugflags &amp; 2;
		chanp[i].d_st-&gt;l2.l2m.debug = debugflags &amp; 8;
		chanp[i].b_st-&gt;l2.l2m.debug = debugflags &amp; 0x10;
		chanp[i].d_st-&gt;l2.debug = debugflags &amp; 0x20;
		chanp[i].b_st-&gt;l2.debug = debugflags &amp; 0x40;
		chanp[i].d_st-&gt;l3.l3m.debug = debugflags &amp; 0x80;
		chanp[i].b_st-&gt;l3.l3m.debug = debugflags &amp; 0x100;
		chanp[i].b_st-&gt;ma.tei_m.debug = debugflags &amp; 0x200;
		chanp[i].b_st-&gt;ma.debug = debugflags &amp; 0x200;
		chanp[i].d_st-&gt;l1.l1m.debug = debugflags &amp; 0x1000;
	}
	csta-&gt;dlogflag = debugflags &amp; 4;
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="capi_debug">capi_debug</A>(<FONT COLOR="#298C52">struct</FONT> Channel *chanp, capi_msg *cm)
{
	<FONT COLOR="#298C52">char</FONT> tmp[256], tm[32];
	<FONT COLOR="#298C52">char</FONT> *t = tmp;

	<A HREF="fsm.c.shtml#jiftime">jiftime</A>(tm, jiffies);
	t += sprintf(tmp, <FONT COLOR="#FF0000">"%s Channel %d CAPIMSG"</FONT>, tm, chanp-&gt;chan);
	t += <A HREF="q931.c.shtml#QuickHex">QuickHex</A>(t, (u_char *)cm, (cm-&gt;Length&gt;50)? 50: cm-&gt;Length);
	t--;
	*t++ =<FONT COLOR="#FF0000">'\n'</FONT>;
	*t++ = 0;
	<A HREF="isdnl1.c.shtml#HiSax_putstatus">HiSax_putstatus</A>(chanp-&gt;cs, tmp);
}

<FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_got_fac_req">lli_got_fac_req</A>(<FONT COLOR="#298C52">struct</FONT> Channel *chanp, capi_msg *cm) {
	<FONT COLOR="#298C52">if</FONT> ((cm-&gt;para[0] != 3) || (cm-&gt;para[1] != 0))
		<FONT COLOR="#298C52">return</FONT>;
	<FONT COLOR="#298C52">if</FONT> (cm-&gt;para[2]&lt;3)
		<FONT COLOR="#298C52">return</FONT>;
	<FONT COLOR="#298C52">if</FONT> (cm-&gt;para[4] != 0)
		<FONT COLOR="#298C52">return</FONT>;
	<FONT COLOR="#298C52">switch</FONT>(cm-&gt;para[3]) {
		<FONT COLOR="#298C52">case</FONT> 4: <FONT COLOR=#0000FF>/* Suspend */</FONT>
			<FONT COLOR="#298C52">if</FONT> (cm-&gt;para[5]) {
				strncpy(chanp-&gt;setup.phone, &amp;cm-&gt;para[5], cm-&gt;para[5] +1);
				<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;chanp-&gt;fi, EV_SUSPEND, cm);
			}
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> 5: <FONT COLOR=#0000FF>/* Resume */</FONT>
			<FONT COLOR="#298C52">if</FONT> (cm-&gt;para[5]) {
				strncpy(chanp-&gt;setup.phone, &amp;cm-&gt;para[5], cm-&gt;para[5] +1);
				<FONT COLOR="#298C52">if</FONT> (chanp-&gt;fi.state == ST_NULL) {
					<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;chanp-&gt;fi, EV_RESUME, cm);
				} <FONT COLOR="#298C52">else</FONT> {
					<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;chanp-&gt;dial_timer, 72);
					<A HREF="fsm.c.shtml#FsmAddTimer">FsmAddTimer</A>(&amp;chanp-&gt;dial_timer, 80, EV_RESUME, cm, 73);
				}
			}
			<FONT COLOR="#298C52">break</FONT>;
	}
}

<FONT COLOR="#298C52">void</FONT>
<A HREF="#lli_got_manufacturer">lli_got_manufacturer</A>(<FONT COLOR="#298C52">struct</FONT> Channel *chanp, <FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, capi_msg *cm) {
	<FONT COLOR="#298C52">if</FONT> ((cs-&gt;typ == <A HREF="hisax.h.shtml#ISDN_CTYPE_ELSA">ISDN_CTYPE_ELSA</A>) || (cs-&gt;typ == <A HREF="hisax.h.shtml#ISDN_CTYPE_ELSA_PNP">ISDN_CTYPE_ELSA_PNP</A>) ||
		(cs-&gt;typ == <A HREF="hisax.h.shtml#ISDN_CTYPE_ELSA_PCI">ISDN_CTYPE_ELSA_PCI</A>)) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.elsa.MFlag) {
			cs-&gt;cardmsg(cs, <A HREF="hisax.h.shtml#CARD_AUX_IND">CARD_AUX_IND</A>, cm-&gt;para);
		}
	}	
}

<FONT COLOR="#298C52">int</FONT>
<A NAME="HiSax_command">HiSax_command</A>(isdn_ctrl * ic)
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *csta = <A HREF="#hisax_findcard">hisax_findcard</A>(ic-&gt;driver);
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp;
	<FONT COLOR="#298C52">char</FONT> tmp[128];
	<FONT COLOR="#298C52">int</FONT> i;
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> num;

	<FONT COLOR="#298C52">if</FONT> (!csta) {
		printk(KERN_ERR
		<FONT COLOR="#FF0000">"HiSax: if_command %d called with invalid driverId %d!\n"</FONT>,
		       ic-&gt;command, ic-&gt;driver);
		<FONT COLOR="#298C52">return</FONT> -ENODEV;
	}
	
	<FONT COLOR="#298C52">switch</FONT> (ic-&gt;command) {
		<FONT COLOR="#298C52">case</FONT> (ISDN_CMD_SETEAZ):
			chanp = csta-&gt;channel + ic-&gt;arg;
			<FONT COLOR="#298C52">break</FONT>;
		
		<FONT COLOR="#298C52">case</FONT> (ISDN_CMD_SETL2):
			chanp = csta-&gt;channel + (ic-&gt;arg &amp; 0xff);
			<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1) {
				sprintf(tmp, <FONT COLOR="#FF0000">"SETL2 card %d %ld"</FONT>, csta-&gt;cardnr + 1,
					ic-&gt;arg &gt;&gt; 8);
				<A HREF="#link_debug">link_debug</A>(chanp, tmp, 1);
			}
			chanp-&gt;l2_protocol = ic-&gt;arg &gt;&gt; 8;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (ISDN_CMD_DIAL):
			chanp = csta-&gt;channel + (ic-&gt;arg &amp; 0xff);
			<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1) {
				sprintf(tmp, <FONT COLOR="#FF0000">"DIAL %s -&gt; %s (%d,%d)"</FONT>,
					ic-&gt;parm.setup.eazmsn, ic-&gt;parm.setup.phone,
				 ic-&gt;parm.setup.si1, ic-&gt;parm.setup.si2);
				<A HREF="#link_debug">link_debug</A>(chanp, tmp, 1);
			}
			chanp-&gt;setup = ic-&gt;parm.setup;
			<FONT COLOR="#298C52">if</FONT> (!strcmp(chanp-&gt;setup.eazmsn, <FONT COLOR="#FF0000">"0"</FONT>))
				chanp-&gt;setup.eazmsn[0] = <FONT COLOR="#FF0000">'\0'</FONT>;
			<FONT COLOR=#0000FF>/* this solution is dirty and may be change, if
			 * we make a callreference based callmanager */</FONT>
			<FONT COLOR="#298C52">if</FONT> (chanp-&gt;fi.state == ST_NULL) {
				<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;chanp-&gt;fi, EV_DIAL, NULL);
			} <FONT COLOR="#298C52">else</FONT> {
				<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;chanp-&gt;dial_timer, 70);
				<A HREF="fsm.c.shtml#FsmAddTimer">FsmAddTimer</A>(&amp;chanp-&gt;dial_timer, 50, EV_DIAL, NULL, 71);
			}
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (ISDN_CMD_ACCEPTB):
			chanp = csta-&gt;channel + ic-&gt;arg;
			<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1)
				<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"ACCEPTB"</FONT>, 1);
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;chanp-&gt;fi, EV_ACCEPTB, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (ISDN_CMD_ACCEPTD):
			chanp = csta-&gt;channel + ic-&gt;arg;
			<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1)
				<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"ACCEPTD"</FONT>, 1);
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;chanp-&gt;fi, EV_ACCEPTD, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (ISDN_CMD_HANGUP):
			chanp = csta-&gt;channel + ic-&gt;arg;
			<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1)
				<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"HANGUP"</FONT>, 1);
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;chanp-&gt;fi, EV_HANGUP, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (CAPI_PUT_MESSAGE):
			chanp = csta-&gt;channel + ic-&gt;arg;
			<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 1)
				<A HREF="#capi_debug">capi_debug</A>(chanp, &amp;ic-&gt;parm.cmsg);
			<FONT COLOR="#298C52">if</FONT> (ic-&gt;parm.cmsg.Length &lt; 8)
				<FONT COLOR="#298C52">break</FONT>;
			<FONT COLOR="#298C52">switch</FONT>(ic-&gt;parm.cmsg.Command) {
				<FONT COLOR="#298C52">case</FONT> CAPI_FACILITY:
					<FONT COLOR="#298C52">if</FONT> (ic-&gt;parm.cmsg.Subcommand == CAPI_REQ)
						<A HREF="#lli_got_fac_req">lli_got_fac_req</A>(chanp, &amp;ic-&gt;parm.cmsg);
					<FONT COLOR="#298C52">break</FONT>;
				<FONT COLOR="#298C52">case</FONT> CAPI_MANUFACTURER:
					<FONT COLOR="#298C52">if</FONT> (ic-&gt;parm.cmsg.Subcommand == CAPI_REQ)
						<A HREF="#lli_got_manufacturer">lli_got_manufacturer</A>(chanp, csta, &amp;ic-&gt;parm.cmsg);
					<FONT COLOR="#298C52">break</FONT>;
				<FONT COLOR="#298C52">default</FONT>:
					<FONT COLOR="#298C52">break</FONT>;
			}
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (ISDN_CMD_LOCK):
			<A HREF="config.c.shtml#HiSax_mod_inc_use_count">HiSax_mod_inc_use_count</A>();
<FONT COLOR=#A521F7>#ifdef</FONT> MODULE
			<FONT COLOR="#298C52">if</FONT> (csta-&gt;channel[0].debug &amp; 0x400) {
				<A HREF="fsm.c.shtml#jiftime">jiftime</A>(tmp, jiffies);
				i = strlen(tmp);
				sprintf(tmp + i, <FONT COLOR="#FF0000">"   LOCK modcnt %lx\n"</FONT>, <A HREF="#MOD_USE_COUNT">MOD_USE_COUNT</A>);
				<A HREF="isdnl1.c.shtml#HiSax_putstatus">HiSax_putstatus</A>(csta, tmp);
			}
<FONT COLOR=#A521F7>#endif</FONT>				<FONT COLOR=#0000FF>/* MODULE */</FONT>
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (ISDN_CMD_UNLOCK):
			<A HREF="config.c.shtml#HiSax_mod_dec_use_count">HiSax_mod_dec_use_count</A>();
<FONT COLOR=#A521F7>#ifdef</FONT> MODULE
			<FONT COLOR="#298C52">if</FONT> (csta-&gt;channel[0].debug &amp; 0x400) {
				<A HREF="fsm.c.shtml#jiftime">jiftime</A>(tmp, jiffies);
				i = strlen(tmp);
				sprintf(tmp + i, <FONT COLOR="#FF0000">" UNLOCK modcnt %lx\n"</FONT>, <A HREF="#MOD_USE_COUNT">MOD_USE_COUNT</A>);
				<A HREF="isdnl1.c.shtml#HiSax_putstatus">HiSax_putstatus</A>(csta, tmp);
			}
<FONT COLOR=#A521F7>#endif</FONT>				<FONT COLOR=#0000FF>/* MODULE */</FONT>
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (ISDN_CMD_IOCTL):
			<FONT COLOR="#298C52">switch</FONT> (ic-&gt;arg) {
				<FONT COLOR="#298C52">case</FONT> (0):
					<A HREF="isdnl1.c.shtml#HiSax_reportcard">HiSax_reportcard</A>(csta-&gt;cardnr);
					<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; 2; i++)
						<A HREF="#channel_report">channel_report</A>(&amp;csta-&gt;channel[i]);
					<FONT COLOR="#298C52">break</FONT>;
				<FONT COLOR="#298C52">case</FONT> (1):
					num = *(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> *) ic-&gt;parm.num;
					<A HREF="#distr_debug">distr_debug</A>(csta, num);
					sprintf(tmp, <FONT COLOR="#FF0000">"debugging flags card %d set to %x\n"</FONT>,
						csta-&gt;cardnr + 1, num);
					<A HREF="isdnl1.c.shtml#HiSax_putstatus">HiSax_putstatus</A>(csta, tmp);
					printk(KERN_DEBUG <FONT COLOR="#FF0000">"HiSax: %s"</FONT>, tmp);
					<FONT COLOR="#298C52">break</FONT>;
				<FONT COLOR="#298C52">case</FONT> (2):
					num = *(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> *) ic-&gt;parm.num; 
					csta-&gt;channel[0].b_st-&gt;l1.delay = num;
					csta-&gt;channel[1].b_st-&gt;l1.delay = num;
					sprintf(tmp, <FONT COLOR="#FF0000">"delay card %d set to %d ms\n"</FONT>,
						csta-&gt;cardnr + 1, num);
					<A HREF="isdnl1.c.shtml#HiSax_putstatus">HiSax_putstatus</A>(csta, tmp);
					printk(KERN_DEBUG <FONT COLOR="#FF0000">"HiSax: %s"</FONT>, tmp);
					<FONT COLOR="#298C52">break</FONT>;
				<FONT COLOR="#298C52">case</FONT> (3):
					<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; *(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> *) ic-&gt;parm.num; i++)
						<A HREF="config.c.shtml#HiSax_mod_dec_use_count">HiSax_mod_dec_use_count</A>();
					<FONT COLOR="#298C52">break</FONT>;
				<FONT COLOR="#298C52">case</FONT> (4):
					<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; *(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> *) ic-&gt;parm.num; i++)
						<A HREF="config.c.shtml#HiSax_mod_inc_use_count">HiSax_mod_inc_use_count</A>();
					<FONT COLOR="#298C52">break</FONT>;
				<FONT COLOR="#298C52">case</FONT> (5):	<FONT COLOR=#0000FF>/* set card in leased mode */</FONT>
					num = *(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> *) ic-&gt;parm.num;
					<FONT COLOR="#298C52">if</FONT> ((num &lt;1) || (num &gt; 2)) {
						sprintf(tmp, <FONT COLOR="#FF0000">"Set LEASED wrong channel %d\n"</FONT>,
							num);
						<A HREF="isdnl1.c.shtml#HiSax_putstatus">HiSax_putstatus</A>(csta, tmp);
						printk(KERN_WARNING <FONT COLOR="#FF0000">"HiSax: %s"</FONT>, tmp);
					} <FONT COLOR="#298C52">else</FONT> {
						num--;
						chanp = csta-&gt;channel +num;
						chanp-&gt;leased = 1;
						sprintf(tmp, <FONT COLOR="#FF0000">"card %d channel %d set leased mode\n"</FONT>,
							csta-&gt;cardnr + 1, num + 1);
						<A HREF="isdnl1.c.shtml#HiSax_putstatus">HiSax_putstatus</A>(csta, tmp);
						chanp-&gt;d_st-&gt;l1.l1l2 = <A HREF="#leased_l1l2">leased_l1l2</A>;
						chanp-&gt;d_st-&gt;lli.l4l3 = <A HREF="#leased_l4l3">leased_l4l3</A>;
						chanp-&gt;d_st-&gt;lli.l4l3(chanp-&gt;d_st,
							<A HREF="hisax.h.shtml#DL_ESTABLISH">DL_ESTABLISH</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
					}
					<FONT COLOR="#298C52">break</FONT>;
				<FONT COLOR="#298C52">case</FONT> (6):	<FONT COLOR=#0000FF>/* set B-channel test loop */</FONT>
					num = *(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> *) ic-&gt;parm.num;
					<FONT COLOR="#298C52">if</FONT> (csta-&gt;stlist)
						csta-&gt;stlist-&gt;l2.l2l1(csta-&gt;stlist,
							<A HREF="hisax.h.shtml#PH_TESTLOOP">PH_TESTLOOP</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, (<FONT COLOR="#298C52">void</FONT> *) (<FONT COLOR="#298C52">long</FONT>)num);
					<FONT COLOR="#298C52">break</FONT>;
				<FONT COLOR="#298C52">case</FONT> (7):	<FONT COLOR=#0000FF>/* set card in PTP mode */</FONT>
					<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_TWO_DCHAN">FLG_TWO_DCHAN</A>, &amp;csta-&gt;HW_Flags)) {
						printk(KERN_ERR <FONT COLOR="#FF0000">"HiSax PTP mode only with one TEI possible\n"</FONT>);
					} <FONT COLOR="#298C52">else</FONT> {
						test_and_set_bit(<A HREF="hisax.h.shtml#FLG_PTP">FLG_PTP</A>, &amp;csta-&gt;channel[0].d_st-&gt;l2.flag);
						test_and_set_bit(<A HREF="hisax.h.shtml#FLG_FIXED_TEI">FLG_FIXED_TEI</A>, &amp;csta-&gt;channel[0].d_st-&gt;l2.flag);
						csta-&gt;channel[0].d_st-&gt;l2.tei = 0;
						sprintf(tmp, <FONT COLOR="#FF0000">"set card in PTP mode\n"</FONT>);
						<A HREF="isdnl1.c.shtml#HiSax_putstatus">HiSax_putstatus</A>(csta, tmp);
						printk(KERN_DEBUG <FONT COLOR="#FF0000">"HiSax: %s"</FONT>, tmp);
					}
					<FONT COLOR="#298C52">break</FONT>;
				<FONT COLOR="#298C52">case</FONT> (8):	<FONT COLOR=#0000FF>/* set card in FIXED TEI mode */</FONT>
					num = *(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> *) ic-&gt;parm.num;
					chanp = csta-&gt;channel + (num &amp; 1);
					num = num &gt;&gt;1;
					test_and_set_bit(<A HREF="hisax.h.shtml#FLG_FIXED_TEI">FLG_FIXED_TEI</A>, &amp;chanp-&gt;d_st-&gt;l2.flag);
					chanp-&gt;d_st-&gt;l2.tei = num;
					sprintf(tmp, <FONT COLOR="#FF0000">"set card in FIXED TEI (%d) mode\n"</FONT>, num);
					<A HREF="isdnl1.c.shtml#HiSax_putstatus">HiSax_putstatus</A>(csta, tmp);
					printk(KERN_DEBUG <FONT COLOR="#FF0000">"HiSax: %s"</FONT>, tmp);
					<FONT COLOR="#298C52">break</FONT>;
<FONT COLOR=#A521F7>#ifdef</FONT> MODULE
				<FONT COLOR="#298C52">case</FONT> (55):
					<A HREF="#MOD_USE_COUNT">MOD_USE_COUNT</A> = 0;
					<A HREF="config.c.shtml#HiSax_mod_inc_use_count">HiSax_mod_inc_use_count</A>();
					<FONT COLOR="#298C52">break</FONT>;
<FONT COLOR=#A521F7>#endif</FONT>				<FONT COLOR=#0000FF>/* MODULE */</FONT>
				<FONT COLOR="#298C52">case</FONT> (11):
					csta-&gt;debug = *(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> *) ic-&gt;parm.num;
					sprintf(tmp, <FONT COLOR="#FF0000">"l1 debugging flags card %d set to %x\n"</FONT>,
						csta-&gt;cardnr + 1, csta-&gt;debug);
					<A HREF="isdnl1.c.shtml#HiSax_putstatus">HiSax_putstatus</A>(cards[0].cs, tmp);
					printk(KERN_DEBUG <FONT COLOR="#FF0000">"HiSax: %s"</FONT>, tmp);
					<FONT COLOR="#298C52">break</FONT>;
				<FONT COLOR="#298C52">case</FONT> (13):
					csta-&gt;channel[0].d_st-&gt;l3.debug = *(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> *) ic-&gt;parm.num;
					csta-&gt;channel[1].d_st-&gt;l3.debug = *(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> *) ic-&gt;parm.num;
					sprintf(tmp, <FONT COLOR="#FF0000">"l3 debugging flags card %d set to %x\n"</FONT>,
						csta-&gt;cardnr + 1, *(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> *) ic-&gt;parm.num);
					<A HREF="isdnl1.c.shtml#HiSax_putstatus">HiSax_putstatus</A>(cards[0].cs, tmp);
					printk(KERN_DEBUG <FONT COLOR="#FF0000">"HiSax: %s"</FONT>, tmp);
					<FONT COLOR="#298C52">break</FONT>;
				<FONT COLOR="#298C52">default</FONT>:
					printk(KERN_DEBUG <FONT COLOR="#FF0000">"HiSax: invalid ioclt %d\n"</FONT>,
					       (<FONT COLOR="#298C52">int</FONT>) ic-&gt;arg);
					<FONT COLOR="#298C52">return</FONT> (-EINVAL);
			}
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">default</FONT>:
			<FONT COLOR="#298C52">break</FONT>;
	}

	<FONT COLOR="#298C52">return</FONT> (0);
}

<FONT COLOR="#298C52">int</FONT>
<A HREF="#HiSax_writebuf_skb">HiSax_writebuf_skb</A>(<FONT COLOR="#298C52">int</FONT> id, <FONT COLOR="#298C52">int</FONT> chan, <FONT COLOR="#298C52">int</FONT> ack, <FONT COLOR="#298C52">struct</FONT> sk_buff *skb)
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *csta = <A HREF="#hisax_findcard">hisax_findcard</A>(id);
	<FONT COLOR="#298C52">struct</FONT> Channel *chanp;
	<FONT COLOR="#298C52">struct</FONT> PStack *st;
	<FONT COLOR="#298C52">int</FONT> len = skb-&gt;len;
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT> flags;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *nskb;
	<FONT COLOR="#298C52">char</FONT> tmp[64];

	<FONT COLOR="#298C52">if</FONT> (!csta) {
		printk(KERN_ERR
		    <FONT COLOR="#FF0000">"HiSax: if_sendbuf called with invalid driverId!\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT> -ENODEV;
	}
	chanp = csta-&gt;channel + chan;
	st = chanp-&gt;b_st;
	<FONT COLOR="#298C52">if</FONT> (!chanp-&gt;data_open) {
		<A HREF="#link_debug">link_debug</A>(chanp, <FONT COLOR="#FF0000">"writebuf: channel not open"</FONT>, 1);
		<FONT COLOR="#298C52">return</FONT> -EIO;
	}
	<FONT COLOR="#298C52">if</FONT> (len &gt; <A HREF="hisax.h.shtml#MAX_DATA_SIZE">MAX_DATA_SIZE</A>) {
		sprintf(tmp, <FONT COLOR="#FF0000">"writebuf: packet too large (%d bytes)"</FONT>, len);
		printk(KERN_WARNING <FONT COLOR="#FF0000">"HiSax_%s !\n"</FONT>, tmp);
		<A HREF="#link_debug">link_debug</A>(chanp, tmp, 1);
		<FONT COLOR="#298C52">return</FONT> -EINVAL;
	}
	<FONT COLOR="#298C52">if</FONT> (len) {
		<FONT COLOR="#298C52">if</FONT> ((len + chanp-&gt;bcs-&gt;tx_cnt) &gt; <A HREF="hisax.h.shtml#MAX_DATA_MEM">MAX_DATA_MEM</A>) {
			<FONT COLOR=#0000FF>/* Must return 0 here, since this is not an error
			 * but a temporary lack of resources.
			 */</FONT>
			<FONT COLOR="#298C52">if</FONT> (chanp-&gt;debug &amp; 0x800) {
				sprintf(tmp, <FONT COLOR="#FF0000">"writebuf: no buffers for %d bytes"</FONT>, len);
				<A HREF="#link_debug">link_debug</A>(chanp, tmp, 1);
			}
			<FONT COLOR="#298C52">return</FONT> 0;
		}
		save_flags(flags);
		cli();
		nskb = skb_clone(skb, GFP_ATOMIC);
		<FONT COLOR="#298C52">if</FONT> (nskb) {
			<FONT COLOR="#298C52">if</FONT> (!ack)
				nskb-&gt;pkt_type = <A HREF="hisax.h.shtml#PACKET_NOACK">PACKET_NOACK</A>;
			<FONT COLOR="#298C52">if</FONT> (chanp-&gt;l2_active_protocol == ISDN_PROTO_L2_X75I)
				st-&gt;l3.l3l2(st, <A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, nskb);
			<FONT COLOR="#298C52">else</FONT> {
				chanp-&gt;bcs-&gt;tx_cnt += len;
				st-&gt;l2.l2l1(st, <A HREF="hisax.h.shtml#PH_DATA">PH_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, nskb);
			}
			dev_kfree_skb(skb);
		} <FONT COLOR="#298C52">else</FONT>
			len = 0;
		restore_flags(flags);
	}
	<FONT COLOR="#298C52">return</FONT> (len);
}
</BODY>

</HTML>
