<HTML>

<!-- Generated by c2html-1.0, Copyright 1998 by Dave Whittington -->
<HEAD>
<TITLE>hfc_2bds0.c</TITLE>
<!--#include virtual="/ssi/js.shtml" -->
<!--#include virtual="/ssi/buttondefs.shtml" -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<TABLE WIDTH="100%">
<TR>
<TD ALIGN=LEFT WIDTH="90"><!--#include virtual="/ssi/b_home.shtml" --></TD>
<TD ALIGN=RIGHT WIDTH="90"><!--#include virtual="/ssi/b_index.shtml" --></TD>
</TR>
</TABLE>
<CENTER><H1>hfc_2bds0.c</H1></CENTER>

<HR>
<PRE>
<FONT COLOR=#0000FF>/* $Id$
 *
 *  specific routines for CCD's HFC 2BDS0
 *
 * Author       Karsten Keil (keil@temic-ech.spacenet.de)
 *
 *
 * $Log$
 * Revision 1.4  1998/05/25 12:57:52  keil
 * HiSax golden code from certification, Don't use !!!
 * No leased lines, no X75, but many changes.
 *
 * Revision 1.3  1998/02/12 23:07:22  keil
 * change for 2.1.86 (removing FREE_READ/FREE_WRITE from [dev]_kfree_skb()
 *
 * Revision 1.2  1998/02/02 13:26:13  keil
 * New
 *
 *
 *
 */</FONT>
<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#__NO_VERSION__">__NO_VERSION__</A>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hisax.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hfc_2bds0.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isdnl1.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/interrupt.h&gt;
<FONT COLOR=#0000FF>/*
#define KDEBUG_DEF
#include "kdebug.h"
*/</FONT>

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#byteout">byteout</A>(addr,val) outb(val,addr)
<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#bytein">bytein</A>(addr) inb(addr)

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
dummyf(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char * data, <FONT COLOR="#298C52">int</FONT> size)
{
	printk(KERN_WARNING <FONT COLOR="#FF0000">"HiSax: hfcd dummy fifo called\n"</FONT>);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> u_char
ReadReg(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> data, u_char reg)
{
	<FONT COLOR="#298C52">register</FONT> u_char ret;

	<FONT COLOR="#298C52">if</FONT> (data) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.hfcD.cip != reg) { 
			cs-&gt;hw.hfcD.cip = reg;
			<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.hfcD.addr | 1, reg);
		}
		ret = <A HREF="asuscom.c.shtml#bytein">bytein</A>(cs-&gt;hw.hfcD.addr);
<FONT COLOR=#A521F7>#if</FONT> HFC_REG_DEBUG
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX_FIFO">L1_DEB_HSCX_FIFO</A> &amp;&amp; (data != 2)) {
			<FONT COLOR="#298C52">char</FONT> tmp[32];
			sprintf(tmp, <FONT COLOR="#FF0000">"t3c RD %02x %02x"</FONT>, reg, ret);
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
		}
<FONT COLOR=#A521F7>#endif</FONT>
	} <FONT COLOR="#298C52">else</FONT>
		ret = <A HREF="asuscom.c.shtml#bytein">bytein</A>(cs-&gt;hw.hfcD.addr | 1);
	<FONT COLOR="#298C52">return</FONT> (ret);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
WriteReg(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> data, u_char reg, u_char value)
{
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.hfcD.cip != reg) { 
		cs-&gt;hw.hfcD.cip = reg;
		<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.hfcD.addr | 1, reg);
	}
	<FONT COLOR="#298C52">if</FONT> (data)
		<A HREF="asuscom.c.shtml#byteout">byteout</A>(cs-&gt;hw.hfcD.addr, value);
<FONT COLOR=#A521F7>#if</FONT> HFC_REG_DEBUG
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX_FIFO">L1_DEB_HSCX_FIFO</A> &amp;&amp; (data != HFCD_DATA_NODEB)) {
		<FONT COLOR="#298C52">char</FONT> tmp[16];
		sprintf(tmp, <FONT COLOR="#FF0000">"t3c W%c %02x %02x"</FONT>, data ? <FONT COLOR="#FF0000">'D'</FONT> : <FONT COLOR="#FF0000">'C'</FONT>, reg, value);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	}
<FONT COLOR=#A521F7>#endif</FONT>
}

<FONT COLOR=#0000FF>/* Interface functions */</FONT>

<FONT COLOR="#298C52">static</FONT> u_char
readreghfcd(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char offset)
{
	<FONT COLOR="#298C52">return</FONT>(ReadReg(cs, HFCD_DATA, offset));
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
writereghfcd(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char offset, u_char value)
{
	WriteReg(cs, HFCD_DATA, offset, value);
}

<FONT COLOR="#298C52">void</FONT>
set_cs_func(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	cs-&gt;readisac = &amp;readreghfcd;
	cs-&gt;writeisac = &amp;writereghfcd;
	cs-&gt;readisacfifo = &amp;dummyf;
	cs-&gt;writeisacfifo = &amp;dummyf;
	cs-&gt;BC_Read_Reg = &amp;ReadReg;
	cs-&gt;BC_Write_Reg = &amp;WriteReg;
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">int</FONT>
WaitForBusy(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">int</FONT> to = 130;

	<FONT COLOR="#298C52">while</FONT> (!(ReadReg(cs, HFCD_DATA, HFCD_STAT) &amp; HFCD_BUSY) &amp;&amp; to) {
		udelay(1);
		to--;
	}
	<FONT COLOR="#298C52">if</FONT> (!to)
		printk(KERN_WARNING <FONT COLOR="#FF0000">"HiSax: WaitForBusy timeout\n"</FONT>);
	<FONT COLOR="#298C52">return</FONT> (to);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">int</FONT>
WaitNoBusy(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">long</FONT> flags;
	<FONT COLOR="#298C52">int</FONT> to = 130;

	<FONT COLOR="#298C52">while</FONT> ((ReadReg(cs, HFCD_STATUS, HFCD_STATUS) &amp; HFCD_BUSY) &amp;&amp; to) {
		save_flags(flags);
		sti();
		udelay(1);
		to--;
		restore_flags(flags);
	}
	<FONT COLOR="#298C52">if</FONT> (!to) 
		printk(KERN_WARNING <FONT COLOR="#FF0000">"HiSax: WaitNoBusy timeout\n"</FONT>);
	<FONT COLOR="#298C52">return</FONT> (to);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
SelFiFo(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char FiFo)
{
	u_char cip;
	<FONT COLOR="#298C52">long</FONT> flags;


	<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.hfcD.fifo == FiFo)
		<FONT COLOR="#298C52">return</FONT>(1);
	save_flags(flags);
	cli();
	<FONT COLOR="#298C52">switch</FONT>(FiFo) {
		<FONT COLOR="#298C52">case</FONT> 0: cip = HFCB_FIFO | HFCB_Z1 | HFCB_SEND | HFCB_B1;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> 1: cip = HFCB_FIFO | HFCB_Z1 | HFCB_REC | HFCB_B1;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> 2: cip = HFCB_FIFO | HFCB_Z1 | HFCB_SEND | HFCB_B2;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> 3: cip = HFCB_FIFO | HFCB_Z1 | HFCB_REC | HFCB_B2;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> 4: cip = HFCD_FIFO | HFCD_Z1 | HFCD_SEND;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> 5: cip = HFCD_FIFO | HFCD_Z1 | HFCD_REC;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">default</FONT>:
			restore_flags(flags);
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"SelFiFo Error"</FONT>);
			<FONT COLOR="#298C52">return</FONT>(0);
	}
	cs-&gt;hw.hfcD.fifo = FiFo;
	WaitNoBusy(cs);
	cs-&gt;BC_Write_Reg(cs, HFCD_DATA, cip, 0);
	sti();
	WaitForBusy(cs);
	restore_flags(flags);
	<FONT COLOR="#298C52">return</FONT>(2);
}
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
GetFreeFifoBytes_B(<FONT COLOR="#298C52">struct</FONT> BCState *bcs)
{
	<FONT COLOR="#298C52">int</FONT> s;

	<FONT COLOR="#298C52">if</FONT> (bcs-&gt;hw.hfc.f1 == bcs-&gt;hw.hfc.f2)
		<FONT COLOR="#298C52">return</FONT> (bcs-&gt;cs-&gt;hw.hfcD.bfifosize);
	s = bcs-&gt;hw.hfc.send[bcs-&gt;hw.hfc.f1] - bcs-&gt;hw.hfc.send[bcs-&gt;hw.hfc.f2];
	<FONT COLOR="#298C52">if</FONT> (s &lt;= 0)
		s += bcs-&gt;cs-&gt;hw.hfcD.bfifosize;
	s = bcs-&gt;cs-&gt;hw.hfcD.bfifosize - s;
	<FONT COLOR="#298C52">return</FONT> (s);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
GetFreeFifoBytes_D(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">int</FONT> s;

	<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.hfcD.f1 == cs-&gt;hw.hfcD.f2)
		<FONT COLOR="#298C52">return</FONT> (cs-&gt;hw.hfcD.dfifosize);
	s = cs-&gt;hw.hfcD.send[cs-&gt;hw.hfcD.f1] - cs-&gt;hw.hfcD.send[cs-&gt;hw.hfcD.f2];
	<FONT COLOR="#298C52">if</FONT> (s &lt;= 0)
		s += cs-&gt;hw.hfcD.dfifosize;
	s = cs-&gt;hw.hfcD.dfifosize - s;
	<FONT COLOR="#298C52">return</FONT> (s);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
ReadZReg(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char reg)
{
	<FONT COLOR="#298C52">int</FONT> val;

	WaitNoBusy(cs);
	val = 256 * ReadReg(cs, HFCD_DATA, reg | HFCB_Z_HIGH);
	WaitNoBusy(cs);
	val += ReadReg(cs, HFCD_DATA, reg | HFCB_Z_LOW);
	<FONT COLOR="#298C52">return</FONT> (val);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
hfc_sched_event(<FONT COLOR="#298C52">struct</FONT> BCState *bcs, <FONT COLOR="#298C52">int</FONT> event)
{
	bcs-&gt;event |= 1 &lt;&lt; event;
	queue_task(&amp;bcs-&gt;tqueue, &amp;tq_immediate);
	mark_bh(IMMEDIATE_BH);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">struct</FONT> sk_buff
*hfc_empty_fifo(<FONT COLOR="#298C52">struct</FONT> BCState *bcs, <FONT COLOR="#298C52">int</FONT> count)
{
	u_char *ptr;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = bcs-&gt;cs;
	<FONT COLOR="#298C52">int</FONT> idx;
	<FONT COLOR="#298C52">int</FONT> chksum;
	<FONT COLOR="#298C52">long</FONT> flags;
	u_char stat, cip;
	<FONT COLOR="#298C52">char</FONT> tmp[64];
	
	<FONT COLOR="#298C52">if</FONT> ((cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) &amp;&amp; !(cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX_FIFO">L1_DEB_HSCX_FIFO</A>))
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"hfc_empty_fifo"</FONT>);
	idx = 0;
	save_flags(flags);
	<FONT COLOR="#298C52">if</FONT> (count &gt; <A HREF="hisax.h.shtml#HSCX_BUFMAX">HSCX_BUFMAX</A> + 3) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_WARN">L1_DEB_WARN</A>)
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"hfc_empty_fifo: incoming packet too large"</FONT>);
		cip = HFCB_FIFO | HFCB_FIFO_OUT | HFCB_REC | HFCB_CHANNEL(bcs-&gt;channel);
		<FONT COLOR="#298C52">while</FONT> (idx++ &lt; count) {
			cli();
			WaitNoBusy(cs);
			ReadReg(cs, HFCD_DATA_NODEB, cip);
			sti();
		}
		skb = NULL;
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (count &lt; 4) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_WARN">L1_DEB_WARN</A>)
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"hfc_empty_fifo: incoming packet too small"</FONT>);
		cip = HFCB_FIFO | HFCB_FIFO_OUT | HFCB_REC | HFCB_CHANNEL(bcs-&gt;channel);
		cli();
		<FONT COLOR="#298C52">while</FONT> ((idx++ &lt; count) &amp;&amp; WaitNoBusy(cs))
			ReadReg(cs, HFCD_DATA_NODEB, cip);
		skb = NULL;
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (!(skb = dev_alloc_skb(count - 3)))
		printk(KERN_WARNING <FONT COLOR="#FF0000">"HFC: receive out of memory\n"</FONT>);
	<FONT COLOR="#298C52">else</FONT> {
		ptr = skb_put(skb, count - 3);
		idx = 0;
		cip = HFCB_FIFO | HFCB_FIFO_OUT | HFCB_REC | HFCB_CHANNEL(bcs-&gt;channel);
		cli();
		<FONT COLOR="#298C52">while</FONT> (idx &lt; (count - 3)) {
			cli();
			<FONT COLOR="#298C52">if</FONT> (!WaitNoBusy(cs))
				<FONT COLOR="#298C52">break</FONT>;
			*ptr = ReadReg(cs,  HFCD_DATA_NODEB, cip);
			sti();
			ptr++;
			idx++;
		}
		<FONT COLOR="#298C52">if</FONT> (idx != count - 3) {
			sti();
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"RFIFO BUSY error"</FONT>);
			printk(KERN_WARNING <FONT COLOR="#FF0000">"HFC FIFO channel %d BUSY Error\n"</FONT>, bcs-&gt;channel);
			dev_kfree_skb(skb);
			skb = NULL;
		} <FONT COLOR="#298C52">else</FONT> {
			cli();
			WaitNoBusy(cs);
			chksum = (ReadReg(cs, HFCD_DATA, cip) &lt;&lt; 8);
			WaitNoBusy(cs);
			chksum += ReadReg(cs, HFCD_DATA, cip);
			WaitNoBusy(cs);
			stat = ReadReg(cs, HFCD_DATA, cip);
			sti();
			<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) {
				sprintf(tmp, <FONT COLOR="#FF0000">"hfc_empty_fifo %d chksum %x stat %x"</FONT>,
					bcs-&gt;channel, chksum, stat);
				<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
			}
			<FONT COLOR="#298C52">if</FONT> (stat) {
				<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"FIFO CRC error"</FONT>);
				dev_kfree_skb(skb);
				skb = NULL;
			}
		}
	}
	sti();
	WaitForBusy(cs);
	cli();
	WaitNoBusy(cs);
	stat = ReadReg(cs, HFCD_DATA, HFCB_FIFO | HFCB_F2_INC |
		HFCB_REC | HFCB_CHANNEL(bcs-&gt;channel));
	sti();
	WaitForBusy(cs);
	restore_flags(flags);
	<FONT COLOR="#298C52">return</FONT> (skb);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
hfc_fill_fifo(<FONT COLOR="#298C52">struct</FONT> BCState *bcs)
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = bcs-&gt;cs;
	<FONT COLOR="#298C52">long</FONT> flags;
	<FONT COLOR="#298C52">int</FONT> idx, fcnt;
	<FONT COLOR="#298C52">int</FONT> count;
	u_char cip;
	<FONT COLOR="#298C52">char</FONT> tmp[64];
	

	<FONT COLOR="#298C52">if</FONT> (!bcs-&gt;hw.hfc.tx_skb)
		<FONT COLOR="#298C52">return</FONT>;
	<FONT COLOR="#298C52">if</FONT> (bcs-&gt;hw.hfc.tx_skb-&gt;len &lt;= 0)
		<FONT COLOR="#298C52">return</FONT>;

	save_flags(flags);
	cli();
	SelFiFo(cs, HFCB_SEND | HFCB_CHANNEL(bcs-&gt;channel)); 
	cip = HFCB_FIFO | HFCB_F1 | HFCB_SEND | HFCB_CHANNEL(bcs-&gt;channel);
	WaitNoBusy(cs);
	bcs-&gt;hw.hfc.f1 = ReadReg(cs, HFCD_DATA, cip);
	WaitNoBusy(cs);
	cip = HFCB_FIFO | HFCB_F2 | HFCB_SEND | HFCB_CHANNEL(bcs-&gt;channel);
	WaitNoBusy(cs);
	bcs-&gt;hw.hfc.f2 = ReadReg(cs, HFCD_DATA, cip);
	bcs-&gt;hw.hfc.send[bcs-&gt;hw.hfc.f1] = ReadZReg(cs, HFCB_FIFO | HFCB_Z1 | HFCB_SEND | HFCB_CHANNEL(bcs-&gt;channel));
	sti();
 	<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) {
		sprintf(tmp, <FONT COLOR="#FF0000">"hfc_fill_fifo %d f1(%d) f2(%d) z1(%x)"</FONT>,
			bcs-&gt;channel, bcs-&gt;hw.hfc.f1, bcs-&gt;hw.hfc.f2,
			bcs-&gt;hw.hfc.send[bcs-&gt;hw.hfc.f1]);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	}
	fcnt = bcs-&gt;hw.hfc.f1 - bcs-&gt;hw.hfc.f2;
	<FONT COLOR="#298C52">if</FONT> (fcnt &lt; 0)
		fcnt += 32;
	<FONT COLOR="#298C52">if</FONT> (fcnt &gt; 30) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>)
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"hfc_fill_fifo more as 30 frames"</FONT>);
		restore_flags(flags);
		<FONT COLOR="#298C52">return</FONT>;
	}
	count = GetFreeFifoBytes_B(bcs);
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) {
		sprintf(tmp, <FONT COLOR="#FF0000">"hfc_fill_fifo %d count(%d/%d),%lx"</FONT>,
			bcs-&gt;channel, bcs-&gt;hw.hfc.tx_skb-&gt;len,
			count, current-&gt;state);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	}
	<FONT COLOR="#298C52">if</FONT> (count &lt; bcs-&gt;hw.hfc.tx_skb-&gt;len) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>)
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"hfc_fill_fifo no fifo mem"</FONT>);
		restore_flags(flags);
		<FONT COLOR="#298C52">return</FONT>;
	}
	cip = HFCB_FIFO | HFCB_FIFO_IN | HFCB_SEND | HFCB_CHANNEL(bcs-&gt;channel);
	idx = 0;
	cli();
	WaitForBusy(cs);
	WaitNoBusy(cs);
	WriteReg(cs, HFCD_DATA_NODEB, cip, bcs-&gt;hw.hfc.tx_skb-&gt;data[idx++]);
	<FONT COLOR="#298C52">while</FONT> (idx &lt; bcs-&gt;hw.hfc.tx_skb-&gt;len) {
		cli();
		<FONT COLOR="#298C52">if</FONT> (!WaitNoBusy(cs))
			<FONT COLOR="#298C52">break</FONT>;
		WriteReg(cs, HFCD_DATA_NODEB, cip, bcs-&gt;hw.hfc.tx_skb-&gt;data[idx]);
		sti();
		idx++;
	}
	<FONT COLOR="#298C52">if</FONT> (idx != bcs-&gt;hw.hfc.tx_skb-&gt;len) {
		sti();
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"FIFO Send BUSY error"</FONT>);
		printk(KERN_WARNING <FONT COLOR="#FF0000">"HFC S FIFO channel %d BUSY Error\n"</FONT>, bcs-&gt;channel);
	} <FONT COLOR="#298C52">else</FONT> {
		bcs-&gt;tx_cnt -= bcs-&gt;hw.hfc.tx_skb-&gt;len;
		<FONT COLOR="#298C52">if</FONT> (bcs-&gt;st-&gt;lli.l1writewakeup &amp;&amp;
			(<A HREF="hisax.h.shtml#PACKET_NOACK">PACKET_NOACK</A> != bcs-&gt;hw.hfc.tx_skb-&gt;pkt_type))
			bcs-&gt;st-&gt;lli.l1writewakeup(bcs-&gt;st, bcs-&gt;hw.hfc.tx_skb-&gt;len);
		dev_kfree_skb(bcs-&gt;hw.hfc.tx_skb);
		bcs-&gt;hw.hfc.tx_skb = NULL;
	}
	WaitForBusy(cs);
	cli();
	WaitNoBusy(cs);
	ReadReg(cs, HFCD_DATA, HFCB_FIFO | HFCB_F1_INC | HFCB_SEND | HFCB_CHANNEL(bcs-&gt;channel));
	sti();
	WaitForBusy(cs);
	test_and_clear_bit(<A HREF="hisax.h.shtml#BC_FLG_BUSY">BC_FLG_BUSY</A>, &amp;bcs-&gt;Flag);
	restore_flags(flags);
	<FONT COLOR="#298C52">return</FONT>;
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
hfc_send_data(<FONT COLOR="#298C52">struct</FONT> BCState *bcs)
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = bcs-&gt;cs;
	<FONT COLOR="#298C52">char</FONT> tmp[32];
	
	<FONT COLOR="#298C52">if</FONT> (!test_and_set_bit(<A HREF="hisax.h.shtml#FLG_LOCK_ATOMIC">FLG_LOCK_ATOMIC</A>, &amp;cs-&gt;HW_Flags)) {
		hfc_fill_fifo(bcs);
		test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_LOCK_ATOMIC">FLG_LOCK_ATOMIC</A>, &amp;cs-&gt;HW_Flags);
	} <FONT COLOR="#298C52">else</FONT> {
		sprintf(tmp,<FONT COLOR="#FF0000">"send_data %d blocked"</FONT>, bcs-&gt;channel);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	}
}

<FONT COLOR="#298C52">void</FONT>
main_rec_2bds0(<FONT COLOR="#298C52">struct</FONT> BCState *bcs)
{
	<FONT COLOR="#298C52">long</FONT> flags;
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = bcs-&gt;cs;
	<FONT COLOR="#298C52">int</FONT> z1, z2, rcnt;
	u_char f1, f2, cip;
	<FONT COLOR="#298C52">int</FONT> receive, count = 5;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;
	<FONT COLOR="#298C52">char</FONT> tmp[64];

	save_flags(flags);
    Begin:
	count--;
	cli();
	<FONT COLOR="#298C52">if</FONT> (test_and_set_bit(<A HREF="hisax.h.shtml#FLG_LOCK_ATOMIC">FLG_LOCK_ATOMIC</A>, &amp;cs-&gt;HW_Flags)) {
		sprintf(tmp,<FONT COLOR="#FF0000">"rec_data %d blocked"</FONT>, bcs-&gt;channel);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
		restore_flags(flags);
		<FONT COLOR="#298C52">return</FONT>;
	}
	SelFiFo(cs, HFCB_REC | HFCB_CHANNEL(bcs-&gt;channel));
	cip = HFCB_FIFO | HFCB_F1 | HFCB_REC | HFCB_CHANNEL(bcs-&gt;channel);
	WaitNoBusy(cs);
	f1 = ReadReg(cs, HFCD_DATA, cip);
	cip = HFCB_FIFO | HFCB_F2 | HFCB_REC | HFCB_CHANNEL(bcs-&gt;channel);
	WaitNoBusy(cs);
	f2 = ReadReg(cs, HFCD_DATA, cip);
	sti();
	<FONT COLOR="#298C52">if</FONT> (f1 != f2) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) {
			sprintf(tmp, <FONT COLOR="#FF0000">"hfc rec %d f1(%d) f2(%d)"</FONT>,
				bcs-&gt;channel, f1, f2);
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
		}
		cli();
		z1 = ReadZReg(cs, HFCB_FIFO | HFCB_Z1 | HFCB_REC | HFCB_CHANNEL(bcs-&gt;channel));
		z2 = ReadZReg(cs, HFCB_FIFO | HFCB_Z2 | HFCB_REC | HFCB_CHANNEL(bcs-&gt;channel));
		sti();
		rcnt = z1 - z2;
		<FONT COLOR="#298C52">if</FONT> (rcnt &lt; 0)
			rcnt += cs-&gt;hw.hfcD.bfifosize;
		rcnt++;
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) {
			sprintf(tmp, <FONT COLOR="#FF0000">"hfc rec %d z1(%x) z2(%x) cnt(%d)"</FONT>,
				bcs-&gt;channel, z1, z2, rcnt);
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
		}
		<FONT COLOR="#298C52">if</FONT> ((skb = hfc_empty_fifo(bcs, rcnt))) {
			cli();
			skb_queue_tail(&amp;bcs-&gt;rqueue, skb);
			sti();
			hfc_sched_event(bcs, <A HREF="isdnl1.h.shtml#B_RCVBUFREADY">B_RCVBUFREADY</A>);
		}
		rcnt = f1 -f2;
		<FONT COLOR="#298C52">if</FONT> (rcnt&lt;0)
			rcnt += 32;
		<FONT COLOR="#298C52">if</FONT> (rcnt&gt;1)
			receive = 1;
		<FONT COLOR="#298C52">else</FONT>
			receive = 0;
	} <FONT COLOR="#298C52">else</FONT>
		receive = 0;
	test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_LOCK_ATOMIC">FLG_LOCK_ATOMIC</A>, &amp;cs-&gt;HW_Flags);
	<FONT COLOR="#298C52">if</FONT> (count &amp;&amp; receive)
		<FONT COLOR="#298C52">goto</FONT> Begin;	
	restore_flags(flags);
	<FONT COLOR="#298C52">return</FONT>;
}

<FONT COLOR="#298C52">void</FONT>
mode_2bs0(<FONT COLOR="#298C52">struct</FONT> BCState *bcs, <FONT COLOR="#298C52">int</FONT> mode, <FONT COLOR="#298C52">int</FONT> bc)
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = bcs-&gt;cs;

	<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>) {
		<FONT COLOR="#298C52">char</FONT> tmp[40];
		sprintf(tmp, <FONT COLOR="#FF0000">"HFCD bchannel mode %d bchan %d/%d"</FONT>,
			mode, bc, bcs-&gt;channel);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	}
	bcs-&gt;mode = mode;
	bcs-&gt;channel = bc;
	<FONT COLOR="#298C52">switch</FONT> (mode) {
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#L1_MODE_NULL">L1_MODE_NULL</A>):
			<FONT COLOR="#298C52">if</FONT> (bc) {
				cs-&gt;hw.hfcD.conn |= 0x18;
				cs-&gt;hw.hfcD.sctrl &amp;= ~SCTRL_B2_ENA;
			} <FONT COLOR="#298C52">else</FONT> {
				cs-&gt;hw.hfcD.conn |= 0x3;
				cs-&gt;hw.hfcD.sctrl &amp;= ~SCTRL_B1_ENA;
			}
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#L1_MODE_TRANS">L1_MODE_TRANS</A>):
			<FONT COLOR="#298C52">if</FONT> (bc) {
				cs-&gt;hw.hfcD.ctmt |= 2;
				cs-&gt;hw.hfcD.conn &amp;= ~0x18;
				cs-&gt;hw.hfcD.sctrl |= SCTRL_B2_ENA;
			} <FONT COLOR="#298C52">else</FONT> {
				cs-&gt;hw.hfcD.ctmt |= 1;
				cs-&gt;hw.hfcD.conn &amp;= ~0x3;
				cs-&gt;hw.hfcD.sctrl |= SCTRL_B1_ENA;
			}
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#L1_MODE_HDLC">L1_MODE_HDLC</A>):
			<FONT COLOR="#298C52">if</FONT> (bc) {
				cs-&gt;hw.hfcD.ctmt &amp;= ~2;
				cs-&gt;hw.hfcD.conn &amp;= ~0x18;
				cs-&gt;hw.hfcD.sctrl |= SCTRL_B2_ENA;
			} <FONT COLOR="#298C52">else</FONT> {
				cs-&gt;hw.hfcD.ctmt &amp;= ~1;
				cs-&gt;hw.hfcD.conn &amp;= ~0x3;
				cs-&gt;hw.hfcD.sctrl |= SCTRL_B1_ENA;
			}
			<FONT COLOR="#298C52">break</FONT>;
	}
	WriteReg(cs, HFCD_DATA, HFCD_SCTRL, cs-&gt;hw.hfcD.sctrl);
	WriteReg(cs, HFCD_DATA, HFCD_CTMT, cs-&gt;hw.hfcD.ctmt);
	WriteReg(cs, HFCD_DATA, HFCD_CONN, cs-&gt;hw.hfcD.conn);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
hfc_l2l1(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">long</FONT> flags;

	<FONT COLOR="#298C52">switch</FONT> (pr) {
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_DATA">PH_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			save_flags(flags);
			cli();
			<FONT COLOR="#298C52">if</FONT> (st-&gt;l1.bcs-&gt;hw.hfc.tx_skb) {
				skb_queue_tail(&amp;st-&gt;l1.bcs-&gt;squeue, skb);
				restore_flags(flags);
			} <FONT COLOR="#298C52">else</FONT> {
				st-&gt;l1.bcs-&gt;hw.hfc.tx_skb = skb;
<FONT COLOR=#0000FF>/*				test_and_set_bit(BC_FLG_BUSY, &amp;st-&gt;l1.bcs-&gt;Flag);
*/</FONT>				st-&gt;l1.bcs-&gt;cs-&gt;BC_Send_Data(st-&gt;l1.bcs);
				restore_flags(flags);
			}
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_PULL">PH_PULL</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
			<FONT COLOR="#298C52">if</FONT> (st-&gt;l1.bcs-&gt;hw.hfc.tx_skb) {
				printk(KERN_WARNING <FONT COLOR="#FF0000">"hfc_l2l1: this shouldn't happen\n"</FONT>);
				<FONT COLOR="#298C52">break</FONT>;
			}
			save_flags(flags);
			cli();
<FONT COLOR=#0000FF>/*			test_and_set_bit(BC_FLG_BUSY, &amp;st-&gt;l1.bcs-&gt;Flag);
*/</FONT>			st-&gt;l1.bcs-&gt;hw.hfc.tx_skb = skb;
			st-&gt;l1.bcs-&gt;cs-&gt;BC_Send_Data(st-&gt;l1.bcs);
			restore_flags(flags);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_PULL">PH_PULL</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			<FONT COLOR="#298C52">if</FONT> (!st-&gt;l1.bcs-&gt;hw.hfc.tx_skb) {
				test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_L1_PULL_REQ">FLG_L1_PULL_REQ</A>, &amp;st-&gt;l1.Flags);
				st-&gt;l1.l1l2(st, <A HREF="hisax.h.shtml#PH_PULL">PH_PULL</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, NULL);
			} <FONT COLOR="#298C52">else</FONT>
				test_and_set_bit(<A HREF="hisax.h.shtml#FLG_L1_PULL_REQ">FLG_L1_PULL_REQ</A>, &amp;st-&gt;l1.Flags);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_ACTIVATE">PH_ACTIVATE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			test_and_set_bit(<A HREF="hisax.h.shtml#BC_FLG_ACTIV">BC_FLG_ACTIV</A>, &amp;st-&gt;l1.bcs-&gt;Flag);
			mode_2bs0(st-&gt;l1.bcs, st-&gt;l1.mode, st-&gt;l1.bc);
			st-&gt;l1.l1l2(st, <A HREF="hisax.h.shtml#PH_ACTIVATE">PH_ACTIVATE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_DEACTIVATE">PH_DEACTIVATE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			<FONT COLOR="#298C52">if</FONT> (!test_bit(<A HREF="hisax.h.shtml#BC_FLG_BUSY">BC_FLG_BUSY</A>, &amp;st-&gt;l1.bcs-&gt;Flag))
				mode_2bs0(st-&gt;l1.bcs, 0, 0);
			test_and_clear_bit(<A HREF="hisax.h.shtml#BC_FLG_ACTIV">BC_FLG_ACTIV</A>, &amp;st-&gt;l1.bcs-&gt;Flag);
			<FONT COLOR="#298C52">break</FONT>;
	}
}

<FONT COLOR="#298C52">void</FONT>
close_2bs0(<FONT COLOR="#298C52">struct</FONT> BCState *bcs)
{
	mode_2bs0(bcs, 0, 0);
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#BC_FLG_INIT">BC_FLG_INIT</A>, &amp;bcs-&gt;Flag)) {
		<A HREF="callc.c.shtml#discard_queue">discard_queue</A>(&amp;bcs-&gt;rqueue);
		<A HREF="callc.c.shtml#discard_queue">discard_queue</A>(&amp;bcs-&gt;squeue);
		<FONT COLOR="#298C52">if</FONT> (bcs-&gt;hw.hfc.tx_skb) {
			dev_kfree_skb(bcs-&gt;hw.hfc.tx_skb);
			bcs-&gt;hw.hfc.tx_skb = NULL;
			test_and_clear_bit(<A HREF="hisax.h.shtml#BC_FLG_BUSY">BC_FLG_BUSY</A>, &amp;bcs-&gt;Flag);
		}
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
open_hfcstate(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs,
	      <FONT COLOR="#298C52">int</FONT> bc)
{
	<FONT COLOR="#298C52">struct</FONT> BCState *bcs = cs-&gt;bcs + bc;

	<FONT COLOR="#298C52">if</FONT> (!test_and_set_bit(<A HREF="hisax.h.shtml#BC_FLG_INIT">BC_FLG_INIT</A>, &amp;bcs-&gt;Flag)) {
		skb_queue_head_init(&amp;bcs-&gt;rqueue);
		skb_queue_head_init(&amp;bcs-&gt;squeue);
	}
	bcs-&gt;hw.hfc.tx_skb = NULL;
	test_and_clear_bit(<A HREF="hisax.h.shtml#BC_FLG_BUSY">BC_FLG_BUSY</A>, &amp;bcs-&gt;Flag);
	bcs-&gt;event = 0;
	bcs-&gt;tx_cnt = 0;
	<FONT COLOR="#298C52">return</FONT> (0);
}

<FONT COLOR="#298C52">int</FONT>
setstack_2b(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">struct</FONT> BCState *bcs)
{
	<FONT COLOR="#298C52">if</FONT> (open_hfcstate(st-&gt;l1.hardware, bcs-&gt;channel))
		<FONT COLOR="#298C52">return</FONT> (-1);
	st-&gt;l1.bcs = bcs;
	st-&gt;l2.l2l1 = hfc_l2l1;
	<A HREF="lmgr.c.shtml#setstack_manager">setstack_manager</A>(st);
	bcs-&gt;st = st;
	<FONT COLOR="#298C52">return</FONT> (0);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
hfcd_bh(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
<FONT COLOR=#0000FF>/*	struct PStack *stptr;
*/</FONT>
	<FONT COLOR="#298C52">if</FONT> (!cs)
		<FONT COLOR="#298C52">return</FONT>;
<FONT COLOR=#A521F7>#if</FONT> 0	
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="isdnl1.h.shtml#D_CLEARBUSY">D_CLEARBUSY</A>, &amp;cs-&gt;event)) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug)
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"D-Channel Busy cleared"</FONT>);
		stptr = cs-&gt;stlist;
		<FONT COLOR="#298C52">while</FONT> (stptr != NULL) {
			stptr-&gt;l1.l1l2(stptr, <A HREF="hisax.h.shtml#PH_PAUSE">PH_PAUSE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, NULL);
			stptr = stptr-&gt;next;
		}
	}
<FONT COLOR=#A521F7>#endif</FONT>
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="isdnl1.h.shtml#D_L1STATECHANGE">D_L1STATECHANGE</A>, &amp;cs-&gt;event)) {
		<FONT COLOR="#298C52">switch</FONT> (cs-&gt;ph_state) {
			<FONT COLOR="#298C52">case</FONT> (0):
				<A HREF="isdnl1.c.shtml#l1_msg">l1_msg</A>(cs, <A HREF="hisax.h.shtml#HW_RESET">HW_RESET</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);
				<FONT COLOR="#298C52">break</FONT>;
			<FONT COLOR="#298C52">case</FONT> (3):
				<A HREF="isdnl1.c.shtml#l1_msg">l1_msg</A>(cs, <A HREF="hisax.h.shtml#HW_DEACTIVATE">HW_DEACTIVATE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);
				<FONT COLOR="#298C52">break</FONT>;
			<FONT COLOR="#298C52">case</FONT> (8):
				<A HREF="isdnl1.c.shtml#l1_msg">l1_msg</A>(cs, <A HREF="hisax.h.shtml#HW_RSYNC">HW_RSYNC</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);
				<FONT COLOR="#298C52">break</FONT>;
			<FONT COLOR="#298C52">case</FONT> (6):
				<A HREF="isdnl1.c.shtml#l1_msg">l1_msg</A>(cs, <A HREF="hisax.h.shtml#HW_INFO2">HW_INFO2</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);
				<FONT COLOR="#298C52">break</FONT>;
			<FONT COLOR="#298C52">case</FONT> (7):
				<A HREF="isdnl1.c.shtml#l1_msg">l1_msg</A>(cs, <A HREF="hisax.h.shtml#HW_INFO4_P8">HW_INFO4_P8</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);
				<FONT COLOR="#298C52">break</FONT>;
			<FONT COLOR="#298C52">default</FONT>:
				<FONT COLOR="#298C52">break</FONT>;
		}
	}
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="isdnl1.h.shtml#D_RCVBUFREADY">D_RCVBUFREADY</A>, &amp;cs-&gt;event))
		<A HREF="isdnl1.c.shtml#DChannel_proc_rcv">DChannel_proc_rcv</A>(cs);
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="isdnl1.h.shtml#D_XMTBUFREADY">D_XMTBUFREADY</A>, &amp;cs-&gt;event))
		<A HREF="isdnl1.c.shtml#DChannel_proc_xmt">DChannel_proc_xmt</A>(cs);
}

<FONT COLOR="#298C52">void</FONT>
sched_event_D(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> event)
{
	test_and_set_bit(event, &amp;cs-&gt;event);
	queue_task(&amp;cs-&gt;tqueue, &amp;tq_immediate);
	mark_bh(IMMEDIATE_BH);
}

<FONT COLOR="#298C52">static</FONT>
<FONT COLOR="#298C52">int</FONT> receive_dmsg(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;
	<FONT COLOR="#298C52">long</FONT> flags;
	<FONT COLOR="#298C52">int</FONT> idx;
	<FONT COLOR="#298C52">int</FONT> rcnt, z1, z2;
	u_char stat, cip, f1, f2;
	<FONT COLOR="#298C52">int</FONT> chksum;
	<FONT COLOR="#298C52">int</FONT> count=5;
	u_char *ptr;
	<FONT COLOR="#298C52">char</FONT> tmp[64];

	save_flags(flags);
	cli();
	<FONT COLOR="#298C52">if</FONT> (test_and_set_bit(<A HREF="hisax.h.shtml#FLG_LOCK_ATOMIC">FLG_LOCK_ATOMIC</A>, &amp;cs-&gt;HW_Flags)) {
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"rec_dmsg blocked"</FONT>);
		restore_flags(flags);
		<FONT COLOR="#298C52">return</FONT>(1);
	}
	SelFiFo(cs, 4 | HFCD_REC);
	cip = HFCD_FIFO | HFCD_F1 | HFCD_REC;
	WaitNoBusy(cs);
	f1 = cs-&gt;readisac(cs, cip) &amp; 0xf;
	cip = HFCD_FIFO | HFCD_F2 | HFCD_REC;
	WaitNoBusy(cs);
	f2 = cs-&gt;readisac(cs, cip) &amp; 0xf;
	<FONT COLOR="#298C52">while</FONT> ((f1 != f2) &amp;&amp; count--) {
		z1 = ReadZReg(cs, HFCD_FIFO | HFCD_Z1 | HFCD_REC);
		z2 = ReadZReg(cs, HFCD_FIFO | HFCD_Z2 | HFCD_REC);
		rcnt = z1 - z2;
		<FONT COLOR="#298C52">if</FONT> (rcnt &lt; 0)
			rcnt += cs-&gt;hw.hfcD.dfifosize;
		rcnt++;
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_ISAC">L1_DEB_ISAC</A>) {
			sprintf(tmp, <FONT COLOR="#FF0000">"hfcd recd f1(%d) f2(%d) z1(%x) z2(%x) cnt(%d)"</FONT>,
				f1, f2, z1, z2, rcnt);
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
		}
		sti();
		idx = 0;
		cip = HFCD_FIFO | HFCD_FIFO_OUT | HFCD_REC;
		<FONT COLOR="#298C52">if</FONT> (rcnt &gt; <A HREF="hisax.h.shtml#MAX_DFRAME_LEN">MAX_DFRAME_LEN</A> + 3) {
			<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_WARN">L1_DEB_WARN</A>)
				<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"empty_fifo d: incoming packet too large"</FONT>);
			<FONT COLOR="#298C52">while</FONT> (idx &lt; rcnt) {
				cli();
				<FONT COLOR="#298C52">if</FONT> (!(WaitNoBusy(cs)))
					<FONT COLOR="#298C52">break</FONT>;
				ReadReg(cs, HFCD_DATA_NODEB, cip);
				sti();
				idx++;
			}
		} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (rcnt &lt; 4) {
			<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_WARN">L1_DEB_WARN</A>)
				<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"empty_fifo d: incoming packet too small"</FONT>);
			cli();
			<FONT COLOR="#298C52">while</FONT> ((idx++ &lt; rcnt) &amp;&amp; WaitNoBusy(cs))
				ReadReg(cs, HFCD_DATA_NODEB, cip);
		} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> ((skb = dev_alloc_skb(rcnt - 3))) {
			ptr = skb_put(skb, rcnt - 3);
			<FONT COLOR="#298C52">while</FONT> (idx &lt; (rcnt - 3)) {
				cli();
				<FONT COLOR="#298C52">if</FONT> (!(WaitNoBusy(cs)))
					<FONT COLOR="#298C52">break</FONT>;
				*ptr = ReadReg(cs, HFCD_DATA_NODEB, cip);
				sti();
				idx++;
				ptr++;
			}
			<FONT COLOR="#298C52">if</FONT> (idx != (rcnt - 3)) {
				sti();
				<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"RFIFO D BUSY error"</FONT>);
				printk(KERN_WARNING <FONT COLOR="#FF0000">"HFC DFIFO channel BUSY Error\n"</FONT>);
				dev_kfree_skb(skb);
				skb = NULL;
			} <FONT COLOR="#298C52">else</FONT> {
				cli();
				WaitNoBusy(cs);
				chksum = (ReadReg(cs, HFCD_DATA, cip) &lt;&lt; 8);
				WaitNoBusy(cs);
				chksum += ReadReg(cs, HFCD_DATA, cip);
				WaitNoBusy(cs);
				stat = ReadReg(cs, HFCD_DATA, cip);
				sti();
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_ISAC">L1_DEB_ISAC</A>) {
					sprintf(tmp, <FONT COLOR="#FF0000">"empty_dfifo chksum %x stat %x"</FONT>,
						chksum, stat);
					<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
				}
				<FONT COLOR="#298C52">if</FONT> (stat) {
					<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"FIFO CRC error"</FONT>);
					dev_kfree_skb(skb);
					skb = NULL;
				} <FONT COLOR="#298C52">else</FONT> {
					skb_queue_tail(&amp;cs-&gt;rq, skb);
					sched_event_D(cs, <A HREF="isdnl1.h.shtml#D_RCVBUFREADY">D_RCVBUFREADY</A>);
				}
			}
		} <FONT COLOR="#298C52">else</FONT>
			printk(KERN_WARNING <FONT COLOR="#FF0000">"HFC: D receive out of memory\n"</FONT>);
		sti();
		WaitForBusy(cs);
		cip = HFCD_FIFO | HFCD_F2_INC | HFCD_REC;
		cli();
		WaitNoBusy(cs);
		stat = ReadReg(cs, HFCD_DATA, cip);
		sti();
		WaitForBusy(cs);
		cip = HFCD_FIFO | HFCD_F2 | HFCD_REC;
		cli();
		WaitNoBusy(cs);
		f2 = cs-&gt;readisac(cs, cip) &amp; 0xf;
	}
	test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_LOCK_ATOMIC">FLG_LOCK_ATOMIC</A>, &amp;cs-&gt;HW_Flags);
	restore_flags(flags);
	<FONT COLOR="#298C52">return</FONT>(1);
} 

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
hfc_fill_dfifo(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">long</FONT> flags;
	<FONT COLOR="#298C52">int</FONT> idx, fcnt;
	<FONT COLOR="#298C52">int</FONT> count;
	u_char cip;
	<FONT COLOR="#298C52">char</FONT> tmp[64];

	<FONT COLOR="#298C52">if</FONT> (!cs-&gt;tx_skb)
		<FONT COLOR="#298C52">return</FONT>;
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;tx_skb-&gt;len &lt;= 0)
		<FONT COLOR="#298C52">return</FONT>;

	save_flags(flags);
	cli();
	SelFiFo(cs, 4 | HFCD_SEND);
	cip = HFCD_FIFO | HFCD_F1 | HFCD_SEND;
	WaitNoBusy(cs);
	cs-&gt;hw.hfcD.f1 = ReadReg(cs, HFCD_DATA, cip) &amp; 0xf;
	WaitNoBusy(cs);
	cip = HFCD_FIFO | HFCD_F2 | HFCD_SEND;
	cs-&gt;hw.hfcD.f2 = ReadReg(cs, HFCD_DATA, cip) &amp; 0xf;
	cs-&gt;hw.hfcD.send[cs-&gt;hw.hfcD.f1] = ReadZReg(cs, HFCD_FIFO | HFCD_Z1 | HFCD_SEND);
	sti();
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_ISAC">L1_DEB_ISAC</A>) {
		sprintf(tmp, <FONT COLOR="#FF0000">"hfc_fill_Dfifo f1(%d) f2(%d) z1(%x)"</FONT>,
			cs-&gt;hw.hfcD.f1, cs-&gt;hw.hfcD.f2,
			cs-&gt;hw.hfcD.send[cs-&gt;hw.hfcD.f1]);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	}
	fcnt = cs-&gt;hw.hfcD.f1 - cs-&gt;hw.hfcD.f2;
	<FONT COLOR="#298C52">if</FONT> (fcnt &lt; 0)
		fcnt += 16;
	<FONT COLOR="#298C52">if</FONT> (fcnt &gt; 14) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_HSCX">L1_DEB_HSCX</A>)
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"hfc_fill_Dfifo more as 14 frames"</FONT>);
		restore_flags(flags);
		<FONT COLOR="#298C52">return</FONT>;
	}
	count = GetFreeFifoBytes_D(cs);
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_ISAC">L1_DEB_ISAC</A>) {
		sprintf(tmp, <FONT COLOR="#FF0000">"hfc_fill_Dfifo count(%d/%d)"</FONT>,
			cs-&gt;tx_skb-&gt;len, count);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	}
	<FONT COLOR="#298C52">if</FONT> (count &lt; cs-&gt;tx_skb-&gt;len) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_ISAC">L1_DEB_ISAC</A>)
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"hfc_fill_Dfifo no fifo mem"</FONT>);
		restore_flags(flags);
		<FONT COLOR="#298C52">return</FONT>;
	}
	cip = HFCD_FIFO | HFCD_FIFO_IN | HFCD_SEND;
	idx = 0;
	cli();
	WaitForBusy(cs);
	WaitNoBusy(cs);
	WriteReg(cs, HFCD_DATA_NODEB, cip, cs-&gt;tx_skb-&gt;data[idx++]);
	<FONT COLOR="#298C52">while</FONT> (idx &lt; cs-&gt;tx_skb-&gt;len) {
		cli();
		<FONT COLOR="#298C52">if</FONT> (!(WaitNoBusy(cs)))
			<FONT COLOR="#298C52">break</FONT>;
		WriteReg(cs, HFCD_DATA_NODEB, cip, cs-&gt;tx_skb-&gt;data[idx]);
		sti();
		idx++;
	}
	<FONT COLOR="#298C52">if</FONT> (idx != cs-&gt;tx_skb-&gt;len) {
		sti();
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"DFIFO Send BUSY error"</FONT>);
		printk(KERN_WARNING <FONT COLOR="#FF0000">"HFC S DFIFO channel BUSY Error\n"</FONT>);
	}
	WaitForBusy(cs);
	cli();
	WaitNoBusy(cs);
	ReadReg(cs, HFCD_DATA, HFCD_FIFO | HFCD_F1_INC | HFCD_SEND);
	dev_kfree_skb(cs-&gt;tx_skb);
	cs-&gt;tx_skb = NULL;
	sti();
	WaitForBusy(cs);
	restore_flags(flags);
	<FONT COLOR="#298C52">return</FONT>;
}

<FONT COLOR="#298C52">static</FONT> 
<FONT COLOR="#298C52">struct</FONT> BCState *Sel_BCS(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> channel)
{
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;bcs[0].mode &amp;&amp; (cs-&gt;bcs[0].channel == channel))
		<FONT COLOR="#298C52">return</FONT>(&amp;cs-&gt;bcs[0]);
	<FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (cs-&gt;bcs[1].mode &amp;&amp; (cs-&gt;bcs[1].channel == channel))
		<FONT COLOR="#298C52">return</FONT>(&amp;cs-&gt;bcs[1]);
	<FONT COLOR="#298C52">else</FONT>
		<FONT COLOR="#298C52">return</FONT>(NULL);
}

<FONT COLOR="#298C52">void</FONT>
hfc2bds0_interrupt(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, u_char val)
{
       	u_char exval;
       	<FONT COLOR="#298C52">struct</FONT> BCState *bcs;
	<FONT COLOR="#298C52">char</FONT> tmp[32];
	<FONT COLOR="#298C52">int</FONT> count=15;
	<FONT COLOR="#298C52">long</FONT> flags;

	<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_ISAC">L1_DEB_ISAC</A>) {
		sprintf(tmp, <FONT COLOR="#FF0000">"HFCD irq %x %s"</FONT>, val,
			test_bit(<A HREF="hisax.h.shtml#FLG_LOCK_ATOMIC">FLG_LOCK_ATOMIC</A>, &amp;cs-&gt;HW_Flags) ?
			<FONT COLOR="#FF0000">"locked"</FONT> : <FONT COLOR="#FF0000">"unlocked"</FONT>);
		<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
	}
	val &amp;= cs-&gt;hw.hfcD.int_m1;
	<FONT COLOR="#298C52">if</FONT> (val &amp; 0x40) { <FONT COLOR=#0000FF>/* TE state machine irq */</FONT>
		exval = cs-&gt;readisac(cs, HFCD_STATES) &amp; 0xf;
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_ISAC">L1_DEB_ISAC</A>) {
			sprintf(tmp, <FONT COLOR="#FF0000">"ph_state chg %d-&gt;%d"</FONT>, cs-&gt;ph_state,
				exval);
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
		}
		cs-&gt;ph_state = exval;
		sched_event_D(cs, <A HREF="isdnl1.h.shtml#D_L1STATECHANGE">D_L1STATECHANGE</A>);
		val &amp;= ~0x40;
	}
	<FONT COLOR="#298C52">while</FONT> (val) {
		save_flags(flags);
		cli();
		<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_LOCK_ATOMIC">FLG_LOCK_ATOMIC</A>, &amp;cs-&gt;HW_Flags)) {
			cs-&gt;hw.hfcD.int_s1 |= val;
			restore_flags(flags);
			<FONT COLOR="#298C52">return</FONT>;
		}
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.hfcD.int_s1 &amp; 0x18) {
			exval = val;
			val =  cs-&gt;hw.hfcD.int_s1;
			cs-&gt;hw.hfcD.int_s1 = exval;
		}	
		<FONT COLOR="#298C52">if</FONT> (val &amp; 0x08) {
			<FONT COLOR="#298C52">if</FONT> (!(bcs=Sel_BCS(cs, 0))) {
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug)
					<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"hfcd spurious 0x08 IRQ"</FONT>);
			} <FONT COLOR="#298C52">else</FONT> 
				main_rec_2bds0(bcs);
		}
		<FONT COLOR="#298C52">if</FONT> (val &amp; 0x10) {
			<FONT COLOR="#298C52">if</FONT> (!(bcs=Sel_BCS(cs, 1))) {
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug)
					<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"hfcd spurious 0x10 IRQ"</FONT>);
			} <FONT COLOR="#298C52">else</FONT> 
				main_rec_2bds0(bcs);
		}
		<FONT COLOR="#298C52">if</FONT> (val &amp; 0x01) {
			<FONT COLOR="#298C52">if</FONT> (!(bcs=Sel_BCS(cs, 0))) {
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug)
					<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"hfcd spurious 0x01 IRQ"</FONT>);
			} <FONT COLOR="#298C52">else</FONT> {
				<FONT COLOR="#298C52">if</FONT> (bcs-&gt;hw.hfc.tx_skb) {
					<FONT COLOR="#298C52">if</FONT> (!test_and_set_bit(<A HREF="hisax.h.shtml#FLG_LOCK_ATOMIC">FLG_LOCK_ATOMIC</A>, &amp;cs-&gt;HW_Flags)) {
						hfc_fill_fifo(bcs);
						test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_LOCK_ATOMIC">FLG_LOCK_ATOMIC</A>, &amp;cs-&gt;HW_Flags);
					} <FONT COLOR="#298C52">else</FONT> {
						sprintf(tmp,<FONT COLOR="#FF0000">"fill_data %d blocked"</FONT>, bcs-&gt;channel);
						<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
					}
				} <FONT COLOR="#298C52">else</FONT> {
					<FONT COLOR="#298C52">if</FONT> ((bcs-&gt;hw.hfc.tx_skb = skb_dequeue(&amp;bcs-&gt;squeue))) {
						<FONT COLOR="#298C52">if</FONT> (!test_and_set_bit(<A HREF="hisax.h.shtml#FLG_LOCK_ATOMIC">FLG_LOCK_ATOMIC</A>, &amp;cs-&gt;HW_Flags)) {
							hfc_fill_fifo(bcs);
							test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_LOCK_ATOMIC">FLG_LOCK_ATOMIC</A>, &amp;cs-&gt;HW_Flags);
						} <FONT COLOR="#298C52">else</FONT> {
							sprintf(tmp,<FONT COLOR="#FF0000">"fill_data %d blocked"</FONT>, bcs-&gt;channel);
							<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
						}
					} <FONT COLOR="#298C52">else</FONT> {
						hfc_sched_event(bcs, <A HREF="isdnl1.h.shtml#B_XMTBUFREADY">B_XMTBUFREADY</A>);
					}
				}
			}
		}
		<FONT COLOR="#298C52">if</FONT> (val &amp; 0x02) {
			<FONT COLOR="#298C52">if</FONT> (!(bcs=Sel_BCS(cs, 1))) {
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug)
					<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"hfcd spurious 0x02 IRQ"</FONT>);
			} <FONT COLOR="#298C52">else</FONT> {
				<FONT COLOR="#298C52">if</FONT> (bcs-&gt;hw.hfc.tx_skb) {
					<FONT COLOR="#298C52">if</FONT> (!test_and_set_bit(<A HREF="hisax.h.shtml#FLG_LOCK_ATOMIC">FLG_LOCK_ATOMIC</A>, &amp;cs-&gt;HW_Flags)) {
						hfc_fill_fifo(bcs);
						test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_LOCK_ATOMIC">FLG_LOCK_ATOMIC</A>, &amp;cs-&gt;HW_Flags);
					} <FONT COLOR="#298C52">else</FONT> {
						sprintf(tmp,<FONT COLOR="#FF0000">"fill_data %d blocked"</FONT>, bcs-&gt;channel);
						<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
					}
				} <FONT COLOR="#298C52">else</FONT> {
					<FONT COLOR="#298C52">if</FONT> ((bcs-&gt;hw.hfc.tx_skb = skb_dequeue(&amp;bcs-&gt;squeue))) {
						<FONT COLOR="#298C52">if</FONT> (!test_and_set_bit(<A HREF="hisax.h.shtml#FLG_LOCK_ATOMIC">FLG_LOCK_ATOMIC</A>, &amp;cs-&gt;HW_Flags)) {
							hfc_fill_fifo(bcs);
							test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_LOCK_ATOMIC">FLG_LOCK_ATOMIC</A>, &amp;cs-&gt;HW_Flags);
						} <FONT COLOR="#298C52">else</FONT> {
							sprintf(tmp,<FONT COLOR="#FF0000">"fill_data %d blocked"</FONT>, bcs-&gt;channel);
							<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
						}
					} <FONT COLOR="#298C52">else</FONT> {
						hfc_sched_event(bcs, <A HREF="isdnl1.h.shtml#B_XMTBUFREADY">B_XMTBUFREADY</A>);
					}
				}
			}
		}
		<FONT COLOR="#298C52">if</FONT> (val &amp; 0x20) {	<FONT COLOR=#0000FF>/* receive dframe */</FONT>
			receive_dmsg(cs);
		}
		<FONT COLOR="#298C52">if</FONT> (val &amp; 0x04) {	<FONT COLOR=#0000FF>/* dframe transmitted */</FONT>
			<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_DBUSY_TIMER">FLG_DBUSY_TIMER</A>, &amp;cs-&gt;HW_Flags))
				del_timer(&amp;cs-&gt;dbusytimer);
			<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_L1_DBUSY">FLG_L1_DBUSY</A>, &amp;cs-&gt;HW_Flags))
				sched_event_D(cs, <A HREF="isdnl1.h.shtml#D_CLEARBUSY">D_CLEARBUSY</A>);
			<FONT COLOR="#298C52">if</FONT> (cs-&gt;tx_skb)
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;tx_skb-&gt;len) {
					<FONT COLOR="#298C52">if</FONT> (!test_and_set_bit(<A HREF="hisax.h.shtml#FLG_LOCK_ATOMIC">FLG_LOCK_ATOMIC</A>, &amp;cs-&gt;HW_Flags)) {
						hfc_fill_dfifo(cs);
						test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_LOCK_ATOMIC">FLG_LOCK_ATOMIC</A>, &amp;cs-&gt;HW_Flags);
					} <FONT COLOR="#298C52">else</FONT> {
						<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"hfc_fill_dfifo irq blocked"</FONT>);
					}
					<FONT COLOR="#298C52">goto</FONT> afterXPR;
				} <FONT COLOR="#298C52">else</FONT> {
					dev_kfree_skb(cs-&gt;tx_skb);
					cs-&gt;tx_cnt = 0;
					cs-&gt;tx_skb = NULL;
				}
			<FONT COLOR="#298C52">if</FONT> ((cs-&gt;tx_skb = skb_dequeue(&amp;cs-&gt;sq))) {
				cs-&gt;tx_cnt = 0;
				<FONT COLOR="#298C52">if</FONT> (!test_and_set_bit(<A HREF="hisax.h.shtml#FLG_LOCK_ATOMIC">FLG_LOCK_ATOMIC</A>, &amp;cs-&gt;HW_Flags)) {
					hfc_fill_dfifo(cs);
					test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_LOCK_ATOMIC">FLG_LOCK_ATOMIC</A>, &amp;cs-&gt;HW_Flags);
				} <FONT COLOR="#298C52">else</FONT> {
					<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"hfc_fill_dfifo irq blocked"</FONT>);
				}
			} <FONT COLOR="#298C52">else</FONT>
				sched_event_D(cs, <A HREF="isdnl1.h.shtml#D_XMTBUFREADY">D_XMTBUFREADY</A>);
		}
      afterXPR:
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.hfcD.int_s1 &amp;&amp; count--) {
			val = cs-&gt;hw.hfcD.int_s1;
			cs-&gt;hw.hfcD.int_s1 = 0;
			<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_ISAC">L1_DEB_ISAC</A>) {
				sprintf(tmp, <FONT COLOR="#FF0000">"HFCD irq %x loop %d"</FONT>, val, 15-count);
				<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, tmp);
			}
		} <FONT COLOR="#298C52">else</FONT>
			val = 0;
		restore_flags(flags);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
HFCD_l1hw(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = (<FONT COLOR="#298C52">struct</FONT> IsdnCardState *) st-&gt;l1.hardware;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">char</FONT> str[64];
	<FONT COLOR="#298C52">switch</FONT> (pr) {
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_DATA">PH_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			<FONT COLOR="#298C52">if</FONT> (cs-&gt;tx_skb) {
				skb_queue_tail(&amp;cs-&gt;sq, skb);
<FONT COLOR=#A521F7>#ifdef</FONT> <A HREF="isdnl1.h.shtml#L2FRAME_DEBUG">L2FRAME_DEBUG</A>		<FONT COLOR=#0000FF>/* psa */</FONT>
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_LAPD">L1_DEB_LAPD</A>)
					<A HREF="isdnl1.c.shtml#Logl2Frame">Logl2Frame</A>(cs, skb, <FONT COLOR="#FF0000">"PH_DATA Queued"</FONT>, 0);
<FONT COLOR=#A521F7>#endif</FONT>
			} <FONT COLOR="#298C52">else</FONT> {
				<FONT COLOR="#298C52">if</FONT> ((cs-&gt;dlogflag) &amp;&amp; (!(skb-&gt;data[2] &amp; 1))) {	<FONT COLOR=#0000FF>/* I-FRAME */</FONT>
					<A HREF="q931.c.shtml#LogFrame">LogFrame</A>(cs, skb-&gt;data, skb-&gt;len);
					sprintf(str, <FONT COLOR="#FF0000">"Q.931 frame user-&gt;network tei %d"</FONT>, st-&gt;l2.tei);
					<A HREF="q931.c.shtml#dlogframe">dlogframe</A>(cs, skb-&gt;data + 4, skb-&gt;len - 4,
						  str);
				}
				cs-&gt;tx_skb = skb;
				cs-&gt;tx_cnt = 0;
<FONT COLOR=#A521F7>#ifdef</FONT> <A HREF="isdnl1.h.shtml#L2FRAME_DEBUG">L2FRAME_DEBUG</A>		<FONT COLOR=#0000FF>/* psa */</FONT>
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_LAPD">L1_DEB_LAPD</A>)
					<A HREF="isdnl1.c.shtml#Logl2Frame">Logl2Frame</A>(cs, skb, <FONT COLOR="#FF0000">"PH_DATA"</FONT>, 0);
<FONT COLOR=#A521F7>#endif</FONT>
				<FONT COLOR="#298C52">if</FONT> (!test_and_set_bit(<A HREF="hisax.h.shtml#FLG_LOCK_ATOMIC">FLG_LOCK_ATOMIC</A>, &amp;cs-&gt;HW_Flags)) {
					hfc_fill_dfifo(cs);
					test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_LOCK_ATOMIC">FLG_LOCK_ATOMIC</A>, &amp;cs-&gt;HW_Flags);
				} <FONT COLOR="#298C52">else</FONT>
					<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"hfc_fill_dfifo blocked"</FONT>);

			}
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_PULL">PH_PULL</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
			<FONT COLOR="#298C52">if</FONT> (cs-&gt;tx_skb) {
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_WARN">L1_DEB_WARN</A>)
					<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">" l2l1 tx_skb exist this shouldn't happen"</FONT>);
				skb_queue_tail(&amp;cs-&gt;sq, skb);
				<FONT COLOR="#298C52">break</FONT>;
			}
			<FONT COLOR="#298C52">if</FONT> ((cs-&gt;dlogflag) &amp;&amp; (!(skb-&gt;data[2] &amp; 1))) {	<FONT COLOR=#0000FF>/* I-FRAME */</FONT>
				<A HREF="q931.c.shtml#LogFrame">LogFrame</A>(cs, skb-&gt;data, skb-&gt;len);
				sprintf(str, <FONT COLOR="#FF0000">"Q.931 frame user-&gt;network tei %d"</FONT>, st-&gt;l2.tei);
				<A HREF="q931.c.shtml#dlogframe">dlogframe</A>(cs, skb-&gt;data + 4, skb-&gt;len - 4,
					  str);
			}
			cs-&gt;tx_skb = skb;
			cs-&gt;tx_cnt = 0;
<FONT COLOR=#A521F7>#ifdef</FONT> <A HREF="isdnl1.h.shtml#L2FRAME_DEBUG">L2FRAME_DEBUG</A>		<FONT COLOR=#0000FF>/* psa */</FONT>
			<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_LAPD">L1_DEB_LAPD</A>)
				<A HREF="isdnl1.c.shtml#Logl2Frame">Logl2Frame</A>(cs, skb, <FONT COLOR="#FF0000">"PH_DATA_PULLED"</FONT>, 0);
<FONT COLOR=#A521F7>#endif</FONT>
			<FONT COLOR="#298C52">if</FONT> (!test_and_set_bit(<A HREF="hisax.h.shtml#FLG_LOCK_ATOMIC">FLG_LOCK_ATOMIC</A>, &amp;cs-&gt;HW_Flags)) {
				hfc_fill_dfifo(cs);
				test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_LOCK_ATOMIC">FLG_LOCK_ATOMIC</A>, &amp;cs-&gt;HW_Flags);
			} <FONT COLOR="#298C52">else</FONT>
				<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"hfc_fill_dfifo blocked"</FONT>);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_PULL">PH_PULL</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
<FONT COLOR=#A521F7>#ifdef</FONT> <A HREF="isdnl1.h.shtml#L2FRAME_DEBUG">L2FRAME_DEBUG</A>		<FONT COLOR=#0000FF>/* psa */</FONT>
			<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_LAPD">L1_DEB_LAPD</A>)
				<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"-&gt; PH_REQUEST_PULL"</FONT>);
<FONT COLOR=#A521F7>#endif</FONT>
			<FONT COLOR="#298C52">if</FONT> (!cs-&gt;tx_skb) {
				test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_L1_PULL_REQ">FLG_L1_PULL_REQ</A>, &amp;st-&gt;l1.Flags);
				st-&gt;l1.l1l2(st, <A HREF="hisax.h.shtml#PH_PULL">PH_PULL</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, NULL);
			} <FONT COLOR="#298C52">else</FONT>
				test_and_set_bit(<A HREF="hisax.h.shtml#FLG_L1_PULL_REQ">FLG_L1_PULL_REQ</A>, &amp;st-&gt;l1.Flags);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#HW_RESET">HW_RESET</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			cs-&gt;writeisac(cs, HFCD_STATES, HFCD_LOAD_STATE | 3); <FONT COLOR=#0000FF>/* HFC ST 3 */</FONT>
			udelay(6);
			cs-&gt;writeisac(cs, HFCD_STATES, 3); <FONT COLOR=#0000FF>/* HFC ST 2 */</FONT>
			cs-&gt;hw.hfcD.mst_m |= HFCD_MASTER;
			cs-&gt;writeisac(cs, HFCD_MST_MODE, cs-&gt;hw.hfcD.mst_m);
			cs-&gt;writeisac(cs, HFCD_STATES, HFCD_ACTIVATE | HFCD_DO_ACTION);
			<A HREF="isdnl1.c.shtml#l1_msg">l1_msg</A>(cs, <A HREF="hisax.h.shtml#HW_POWERUP">HW_POWERUP</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#HW_ENABLE">HW_ENABLE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			cs-&gt;writeisac(cs, HFCD_STATES, HFCD_ACTIVATE | HFCD_DO_ACTION);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#HW_DEACTIVATE">HW_DEACTIVATE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			cs-&gt;hw.hfcD.mst_m &amp;= ~HFCD_MASTER;
			cs-&gt;writeisac(cs, HFCD_MST_MODE, cs-&gt;hw.hfcD.mst_m);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#HW_INFO3">HW_INFO3</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			cs-&gt;hw.hfcD.mst_m |= HFCD_MASTER;
			cs-&gt;writeisac(cs, HFCD_MST_MODE, cs-&gt;hw.hfcD.mst_m);
			<FONT COLOR="#298C52">break</FONT>;
<FONT COLOR=#A521F7>#if</FONT> 0
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#HW_TESTLOOP">HW_TESTLOOP</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			u_char val = 0;
			<FONT COLOR="#298C52">if</FONT> (1 &amp; (<FONT COLOR="#298C52">int</FONT>) arg)
				val |= 0x0c;
			<FONT COLOR="#298C52">if</FONT> (2 &amp; (<FONT COLOR="#298C52">int</FONT>) arg)
				val |= 0x3;
			<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#HW_IOM1">HW_IOM1</A>, &amp;cs-&gt;HW_Flags)) {
				<FONT COLOR=#0000FF>/* IOM 1 Mode */</FONT>
				<FONT COLOR="#298C52">if</FONT> (!val) {
					cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_SPCR">ISAC_SPCR</A>, 0xa);
					cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_ADF1">ISAC_ADF1</A>, 0x2);
				} <FONT COLOR="#298C52">else</FONT> {
					cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_SPCR">ISAC_SPCR</A>, val);
					cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_ADF1">ISAC_ADF1</A>, 0xa);
				}
			} <FONT COLOR="#298C52">else</FONT> {
				<FONT COLOR=#0000FF>/* IOM 2 Mode */</FONT>
				cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_SPCR">ISAC_SPCR</A>, val);
				<FONT COLOR="#298C52">if</FONT> (val)
					cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_ADF1">ISAC_ADF1</A>, 0x8);
				<FONT COLOR="#298C52">else</FONT>
					cs-&gt;writeisac(cs, <A HREF="isac.h.shtml#ISAC_ADF1">ISAC_ADF1</A>, 0x0);
			}
			<FONT COLOR="#298C52">break</FONT>;
<FONT COLOR=#A521F7>#endif</FONT>
		<FONT COLOR="#298C52">default</FONT>:
			<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_WARN">L1_DEB_WARN</A>) {
				sprintf(str, <FONT COLOR="#FF0000">"hfcd_l1hw unknown pr %4x"</FONT>, pr);
				<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, str);
			}
			<FONT COLOR="#298C52">break</FONT>;
	}
}

<FONT COLOR="#298C52">void</FONT>
setstack_hfcd(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	st-&gt;l2.l2l1 = HFCD_l1hw;
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
hfc_dbusy_timer(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
<FONT COLOR=#A521F7>#if</FONT> 0
	<FONT COLOR="#298C52">struct</FONT> PStack *stptr;
	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_DBUSY_TIMER">FLG_DBUSY_TIMER</A>, &amp;cs-&gt;HW_Flags)) {
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug)
			<A HREF="isdnl1.c.shtml#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"D-Channel Busy"</FONT>);
		test_and_set_bit(<A HREF="hisax.h.shtml#FLG_L1_DBUSY">FLG_L1_DBUSY</A>, &amp;cs-&gt;HW_Flags);
		stptr = cs-&gt;stlist;
		
		<FONT COLOR="#298C52">while</FONT> (stptr != NULL) {
			stptr-&gt;l1.l1l2(stptr, <A HREF="hisax.h.shtml#PH_PAUSE">PH_PAUSE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);
			stptr = stptr-&gt;next;
		}
	}
<FONT COLOR=#A521F7>#endif</FONT>
}

<A HREF="asuscom.c.shtml#__initfunc">__initfunc</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT>
*init_send_hfcd(<FONT COLOR="#298C52">int</FONT> cnt))
{
	<FONT COLOR="#298C52">int</FONT> i, *send;

	<FONT COLOR="#298C52">if</FONT> (!(send = kmalloc(cnt * <FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT>), GFP_ATOMIC))) {
		printk(KERN_WARNING
		       <FONT COLOR="#FF0000">"HiSax: No memory for hfcd.send\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT>(NULL);
	}
	<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; cnt; i++)
		send[i] = 0x1fff;
	<FONT COLOR="#298C52">return</FONT>(send);
}

<A HREF="asuscom.c.shtml#__initfunc">__initfunc</A>(<FONT COLOR="#298C52">void</FONT>
init2bds0(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs))
{
	cs-&gt;setstack_d = setstack_hfcd;
	cs-&gt;dbusytimer.function = (<FONT COLOR="#298C52">void</FONT> *) hfc_dbusy_timer;
	cs-&gt;dbusytimer.data = (<FONT COLOR="#298C52">long</FONT>) cs;
	init_timer(&amp;cs-&gt;dbusytimer);
	cs-&gt;tqueue.routine = (<FONT COLOR="#298C52">void</FONT> *) (<FONT COLOR="#298C52">void</FONT> *) hfcd_bh;
	<FONT COLOR="#298C52">if</FONT> (!cs-&gt;hw.hfcD.send)
		cs-&gt;hw.hfcD.send = init_send_hfcd(16);
	<FONT COLOR="#298C52">if</FONT> (!cs-&gt;bcs[0].hw.hfc.send)
		cs-&gt;bcs[0].hw.hfc.send = init_send_hfcd(32);
	<FONT COLOR="#298C52">if</FONT> (!cs-&gt;bcs[1].hw.hfc.send)
		cs-&gt;bcs[1].hw.hfc.send = init_send_hfcd(32);
	cs-&gt;BC_Send_Data = &amp;hfc_send_data;
	cs-&gt;bcs[0].BC_SetStack = setstack_2b;
	cs-&gt;bcs[1].BC_SetStack = setstack_2b;
	cs-&gt;bcs[0].BC_Close = close_2bs0;
	cs-&gt;bcs[1].BC_Close = close_2bs0;
	mode_2bs0(cs-&gt;bcs, 0, 0);
	mode_2bs0(cs-&gt;bcs + 1, 0, 1);
}

<FONT COLOR="#298C52">void</FONT>
release2bds0(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;bcs[0].hw.hfc.send) {
		kfree(cs-&gt;bcs[0].hw.hfc.send);
		cs-&gt;bcs[0].hw.hfc.send = NULL;
	}
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;bcs[1].hw.hfc.send) {
		kfree(cs-&gt;bcs[1].hw.hfc.send);
		cs-&gt;bcs[1].hw.hfc.send = NULL;
	}
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;hw.hfcD.send) {
		kfree(cs-&gt;hw.hfcD.send);
		cs-&gt;hw.hfcD.send = NULL;
	}
}
</BODY>

</HTML>
