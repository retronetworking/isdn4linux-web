<HTML>

<!-- Generated by c2html-1.0, Copyright 1998 by Dave Whittington -->
<HEAD>
<TITLE>l3dss1.c</TITLE>
<!--#include virtual="/ssi/js.shtml" -->
<!--#include virtual="/ssi/buttondefs.shtml" -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<TABLE WIDTH="100%">
<TR>
<TD ALIGN=LEFT WIDTH="90"><!--#include virtual="/ssi/b_home.shtml" --></TD>
<TD ALIGN=RIGHT WIDTH="90"><!--#include virtual="/ssi/b_index.shtml" --></TD>
</TR>
</TABLE>
<CENTER><H1>l3dss1.c</H1></CENTER>

<HR>
<PRE>
<FONT COLOR=#0000FF>/* $Id$

 * EURO/DSS1 D-channel protocol
 *
 * Author       Karsten Keil (keil@temic-ech.spacenet.de)
 *              based on the teles driver from Jan den Ouden
 *
 * Thanks to    Jan den Ouden
 *              Fritz Elfert
 *
 * $Log$
 * Revision 2.10  1998/05/25 14:10:20  keil
 * HiSax 3.0
 * X.75 and leased are working again.
 *
 * Revision 2.9  1998/05/25 12:58:17  keil
 * HiSax golden code from certification, Don't use !!!
 * No leased lines, no X75, but many changes.
 *
 * Revision 2.8  1998/03/19 13:18:47  keil
 * Start of a CAPI like interface for supplementary Service
 * first service: SUSPEND
 *
 * Revision 2.7  1998/02/12 23:08:01  keil
 * change for 2.1.86 (removing FREE_READ/FREE_WRITE from [dev]_kfree_skb()
 *
 * Revision 2.6  1998/02/03 23:26:35  keil
 * V110 extensions from Thomas Pfeiffer
 *
 * Revision 2.5  1998/02/02 13:34:28  keil
 * Support australian Microlink net and german AOCD
 *
 * Revision 2.4  1997/11/06 17:12:25  keil
 * KERN_NOTICE --&gt; KERN_INFO
 *
 * Revision 2.3  1997/10/29 19:03:01  keil
 * changes for 2.1
 *
 * Revision 2.2  1997/08/07 17:44:36  keil
 * Fix RESTART
 *
 * Revision 2.1  1997/08/03 14:36:33  keil
 * Implement RESTART procedure
 *
 * Revision 2.0  1997/07/27 21:15:43  keil
 * New Callref based layer3
 *
 * Revision 1.17  1997/06/26 11:11:46  keil
 * SET_SKBFREE now on creation of a SKB
 *
 * Revision 1.15  1997/04/17 11:50:48  keil
 * pa-&gt;loc was undefined, if it was not send by the exchange
 *
 * Old log removed /KKe
 *
 */</FONT>

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#__NO_VERSION__">__NO_VERSION__</A>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hisax.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isdnl3.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"l3dss1.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/ctype.h&gt;

<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">char</FONT> *HiSax_getrev(<FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *revision);
<FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *dss1_revision = <FONT COLOR="#FF0000">"$Revision$"</FONT>;

<FONT COLOR=#A521F7>#define</FONT> <A NAME="EXT_BEARER_CAPS">EXT_BEARER_CAPS</A> 1

<FONT COLOR=#A521F7>#define</FONT>	<A HREF="#MsgHead">MsgHead</A>(ptr, cref, mty) \
	*ptr++ = 0x8; \
	*ptr++ = 0x1; \
	*ptr++ = cref^0x80; \
	*ptr++ = mty


<FONT COLOR=#A521F7>#ifdef</FONT> <A HREF="hisax.h.shtml#HISAX_DE_AOC">HISAX_DE_AOC</A>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_parse_facility">l3dss1_parse_facility</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char *p)
{
	<FONT COLOR="#298C52">int</FONT> qd_len = 0;

	p++;
	qd_len = *p++;
	<FONT COLOR="#298C52">if</FONT> (qd_len == 0) {
		<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"qd_len == 0"</FONT>);
		<FONT COLOR="#298C52">return</FONT>;
	}
	<FONT COLOR="#298C52">if</FONT>((*p &amp; 0x1F) != 0x11) {	<FONT COLOR=#0000FF>/* Service discriminator, supplementary service */</FONT>
		<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"supplementary service != 0x11"</FONT>);
		<FONT COLOR="#298C52">return</FONT>;
	}
	<FONT COLOR="#298C52">while</FONT>(qd_len &gt; 0 &amp;&amp; !(*p &amp; 0x80)) {	<FONT COLOR=#0000FF>/* extension ? */</FONT>
		p++; qd_len--;
	} 
	<FONT COLOR="#298C52">if</FONT>(qd_len &lt; 2) {
		<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"qd_len &lt; 2"</FONT>);
		<FONT COLOR="#298C52">return</FONT>;
	}
	p++; qd_len--;
	<FONT COLOR="#298C52">if</FONT>((*p &amp; 0xE0) != 0xA0) {	<FONT COLOR=#0000FF>/* class and form */</FONT>
		<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"class and form != 0xA0"</FONT>);
		<FONT COLOR="#298C52">return</FONT>;
	}
	<FONT COLOR="#298C52">switch</FONT>(*p &amp; 0x1F) {		<FONT COLOR=#0000FF>/* component tag */</FONT>
	    <FONT COLOR="#298C52">case</FONT> 1: <FONT COLOR=#0000FF>/* invoke */</FONT>
		{
		    <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">char</FONT> nlen, ilen;
		    <FONT COLOR="#298C52">int</FONT> ident;
    
		    p++; qd_len--;
		    <FONT COLOR="#298C52">if</FONT>(qd_len &lt; 1) {
			    <A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"qd_len &lt; 1"</FONT>);
			    <FONT COLOR="#298C52">break</FONT>;
		    }
		    <FONT COLOR="#298C52">if</FONT>(*p &amp; 0x80) { <FONT COLOR=#0000FF>/* length format */</FONT>
			    <A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"*p &amp; 0x80 length format"</FONT>);
			    <FONT COLOR="#298C52">break</FONT>;
		    }
		    nlen = *p++; qd_len--;
		    <FONT COLOR="#298C52">if</FONT>(qd_len &lt; nlen) {
			    <A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"qd_len &lt; nlen"</FONT>);
			    <FONT COLOR="#298C52">return</FONT>;
		    }
		    qd_len -= nlen;
    
		    <FONT COLOR="#298C52">if</FONT>(nlen &lt; 2) {
			    <A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"nlen &lt; 2"</FONT>);
			    <FONT COLOR="#298C52">return</FONT>;
		    }
		    <FONT COLOR="#298C52">if</FONT>(*p != 0x02) {	<FONT COLOR=#0000FF>/* invoke identifier tag */</FONT>
			    <A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"invoke identifier tag !=0x02"</FONT>);
			    <FONT COLOR="#298C52">return</FONT>;
		    }
		    p++; nlen--;
		    <FONT COLOR="#298C52">if</FONT>(*p &amp; 0x80) { <FONT COLOR=#0000FF>/* length format */</FONT>
			    <A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"*p &amp; 0x80 length format 2"</FONT>);
			    <FONT COLOR="#298C52">break</FONT>;
		    }
		    ilen = *p++; nlen--;
		    <FONT COLOR="#298C52">if</FONT>(ilen &gt; nlen || ilen == 0) {
			    <A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"ilen &gt; nlen || ilen == 0"</FONT>);
			    <FONT COLOR="#298C52">return</FONT>;
		    }
		    nlen -= ilen;
		    ident = 0;
		    <FONT COLOR="#298C52">while</FONT>(ilen &gt; 0) {
			    ident = (ident &lt;&lt; 8) | (*p++ &amp; 0xFF);	<FONT COLOR=#0000FF>/* invoke identifier */</FONT>
			    ilen--;
		    }
    
		    <FONT COLOR="#298C52">if</FONT>(nlen &lt; 2) {
			    <A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"nlen &lt; 2 22"</FONT>);
			    <FONT COLOR="#298C52">return</FONT>;
		    }
		    <FONT COLOR="#298C52">if</FONT>(*p != 0x02)	{	<FONT COLOR=#0000FF>/* operation value */</FONT> 
			    <A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"operation value !=0x02"</FONT>);
			    <FONT COLOR="#298C52">return</FONT>;
		    }
		    p++; nlen--;
		    ilen = *p++; nlen--;
		    <FONT COLOR="#298C52">if</FONT>(ilen &gt; nlen || ilen == 0) {
			    <A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"ilen &gt; nlen || ilen == 0 22"</FONT>);
			    <FONT COLOR="#298C52">return</FONT>;
		    }
		    nlen -= ilen;
		    ident = 0;
		    <FONT COLOR="#298C52">while</FONT>(ilen &gt; 0) {
			    ident = (ident &lt;&lt; 8) | (*p++ &amp; 0xFF);
			    ilen--;
		    }
    
    #define <A HREF="#FOO1">FOO1</A>(s,a,b) \
	    <FONT COLOR="#298C52">while</FONT>(nlen &gt; 1) {		\
		    <FONT COLOR="#298C52">int</FONT> ilen = p[1];	\
		    <FONT COLOR="#298C52">if</FONT>(nlen &lt; ilen+2) {	\
			    <A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"FOO1  nlen &lt; ilen+2"</FONT>); \
			    <FONT COLOR="#298C52">return</FONT>;		\
		    }			\
		    nlen -= ilen+2;		\
		    <FONT COLOR="#298C52">if</FONT>((*p &amp; 0xFF) == (a)) {	\
			    <FONT COLOR="#298C52">int</FONT> nlen = ilen;	\
			    p += 2;		\
			    b;		\
		    } <FONT COLOR="#298C52">else</FONT> {		\
			    p += ilen+2;	\
		    }			\
	    }
			    
		    <FONT COLOR="#298C52">switch</FONT>(ident) {
		    <FONT COLOR="#298C52">default</FONT>:
			    <FONT COLOR="#298C52">break</FONT>;
		    <FONT COLOR="#298C52">case</FONT> 0x22: <FONT COLOR=#0000FF>/* during */</FONT>
			    <A HREF="#FOO1">FOO1</A>(<FONT COLOR="#FF0000">"1A"</FONT>,0x30,<A HREF="#FOO1">FOO1</A>(<FONT COLOR="#FF0000">"1C"</FONT>,0xA1,<A HREF="#FOO1">FOO1</A>(<FONT COLOR="#FF0000">"1D"</FONT>,0x30,<A HREF="#FOO1">FOO1</A>(<FONT COLOR="#FF0000">"1E"</FONT>,0x02,({
				    ident = 0;
				    <FONT COLOR="#298C52">while</FONT>(ilen &gt; 0) {
					    ident = (ident&lt;&lt;8) | *p++;
					    ilen--;
				    }
				    <FONT COLOR="#298C52">if</FONT> (ident &gt; pc-&gt;para.chargeinfo) {
					    pc-&gt;para.chargeinfo = ident;
					    pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_CHARGE">CC_CHARGE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, pc);
				    }
				    <FONT COLOR="#298C52">if</FONT> (pc-&gt;st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_CHARGE">L3_DEB_CHARGE</A>) {
					    <FONT COLOR="#298C52">if</FONT> (*(p+2) == 0) {
						    <A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"charging info during %d"</FONT>, pc-&gt;para.chargeinfo);
					    } <FONT COLOR="#298C52">else</FONT> {
						    <A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"charging info final %d"</FONT>, pc-&gt;para.chargeinfo);
					    }
				    }
			    })))))
			    <FONT COLOR="#298C52">break</FONT>;
		    <FONT COLOR="#298C52">case</FONT> 0x24: <FONT COLOR=#0000FF>/* final */</FONT>
			    <A HREF="#FOO1">FOO1</A>(<FONT COLOR="#FF0000">"2A"</FONT>,0x30,<A HREF="#FOO1">FOO1</A>(<FONT COLOR="#FF0000">"2B"</FONT>,0x30,<A HREF="#FOO1">FOO1</A>(<FONT COLOR="#FF0000">"2C"</FONT>,0xA1,<A HREF="#FOO1">FOO1</A>(<FONT COLOR="#FF0000">"2D"</FONT>,0x30,<A HREF="#FOO1">FOO1</A>(<FONT COLOR="#FF0000">"2E"</FONT>,0x02,({
				    ident = 0;
				    <FONT COLOR="#298C52">while</FONT>(ilen &gt; 0) {
					    ident = (ident&lt;&lt;8) | *p++;
					    ilen--;
				    }
				    <FONT COLOR="#298C52">if</FONT> (ident &gt; pc-&gt;para.chargeinfo) {
					    pc-&gt;para.chargeinfo = ident;
					    pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_CHARGE">CC_CHARGE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, pc);
				    }
				    <FONT COLOR="#298C52">if</FONT> (pc-&gt;st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_CHARGE">L3_DEB_CHARGE</A>) {
					    <A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"charging info final %d"</FONT>, pc-&gt;para.chargeinfo);
				    }
			    }))))))
		    <FONT COLOR="#298C52">break</FONT>;
		    }
    #undef <A HREF="#FOO1">FOO1</A>
    
		}
	    <FONT COLOR="#298C52">break</FONT>;
	    <FONT COLOR="#298C52">case</FONT> 2: <FONT COLOR=#0000FF>/* return result */</FONT>
		    <A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"return result break"</FONT>);
		    <FONT COLOR="#298C52">break</FONT>;
	    <FONT COLOR="#298C52">case</FONT> 3: <FONT COLOR=#0000FF>/* return error */</FONT>
		    <A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"return error break"</FONT>);
		    <FONT COLOR="#298C52">break</FONT>;
	    <FONT COLOR="#298C52">default</FONT>:
		    <A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"default break"</FONT>);
		    <FONT COLOR="#298C52">break</FONT>;
	}
}
<FONT COLOR=#A521F7>#endif</FONT>	

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> 
<A NAME="l3dss1_check_messagetype_validity">l3dss1_check_messagetype_validity</A>(<FONT COLOR="#298C52">int</FONT> mt) {
<FONT COLOR=#0000FF>/* verify if a message type exists */</FONT>
	<FONT COLOR="#298C52">switch</FONT>(mt) {
		<FONT COLOR="#298C52">case</FONT> <A HREF="l3dss1.h.shtml#MT_ALERTING">MT_ALERTING</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="l3dss1.h.shtml#MT_CALL_PROCEEDING">MT_CALL_PROCEEDING</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="l3dss1.h.shtml#MT_CONNECT">MT_CONNECT</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="l3dss1.h.shtml#MT_CONNECT_ACKNOWLEDGE">MT_CONNECT_ACKNOWLEDGE</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="l3dss1.h.shtml#MT_PROGRESS">MT_PROGRESS</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="l3dss1.h.shtml#MT_SETUP">MT_SETUP</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="l3dss1.h.shtml#MT_SETUP_ACKNOWLEDGE">MT_SETUP_ACKNOWLEDGE</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="l3dss1.h.shtml#MT_RESUME">MT_RESUME</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="l3dss1.h.shtml#MT_RESUME_ACKNOWLEDGE">MT_RESUME_ACKNOWLEDGE</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="l3dss1.h.shtml#MT_RESUME_REJECT">MT_RESUME_REJECT</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="l3dss1.h.shtml#MT_SUSPEND">MT_SUSPEND</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="l3dss1.h.shtml#MT_SUSPEND_ACKNOWLEDGE">MT_SUSPEND_ACKNOWLEDGE</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="l3dss1.h.shtml#MT_SUSPEND_REJECT">MT_SUSPEND_REJECT</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="l3dss1.h.shtml#MT_USER_INFORMATION">MT_USER_INFORMATION</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="l3dss1.h.shtml#MT_DISCONNECT">MT_DISCONNECT</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="l3dss1.h.shtml#MT_RELEASE">MT_RELEASE</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="l3dss1.h.shtml#MT_RELEASE_COMPLETE">MT_RELEASE_COMPLETE</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="l3dss1.h.shtml#MT_RESTART">MT_RESTART</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="l3dss1.h.shtml#MT_RESTART_ACKNOWLEDGE">MT_RESTART_ACKNOWLEDGE</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="l3dss1.h.shtml#MT_SEGMENT">MT_SEGMENT</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="l3dss1.h.shtml#MT_CONGESTION_CONTROL">MT_CONGESTION_CONTROL</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="l3dss1.h.shtml#MT_INFORMATION">MT_INFORMATION</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="l3dss1.h.shtml#MT_FACILITY">MT_FACILITY</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="l3dss1.h.shtml#MT_NOTIFY">MT_NOTIFY</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="l3dss1.h.shtml#MT_STATUS">MT_STATUS</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="l3dss1.h.shtml#MT_STATUS_ENQUIRY">MT_STATUS_ENQUIRY</A>:
			<FONT COLOR="#298C52">return</FONT>(1);
		<FONT COLOR="#298C52">default</FONT>:
			<FONT COLOR="#298C52">return</FONT>(0);
	}
	<FONT COLOR="#298C52">return</FONT>(0);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="l3dss1_message">l3dss1_message</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char mt)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;
	u_char *p;

	<FONT COLOR="#298C52">if</FONT> (!(skb = <A HREF="isdnl3.c.shtml#l3_alloc_skb">l3_alloc_skb</A>(4)))
		<FONT COLOR="#298C52">return</FONT>;
	p = skb_put(skb, 4);
	<A HREF="#MsgHead">MsgHead</A>(p, pc-&gt;callref, mt);
	<A HREF="isdnl3.c.shtml#l3_msg">l3_msg</A>(pc-&gt;st, <A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, skb);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_release_req">l3dss1_release_req</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<A HREF="isdnl3.c.shtml#StopAllL3Timer">StopAllL3Timer</A>(pc);
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 19);
	<A HREF="#l3dss1_message">l3dss1_message</A>(pc, <A HREF="l3dss1.h.shtml#MT_RELEASE">MT_RELEASE</A>);
	<A HREF="isdnl3.c.shtml#L3AddTimer">L3AddTimer</A>(&amp;pc-&gt;timer, <A HREF="l3dss1.h.shtml#T308">T308</A>, <A HREF="hisax.h.shtml#CC_T308_1">CC_T308_1</A>);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_release_cmpl">l3dss1_release_cmpl</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	u_char *p;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">int</FONT> cause = -1;

	p = skb-&gt;data;
	pc-&gt;para.loc = 0;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, <A HREF="l3dss1.h.shtml#IE_CAUSE">IE_CAUSE</A>, 0))) {
		p++;
		<FONT COLOR="#298C52">if</FONT> (*p++ == 2)
			pc-&gt;para.loc = *p++;
		cause = *p &amp; 0x7f;
	}
	dev_kfree_skb(skb);
	<A HREF="isdnl3.c.shtml#StopAllL3Timer">StopAllL3Timer</A>(pc);
	pc-&gt;para.cause = cause;
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 0);
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_RELEASE">CC_RELEASE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, pc);
	<A HREF="isdnl3.c.shtml#release_l3_process">release_l3_process</A>(pc);
}

<FONT COLOR=#A521F7>#ifdef</FONT> <A HREF="#EXT_BEARER_CAPS">EXT_BEARER_CAPS</A>

u_char *<A NAME="EncodeASyncParams">EncodeASyncParams</A>(u_char *p, u_char si2)
{ <FONT COLOR=#0000FF>// 7c 06 88  90 21 42 00 bb</FONT>

  p[0] = p[1] = 0; p[2] = 0x80;
  <FONT COLOR="#298C52">if</FONT> (si2 &amp; 32) <FONT COLOR=#0000FF>// 7 data bits</FONT>
    p[2] += 16;
  <FONT COLOR="#298C52">else</FONT>          <FONT COLOR=#0000FF>// 8 data bits</FONT>
    p[2] +=24;

  <FONT COLOR="#298C52">if</FONT> (si2 &amp; 16) <FONT COLOR=#0000FF>// 2 stop bits</FONT>
    p[2] += 96;
  <FONT COLOR="#298C52">else</FONT>          <FONT COLOR=#0000FF>// 1 stop bit</FONT>
    p[2] = 32;

  <FONT COLOR="#298C52">if</FONT> (si2 &amp; 8)  <FONT COLOR=#0000FF>// even parity</FONT>
    p[2] += 2;
  <FONT COLOR="#298C52">else</FONT>          <FONT COLOR=#0000FF>// no parity</FONT>
    p[2] += 3;

  <FONT COLOR="#298C52">switch</FONT> (si2 &amp; 0x07)
  {
    <FONT COLOR="#298C52">case</FONT> 0:     p[0] = 66;      <FONT COLOR=#0000FF>// 1200 bit/s</FONT>
                <FONT COLOR="#298C52">break</FONT>;
    <FONT COLOR="#298C52">case</FONT> 1:     p[0] = 88;      <FONT COLOR=#0000FF>// 1200/75 bit/s</FONT>
                <FONT COLOR="#298C52">break</FONT>;
    <FONT COLOR="#298C52">case</FONT> 2:     p[0] = 87;      <FONT COLOR=#0000FF>// 75/1200 bit/s</FONT>
                <FONT COLOR="#298C52">break</FONT>;
    <FONT COLOR="#298C52">case</FONT> 3:     p[0] = 67;      <FONT COLOR=#0000FF>// 2400 bit/s</FONT>
                <FONT COLOR="#298C52">break</FONT>;
    <FONT COLOR="#298C52">case</FONT> 4:     p[0] = 69;      <FONT COLOR=#0000FF>// 4800 bit/s</FONT>
                <FONT COLOR="#298C52">break</FONT>;
    <FONT COLOR="#298C52">case</FONT> 5:     p[0] = 72;      <FONT COLOR=#0000FF>// 9600 bit/s</FONT>
                <FONT COLOR="#298C52">break</FONT>;
    <FONT COLOR="#298C52">case</FONT> 6:     p[0] = 73;      <FONT COLOR=#0000FF>// 14400 bit/s</FONT>
                <FONT COLOR="#298C52">break</FONT>;
    <FONT COLOR="#298C52">case</FONT> 7:     p[0] = 75;      <FONT COLOR=#0000FF>// 19200 bit/s</FONT>
                <FONT COLOR="#298C52">break</FONT>;
  }
  <FONT COLOR="#298C52">return</FONT> p+3;
}

u_char <A NAME="EncodeSyncParams">EncodeSyncParams</A>(u_char si2, u_char ai)
{

  <FONT COLOR="#298C52">switch</FONT> (si2)
  {
    <FONT COLOR="#298C52">case</FONT> 0:     <FONT COLOR="#298C52">return</FONT> ai + 2;  <FONT COLOR=#0000FF>// 1200 bit/s</FONT>
    <FONT COLOR="#298C52">case</FONT> 1:     <FONT COLOR="#298C52">return</FONT> ai + 24; <FONT COLOR=#0000FF>// 1200/75 bit/s</FONT>
    <FONT COLOR="#298C52">case</FONT> 2:     <FONT COLOR="#298C52">return</FONT> ai + 23; <FONT COLOR=#0000FF>// 75/1200 bit/s</FONT>
    <FONT COLOR="#298C52">case</FONT> 3:     <FONT COLOR="#298C52">return</FONT> ai + 3;  <FONT COLOR=#0000FF>// 2400 bit/s</FONT>
    <FONT COLOR="#298C52">case</FONT> 4:     <FONT COLOR="#298C52">return</FONT> ai + 5;  <FONT COLOR=#0000FF>// 4800 bit/s</FONT>
    <FONT COLOR="#298C52">case</FONT> 5:     <FONT COLOR="#298C52">return</FONT> ai + 8;  <FONT COLOR=#0000FF>// 9600 bit/s</FONT>
    <FONT COLOR="#298C52">case</FONT> 6:     <FONT COLOR="#298C52">return</FONT> ai + 9;  <FONT COLOR=#0000FF>// 14400 bit/s</FONT>
    <FONT COLOR="#298C52">case</FONT> 7:     <FONT COLOR="#298C52">return</FONT> ai + 11; <FONT COLOR=#0000FF>// 19200 bit/s</FONT>
    <FONT COLOR="#298C52">case</FONT> 8:     <FONT COLOR="#298C52">return</FONT> ai + 14; <FONT COLOR=#0000FF>// 48000 bit/s</FONT>
    <FONT COLOR="#298C52">case</FONT> 9:     <FONT COLOR="#298C52">return</FONT> ai + 15; <FONT COLOR=#0000FF>// 56000 bit/s</FONT>
    <FONT COLOR="#298C52">case</FONT> 15:    <FONT COLOR="#298C52">return</FONT> ai + 40; <FONT COLOR=#0000FF>// negotiate bit/s</FONT>
    <FONT COLOR="#298C52">default</FONT>:    <FONT COLOR="#298C52">break</FONT>;
  }
  <FONT COLOR="#298C52">return</FONT> ai;
}


<FONT COLOR="#298C52">static</FONT> u_char <A HREF="#DecodeASyncParams">DecodeASyncParams</A>(u_char si2, u_char *p)
{ u_char info;

  <FONT COLOR="#298C52">switch</FONT> (p[5])
  {
    <FONT COLOR="#298C52">case</FONT> 66: <FONT COLOR=#0000FF>// 1200 bit/s</FONT>
             <FONT COLOR="#298C52">break</FONT>; <FONT COLOR=#0000FF>// si2 bleibt gleich</FONT>
    <FONT COLOR="#298C52">case</FONT> 88: <FONT COLOR=#0000FF>// 1200/75 bit/s</FONT>
             si2 += 1;
             <FONT COLOR="#298C52">break</FONT>;
    <FONT COLOR="#298C52">case</FONT> 87: <FONT COLOR=#0000FF>// 75/1200 bit/s</FONT>
             si2 += 2;
             <FONT COLOR="#298C52">break</FONT>;
    <FONT COLOR="#298C52">case</FONT> 67: <FONT COLOR=#0000FF>// 2400 bit/s</FONT>
             si2 += 3;
             <FONT COLOR="#298C52">break</FONT>;
    <FONT COLOR="#298C52">case</FONT> 69: <FONT COLOR=#0000FF>// 4800 bit/s</FONT>
             si2 += 4;
             <FONT COLOR="#298C52">break</FONT>;
    <FONT COLOR="#298C52">case</FONT> 72: <FONT COLOR=#0000FF>// 9600 bit/s</FONT>
             si2 += 5;
             <FONT COLOR="#298C52">break</FONT>;
    <FONT COLOR="#298C52">case</FONT> 73: <FONT COLOR=#0000FF>// 14400 bit/s</FONT>
             si2 += 6;
             <FONT COLOR="#298C52">break</FONT>;
    <FONT COLOR="#298C52">case</FONT> 75: <FONT COLOR=#0000FF>// 19200 bit/s</FONT>
             si2 += 7;
             <FONT COLOR="#298C52">break</FONT>;
  }

  info = p[7] &amp; 0x7f;
  <FONT COLOR="#298C52">if</FONT> ((info &amp; 16) &amp;&amp; (!(info &amp; 8)))   <FONT COLOR=#0000FF>// 7 data bits</FONT>
    si2 += 32;                        <FONT COLOR=#0000FF>// else 8 data bits</FONT>
  <FONT COLOR="#298C52">if</FONT> ((info &amp; 96) == 96)              <FONT COLOR=#0000FF>// 2 stop bits</FONT>
    si2 += 16;                        <FONT COLOR=#0000FF>// else 1 stop bit</FONT>
  <FONT COLOR="#298C52">if</FONT> ((info &amp; 2) &amp;&amp; (!(info &amp; 1)))    <FONT COLOR=#0000FF>// even parity</FONT>
    si2 += 8;                         <FONT COLOR=#0000FF>// else no parity</FONT>

  <FONT COLOR="#298C52">return</FONT> si2;
}


<FONT COLOR="#298C52">static</FONT> u_char <A HREF="#DecodeSyncParams">DecodeSyncParams</A>(u_char si2, u_char info)
{
  info &amp;= 0x7f;
  <FONT COLOR="#298C52">switch</FONT> (info)
  {
    <FONT COLOR="#298C52">case</FONT> 40: <FONT COLOR=#0000FF>// bit/s aushandeln  --- hat nicht geklappt, ai wird 165 statt 175!</FONT>
      <FONT COLOR="#298C52">return</FONT> si2 + 15;
    <FONT COLOR="#298C52">case</FONT> 15: <FONT COLOR=#0000FF>// 56000 bit/s --- hat nicht geklappt, ai wird 0 statt 169 !</FONT>
      <FONT COLOR="#298C52">return</FONT> si2 + 9;
    <FONT COLOR="#298C52">case</FONT> 14: <FONT COLOR=#0000FF>// 48000 bit/s</FONT>
      <FONT COLOR="#298C52">return</FONT> si2 + 8;
    <FONT COLOR="#298C52">case</FONT> 11: <FONT COLOR=#0000FF>// 19200 bit/s</FONT>
      <FONT COLOR="#298C52">return</FONT> si2 + 7;
    <FONT COLOR="#298C52">case</FONT> 9:  <FONT COLOR=#0000FF>// 14400 bit/s</FONT>
      <FONT COLOR="#298C52">return</FONT> si2 + 6;
    <FONT COLOR="#298C52">case</FONT> 8:  <FONT COLOR=#0000FF>// 9600  bit/s</FONT>
      <FONT COLOR="#298C52">return</FONT> si2 + 5;
    <FONT COLOR="#298C52">case</FONT> 5:  <FONT COLOR=#0000FF>// 4800  bit/s</FONT>
      <FONT COLOR="#298C52">return</FONT> si2 + 4;
    <FONT COLOR="#298C52">case</FONT> 3:  <FONT COLOR=#0000FF>// 2400  bit/s</FONT>
      <FONT COLOR="#298C52">return</FONT> si2 + 3;
    <FONT COLOR="#298C52">case</FONT> 23: <FONT COLOR=#0000FF>// 75/1200 bit/s</FONT>
      <FONT COLOR="#298C52">return</FONT> si2 + 2;
    <FONT COLOR="#298C52">case</FONT> 24: <FONT COLOR=#0000FF>// 1200/75 bit/s</FONT>
      <FONT COLOR="#298C52">return</FONT> si2 + 1;
    <FONT COLOR="#298C52">default</FONT>: <FONT COLOR=#0000FF>// 1200 bit/s</FONT>
      <FONT COLOR="#298C52">return</FONT> si2;
  }
}

<FONT COLOR="#298C52">static</FONT> u_char <A NAME="DecodeSI2">DecodeSI2</A>(<FONT COLOR="#298C52">struct</FONT> sk_buff *skb)
{ u_char *p; <FONT COLOR=#0000FF>//, *pend=skb-&gt;data + skb-&gt;len;</FONT>

        <FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(skb-&gt;data, skb-&gt;len, 0x7c, 0)))
        {
          <FONT COLOR="#298C52">switch</FONT> (p[4] &amp; 0x0f)
          {
            <FONT COLOR="#298C52">case</FONT> 0x01:  <FONT COLOR="#298C52">if</FONT> (p[1] == 0x04) <FONT COLOR=#0000FF>// sync. Bitratenadaption</FONT>
                          <FONT COLOR="#298C52">return</FONT> <A HREF="#DecodeSyncParams">DecodeSyncParams</A>(160, p[5]); <FONT COLOR=#0000FF>// V.110/X.30</FONT>
                        <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (p[1] == 0x06) <FONT COLOR=#0000FF>// async. Bitratenadaption</FONT>
                          <FONT COLOR="#298C52">return</FONT> <A HREF="#DecodeASyncParams">DecodeASyncParams</A>(192, p);   <FONT COLOR=#0000FF>// V.110/X.30</FONT>
                        <FONT COLOR="#298C52">break</FONT>;
            <FONT COLOR="#298C52">case</FONT> 0x08:  <FONT COLOR=#0000FF>// if (p[5] == 0x02) // sync. Bitratenadaption</FONT>
                          <FONT COLOR="#298C52">return</FONT> <A HREF="#DecodeSyncParams">DecodeSyncParams</A>(176, p[5]); <FONT COLOR=#0000FF>// V.120</FONT>
                        <FONT COLOR="#298C52">break</FONT>;
          }
        }
        <FONT COLOR="#298C52">return</FONT> 0;
}

<FONT COLOR=#A521F7>#endif</FONT>


<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_setup_req">l3dss1_setup_req</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr,
		 <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;
	u_char tmp[128];
	u_char *p = tmp;
	u_char channel = 0;
	u_char screen = 0x80;
	u_char *teln;
	u_char *msn;
	u_char *sub;
	u_char *sp;
	<FONT COLOR="#298C52">int</FONT> l;

	<A HREF="#MsgHead">MsgHead</A>(p, pc-&gt;callref, <A HREF="l3dss1.h.shtml#MT_SETUP">MT_SETUP</A>);

	<FONT COLOR=#0000FF>/*
	 * Set Bearer Capability, Map info from 1TR6-convention to EDSS1
	 */</FONT>
<FONT COLOR=#A521F7>#ifdef</FONT> <A HREF="hisax.h.shtml#HISAX_EURO_SENDCOMPLETE">HISAX_EURO_SENDCOMPLETE</A>
	*p++ = 0xa1;		<FONT COLOR=#0000FF>/* complete indicator */</FONT>
<FONT COLOR=#A521F7>#endif</FONT>
	<FONT COLOR="#298C52">switch</FONT> (pc-&gt;para.setup.si1) {
		<FONT COLOR="#298C52">case</FONT> 1:	<FONT COLOR=#0000FF>/* Telephony                               */</FONT>
			*p++ = 0x4;	<FONT COLOR=#0000FF>/* BC-IE-code                              */</FONT>
			*p++ = 0x3;	<FONT COLOR=#0000FF>/* Length                                  */</FONT>
			*p++ = 0x90;	<FONT COLOR=#0000FF>/* Coding Std. CCITT, 3.1 kHz audio     */</FONT>
			*p++ = 0x90;	<FONT COLOR=#0000FF>/* Circuit-Mode 64kbps                     */</FONT>
			*p++ = 0xa3;	<FONT COLOR=#0000FF>/* A-Law Audio                             */</FONT>
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> 5:	<FONT COLOR=#0000FF>/* Datatransmission 64k, BTX               */</FONT>
		<FONT COLOR="#298C52">case</FONT> 7:	<FONT COLOR=#0000FF>/* Datatransmission 64k                    */</FONT>
		<FONT COLOR="#298C52">default</FONT>:
			*p++ = 0x4;	<FONT COLOR=#0000FF>/* BC-IE-code                              */</FONT>
			*p++ = 0x2;	<FONT COLOR=#0000FF>/* Length                                  */</FONT>
			*p++ = 0x88;	<FONT COLOR=#0000FF>/* Coding Std. CCITT, unrestr. dig. Inform. */</FONT>
			*p++ = 0x90;	<FONT COLOR=#0000FF>/* Circuit-Mode 64kbps                      */</FONT>
			<FONT COLOR="#298C52">break</FONT>;
	}
	<FONT COLOR=#0000FF>/*
	 * What about info2? Mapping to High-Layer-Compatibility?
	 */</FONT>
	teln = pc-&gt;para.setup.phone;
	<FONT COLOR="#298C52">if</FONT> (*teln) {
		<FONT COLOR=#0000FF>/* parse number for special things */</FONT>
		<FONT COLOR="#298C52">if</FONT> (!isdigit(*teln)) {
			<FONT COLOR="#298C52">switch</FONT> (0x5f &amp; *teln) {
				<FONT COLOR="#298C52">case</FONT> <FONT COLOR="#FF0000">'C'</FONT>:
					channel = 0x08;
				<FONT COLOR="#298C52">case</FONT> <FONT COLOR="#FF0000">'P'</FONT>:
					channel |= 0x80;
					teln++;
					<FONT COLOR="#298C52">if</FONT> (*teln == <FONT COLOR="#FF0000">'1'</FONT>)
						channel |= 0x01;
					<FONT COLOR="#298C52">else</FONT>
						channel |= 0x02;
					<FONT COLOR="#298C52">break</FONT>;
				<FONT COLOR="#298C52">case</FONT> <FONT COLOR="#FF0000">'R'</FONT>:
					screen = 0xA0;
					<FONT COLOR="#298C52">break</FONT>;
				<FONT COLOR="#298C52">case</FONT> <FONT COLOR="#FF0000">'D'</FONT>:
					screen = 0x80;
					<FONT COLOR="#298C52">break</FONT>;
				<FONT COLOR="#298C52">default</FONT>:
					<FONT COLOR="#298C52">if</FONT> (pc-&gt;debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_WARN">L3_DEB_WARN</A>)
						<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"Wrong MSN Code"</FONT>);
					<FONT COLOR="#298C52">break</FONT>;
			}
			teln++;
		}
	}
	<FONT COLOR="#298C52">if</FONT> (channel) {
		*p++ = <A HREF="l3dss1.h.shtml#IE_CHANNEL_ID">IE_CHANNEL_ID</A>;
		*p++ = 1;
		*p++ = channel;
	}
	msn = pc-&gt;para.setup.eazmsn;
	sub = NULL;
	sp = msn;
	<FONT COLOR="#298C52">while</FONT> (*sp) { 
		<FONT COLOR="#298C52">if</FONT> (<FONT COLOR="#FF0000">'.'</FONT> == *sp) {
			sub = sp;
			*sp = 0;
		} <FONT COLOR="#298C52">else</FONT> 
			sp++;
	}
	<FONT COLOR="#298C52">if</FONT> (*msn) {
		*p++ = 0x6c;
		*p++ = strlen(msn) + (screen ? 2 : 1);
		<FONT COLOR=#0000FF>/* Classify as AnyPref. */</FONT>
		<FONT COLOR="#298C52">if</FONT> (screen) {
			*p++ = 0x01;	<FONT COLOR=#0000FF>/* Ext = '0'B, Type = '000'B, Plan = '0001'B. */</FONT>
			*p++ = screen;
		} <FONT COLOR="#298C52">else</FONT>
			*p++ = 0x81;	<FONT COLOR=#0000FF>/* Ext = '1'B, Type = '000'B, Plan = '0001'B. */</FONT>
		<FONT COLOR="#298C52">while</FONT> (*msn)
			*p++ = *msn++ &amp; 0x7f;
	}
	<FONT COLOR="#298C52">if</FONT> (sub) {
		*sub++ = <FONT COLOR="#FF0000">'.'</FONT>;
		*p++ = 0x6d; <FONT COLOR=#0000FF>/* Calling party subaddress */</FONT>
 		*p++ = strlen(sub) + 2;
		*p++ = 0x80;	<FONT COLOR=#0000FF>/* NSAP coded */</FONT>
		*p++ = 0x50;	<FONT COLOR=#0000FF>/* local IDI format */</FONT>
 		<FONT COLOR="#298C52">while</FONT> (*sub)
			*p++ = *sub++ &amp; 0x7f;
	}
	sub = NULL;
	sp = teln;
	<FONT COLOR="#298C52">while</FONT> (*sp) { 
		<FONT COLOR="#298C52">if</FONT> (<FONT COLOR="#FF0000">'.'</FONT> == *sp) {
			sub = sp;
			*sp = 0;
		} <FONT COLOR="#298C52">else</FONT> 
			sp++;
	}
	*p++ = 0x70;
	*p++ = strlen(teln) + 1;
	<FONT COLOR=#0000FF>/* Classify as AnyPref. */</FONT>
	*p++ = 0x81;		<FONT COLOR=#0000FF>/* Ext = '1'B, Type = '000'B, Plan = '0001'B. */</FONT>
	<FONT COLOR="#298C52">while</FONT> (*teln)
		*p++ = *teln++ &amp; 0x7f;

	<FONT COLOR="#298C52">if</FONT> (sub) {
		*sub++ = <FONT COLOR="#FF0000">'.'</FONT>;
		*p++ = 0x71; <FONT COLOR=#0000FF>/* Called party subaddress */</FONT>
 		*p++ = strlen(sub) + 2;
		*p++ = 0x80;	<FONT COLOR=#0000FF>/* NSAP coded */</FONT>
		*p++ = 0x50;	<FONT COLOR=#0000FF>/* local IDI format */</FONT>
 		<FONT COLOR="#298C52">while</FONT> (*sub)
			*p++ = *sub++ &amp; 0x7f;
	}

<FONT COLOR=#A521F7>#ifdef</FONT> <A HREF="#EXT_BEARER_CAPS">EXT_BEARER_CAPS</A>
        <FONT COLOR="#298C52">if</FONT> ((pc-&gt;para.setup.si2 &gt;= 160) &amp;&amp; (pc-&gt;para.setup.si2 &lt;= 175))
        { <FONT COLOR=#0000FF>// sync. Bitratenadaption, V.110/X.30</FONT>
          *p++ = 0x7c; *p++ = 0x04; *p++ = 0x88; *p++ = 0x90; *p++ = 0x21;
          *p++ = <A HREF="#EncodeSyncParams">EncodeSyncParams</A>(pc-&gt;para.setup.si2 - 160, 0x80);
        }
        <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> ((pc-&gt;para.setup.si2 &gt;= 176) &amp;&amp; (pc-&gt;para.setup.si2 &lt;= 191))
        { <FONT COLOR=#0000FF>// sync. Bitratenadaption, V.120</FONT>
          *p++ = 0x7c; *p++ = 0x05; *p++ = 0x88; *p++ = 0x90; *p++ = 0x28;
          *p++ = <A HREF="#EncodeSyncParams">EncodeSyncParams</A>(pc-&gt;para.setup.si2 - 176, 0);
          *p++ = 0x82;
        }
        <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (pc-&gt;para.setup.si2 &gt;= 192)
        { <FONT COLOR=#0000FF>// async. Bitratenadaption, V.110/X.30</FONT>
          *p++ = 0x7c; *p++ = 0x06; *p++ = 0x88; *p++ = 0x90; *p++ = 0x21;
          p = <A HREF="#EncodeASyncParams">EncodeASyncParams</A>(p, pc-&gt;para.setup.si2 - 192);
        } <FONT COLOR="#298C52">else</FONT> {
		*p++ = 0x7c; *p++ = 0x02; *p++ = 0x88; *p++ = 0x90;
        }
<FONT COLOR=#A521F7>#endif</FONT>
	l = p - tmp;
	<FONT COLOR="#298C52">if</FONT> (!(skb = <A HREF="isdnl3.c.shtml#l3_alloc_skb">l3_alloc_skb</A>(l)))
		<FONT COLOR="#298C52">return</FONT>;
	memcpy(skb_put(skb, l), tmp, l);
	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	<A HREF="isdnl3.c.shtml#L3AddTimer">L3AddTimer</A>(&amp;pc-&gt;timer, <A HREF="l3dss1.h.shtml#T303">T303</A>, <A HREF="hisax.h.shtml#CC_T303">CC_T303</A>);
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 1);
	<A HREF="isdnl3.c.shtml#l3_msg">l3_msg</A>(pc-&gt;st, <A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, skb);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_call_proc">l3dss1_call_proc</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	u_char *p;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	p = skb-&gt;data;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, <A HREF="l3dss1.h.shtml#IE_CHANNEL_ID">IE_CHANNEL_ID</A>, 0))) {
		pc-&gt;para.bchannel = p[2] &amp; 0x3;
		<FONT COLOR="#298C52">if</FONT> ((!pc-&gt;para.bchannel) &amp;&amp; (pc-&gt;debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_WARN">L3_DEB_WARN</A>))
			<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"setup answer without bchannel"</FONT>);
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (pc-&gt;debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_WARN">L3_DEB_WARN</A>)
		<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"setup answer without bchannel"</FONT>);
	dev_kfree_skb(skb);
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 3);
	<A HREF="isdnl3.c.shtml#L3AddTimer">L3AddTimer</A>(&amp;pc-&gt;timer, <A HREF="l3dss1.h.shtml#T310">T310</A>, <A HREF="hisax.h.shtml#CC_T310">CC_T310</A>);
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_PROCEEDING">CC_PROCEEDING</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, pc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_setup_ack">l3dss1_setup_ack</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	u_char *p;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	p = skb-&gt;data;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, <A HREF="l3dss1.h.shtml#IE_CHANNEL_ID">IE_CHANNEL_ID</A>, 0))) {
		pc-&gt;para.bchannel = p[2] &amp; 0x3;
		<FONT COLOR="#298C52">if</FONT> ((!pc-&gt;para.bchannel) &amp;&amp; (pc-&gt;debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_WARN">L3_DEB_WARN</A>))
			<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"setup answer without bchannel"</FONT>);
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (pc-&gt;debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_WARN">L3_DEB_WARN</A>)
		<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"setup answer without bchannel"</FONT>);
	dev_kfree_skb(skb);
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 2);
	<A HREF="isdnl3.c.shtml#L3AddTimer">L3AddTimer</A>(&amp;pc-&gt;timer, <A HREF="l3dss1.h.shtml#T304">T304</A>, <A HREF="hisax.h.shtml#CC_T304">CC_T304</A>);
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_MORE_INFO">CC_MORE_INFO</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, pc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_disconnect">l3dss1_disconnect</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	u_char *p;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">int</FONT> cause = -1;

	<A HREF="isdnl3.c.shtml#StopAllL3Timer">StopAllL3Timer</A>(pc);
	p = skb-&gt;data;
	pc-&gt;para.loc = 0;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, <A HREF="l3dss1.h.shtml#IE_CAUSE">IE_CAUSE</A>, 0))) {
		p++;
		<FONT COLOR="#298C52">if</FONT> (*p++ == 2)
			pc-&gt;para.loc = *p++;
		cause = *p &amp; 0x7f;
	}
	dev_kfree_skb(skb);
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 12);
	pc-&gt;para.cause = cause;
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_DISCONNECT">CC_DISCONNECT</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, pc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_connect">l3dss1_connect</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

	dev_kfree_skb(skb);
	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);	<FONT COLOR=#0000FF>/* T310 */</FONT>
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 10);
	pc-&gt;para.chargeinfo = 0;
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_SETUP">CC_SETUP</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, pc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_alerting">l3dss1_alerting</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

	dev_kfree_skb(skb);
	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);	<FONT COLOR=#0000FF>/* T304 */</FONT>
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 4);
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_ALERTING">CC_ALERTING</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, pc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_msg_without_setup">l3dss1_msg_without_setup</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
  <FONT COLOR=#0000FF>/* This routine is called if here was no SETUP made (checks in dss1up and in
   * l3dss1_setup) and a RELEASE_COMPLETE have to be sent with an error code
   * MT_STATUS_ENQUIRE in the NULL state is handled too
   */</FONT>
	u_char tmp[16];
	u_char *p=tmp;
	<FONT COLOR="#298C52">int</FONT> l;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;

	<FONT COLOR="#298C52">switch</FONT> (pc-&gt;para.cause) {
	  <FONT COLOR="#298C52">case</FONT>  81: <FONT COLOR=#0000FF>/* 0x51 invalid callreference */</FONT>
	  <FONT COLOR="#298C52">case</FONT>  88: <FONT COLOR=#0000FF>/* 0x58 incomp destination */</FONT>
	  <FONT COLOR="#298C52">case</FONT>  96: <FONT COLOR=#0000FF>/* 0x60 mandory IE missing */</FONT>
	  <FONT COLOR="#298C52">case</FONT> 101: <FONT COLOR=#0000FF>/* 0x65 incompatible Callstate */</FONT>
	  	<A HREF="#MsgHead">MsgHead</A>(p, pc-&gt;callref, <A HREF="l3dss1.h.shtml#MT_RELEASE_COMPLETE">MT_RELEASE_COMPLETE</A>);
		*p++ = <A HREF="l3dss1.h.shtml#IE_CAUSE">IE_CAUSE</A>;
		*p++ = 0x2;
		*p++ = 0x80;
		*p++ = pc-&gt;para.cause | 0x80;
		<FONT COLOR="#298C52">break</FONT>;
	  <FONT COLOR="#298C52">default</FONT>:
	  	printk(KERN_ERR <FONT COLOR="#FF0000">"HiSax internal error l3dss1_msg_without_setup\n"</FONT>);
	  	<FONT COLOR="#298C52">return</FONT>;
	}	
	l = p - tmp;
	<FONT COLOR="#298C52">if</FONT> (!(skb = <A HREF="isdnl3.c.shtml#l3_alloc_skb">l3_alloc_skb</A>(l)))
		<FONT COLOR="#298C52">return</FONT>;
	memcpy(skb_put(skb, l), tmp, l);
	<A HREF="isdnl3.c.shtml#l3_msg">l3_msg</A>(pc-&gt;st, <A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, skb);
	<A HREF="isdnl3.c.shtml#release_l3_process">release_l3_process</A>(pc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_setup">l3dss1_setup</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
        u_char *p, *ptmp[8];
	<FONT COLOR="#298C52">int</FONT> i;
	<FONT COLOR="#298C52">int</FONT> bcfound = 0;
	<FONT COLOR="#298C52">char</FONT> tmp[80];
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

	<FONT COLOR=#0000FF>/* ETS 300-104 1.3.4 and 1.3.5
	 * we need to detect unknown inform. element from 0 to 7
	 */</FONT>	
	p = skb-&gt;data;
	<FONT COLOR="#298C52">for</FONT>(i = 0; i &lt; 8; i++)
		ptmp[i] = skb-&gt;data;
	<FONT COLOR="#298C52">if</FONT> (<A HREF="isdnl3.c.shtml#findie">findie</A>(ptmp[1], skb-&gt;len, 0x01, 0)
	    || <A HREF="isdnl3.c.shtml#findie">findie</A>(ptmp[2], skb-&gt;len, 0x02, 0)
	    || <A HREF="isdnl3.c.shtml#findie">findie</A>(ptmp[3], skb-&gt;len, 0x03, 0)
	    || <A HREF="isdnl3.c.shtml#findie">findie</A>(ptmp[5], skb-&gt;len, 0x05, 0)
	    || <A HREF="isdnl3.c.shtml#findie">findie</A>(ptmp[6], skb-&gt;len, 0x06, 0)
	    || <A HREF="isdnl3.c.shtml#findie">findie</A>(ptmp[7], skb-&gt;len, 0x07, 0)) {
	  	<FONT COLOR=#0000FF>/* if ie is &lt; 8 and not 0 nor 4, send RELEASE_COMPLETE 
	  	 * cause 0x60
	  	 */</FONT>
	  	pc-&gt;para.cause = 0x60;
		dev_kfree_skb(skb);
		<A HREF="#l3dss1_msg_without_setup">l3dss1_msg_without_setup</A>(pc, pr, NULL);
		<FONT COLOR="#298C52">return</FONT>;
	}

	<FONT COLOR=#0000FF>/*
	 * Channel Identification
	 */</FONT>
	p = skb-&gt;data;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, <A HREF="l3dss1.h.shtml#IE_CHANNEL_ID">IE_CHANNEL_ID</A>, 0))) {
		pc-&gt;para.bchannel = p[2] &amp; 0x3;
		<FONT COLOR="#298C52">if</FONT> (pc-&gt;para.bchannel)
			bcfound++;
		<FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (pc-&gt;debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_WARN">L3_DEB_WARN</A>)
			<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"setup without bchannel"</FONT>);
	} <FONT COLOR="#298C52">else</FONT> {
		<FONT COLOR="#298C52">if</FONT> (pc-&gt;debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_WARN">L3_DEB_WARN</A>)
			<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"setup without bchannel"</FONT>);
	  	pc-&gt;para.cause = 0x60;
		dev_kfree_skb(skb);
		<A HREF="#l3dss1_msg_without_setup">l3dss1_msg_without_setup</A>(pc, pr, NULL);
		<FONT COLOR="#298C52">return</FONT>;
	}
	<FONT COLOR=#0000FF>/*
	   * Bearer Capabilities
	 */</FONT>
	p = skb-&gt;data;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, 0x04, 0))) {
		pc-&gt;para.setup.si2 = 0;
		<FONT COLOR="#298C52">switch</FONT> (p[2] &amp; 0x1f) {
			<FONT COLOR="#298C52">case</FONT> 0x00:
				<FONT COLOR=#0000FF>/* Speech */</FONT>
			<FONT COLOR="#298C52">case</FONT> 0x10:
				<FONT COLOR=#0000FF>/* 3.1 Khz audio */</FONT>
				pc-&gt;para.setup.si1 = 1;
				<FONT COLOR="#298C52">break</FONT>;
			<FONT COLOR="#298C52">case</FONT> 0x08:
				<FONT COLOR=#0000FF>/* Unrestricted digital information */</FONT>
				pc-&gt;para.setup.si1 = 7;
<FONT COLOR=#0000FF>/* JIM, 05.11.97 I wanna set service indicator 2 */</FONT>
<FONT COLOR=#A521F7>#ifdef</FONT> <A HREF="#EXT_BEARER_CAPS">EXT_BEARER_CAPS</A>
                                pc-&gt;para.setup.si2 = <A HREF="#DecodeSI2">DecodeSI2</A>(skb);
                                printk(KERN_DEBUG <FONT COLOR="#FF0000">"HiSax: SI=%d, AI=%d\n"</FONT>,
                                       pc-&gt;para.setup.si1, pc-&gt;para.setup.si2);
<FONT COLOR=#A521F7>#endif</FONT>
				<FONT COLOR="#298C52">break</FONT>;
			<FONT COLOR="#298C52">case</FONT> 0x09:
				<FONT COLOR=#0000FF>/* Restricted digital information */</FONT>
				pc-&gt;para.setup.si1 = 2;
				<FONT COLOR="#298C52">break</FONT>;
			<FONT COLOR="#298C52">case</FONT> 0x11:
				<FONT COLOR=#0000FF>/* Unrestr. digital information  with tones/announcements */</FONT>
				pc-&gt;para.setup.si1 = 3;
				<FONT COLOR="#298C52">break</FONT>;
			<FONT COLOR="#298C52">case</FONT> 0x18:
				<FONT COLOR=#0000FF>/* Video */</FONT>
				pc-&gt;para.setup.si1 = 4;
				<FONT COLOR="#298C52">break</FONT>;
			<FONT COLOR="#298C52">default</FONT>:
				pc-&gt;para.setup.si1 = 0;
		}
	} <FONT COLOR="#298C52">else</FONT> {
		<FONT COLOR="#298C52">if</FONT> (pc-&gt;debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_WARN">L3_DEB_WARN</A>)
			<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"setup without bearer capabilities"</FONT>);
		<FONT COLOR=#0000FF>/* ETS 300-104 1.3.3 */</FONT>
	  	pc-&gt;para.cause = 0x60;
		dev_kfree_skb(skb);
		<A HREF="#l3dss1_msg_without_setup">l3dss1_msg_without_setup</A>(pc, pr, NULL);
		<FONT COLOR="#298C52">return</FONT>;
	}

	p = skb-&gt;data;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, 0x70, 0)))
		<A HREF="q931.c.shtml#iecpy">iecpy</A>(pc-&gt;para.setup.eazmsn, p, 1);
	<FONT COLOR="#298C52">else</FONT>
		pc-&gt;para.setup.eazmsn[0] = 0;

	p = skb-&gt;data;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, 0x71, 0))) {
		<FONT COLOR=#0000FF>/* Called party subaddress */</FONT>
		<FONT COLOR="#298C52">if</FONT> ((p[1]&gt;=2) &amp;&amp; (p[2]==0x80) &amp;&amp; (p[3]==0x50)) {
			tmp[0]=<FONT COLOR="#FF0000">'.'</FONT>;
			<A HREF="q931.c.shtml#iecpy">iecpy</A>(&amp;tmp[1], p, 2);
			strcat(pc-&gt;para.setup.eazmsn, tmp);
		} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (pc-&gt;debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_WARN">L3_DEB_WARN</A>)
			<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"wrong called subaddress"</FONT>);
	}
	p = skb-&gt;data;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, 0x6c, 0))) {
		pc-&gt;para.setup.plan = p[2];
		<FONT COLOR="#298C52">if</FONT> (p[2] &amp; 0x80) {
			<A HREF="q931.c.shtml#iecpy">iecpy</A>(pc-&gt;para.setup.phone, p, 1);
			pc-&gt;para.setup.screen = 0;
		} <FONT COLOR="#298C52">else</FONT> {
			<A HREF="q931.c.shtml#iecpy">iecpy</A>(pc-&gt;para.setup.phone, p, 2);
			pc-&gt;para.setup.screen = p[3];
		}
	} <FONT COLOR="#298C52">else</FONT> {
		pc-&gt;para.setup.phone[0] = 0;
		pc-&gt;para.setup.plan = 0;
		pc-&gt;para.setup.screen = 0;
	}
	p = skb-&gt;data;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, 0x6d, 0))) {
		<FONT COLOR=#0000FF>/* Calling party subaddress */</FONT>
		<FONT COLOR="#298C52">if</FONT> ((p[1]&gt;=2) &amp;&amp; (p[2]==0x80) &amp;&amp; (p[3]==0x50)) {
			tmp[0]=<FONT COLOR="#FF0000">'.'</FONT>;
			<A HREF="q931.c.shtml#iecpy">iecpy</A>(&amp;tmp[1], p, 2);
			strcat(pc-&gt;para.setup.phone, tmp);
		} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (pc-&gt;debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_WARN">L3_DEB_WARN</A>)
			<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"wrong calling subaddress"</FONT>);
	}

	dev_kfree_skb(skb);

	<FONT COLOR="#298C52">if</FONT> (bcfound) {
		<FONT COLOR="#298C52">if</FONT> ((pc-&gt;para.setup.si1 != 7) &amp;&amp; (pc-&gt;debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_WARN">L3_DEB_WARN</A>)) {
			<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"non-digital call: %s -&gt; %s"</FONT>,
				pc-&gt;para.setup.phone, pc-&gt;para.setup.eazmsn);
		}
		<FONT COLOR="#298C52">if</FONT> ((pc-&gt;para.setup.si1 != 7) &amp;&amp;
			test_bit(<A HREF="hisax.h.shtml#FLG_PTP">FLG_PTP</A>, &amp;pc-&gt;st-&gt;l2.flag)) {
		  	pc-&gt;para.cause = 0x58;
			<A HREF="#l3dss1_msg_without_setup">l3dss1_msg_without_setup</A>(pc, pr, NULL);
			<FONT COLOR="#298C52">return</FONT>;
		}
		<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 6);
		pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_SETUP">CC_SETUP</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, pc);
	} <FONT COLOR="#298C52">else</FONT>
		<A HREF="isdnl3.c.shtml#release_l3_process">release_l3_process</A>(pc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_reset">l3dss1_reset</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<A HREF="isdnl3.c.shtml#release_l3_process">release_l3_process</A>(pc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_setup_rsp">l3dss1_setup_rsp</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr,
		 <FONT COLOR="#298C52">void</FONT> *arg)
{
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 8);
	<A HREF="#l3dss1_message">l3dss1_message</A>(pc, <A HREF="l3dss1.h.shtml#MT_CONNECT">MT_CONNECT</A>);
	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	<A HREF="isdnl3.c.shtml#L3AddTimer">L3AddTimer</A>(&amp;pc-&gt;timer, <A HREF="l3dss1.h.shtml#T313">T313</A>, <A HREF="hisax.h.shtml#CC_T313">CC_T313</A>);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_connect_ack">l3dss1_connect_ack</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

	dev_kfree_skb(skb);
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 10);
	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_SETUP_COMPL">CC_SETUP_COMPL</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, pc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_disconnect_req">l3dss1_disconnect_req</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;
	u_char tmp[16];
	u_char *p = tmp;
	<FONT COLOR="#298C52">int</FONT> l;
	u_char cause = 0x10;

	<FONT COLOR="#298C52">if</FONT> (pc-&gt;para.cause &gt; 0)
		cause = pc-&gt;para.cause;

	<A HREF="isdnl3.c.shtml#StopAllL3Timer">StopAllL3Timer</A>(pc);

	<A HREF="#MsgHead">MsgHead</A>(p, pc-&gt;callref, <A HREF="l3dss1.h.shtml#MT_DISCONNECT">MT_DISCONNECT</A>);

	*p++ = <A HREF="l3dss1.h.shtml#IE_CAUSE">IE_CAUSE</A>;
	*p++ = 0x2;
	*p++ = 0x80;
	*p++ = cause | 0x80;

	l = p - tmp;
	<FONT COLOR="#298C52">if</FONT> (!(skb = <A HREF="isdnl3.c.shtml#l3_alloc_skb">l3_alloc_skb</A>(l)))
		<FONT COLOR="#298C52">return</FONT>;
	memcpy(skb_put(skb, l), tmp, l);
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 11);
	<A HREF="isdnl3.c.shtml#l3_msg">l3_msg</A>(pc-&gt;st, <A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, skb);
	<A HREF="isdnl3.c.shtml#L3AddTimer">L3AddTimer</A>(&amp;pc-&gt;timer, <A HREF="l3dss1.h.shtml#T305">T305</A>, <A HREF="hisax.h.shtml#CC_T305">CC_T305</A>);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_reject_req">l3dss1_reject_req</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;
	u_char tmp[16];
	u_char *p = tmp;
	<FONT COLOR="#298C52">int</FONT> l;
	u_char cause = 0x95;

	<FONT COLOR="#298C52">if</FONT> (pc-&gt;para.cause &gt; 0)
		cause = pc-&gt;para.cause;

	<A HREF="#MsgHead">MsgHead</A>(p, pc-&gt;callref, <A HREF="l3dss1.h.shtml#MT_RELEASE_COMPLETE">MT_RELEASE_COMPLETE</A>);

	*p++ = <A HREF="l3dss1.h.shtml#IE_CAUSE">IE_CAUSE</A>;
	*p++ = 0x2;
	*p++ = 0x80;
	*p++ = cause;

	l = p - tmp;
	<FONT COLOR="#298C52">if</FONT> (!(skb = <A HREF="isdnl3.c.shtml#l3_alloc_skb">l3_alloc_skb</A>(l)))
		<FONT COLOR="#298C52">return</FONT>;
	memcpy(skb_put(skb, l), tmp, l);
	<A HREF="isdnl3.c.shtml#l3_msg">l3_msg</A>(pc-&gt;st, <A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, skb);
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_RELEASE">CC_RELEASE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, pc);
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 0);
	<A HREF="isdnl3.c.shtml#release_l3_process">release_l3_process</A>(pc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_release">l3dss1_release</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	u_char *p;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">int</FONT> cause = -1;

	p = skb-&gt;data;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, <A HREF="l3dss1.h.shtml#IE_CAUSE">IE_CAUSE</A>, 0))) {
		p++;
		<FONT COLOR="#298C52">if</FONT> (*p++ == 2)
			pc-&gt;para.loc = *p++;
		cause = *p &amp; 0x7f;
	}
	p = skb-&gt;data;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, <A HREF="l3dss1.h.shtml#IE_FACILITY">IE_FACILITY</A>, 0))) {
<FONT COLOR=#A521F7>#ifdef</FONT> <A HREF="hisax.h.shtml#HISAX_DE_AOC">HISAX_DE_AOC</A>
	    <A HREF="#l3dss1_parse_facility">l3dss1_parse_facility</A>(pc,p);
<FONT COLOR=#A521F7>#else</FONT>
		p = NULL;
<FONT COLOR=#A521F7>#endif</FONT>
	}
	dev_kfree_skb(skb);
	<A HREF="isdnl3.c.shtml#StopAllL3Timer">StopAllL3Timer</A>(pc);
	pc-&gt;para.cause = cause;
	<A HREF="#l3dss1_message">l3dss1_message</A>(pc, <A HREF="l3dss1.h.shtml#MT_RELEASE_COMPLETE">MT_RELEASE_COMPLETE</A>);
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_RELEASE">CC_RELEASE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, pc);
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 0);
	<A HREF="isdnl3.c.shtml#release_l3_process">release_l3_process</A>(pc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_alert_req">l3dss1_alert_req</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr,
		 <FONT COLOR="#298C52">void</FONT> *arg)
{
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 7);
	<A HREF="#l3dss1_message">l3dss1_message</A>(pc, <A HREF="l3dss1.h.shtml#MT_ALERTING">MT_ALERTING</A>);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_status_enq">l3dss1_status_enq</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	u_char tmp[16];
	u_char *p = tmp;
	<FONT COLOR="#298C52">int</FONT> l;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

	dev_kfree_skb(skb);

	<A HREF="#MsgHead">MsgHead</A>(p, pc-&gt;callref, <A HREF="l3dss1.h.shtml#MT_STATUS">MT_STATUS</A>);

	*p++ = <A HREF="l3dss1.h.shtml#IE_CAUSE">IE_CAUSE</A>;
	*p++ = 0x2;
	*p++ = 0x80;
	*p++ = 0x9E;		<FONT COLOR=#0000FF>/* answer status enquire */</FONT>

	*p++ = 0x14;		<FONT COLOR=#0000FF>/* CallState */</FONT>
	*p++ = 0x1;
	*p++ = pc-&gt;state &amp; 0x3f;

	l = p - tmp;
	<FONT COLOR="#298C52">if</FONT> (!(skb = <A HREF="isdnl3.c.shtml#l3_alloc_skb">l3_alloc_skb</A>(l)))
		<FONT COLOR="#298C52">return</FONT>;
	memcpy(skb_put(skb, l), tmp, l);
	<A HREF="isdnl3.c.shtml#l3_msg">l3_msg</A>(pc-&gt;st, <A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, skb);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_status_req">l3dss1_status_req</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
  <FONT COLOR=#0000FF>/* ETS 300-104 7.4.1, 8.4.1, 10.3.1, 11.4.1, 12.4.1, 13.4.1, 14.4.1...
     if setup has been made and a non expected message type is received, we must send MT_STATUS cause 0x62  */</FONT>
        u_char tmp[16];
	u_char *p = tmp;
	<FONT COLOR="#298C52">int</FONT> l;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

	dev_kfree_skb(skb);

	<A HREF="#MsgHead">MsgHead</A>(p, pc-&gt;callref, <A HREF="l3dss1.h.shtml#MT_STATUS">MT_STATUS</A>);

	*p++ = <A HREF="l3dss1.h.shtml#IE_CAUSE">IE_CAUSE</A>;
	*p++ = 0x2;
	*p++ = 0x80;
	*p++ = 0x62 | 0x80;		<FONT COLOR=#0000FF>/* status sending */</FONT>

	*p++ = 0x14;		<FONT COLOR=#0000FF>/* CallState */</FONT>
	*p++ = 0x1;
	*p++ = pc-&gt;state &amp; 0x3f;

	l = p - tmp;
	<FONT COLOR="#298C52">if</FONT> (!(skb = <A HREF="isdnl3.c.shtml#l3_alloc_skb">l3_alloc_skb</A>(l)))
		<FONT COLOR="#298C52">return</FONT>;
	memcpy(skb_put(skb, l), tmp, l);
	<A HREF="isdnl3.c.shtml#l3_msg">l3_msg</A>(pc-&gt;st, <A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, skb);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_release_ind">l3dss1_release_ind</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	u_char *p;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">int</FONT> callState = 0;
	p = skb-&gt;data;

	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, <A HREF="l3dss1.h.shtml#IE_CALL_STATE">IE_CALL_STATE</A>, 0))) {
		p++;
		<FONT COLOR="#298C52">if</FONT> (1== *p++)
			callState = *p;
	}
	<FONT COLOR="#298C52">if</FONT>(callState == 0) {
		<FONT COLOR=#0000FF>/* ETS 300-104 7.6.1, 8.6.1, 10.6.1... and 16.1
		 * set down layer 3 without sending any message
		 */</FONT>
		pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_RELEASE">CC_RELEASE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, pc);
		<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 0);
		<A HREF="isdnl3.c.shtml#release_l3_process">release_l3_process</A>(pc);
	} <FONT COLOR="#298C52">else</FONT> {
		pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_IGNORE">CC_IGNORE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, pc);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_t303">l3dss1_t303</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">if</FONT> (pc-&gt;N303 &gt; 0) {
		pc-&gt;N303--;
		<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
		<A HREF="#l3dss1_setup_req">l3dss1_setup_req</A>(pc, pr, arg);
	} <FONT COLOR="#298C52">else</FONT> {
		<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
		pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_NOSETUP_RSP">CC_NOSETUP_RSP</A>, pc);
		<A HREF="isdnl3.c.shtml#release_l3_process">release_l3_process</A>(pc);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_t304">l3dss1_t304</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	pc-&gt;para.cause = 0xE6;
	<A HREF="#l3dss1_disconnect_req">l3dss1_disconnect_req</A>(pc, pr, NULL);
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_SETUP_ERR">CC_SETUP_ERR</A>, pc);

}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_t305">l3dss1_t305</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	u_char tmp[16];
	u_char *p = tmp;
	<FONT COLOR="#298C52">int</FONT> l;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;
	u_char cause = 0x90;

	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	<FONT COLOR="#298C52">if</FONT> (pc-&gt;para.cause &gt; 0)
		cause = pc-&gt;para.cause | 0x80;

	<A HREF="#MsgHead">MsgHead</A>(p, pc-&gt;callref, <A HREF="l3dss1.h.shtml#MT_RELEASE">MT_RELEASE</A>);

	*p++ = <A HREF="l3dss1.h.shtml#IE_CAUSE">IE_CAUSE</A>;
	*p++ = 0x2;
	*p++ = 0x80;
	*p++ = cause;

	l = p - tmp;
	<FONT COLOR="#298C52">if</FONT> (!(skb = <A HREF="isdnl3.c.shtml#l3_alloc_skb">l3_alloc_skb</A>(l)))
		<FONT COLOR="#298C52">return</FONT>;
	memcpy(skb_put(skb, l), tmp, l);
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 19);
	<A HREF="isdnl3.c.shtml#l3_msg">l3_msg</A>(pc-&gt;st, <A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, skb);
	<A HREF="isdnl3.c.shtml#L3AddTimer">L3AddTimer</A>(&amp;pc-&gt;timer, <A HREF="l3dss1.h.shtml#T308">T308</A>, <A HREF="hisax.h.shtml#CC_T308_1">CC_T308_1</A>);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_t310">l3dss1_t310</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	pc-&gt;para.cause = 0xE6;
	<A HREF="#l3dss1_disconnect_req">l3dss1_disconnect_req</A>(pc, pr, NULL);
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_SETUP_ERR">CC_SETUP_ERR</A>, pc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_t313">l3dss1_t313</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	pc-&gt;para.cause = 0xE6;
	<A HREF="#l3dss1_disconnect_req">l3dss1_disconnect_req</A>(pc, pr, NULL);
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_CONNECT_ERR">CC_CONNECT_ERR</A>, pc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_t308_1">l3dss1_t308_1</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 19);
	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	<A HREF="#l3dss1_message">l3dss1_message</A>(pc, <A HREF="l3dss1.h.shtml#MT_RELEASE">MT_RELEASE</A>);
	<A HREF="isdnl3.c.shtml#L3AddTimer">L3AddTimer</A>(&amp;pc-&gt;timer, <A HREF="l3dss1.h.shtml#T308">T308</A>, <A HREF="hisax.h.shtml#CC_T308_2">CC_T308_2</A>);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_t308_2">l3dss1_t308_2</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_RELEASE_ERR">CC_RELEASE_ERR</A>, pc);
	<A HREF="isdnl3.c.shtml#release_l3_process">release_l3_process</A>(pc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_t318">l3dss1_t318</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	pc-&gt;para.cause = 0x66; <FONT COLOR=#0000FF>/* Timer expiry */</FONT>
	pc-&gt;para.loc = 0; <FONT COLOR=#0000FF>/* local */</FONT>
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_RESUME_ERR">CC_RESUME_ERR</A>, pc);
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 19);
	<A HREF="#l3dss1_message">l3dss1_message</A>(pc, <A HREF="l3dss1.h.shtml#MT_RELEASE">MT_RELEASE</A>);
	<A HREF="isdnl3.c.shtml#L3AddTimer">L3AddTimer</A>(&amp;pc-&gt;timer, <A HREF="l3dss1.h.shtml#T308">T308</A>, <A HREF="hisax.h.shtml#CC_T308_1">CC_T308_1</A>);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_t319">l3dss1_t319</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	pc-&gt;para.cause = 0x66; <FONT COLOR=#0000FF>/* Timer expiry */</FONT>
	pc-&gt;para.loc = 0; <FONT COLOR=#0000FF>/* local */</FONT>
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_SUSPEND_ERR">CC_SUSPEND_ERR</A>, pc);
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 10);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_restart">l3dss1_restart</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_DLRL">CC_DLRL</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, pc);
	<A HREF="isdnl3.c.shtml#release_l3_process">release_l3_process</A>(pc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_status">l3dss1_status</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	u_char *p;
	<FONT COLOR="#298C52">char</FONT> tmp[64], *t;
	<FONT COLOR="#298C52">int</FONT> l;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">int</FONT> cause, callState;

	cause = callState = -1;
	p = skb-&gt;data;
	t = tmp;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, <A HREF="l3dss1.h.shtml#IE_CAUSE">IE_CAUSE</A>, 0))) {
		p++;
		l = *p++;
		t += sprintf(t,<FONT COLOR="#FF0000">"Status CR %x Cause:"</FONT>, pc-&gt;callref);
		<FONT COLOR="#298C52">while</FONT> (l--) {
		        cause = *p;
			t += sprintf(t,<FONT COLOR="#FF0000">" %2x"</FONT>,*p++);
		}
	} <FONT COLOR="#298C52">else</FONT>
		sprintf(t,<FONT COLOR="#FF0000">"Status CR %x no Cause"</FONT>, pc-&gt;callref);
	<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, tmp);
	p = skb-&gt;data;
	t = tmp;
	t += sprintf(t,<FONT COLOR="#FF0000">"Status state %x "</FONT>, pc-&gt;state);
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, <A HREF="l3dss1.h.shtml#IE_CALL_STATE">IE_CALL_STATE</A>, 0))) {
		p++;
		<FONT COLOR="#298C52">if</FONT> (1== *p++) {
		        callState = *p;
			t += sprintf(t,<FONT COLOR="#FF0000">"peer state %x"</FONT> , *p);
		} <FONT COLOR="#298C52">else</FONT>
			t += sprintf(t,<FONT COLOR="#FF0000">"peer state len error"</FONT>);
	} <FONT COLOR="#298C52">else</FONT>
		sprintf(t,<FONT COLOR="#FF0000">"no peer state"</FONT>);
	<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, tmp);
	<FONT COLOR="#298C52">if</FONT>(((cause &amp; 0x7f) == 0x6f) &amp;&amp; (callState == 0)) {
		<FONT COLOR=#0000FF>/* ETS 300-104 7.6.1, 8.6.1, 10.6.1... 
		 * if received MT_STATUS with cause == 0x6f and call 
		 * state == 0, then we must set down layer 3
		 */</FONT>
		<A HREF="#l3dss1_release_ind">l3dss1_release_ind</A>(pc, pr, arg);
	} <FONT COLOR="#298C52">else</FONT>
		dev_kfree_skb(skb);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_facility">l3dss1_facility</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
        u_char *p;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

	p = skb-&gt;data;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, <A HREF="l3dss1.h.shtml#IE_FACILITY">IE_FACILITY</A>, 0))) {
<FONT COLOR=#A521F7>#ifdef</FONT> <A HREF="hisax.h.shtml#HISAX_DE_AOC">HISAX_DE_AOC</A>
	    <A HREF="#l3dss1_parse_facility">l3dss1_parse_facility</A>(pc,p);
<FONT COLOR=#A521F7>#else</FONT>
		p = NULL;
<FONT COLOR=#A521F7>#endif</FONT>
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_suspend_req">l3dss1_suspend_req</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;
	u_char tmp[32];
	u_char *p = tmp;
	u_char i,l;
	u_char *msg = pc-&gt;chan-&gt;setup.phone;

	<A HREF="#MsgHead">MsgHead</A>(p, pc-&gt;callref, <A HREF="l3dss1.h.shtml#MT_SUSPEND">MT_SUSPEND</A>);
	
	*p++ = <A HREF="l3dss1.h.shtml#IE_CALLID">IE_CALLID</A>;
	l = *msg++;
	<FONT COLOR="#298C52">if</FONT> (l &amp;&amp; (l&lt;=10)) { <FONT COLOR=#0000FF>/* Max length 10 octets */</FONT>
		*p++ = l;
		<FONT COLOR="#298C52">for</FONT> (i=0;i&lt;l;i++)
			*p++ = *msg++;
	} <FONT COLOR="#298C52">else</FONT> {
		<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"SUS wrong CALLID len %d"</FONT>, l);
		<FONT COLOR="#298C52">return</FONT>;
        }
	l = p - tmp;
	<FONT COLOR="#298C52">if</FONT> (!(skb = <A HREF="isdnl3.c.shtml#l3_alloc_skb">l3_alloc_skb</A>(l)))
		<FONT COLOR="#298C52">return</FONT>;
	memcpy(skb_put(skb, l), tmp, l);
	<A HREF="isdnl3.c.shtml#l3_msg">l3_msg</A>(pc-&gt;st, <A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, skb);
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 15);
	<A HREF="isdnl3.c.shtml#L3AddTimer">L3AddTimer</A>(&amp;pc-&gt;timer, <A HREF="l3dss1.h.shtml#T319">T319</A>, <A HREF="hisax.h.shtml#CC_T319">CC_T319</A>);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_suspend_ack">l3dss1_suspend_ack</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 0);
	dev_kfree_skb(skb);
	pc-&gt;para.cause = -1;
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_SUSPEND">CC_SUSPEND</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, pc);
	<A HREF="isdnl3.c.shtml#release_l3_process">release_l3_process</A>(pc);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_suspend_rej">l3dss1_suspend_rej</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	u_char *p;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">int</FONT> cause = -1;

	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	p = skb-&gt;data;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, <A HREF="l3dss1.h.shtml#IE_CAUSE">IE_CAUSE</A>, 0))) {
		p++;
		<FONT COLOR="#298C52">if</FONT> (*p++ == 2)
			pc-&gt;para.loc = *p++;
		cause = *p &amp; 0x7f;
	}
	dev_kfree_skb(skb);
	pc-&gt;para.cause = cause;
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_SUSPEND_ERR">CC_SUSPEND_ERR</A>, pc);
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 10);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_resume_req">l3dss1_resume_req</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;
	u_char tmp[32];
	u_char *p = tmp;
	u_char i,l;
	u_char *msg = pc-&gt;para.setup.phone;

	<A HREF="#MsgHead">MsgHead</A>(p, pc-&gt;callref, <A HREF="l3dss1.h.shtml#MT_RESUME">MT_RESUME</A>);
	
	*p++ = <A HREF="l3dss1.h.shtml#IE_CALLID">IE_CALLID</A>;
	l = *msg++;
	<FONT COLOR="#298C52">if</FONT> (l &amp;&amp; (l&lt;=10)) { <FONT COLOR=#0000FF>/* Max length 10 octets */</FONT>
		*p++ = l;
		<FONT COLOR="#298C52">for</FONT> (i=0;i&lt;l;i++)
			*p++ = *msg++;
	} <FONT COLOR="#298C52">else</FONT> {
		<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"RES wrong CALLID len %d"</FONT>, l);
		<FONT COLOR="#298C52">return</FONT>;
        }
	l = p - tmp;
	<FONT COLOR="#298C52">if</FONT> (!(skb = <A HREF="isdnl3.c.shtml#l3_alloc_skb">l3_alloc_skb</A>(l)))
		<FONT COLOR="#298C52">return</FONT>;
	memcpy(skb_put(skb, l), tmp, l);
	<A HREF="isdnl3.c.shtml#l3_msg">l3_msg</A>(pc-&gt;st, <A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, skb);
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 17);
	<A HREF="isdnl3.c.shtml#L3AddTimer">L3AddTimer</A>(&amp;pc-&gt;timer, <A HREF="l3dss1.h.shtml#T319">T319</A>, <A HREF="hisax.h.shtml#CC_T319">CC_T319</A>);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_resume_ack">l3dss1_resume_ack</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	u_char *p;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;

	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	p = skb-&gt;data;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, <A HREF="l3dss1.h.shtml#IE_CHANNEL_ID">IE_CHANNEL_ID</A>, 0))) {
		pc-&gt;para.bchannel = p[2] &amp; 0x3;
		<FONT COLOR="#298C52">if</FONT> ((!pc-&gt;para.bchannel) &amp;&amp; (pc-&gt;debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_WARN">L3_DEB_WARN</A>))
			<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"resume ack without bchannel"</FONT>);
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (pc-&gt;debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_WARN">L3_DEB_WARN</A>)
		<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"resume ack without bchannel"</FONT>);
	dev_kfree_skb(skb);
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_RESUME">CC_RESUME</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, pc);
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 10);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_resume_rej">l3dss1_resume_rej</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	u_char *p;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">int</FONT> cause = -1;

	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	p = skb-&gt;data;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, <A HREF="l3dss1.h.shtml#IE_CAUSE">IE_CAUSE</A>, 0))) {
		p++;
		<FONT COLOR="#298C52">if</FONT> (*p++ == 2)
			pc-&gt;para.loc = *p++;
		cause = *p &amp; 0x7f;
	}
	dev_kfree_skb(skb);
	pc-&gt;para.cause = cause;
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 0);
	pc-&gt;st-&gt;l3.l3l4(pc-&gt;st, <A HREF="hisax.h.shtml#CC_RESUME_ERR">CC_RESUME_ERR</A>, pc);
	<A HREF="isdnl3.c.shtml#release_l3_process">release_l3_process</A>(pc);
}
	
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l3dss1_global_restart">l3dss1_global_restart</A>(<FONT COLOR="#298C52">struct</FONT> l3_process *pc, u_char pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	u_char tmp[32];
	u_char *p;
	u_char ri, ch=0, chan=0;
	<FONT COLOR="#298C52">int</FONT> l;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">struct</FONT> l3_process *up;
	
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 2);
	<A HREF="isdnl3.c.shtml#L3DelTimer">L3DelTimer</A>(&amp;pc-&gt;timer);
	p = skb-&gt;data;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, <A HREF="l3dss1.h.shtml#IE_RESTART_IND">IE_RESTART_IND</A>, 0))) {
	        ri = p[2];
	        	<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"Restart %x"</FONT>, ri);
	} <FONT COLOR="#298C52">else</FONT> {
		<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"Restart without restart IE"</FONT>);
		ri = 0x86;
	}
	p = skb-&gt;data;
	<FONT COLOR="#298C52">if</FONT> ((p = <A HREF="isdnl3.c.shtml#findie">findie</A>(p, skb-&gt;len, <A HREF="l3dss1.h.shtml#IE_CHANNEL_ID">IE_CHANNEL_ID</A>, 0))) {
		chan = p[2] &amp; 3;
		ch = p[2];
	        <FONT COLOR="#298C52">if</FONT> (pc-&gt;st-&gt;l3.debug)
			<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(pc-&gt;st, <FONT COLOR="#FF0000">"Restart for channel %d"</FONT>, chan);
	}
	dev_kfree_skb(skb);
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 2);
	up = pc-&gt;st-&gt;l3.proc;
	<FONT COLOR="#298C52">while</FONT> (up) {
		<FONT COLOR="#298C52">if</FONT> ((ri &amp; 7)==7)
			up-&gt;st-&gt;lli.l4l3(up-&gt;st, <A HREF="hisax.h.shtml#CC_RESTART">CC_RESTART</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, up);
		<FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (up-&gt;para.bchannel == chan)
				up-&gt;st-&gt;lli.l4l3(up-&gt;st, <A HREF="hisax.h.shtml#CC_RESTART">CC_RESTART</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, up);
		up = up-&gt;next;
	}
	p = tmp;
	<A HREF="#MsgHead">MsgHead</A>(p, pc-&gt;callref, <A HREF="l3dss1.h.shtml#MT_RESTART_ACKNOWLEDGE">MT_RESTART_ACKNOWLEDGE</A>);
	<FONT COLOR="#298C52">if</FONT> (chan) {
		*p++ = <A HREF="l3dss1.h.shtml#IE_CHANNEL_ID">IE_CHANNEL_ID</A>;
		*p++ = 1;
		*p++ = ch | 0x80;
	}
	*p++ = 0x79; <FONT COLOR=#0000FF>/* RESTART Ind */</FONT>
	*p++ = 1;
	*p++ = ri;
	l = p - tmp;
	<FONT COLOR="#298C52">if</FONT> (!(skb = <A HREF="isdnl3.c.shtml#l3_alloc_skb">l3_alloc_skb</A>(l)))
		<FONT COLOR="#298C52">return</FONT>;
	memcpy(skb_put(skb, l), tmp, l);
	<A HREF="isdnl3.c.shtml#newl3state">newl3state</A>(pc, 0);
	<A HREF="isdnl3.c.shtml#l3_msg">l3_msg</A>(pc-&gt;st, <A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, skb);
}

<FONT COLOR=#0000FF>/* *INDENT-OFF* */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">struct</FONT> stateentry downstatelist[] =
{
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(0),
	 <A HREF="hisax.h.shtml#CC_SETUP">CC_SETUP</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, <A HREF="#l3dss1_setup_req">l3dss1_setup_req</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(0),
	 <A HREF="hisax.h.shtml#CC_RESUME">CC_RESUME</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, <A HREF="#l3dss1_resume_req">l3dss1_resume_req</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(1) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(2) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(3) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(4) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(6) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(7) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(8) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(10),
	 <A HREF="hisax.h.shtml#CC_DISCONNECT">CC_DISCONNECT</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, <A HREF="#l3dss1_disconnect_req">l3dss1_disconnect_req</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(12),
	 <A HREF="hisax.h.shtml#CC_RELEASE">CC_RELEASE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, <A HREF="#l3dss1_release_req">l3dss1_release_req</A>},
	{<A HREF="isdnl3.h.shtml#ALL_STATES">ALL_STATES</A>,
	 <A HREF="hisax.h.shtml#CC_DLRL">CC_DLRL</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, <A HREF="#l3dss1_reset">l3dss1_reset</A>},
	{<A HREF="isdnl3.h.shtml#ALL_STATES">ALL_STATES</A>,
	 <A HREF="hisax.h.shtml#CC_RESTART">CC_RESTART</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, <A HREF="#l3dss1_restart">l3dss1_restart</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(6),
	 <A HREF="hisax.h.shtml#CC_IGNORE">CC_IGNORE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, <A HREF="#l3dss1_reset">l3dss1_reset</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(6),
	 <A HREF="hisax.h.shtml#CC_REJECT">CC_REJECT</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, <A HREF="#l3dss1_reject_req">l3dss1_reject_req</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(6),
	 <A HREF="hisax.h.shtml#CC_ALERTING">CC_ALERTING</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, <A HREF="#l3dss1_alert_req">l3dss1_alert_req</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(6) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(7),
	 <A HREF="hisax.h.shtml#CC_SETUP">CC_SETUP</A> | <A HREF="hisax.h.shtml#RESPONSE">RESPONSE</A>, <A HREF="#l3dss1_setup_rsp">l3dss1_setup_rsp</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(10),
	 <A HREF="hisax.h.shtml#CC_SUSPEND">CC_SUSPEND</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, <A HREF="#l3dss1_suspend_req">l3dss1_suspend_req</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(1),
	 <A HREF="hisax.h.shtml#CC_T303">CC_T303</A>, <A HREF="#l3dss1_t303">l3dss1_t303</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(2),
	 <A HREF="hisax.h.shtml#CC_T304">CC_T304</A>, <A HREF="#l3dss1_t304">l3dss1_t304</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(3),
	 <A HREF="hisax.h.shtml#CC_T310">CC_T310</A>, <A HREF="#l3dss1_t310">l3dss1_t310</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(8),
	 <A HREF="hisax.h.shtml#CC_T313">CC_T313</A>, <A HREF="#l3dss1_t313">l3dss1_t313</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(11),
	 <A HREF="hisax.h.shtml#CC_T305">CC_T305</A>, <A HREF="#l3dss1_t305">l3dss1_t305</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(15),
	 <A HREF="hisax.h.shtml#CC_T319">CC_T319</A>, <A HREF="#l3dss1_t319">l3dss1_t319</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(17),
	 <A HREF="hisax.h.shtml#CC_T318">CC_T318</A>, <A HREF="#l3dss1_t318">l3dss1_t318</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(19),
	 <A HREF="hisax.h.shtml#CC_T308_1">CC_T308_1</A>, <A HREF="#l3dss1_t308_1">l3dss1_t308_1</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(19),
	 <A HREF="hisax.h.shtml#CC_T308_2">CC_T308_2</A>, <A HREF="#l3dss1_t308_2">l3dss1_t308_2</A>},
};

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> downsllen = <FONT COLOR="#298C52">sizeof</FONT>(downstatelist) /
<FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> stateentry);

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">struct</FONT> stateentry datastatelist[] =
{
	{<A HREF="isdnl3.h.shtml#ALL_STATES">ALL_STATES</A>,
	 <A HREF="l3dss1.h.shtml#MT_STATUS_ENQUIRY">MT_STATUS_ENQUIRY</A>, <A HREF="#l3dss1_status_enq">l3dss1_status_enq</A>},
	{<A HREF="isdnl3.h.shtml#ALL_STATES">ALL_STATES</A>,
	 <A HREF="l3dss1.h.shtml#MT_FACILITY">MT_FACILITY</A>, <A HREF="#l3dss1_facility">l3dss1_facility</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(19),
	 <A HREF="l3dss1.h.shtml#MT_STATUS">MT_STATUS</A>, <A HREF="#l3dss1_release_ind">l3dss1_release_ind</A>},
	{<A HREF="isdnl3.h.shtml#ALL_STATES">ALL_STATES</A>,
	 <A HREF="l3dss1.h.shtml#MT_STATUS">MT_STATUS</A>, <A HREF="#l3dss1_status">l3dss1_status</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(0) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(6),
	 <A HREF="l3dss1.h.shtml#MT_SETUP">MT_SETUP</A>, <A HREF="#l3dss1_setup">l3dss1_setup</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(1) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(2),
	 <A HREF="l3dss1.h.shtml#MT_CALL_PROCEEDING">MT_CALL_PROCEEDING</A>, <A HREF="#l3dss1_call_proc">l3dss1_call_proc</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(3) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(4) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(8) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(10) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(11) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(19),
	 <A HREF="l3dss1.h.shtml#MT_CALL_PROCEEDING">MT_CALL_PROCEEDING</A>, <A HREF="#l3dss1_status_req">l3dss1_status_req</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(1),
	 <A HREF="l3dss1.h.shtml#MT_SETUP_ACKNOWLEDGE">MT_SETUP_ACKNOWLEDGE</A>, <A HREF="#l3dss1_setup_ack">l3dss1_setup_ack</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(2) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(3) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(4) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(8) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(10) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(11) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(19),
	 <A HREF="l3dss1.h.shtml#MT_SETUP_ACKNOWLEDGE">MT_SETUP_ACKNOWLEDGE</A>, <A HREF="#l3dss1_status_req">l3dss1_status_req</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(1) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(2) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(3),
	 <A HREF="l3dss1.h.shtml#MT_ALERTING">MT_ALERTING</A>, <A HREF="#l3dss1_alerting">l3dss1_alerting</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(4) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(8) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(10) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(11) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(19),
	 <A HREF="l3dss1.h.shtml#MT_ALERTING">MT_ALERTING</A>, <A HREF="#l3dss1_status_req">l3dss1_status_req</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(0) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(1) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(2) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(3) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(4) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(7) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(8) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(10) |
	 <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(11) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(12) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(15) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(17) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(19),
	 <A HREF="l3dss1.h.shtml#MT_RELEASE_COMPLETE">MT_RELEASE_COMPLETE</A>, <A HREF="#l3dss1_release_cmpl">l3dss1_release_cmpl</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(1) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(2) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(3) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(4) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(7) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(8) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(10) |
	 <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(11) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(12) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(15) <FONT COLOR=#0000FF>/* | SBIT(17) | SBIT(19)*/</FONT>,
	 <A HREF="l3dss1.h.shtml#MT_RELEASE">MT_RELEASE</A>, <A HREF="#l3dss1_release">l3dss1_release</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(19),  <A HREF="l3dss1.h.shtml#MT_RELEASE">MT_RELEASE</A>, <A HREF="#l3dss1_release_ind">l3dss1_release_ind</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(1) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(2) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(3) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(4) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(7) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(8) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(10) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(15),
	 <A HREF="l3dss1.h.shtml#MT_DISCONNECT">MT_DISCONNECT</A>, <A HREF="#l3dss1_disconnect">l3dss1_disconnect</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(11),
	 <A HREF="l3dss1.h.shtml#MT_DISCONNECT">MT_DISCONNECT</A>, <A HREF="#l3dss1_release_req">l3dss1_release_req</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(1) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(2) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(3) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(4),
	 <A HREF="l3dss1.h.shtml#MT_CONNECT">MT_CONNECT</A>, <A HREF="#l3dss1_connect">l3dss1_connect</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(8) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(10) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(11) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(19),
	 <A HREF="l3dss1.h.shtml#MT_CONNECT">MT_CONNECT</A>, <A HREF="#l3dss1_status_req">l3dss1_status_req</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(1) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(2) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(3) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(4) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(11) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(19),
	 <A HREF="l3dss1.h.shtml#MT_CONNECT_ACKNOWLEDGE">MT_CONNECT_ACKNOWLEDGE</A>, <A HREF="#l3dss1_status_req">l3dss1_status_req</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(8),
	 <A HREF="l3dss1.h.shtml#MT_CONNECT_ACKNOWLEDGE">MT_CONNECT_ACKNOWLEDGE</A>, <A HREF="#l3dss1_connect_ack">l3dss1_connect_ack</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(15),
	 <A HREF="l3dss1.h.shtml#MT_SUSPEND_ACKNOWLEDGE">MT_SUSPEND_ACKNOWLEDGE</A>, <A HREF="#l3dss1_suspend_ack">l3dss1_suspend_ack</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(15),
	 <A HREF="l3dss1.h.shtml#MT_SUSPEND_REJECT">MT_SUSPEND_REJECT</A>, <A HREF="#l3dss1_suspend_rej">l3dss1_suspend_rej</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(17),
	 <A HREF="l3dss1.h.shtml#MT_RESUME_ACKNOWLEDGE">MT_RESUME_ACKNOWLEDGE</A>, <A HREF="#l3dss1_resume_ack">l3dss1_resume_ack</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(17),
	 <A HREF="l3dss1.h.shtml#MT_RESUME_REJECT">MT_RESUME_REJECT</A>, <A HREF="#l3dss1_resume_rej">l3dss1_resume_rej</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(1) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(2) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(3) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(4) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(8) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(10) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(11) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(15) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(17) | <A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(19),
	 <A HREF="l3dss1.h.shtml#MT_INVALID">MT_INVALID</A>, <A HREF="#l3dss1_status_req">l3dss1_status_req</A>},
};

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> datasllen = <FONT COLOR="#298C52">sizeof</FONT>(datastatelist) / <FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> stateentry);

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">struct</FONT> stateentry globalmes_list[] =
{
	{<A HREF="isdnl3.h.shtml#ALL_STATES">ALL_STATES</A>,
         <A HREF="l3dss1.h.shtml#MT_STATUS">MT_STATUS</A>, <A HREF="#l3dss1_status">l3dss1_status</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(0),
	 <A HREF="l3dss1.h.shtml#MT_RESTART">MT_RESTART</A>, <A HREF="#l3dss1_global_restart">l3dss1_global_restart</A>},
<FONT COLOR=#0000FF>/*	{SBIT(1),
	 MT_RESTART_ACKNOWLEDGE, l3dss1_restart_ack},                                  
*/</FONT>
};
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> globalm_len = <FONT COLOR="#298C52">sizeof</FONT>(globalmes_list) / <FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> stateentry);

<FONT COLOR=#A521F7>#if</FONT> 0
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">struct</FONT> stateentry globalcmd_list[] =
{
	{<A HREF="isdnl3.h.shtml#ALL_STATES">ALL_STATES</A>,
         CC_STATUS | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, <A HREF="#l3dss1_status_req">l3dss1_status_req</A>},
	{<A HREF="isdnl3.h.shtml#SBIT">SBIT</A>(0),
	 <A HREF="hisax.h.shtml#CC_RESTART">CC_RESTART</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, l3dss1_restart_req},
};

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> globalc_len = <FONT COLOR="#298C52">sizeof</FONT>(globalcmd_list) / <FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> stateentry);
<FONT COLOR=#A521F7>#endif</FONT>
<FONT COLOR=#0000FF>/* *INDENT-ON* */</FONT>

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#global_handler">global_handler</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> mt, <FONT COLOR="#298C52">struct</FONT> sk_buff *skb)
{
	<FONT COLOR="#298C52">int</FONT> i;
	<FONT COLOR="#298C52">struct</FONT> l3_process *proc = st-&gt;l3.global;
	
	<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; globalm_len; i++)
		<FONT COLOR="#298C52">if</FONT> ((mt == globalmes_list[i].primitive) &amp;&amp;
		    ((1 &lt;&lt; proc-&gt;state) &amp; globalmes_list[i].state))
			<FONT COLOR="#298C52">break</FONT>;
	<FONT COLOR="#298C52">if</FONT> (i == globalm_len) {
		dev_kfree_skb(skb);
		<FONT COLOR="#298C52">if</FONT> (st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_STATE">L3_DEB_STATE</A>) {
			<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(st, <FONT COLOR="#FF0000">"dss1 global state %d mt %x unhandled"</FONT>,
				proc-&gt;state, mt);
		}
		<FONT COLOR="#298C52">return</FONT>;
	} <FONT COLOR="#298C52">else</FONT> {
		<FONT COLOR="#298C52">if</FONT> (st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_STATE">L3_DEB_STATE</A>) {
			<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(st, <FONT COLOR="#FF0000">"dss1 global %d mt %x"</FONT>,
				proc-&gt;state, mt);
		}
		globalmes_list[i].rout(proc, mt, skb);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="dss1up">dss1up</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">int</FONT> i, mt, cr, cause, callState;
	<FONT COLOR="#298C52">char</FONT> *ptr;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb = arg;
	<FONT COLOR="#298C52">struct</FONT> l3_process *proc;

	<FONT COLOR="#298C52">switch</FONT> (pr) {
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_UNIT_DATA">DL_UNIT_DATA</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_ESTABLISH">DL_ESTABLISH</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>):
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_ESTABLISH">DL_ESTABLISH</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>):
			<A HREF="isdnl3.c.shtml#l3_msg">l3_msg</A>(st, pr, arg);
			<FONT COLOR="#298C52">return</FONT>;
			<FONT COLOR="#298C52">break</FONT>;
	}
	<FONT COLOR="#298C52">if</FONT> (skb-&gt;data[0] != <A HREF="isdnl3.h.shtml#PROTO_DIS_EURO">PROTO_DIS_EURO</A>) {
		<FONT COLOR="#298C52">if</FONT> (st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_PROTERR">L3_DEB_PROTERR</A>) {
			<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(st, <FONT COLOR="#FF0000">"dss1up%sunexpected discriminator %x message len %d"</FONT>,
				(pr == (<A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>)) ? <FONT COLOR="#FF0000">" "</FONT> : <FONT COLOR="#FF0000">"(broadcast) "</FONT>,
				skb-&gt;data[0], skb-&gt;len);
		}
		dev_kfree_skb(skb);
		<FONT COLOR="#298C52">return</FONT>;
	}
	cr = <A HREF="isdnl3.c.shtml#getcallref">getcallref</A>(skb-&gt;data);
	mt = skb-&gt;data[skb-&gt;data[1] + 2];
	<FONT COLOR="#298C52">if</FONT> (!cr) {				<FONT COLOR=#0000FF>/* Global CallRef */</FONT>
		<A HREF="#global_handler">global_handler</A>(st, mt, skb);
		<FONT COLOR="#298C52">return</FONT>;
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (cr == -1) {			<FONT COLOR=#0000FF>/* Dummy Callref */</FONT>
		dev_kfree_skb(skb);
		<FONT COLOR="#298C52">return</FONT>;
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (!(proc = <A HREF="isdnl3.c.shtml#getl3proc">getl3proc</A>(st, cr))) {
		<FONT COLOR=#0000FF>/* No transaction process exist, that means no call with
		 * this callreference is active
		 */</FONT>
		<FONT COLOR="#298C52">if</FONT> (mt == <A HREF="l3dss1.h.shtml#MT_SETUP">MT_SETUP</A>) {
		<FONT COLOR=#0000FF>/* Setup creates a new transaction process */</FONT>
			<FONT COLOR="#298C52">if</FONT> (!(proc = <A HREF="isdnl3.c.shtml#new_l3_process">new_l3_process</A>(st, cr))) {
				<FONT COLOR=#0000FF>/* May be to answer with RELEASE_COMPLETE and
				 * CAUSE 0x2f "Resource unavailable", but this
				 * need a new_l3_process too ... arghh
				 */</FONT>
				dev_kfree_skb(skb);
				<FONT COLOR="#298C52">return</FONT>;
			}
		} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (mt == <A HREF="l3dss1.h.shtml#MT_STATUS">MT_STATUS</A>) {
			cause = 0;
			<FONT COLOR="#298C52">if</FONT>((ptr = <A HREF="isdnl3.c.shtml#findie">findie</A>(skb-&gt;data, skb-&gt;len, <A HREF="l3dss1.h.shtml#IE_CAUSE">IE_CAUSE</A>, 0)) != NULL) {
				  ptr++;
				  <FONT COLOR="#298C52">if</FONT> (*ptr++ == 2)
				  	ptr++;
				  cause = *ptr &amp; 0x7f;
			}
			callState = 0;
			<FONT COLOR="#298C52">if</FONT>((ptr = <A HREF="isdnl3.c.shtml#findie">findie</A>(skb-&gt;data, skb-&gt;len, <A HREF="l3dss1.h.shtml#IE_CALL_STATE">IE_CALL_STATE</A>, 0)) != NULL) {
				ptr++;
				<FONT COLOR="#298C52">if</FONT> (*ptr++ == 2)
					ptr++;
				callState = *ptr;
			}
			<FONT COLOR="#298C52">if</FONT> (callState == 0) {
				<FONT COLOR=#0000FF>/* ETS 300-104 part 2.4.1
				 * if setup has not been made and a message type
				 * MT_STATUS is received with call state == 0,
				 * we must send nothing
				 */</FONT>
				dev_kfree_skb(skb);
				<FONT COLOR="#298C52">return</FONT>;
			} <FONT COLOR="#298C52">else</FONT> {
				<FONT COLOR=#0000FF>/* ETS 300-104 part 2.4.2
				 * if setup has not been made and a message type 
				 * MT_STATUS is received with call state != 0,
				 * we must send MT_RELEASE_COMPLETE cause 101
				 */</FONT>
				dev_kfree_skb(skb);
				<FONT COLOR="#298C52">if</FONT> ((proc = <A HREF="isdnl3.c.shtml#new_l3_process">new_l3_process</A>(st, cr))) {
					proc-&gt;para.cause = 0x65; <FONT COLOR=#0000FF>/* 101 */</FONT>
					<A HREF="#l3dss1_msg_without_setup">l3dss1_msg_without_setup</A>(proc, 0, NULL);
				}
				<FONT COLOR="#298C52">return</FONT>;
			}
		} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (mt == <A HREF="l3dss1.h.shtml#MT_RELEASE_COMPLETE">MT_RELEASE_COMPLETE</A>){
			dev_kfree_skb(skb);
			<FONT COLOR="#298C52">return</FONT>;
		} <FONT COLOR="#298C52">else</FONT> {
			<FONT COLOR=#0000FF>/* ETS 300-104 part 2
			 * if setup has not been made and a message type 
			 * (except MT_SETUP and RELEASE_COMPLETE) is received,
			 * we must send MT_RELEASE_COMPLETE cause 81 */</FONT>
			dev_kfree_skb(skb);
			<FONT COLOR="#298C52">if</FONT> ((proc = <A HREF="isdnl3.c.shtml#new_l3_process">new_l3_process</A>(st, cr))) {
				proc-&gt;para.cause = 0x51; <FONT COLOR=#0000FF>/* 81 */</FONT>
				<A HREF="#l3dss1_msg_without_setup">l3dss1_msg_without_setup</A>(proc, 0, NULL);
			}
			<FONT COLOR="#298C52">return</FONT>;
		}
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (!<A HREF="#l3dss1_check_messagetype_validity">l3dss1_check_messagetype_validity</A>(mt)) {
		<FONT COLOR=#0000FF>/* ETS 300-104 7.4.2, 8.4.2, 10.3.2, 11.4.2, 12.4.2, 13.4.2,
		 * 14.4.2...
		 * if setup has been made and invalid message type is received,
		 * we must send MT_STATUS cause 0x62
		 */</FONT>
		mt = <A HREF="l3dss1.h.shtml#MT_INVALID">MT_INVALID</A>;  <FONT COLOR=#0000FF>/* sorry, not clean, but do the right thing ;-) */</FONT>
	}

	<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; datasllen; i++)
		<FONT COLOR="#298C52">if</FONT> ((mt == datastatelist[i].primitive) &amp;&amp;
		    ((1 &lt;&lt; proc-&gt;state) &amp; datastatelist[i].state))
			<FONT COLOR="#298C52">break</FONT>;
	<FONT COLOR="#298C52">if</FONT> (i == datasllen) {
		dev_kfree_skb(skb);
		<FONT COLOR="#298C52">if</FONT> (st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_STATE">L3_DEB_STATE</A>) {
			<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(st, <FONT COLOR="#FF0000">"dss1up%sstate %d mt %x unhandled"</FONT>,
				(pr == (<A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>)) ? <FONT COLOR="#FF0000">" "</FONT> : <FONT COLOR="#FF0000">"(broadcast) "</FONT>,
				proc-&gt;state, mt);
		}
		<FONT COLOR="#298C52">return</FONT>;
	} <FONT COLOR="#298C52">else</FONT> {
		<FONT COLOR="#298C52">if</FONT> (st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_STATE">L3_DEB_STATE</A>) {
			<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(st, <FONT COLOR="#FF0000">"dss1up%sstate %d mt %x"</FONT>,
				(pr == (<A HREF="hisax.h.shtml#DL_DATA">DL_DATA</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>)) ? <FONT COLOR="#FF0000">" "</FONT> : <FONT COLOR="#FF0000">"(broadcast) "</FONT>,
				proc-&gt;state, mt);
		}
		datastatelist[i].rout(proc, pr, skb);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="dss1down">dss1down</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">int</FONT> i, cr;
	<FONT COLOR="#298C52">struct</FONT> l3_process *proc;
	<FONT COLOR="#298C52">struct</FONT> Channel *chan;

	<FONT COLOR="#298C52">if</FONT> (((<A HREF="hisax.h.shtml#DL_ESTABLISH">DL_ESTABLISH</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>)== pr) || ((<A HREF="hisax.h.shtml#DL_RELEASE">DL_RELEASE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>)== pr)) {
		<A HREF="isdnl3.c.shtml#l3_msg">l3_msg</A>(st, pr, NULL);
		<FONT COLOR="#298C52">return</FONT>;
	} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (((<A HREF="hisax.h.shtml#CC_SETUP">CC_SETUP</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>) == pr) || ((<A HREF="hisax.h.shtml#CC_RESUME">CC_RESUME</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>) == pr)) {
		chan = arg;
		cr = <A HREF="isdnl3.c.shtml#newcallref">newcallref</A>();
		cr |= 0x80;
		<FONT COLOR="#298C52">if</FONT> ((proc = <A HREF="isdnl3.c.shtml#new_l3_process">new_l3_process</A>(st, cr))) {
			proc-&gt;chan = chan;
			chan-&gt;proc = proc;
			proc-&gt;para.setup = chan-&gt;setup;
			proc-&gt;callref = cr;
		}
	} <FONT COLOR="#298C52">else</FONT> {
		proc = arg;
	}
	<FONT COLOR="#298C52">if</FONT> (!proc) {
		printk(KERN_ERR <FONT COLOR="#FF0000">"HiSax dss1down without proc pr=%04x\n"</FONT>, pr);
		<FONT COLOR="#298C52">return</FONT>;
	}
	<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; downsllen; i++)
		<FONT COLOR="#298C52">if</FONT> ((pr == downstatelist[i].primitive) &amp;&amp;
		    ((1 &lt;&lt; proc-&gt;state) &amp; downstatelist[i].state))
			<FONT COLOR="#298C52">break</FONT>;
	<FONT COLOR="#298C52">if</FONT> (i == downsllen) {
		<FONT COLOR="#298C52">if</FONT> (st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_STATE">L3_DEB_STATE</A>) {
			<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(st, <FONT COLOR="#FF0000">"dss1down state %d prim %d unhandled"</FONT>,
				proc-&gt;state, pr);
		}
	} <FONT COLOR="#298C52">else</FONT> {
		<FONT COLOR="#298C52">if</FONT> (st-&gt;l3.debug &amp; <A HREF="isdnl3.h.shtml#L3_DEB_STATE">L3_DEB_STATE</A>) {
			<A HREF="isdnl3.c.shtml#l3_debug">l3_debug</A>(st, <FONT COLOR="#FF0000">"dss1down state %d prim %d"</FONT>,
				proc-&gt;state, pr);
		}
		downstatelist[i].rout(proc, pr, arg);
	}
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="setstack_dss1">setstack_dss1</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st)
{
	<FONT COLOR="#298C52">char</FONT> tmp[64];

	st-&gt;lli.l4l3 = <A HREF="#dss1down">dss1down</A>;
	st-&gt;l2.l2l3 = <A HREF="#dss1up">dss1up</A>;
	st-&gt;l3.N303 = 1;
	<FONT COLOR="#298C52">if</FONT> (!(st-&gt;l3.global = kmalloc(<FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> l3_process), GFP_ATOMIC))) {
		printk(KERN_ERR <FONT COLOR="#FF0000">"HiSax can't get memory for dss1 global CR\n"</FONT>);
	} <FONT COLOR="#298C52">else</FONT> {
		st-&gt;l3.global-&gt;state = 0;
		st-&gt;l3.global-&gt;callref = 0;
		st-&gt;l3.global-&gt;next = NULL;
		st-&gt;l3.global-&gt;debug = <A HREF="isdnl3.h.shtml#L3_DEB_WARN">L3_DEB_WARN</A>;
		st-&gt;l3.global-&gt;st = st;
		st-&gt;l3.global-&gt;N303 = 1;
		<A HREF="isdnl3.c.shtml#L3InitTimer">L3InitTimer</A>(st-&gt;l3.global, &amp;st-&gt;l3.global-&gt;timer);
	}
	strcpy(tmp, dss1_revision);
	printk(KERN_INFO <FONT COLOR="#FF0000">"HiSax: DSS1 Rev. %s\n"</FONT>, HiSax_getrev(tmp));
}
</BODY>

</HTML>
