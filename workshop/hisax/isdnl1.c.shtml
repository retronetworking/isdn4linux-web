<HTML>

<!-- Generated by c2html-1.0, Copyright 1998 by Dave Whittington -->
<HEAD>
<TITLE>isdnl1.c</TITLE>
<!--#include virtual="/ssi/js.shtml" -->
<!--#include virtual="/ssi/buttondefs.shtml" -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<TABLE WIDTH="100%">
<TR>
<TD ALIGN=LEFT WIDTH="90"><!--#include virtual="/ssi/b_home.shtml" --></TD>
<TD ALIGN=RIGHT WIDTH="90"><!--#include virtual="/ssi/b_index.shtml" --></TD>
</TR>
</TABLE>
<CENTER><H1>isdnl1.c</H1></CENTER>

<HR>
<PRE>
<FONT COLOR=#0000FF>/* $Id$

 * isdnl1.c     common low level stuff for Siemens Chipsetbased isdn cards
 *              based on the teles driver from Jan den Ouden
 *
 * Author       Karsten Keil (keil@temic-ech.spacenet.de)
 *
 * Thanks to    Jan den Ouden
 *              Fritz Elfert
 *              Beat Doebeli
 *
 *
 * $Log$
 * Revision 2.25  1998/05/25 14:10:09  keil
 * HiSax 3.0
 * X.75 and leased are working again.
 *
 * Revision 2.24  1998/05/25 12:58:04  keil
 * HiSax golden code from certification, Don't use !!!
 * No leased lines, no X75, but many changes.
 *
 * Revision 2.22  1998/04/15 16:40:13  keil
 * Add S0Box and Teles PCI support
 * Fix cardnr overwrite bug
 *
 * Revision 2.21  1998/04/10 10:35:28  paul
 * fixed (silly?) warnings from egcs on Alpha.
 *
 * Revision 2.20  1998/03/09 23:19:27  keil
 * Changes for PCMCIA
 *
 * Revision 2.18  1998/02/12 23:07:42  keil
 * change for 2.1.86 (removing FREE_READ/FREE_WRITE from [dev]_kfree_skb()
 *
 * Revision 2.17  1998/02/11 17:28:07  keil
 * Niccy PnP/PCI support
 *
 * Revision 2.16  1998/02/09 18:46:08  keil
 * Support for Sedlbauer PCMCIA (Marcus Niemann)
 *
 * Revision 2.15  1998/02/09 10:54:51  keil
 * fixes for leased mode
 *
 * Revision 2.14  1998/02/03 23:31:31  keil
 * add AMD7930 support
 *
 * Revision 2.13  1998/02/02 13:33:02  keil
 * New card support
 *
 * Revision 2.12  1998/01/31 21:41:48  keil
 * changes for newer 2.1 kernels
 *
 * Revision 2.11  1997/11/12 15:01:23  keil
 * COMPAQ_ISA changes
 *
 * Revision 2.10  1997/11/08 21:35:48  keil
 * new l1 init
 *
 * Revision 2.9  1997/11/06 17:09:18  keil
 * New 2.1 init code
 *
 * Revision 2.8  1997/10/29 19:00:05  keil
 * new layer1,changes for 2.1
 *
 * Revision 2.7  1997/10/10 20:56:50  fritz
 * New HL interface.
 *
 * Revision 2.6  1997/09/12 10:05:16  keil
 * ISDN_CTRL_DEBUG define
 *
 * Revision 2.5  1997/09/11 17:24:45  keil
 * Add new cards
 *
 * Revision 2.4  1997/08/15 17:47:09  keil
 * avoid oops because a uninitialised timer
 *
 * Revision 2.3  1997/08/01 11:16:40  keil
 * cosmetics
 *
 * Revision 2.2  1997/07/30 17:11:08  keil
 * L1deactivated exported
 *
 * Revision 2.1  1997/07/27 21:35:38  keil
 * new layer1 interface
 *
 * Revision 2.0  1997/06/26 11:02:53  keil
 * New Layer and card interface
 *
 * Revision 1.15  1997/05/27 15:17:55  fritz
 * Added changes for recent 2.1.x kernels:
 *   changed return type of isdn_close
 *   queue_task_* -&gt; queue_task
 *   clear/set_bit -&gt; test_and_... where apropriate.
 *   changed type of hard_header_cache parameter.
 *
 * old changes removed KKe
 *
 */</FONT>

<FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *l1_revision = <FONT COLOR="#FF0000">"$Revision$"</FONT>;

<FONT COLOR=#A521F7>#define</FONT> <A HREF="asuscom.c.shtml#__NO_VERSION__">__NO_VERSION__</A>
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/config.h&gt;
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"hisax.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isdnl1.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/kernel_stat.h&gt;
<FONT COLOR=#A521F7>#if</FONT> (LINUX_VERSION_CODE &lt; 0x020150) <FONT COLOR=#0000FF>/* 2.1.80 */</FONT>
<FONT COLOR=#A521F7>#define</FONT> <A HREF="#kstat_irqs">kstat_irqs</A>( PAR ) kstat.interrupts( (PAR) )
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_TELES0">CARD_TELES0</A>
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">int</FONT> setup_teles0(<FONT COLOR="#298C52">struct</FONT> IsdnCard *card);
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_TELES3">CARD_TELES3</A>
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">int</FONT> setup_teles3(<FONT COLOR="#298C52">struct</FONT> IsdnCard *card);
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_S0BOX">CARD_S0BOX</A>
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">int</FONT> setup_s0box(<FONT COLOR="#298C52">struct</FONT> IsdnCard *card);
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_TELESPCI">CARD_TELESPCI</A>
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">int</FONT> setup_telespci(<FONT COLOR="#298C52">struct</FONT> IsdnCard *card);
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_AVM_A1">CARD_AVM_A1</A>
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">int</FONT> setup_avm_a1(<FONT COLOR="#298C52">struct</FONT> IsdnCard *card);
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_ELSA">CARD_ELSA</A>
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">int</FONT> setup_elsa(<FONT COLOR="#298C52">struct</FONT> IsdnCard *card);
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_IX1MICROR2">CARD_IX1MICROR2</A>
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">int</FONT> setup_ix1micro(<FONT COLOR="#298C52">struct</FONT> IsdnCard *card);
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_DIEHLDIVA">CARD_DIEHLDIVA</A>
<FONT COLOR="#298C52">extern</FONT>	<FONT COLOR="#298C52">int</FONT>  setup_diva(<FONT COLOR="#298C52">struct</FONT> IsdnCard *card);
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_ASUSCOM">CARD_ASUSCOM</A>
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">int</FONT> setup_asuscom(<FONT COLOR="#298C52">struct</FONT> IsdnCard *card);
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_TELEINT">CARD_TELEINT</A>
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">int</FONT> setup_TeleInt(<FONT COLOR="#298C52">struct</FONT> IsdnCard *card);
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_SEDLBAUER">CARD_SEDLBAUER</A>
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">int</FONT> setup_sedlbauer(<FONT COLOR="#298C52">struct</FONT> IsdnCard *card);
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_SPORTSTER">CARD_SPORTSTER</A>
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">int</FONT> setup_sportster(<FONT COLOR="#298C52">struct</FONT> IsdnCard *card);
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_MIC">CARD_MIC</A>
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">int</FONT> setup_mic(<FONT COLOR="#298C52">struct</FONT> IsdnCard *card);
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_NETJET">CARD_NETJET</A>
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">int</FONT> setup_netjet(<FONT COLOR="#298C52">struct</FONT> IsdnCard *card);
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_TELES3C">CARD_TELES3C</A>
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">int</FONT> setup_t163c(<FONT COLOR="#298C52">struct</FONT> IsdnCard *card);
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_AMD7930">CARD_AMD7930</A>
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">int</FONT> setup_amd7930(<FONT COLOR="#298C52">struct</FONT> IsdnCard *card);
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_NICCY">CARD_NICCY</A>
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">int</FONT> setup_niccy(<FONT COLOR="#298C52">struct</FONT> IsdnCard *card);
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR=#A521F7>#define</FONT> <A NAME="HISAX_STATUS_BUFSIZE">HISAX_STATUS_BUFSIZE</A> 4096
<FONT COLOR=#A521F7>#define</FONT> <A NAME="ISDN_CTRL_DEBUG">ISDN_CTRL_DEBUG</A> 1
<FONT COLOR=#A521F7>#define</FONT> <A NAME="INCLUDE_INLINE_FUNCS">INCLUDE_INLINE_FUNCS</A>
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/tqueue.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/interrupt.h&gt;
<FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *CardType[] =
{<FONT COLOR="#FF0000">"No Card"</FONT>, <FONT COLOR="#FF0000">"Teles 16.0"</FONT>, <FONT COLOR="#FF0000">"Teles 8.0"</FONT>, <FONT COLOR="#FF0000">"Teles 16.3"</FONT>, <FONT COLOR="#FF0000">"Creatix/Teles PnP"</FONT>,
 <FONT COLOR="#FF0000">"AVM A1"</FONT>, <FONT COLOR="#FF0000">"Elsa ML"</FONT>, <FONT COLOR="#FF0000">"Elsa Quickstep"</FONT>, <FONT COLOR="#FF0000">"Teles PCMCIA"</FONT>, <FONT COLOR="#FF0000">"ITK ix1-micro Rev.2"</FONT>,
 <FONT COLOR="#FF0000">"Elsa PCMCIA"</FONT>, <FONT COLOR="#FF0000">"Eicon.Diehl Diva"</FONT>, <FONT COLOR="#FF0000">"ISDNLink"</FONT>, <FONT COLOR="#FF0000">"TeleInt"</FONT>, <FONT COLOR="#FF0000">"Teles 16.3c"</FONT>, 
 <FONT COLOR="#FF0000">"Sedlbauer Speed Card"</FONT>, <FONT COLOR="#FF0000">"USR Sportster"</FONT>, <FONT COLOR="#FF0000">"ith mic Linux"</FONT>, <FONT COLOR="#FF0000">"Elsa PCI"</FONT>,
 <FONT COLOR="#FF0000">"Compaq ISA"</FONT>, <FONT COLOR="#FF0000">"NETjet"</FONT>, <FONT COLOR="#FF0000">"Teles PCI"</FONT>, <FONT COLOR="#FF0000">"Sedlbauer Speed Star (PCMCIA)"</FONT>,
 <FONT COLOR="#FF0000">"AMD 7930"</FONT>, <FONT COLOR="#FF0000">"NICCY"</FONT>, <FONT COLOR="#FF0000">"S0Box"</FONT>
};

<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">struct</FONT> IsdnCard cards[];
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">int</FONT> nrcards;
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">char</FONT> *HiSax_id;
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">struct</FONT> IsdnBuffers *tracebuf;

<FONT COLOR=#A521F7>#define</FONT> <A NAME="TIMER3_VALUE">TIMER3_VALUE</A> 7000

<FONT COLOR="#298C52">static</FONT>
<FONT COLOR="#298C52">struct</FONT> Fsm l1fsm_b =
{NULL, 0, 0, NULL, NULL};

<FONT COLOR="#298C52">static</FONT>
<FONT COLOR="#298C52">struct</FONT> Fsm l1fsm_d =
{NULL, 0, 0, NULL, NULL};

<FONT COLOR="#298C52">enum</FONT> {
	ST_L1_F2,
	ST_L1_F3,
	ST_L1_F4,
	ST_L1_F5,
	ST_L1_F6,
	ST_L1_F7,
	ST_L1_F8,
};

<FONT COLOR=#A521F7>#define</FONT> <A NAME="L1D_STATE_COUNT">L1D_STATE_COUNT</A> (ST_L1_F8+1)

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">char</FONT> *strL1DState[] =
{
	<FONT COLOR="#FF0000">"ST_L1_F2"</FONT>,
	<FONT COLOR="#FF0000">"ST_L1_F3"</FONT>,
	<FONT COLOR="#FF0000">"ST_L1_F4"</FONT>,
	<FONT COLOR="#FF0000">"ST_L1_F5"</FONT>,
	<FONT COLOR="#FF0000">"ST_L1_F6"</FONT>,
	<FONT COLOR="#FF0000">"ST_L1_F7"</FONT>,
	<FONT COLOR="#FF0000">"ST_L1_F8"</FONT>,
};

<FONT COLOR="#298C52">enum</FONT> {
	ST_L1_NULL,
	ST_L1_WAIT_ACT,
	ST_L1_WAIT_DEACT,
	ST_L1_ACTIV,
};

<FONT COLOR=#A521F7>#define</FONT> <A NAME="L1B_STATE_COUNT">L1B_STATE_COUNT</A> (ST_L1_ACTIV+1)

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">char</FONT> *strL1BState[] =
{
	<FONT COLOR="#FF0000">"ST_L1_NULL"</FONT>,
	<FONT COLOR="#FF0000">"ST_L1_WAIT_ACT"</FONT>,
	<FONT COLOR="#FF0000">"ST_L1_WAIT_DEACT"</FONT>,
	<FONT COLOR="#FF0000">"ST_L1_ACTIV"</FONT>,
};

<FONT COLOR="#298C52">enum</FONT> {
	EV_PH_ACTIVATE,
	EV_PH_DEACTIVATE,
	EV_RESET_IND,
	EV_DEACT_CNF,
	EV_DEACT_IND,
	EV_POWER_UP,
	EV_RSYNC_IND, 
	EV_INFO2_IND,
	EV_INFO4_IND,
	EV_TIMER_DEACT,
	EV_TIMER_ACT,
	EV_TIMER3,
};

<FONT COLOR=#A521F7>#define</FONT> <A NAME="L1_EVENT_COUNT">L1_EVENT_COUNT</A> (EV_TIMER3 + 1)

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">char</FONT> *strL1Event[] =
{
	<FONT COLOR="#FF0000">"EV_PH_ACTIVATE"</FONT>,
	<FONT COLOR="#FF0000">"EV_PH_DEACTIVATE"</FONT>,
	<FONT COLOR="#FF0000">"EV_RESET_IND"</FONT>,
	<FONT COLOR="#FF0000">"EV_DEACT_CNF"</FONT>,
	<FONT COLOR="#FF0000">"EV_DEACT_IND"</FONT>,
	<FONT COLOR="#FF0000">"EV_POWER_UP"</FONT>,
	<FONT COLOR="#FF0000">"EV_RSYNC_IND"</FONT>, 
	<FONT COLOR="#FF0000">"EV_INFO2_IND"</FONT>,
	<FONT COLOR="#FF0000">"EV_INFO4_IND"</FONT>,
	<FONT COLOR="#FF0000">"EV_TIMER_DEACT"</FONT>,
	<FONT COLOR="#FF0000">"EV_TIMER_ACT"</FONT>,
	<FONT COLOR="#FF0000">"EV_TIMER3"</FONT>,
};

<FONT COLOR=#0000FF>/*
 * Find card with given driverId
 */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">struct</FONT> IsdnCardState
*<A HREF="callc.c.shtml#hisax_findcard">hisax_findcard</A>(<FONT COLOR="#298C52">int</FONT> driverid)
{
	<FONT COLOR="#298C52">int</FONT> i;

	<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; nrcards; i++)
		<FONT COLOR="#298C52">if</FONT> (cards[i].cs)
			<FONT COLOR="#298C52">if</FONT> (cards[i].cs-&gt;myid == driverid)
				<FONT COLOR="#298C52">return</FONT> (cards[i].cs);
	<FONT COLOR="#298C52">return</FONT> (NULL);
}

<FONT COLOR="#298C52">int</FONT>
<A HREF="#HiSax_readstatus">HiSax_readstatus</A>(u_char * buf, <FONT COLOR="#298C52">int</FONT> len, <FONT COLOR="#298C52">int</FONT> user, <FONT COLOR="#298C52">int</FONT> id, <FONT COLOR="#298C52">int</FONT> channel)
{
	<FONT COLOR="#298C52">int</FONT> count;
	u_char *p;
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *csta = <A HREF="callc.c.shtml#hisax_findcard">hisax_findcard</A>(id);

	<FONT COLOR="#298C52">if</FONT> (csta) {
		<FONT COLOR="#298C52">for</FONT> (p = buf, count = 0; count &lt; len; p++, count++) {
			<FONT COLOR="#298C52">if</FONT> (user)
				put_user(*csta-&gt;status_read++, p);
			<FONT COLOR="#298C52">else</FONT>
				*p++ = *csta-&gt;status_read++;
			<FONT COLOR="#298C52">if</FONT> (csta-&gt;status_read &gt; csta-&gt;status_end)
				csta-&gt;status_read = csta-&gt;status_buf;
		}
		<FONT COLOR="#298C52">return</FONT> count;
	} <FONT COLOR="#298C52">else</FONT> {
		printk(KERN_ERR
		 <FONT COLOR="#FF0000">"HiSax: if_readstatus called with invalid driverId!\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT> -ENODEV;
	}
}

<FONT COLOR=#A521F7>#if</FONT> <A HREF="#ISDN_CTRL_DEBUG">ISDN_CTRL_DEBUG</A>
<FONT COLOR="#298C52">void</FONT>
<A HREF="#HiSax_putstatus">HiSax_putstatus</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *csta, <FONT COLOR="#298C52">char</FONT> *buf)
{
	<FONT COLOR="#298C52">long</FONT> flags;
	<FONT COLOR="#298C52">int</FONT> len, count, i;
	u_char *p;
	isdn_ctrl ic;

	save_flags(flags);
	cli();
	count = 0;
	len = strlen(buf);

	<FONT COLOR="#298C52">if</FONT> (!csta) {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"HiSax: No CardStatus for message %s"</FONT>, buf);
		restore_flags(flags);
		<FONT COLOR="#298C52">return</FONT>;
	}
	<FONT COLOR="#298C52">for</FONT> (p = buf, i = len; i &gt; 0; i--, p++) {
		*csta-&gt;status_write++ = *p;
		<FONT COLOR="#298C52">if</FONT> (csta-&gt;status_write &gt; csta-&gt;status_end)
			csta-&gt;status_write = csta-&gt;status_buf;
		count++;
	}
	restore_flags(flags);
	<FONT COLOR="#298C52">if</FONT> (count) {
		ic.command = ISDN_STAT_STAVAIL;
		ic.driver = csta-&gt;myid;
		ic.arg = count;
		csta-&gt;iif.statcallb(&amp;ic);
	}
}
<FONT COLOR=#A521F7>#else</FONT>
<FONT COLOR=#A521F7>#define</FONT> <A NAME="KDEBUG_DEF">KDEBUG_DEF</A>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"../kdebug.h"</FONT>

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> DbgLineNr=0,DbgSequenzNr=1;

<FONT COLOR="#298C52">void</FONT>
<A HREF="#HiSax_putstatus">HiSax_putstatus</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *csta, <FONT COLOR="#298C52">char</FONT> *buf)
{
	<FONT COLOR="#298C52">char</FONT> tmp[512];
	
	<FONT COLOR="#298C52">if</FONT> (DbgLineNr==23)
		DbgLineNr=0;
	sprintf(tmp, <FONT COLOR="#FF0000">"%5d %s"</FONT>,DbgSequenzNr++,buf);
	gput_str(tmp,0,DbgLineNr++);
}	
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR="#298C52">int</FONT>
<A NAME="ll_run">ll_run</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *csta)
{
	<FONT COLOR="#298C52">long</FONT> flags;
	isdn_ctrl ic;

	save_flags(flags);
	cli();
	ic.driver = csta-&gt;myid;
	ic.command = ISDN_STAT_RUN;
	csta-&gt;iif.statcallb(&amp;ic);
	restore_flags(flags);
	<FONT COLOR="#298C52">return</FONT> 0;
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="ll_stop">ll_stop</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *csta)
{
	isdn_ctrl ic;

	ic.command = ISDN_STAT_STOP;
	ic.driver = csta-&gt;myid;
	csta-&gt;iif.statcallb(&amp;ic);
	<A HREF="callc.c.shtml#CallcFreeChan">CallcFreeChan</A>(csta);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="ll_unload">ll_unload</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *csta)
{
	isdn_ctrl ic;

	ic.command = ISDN_STAT_UNLOAD;
	ic.driver = csta-&gt;myid;
	csta-&gt;iif.statcallb(&amp;ic);
	<FONT COLOR="#298C52">if</FONT> (csta-&gt;status_buf)
		kfree(csta-&gt;status_buf);
	csta-&gt;status_read = NULL;
	csta-&gt;status_write = NULL;
	csta-&gt;status_end = NULL;
	kfree(csta-&gt;dlogspace);
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="debugl1">debugl1</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">char</FONT> *msg)
{
	<FONT COLOR="#298C52">char</FONT> tmp[256], tm[32];

	<A HREF="fsm.c.shtml#jiftime">jiftime</A>(tm, jiffies);
	sprintf(tmp, <FONT COLOR="#FF0000">"%s Card %d %s\n"</FONT>, tm, cs-&gt;cardnr + 1, msg);
	<A HREF="#HiSax_putstatus">HiSax_putstatus</A>(cs, tmp);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="l1m_debug">l1m_debug</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">char</FONT> *s)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	
	<A HREF="#debugl1">debugl1</A>(st-&gt;l1.hardware, s);
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="L1activated">L1activated</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st;

	st = cs-&gt;stlist;
	<FONT COLOR="#298C52">while</FONT> (st) {
		<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_L1_ACTIVATING">FLG_L1_ACTIVATING</A>, &amp;st-&gt;l1.Flags))
			st-&gt;l1.l1l2(st, <A HREF="hisax.h.shtml#PH_ACTIVATE">PH_ACTIVATE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, NULL);
		<FONT COLOR="#298C52">else</FONT>
			st-&gt;l1.l1l2(st, <A HREF="hisax.h.shtml#PH_ACTIVATE">PH_ACTIVATE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);
		st = st-&gt;next;
	}
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="L1deactivated">L1deactivated</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st;

	st = cs-&gt;stlist;
	<FONT COLOR="#298C52">while</FONT> (st) {
		<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_L1_DBUSY">FLG_L1_DBUSY</A>, &amp;cs-&gt;HW_Flags))
			st-&gt;l1.l1l2(st, <A HREF="hisax.h.shtml#PH_PAUSE">PH_PAUSE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, NULL);
		st-&gt;l1.l1l2(st, <A HREF="hisax.h.shtml#PH_DEACTIVATE">PH_DEACTIVATE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, NULL);
		st = st-&gt;next;
	}
	test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_L1_DBUSY">FLG_L1_DBUSY</A>, &amp;cs-&gt;HW_Flags);
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="DChannel_proc_xmt">DChannel_proc_xmt</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *stptr;

	<FONT COLOR="#298C52">if</FONT> (cs-&gt;tx_skb)
		<FONT COLOR="#298C52">return</FONT>;

	stptr = cs-&gt;stlist;
	<FONT COLOR="#298C52">while</FONT> (stptr != NULL)
		<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_L1_PULL_REQ">FLG_L1_PULL_REQ</A>, &amp;stptr-&gt;l1.Flags)) {
			stptr-&gt;l1.l1l2(stptr, <A HREF="hisax.h.shtml#PH_PULL">PH_PULL</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		} <FONT COLOR="#298C52">else</FONT>
			stptr = stptr-&gt;next;
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="DChannel_proc_rcv">DChannel_proc_rcv</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb, *nskb;
	<FONT COLOR="#298C52">struct</FONT> PStack *stptr = cs-&gt;stlist;
	<FONT COLOR="#298C52">int</FONT> found, tei, sapi;
	<FONT COLOR="#298C52">char</FONT> tmp[64];

	<FONT COLOR="#298C52">if</FONT> (stptr)
		<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_L1_ACTTIMER">FLG_L1_ACTTIMER</A>, &amp;stptr-&gt;l1.Flags))
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;stptr-&gt;l1.l1m, EV_TIMER_ACT, NULL);	
	<FONT COLOR="#298C52">while</FONT> ((skb = skb_dequeue(&amp;cs-&gt;rq))) {
<FONT COLOR=#A521F7>#ifdef</FONT> <A HREF="isdnl1.h.shtml#L2FRAME_DEBUG">L2FRAME_DEBUG</A>		<FONT COLOR=#0000FF>/* psa */</FONT>
		<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug &amp; <A HREF="isdnl1.h.shtml#L1_DEB_LAPD">L1_DEB_LAPD</A>)
			<A HREF="#Logl2Frame">Logl2Frame</A>(cs, skb, <FONT COLOR="#FF0000">"PH_DATA"</FONT>, 1);
<FONT COLOR=#A521F7>#endif</FONT>
		stptr = cs-&gt;stlist;
		sapi = skb-&gt;data[0] &gt;&gt; 2;
		tei = skb-&gt;data[1] &gt;&gt; 1;

		<FONT COLOR="#298C52">if</FONT> (tei == <A HREF="hisax.h.shtml#GROUP_TEI">GROUP_TEI</A>) {
			<FONT COLOR="#298C52">if</FONT> (sapi == <A HREF="hisax.h.shtml#CTRL_SAPI">CTRL_SAPI</A>) {	<FONT COLOR=#0000FF>/* sapi 0 */</FONT>
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;dlogflag) {
					<A HREF="q931.c.shtml#LogFrame">LogFrame</A>(cs, skb-&gt;data, skb-&gt;len);
					<A HREF="q931.c.shtml#dlogframe">dlogframe</A>(cs, skb-&gt;data + 3, skb-&gt;len - 3,
						  <FONT COLOR="#FF0000">"Q.931 frame network-&gt;user broadcast"</FONT>);
				}
				<FONT COLOR="#298C52">while</FONT> (stptr != NULL) {
					<FONT COLOR="#298C52">if</FONT> ((nskb = skb_clone(skb, GFP_ATOMIC)))
						stptr-&gt;l1.l1l2(stptr, <A HREF="hisax.h.shtml#PH_DATA">PH_DATA</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, nskb);
					<FONT COLOR="#298C52">else</FONT>
						printk(KERN_WARNING <FONT COLOR="#FF0000">"HiSax: isdn broadcast buffer shortage\n"</FONT>);
					stptr = stptr-&gt;next;
				}
			} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (sapi == <A HREF="hisax.h.shtml#TEI_SAPI">TEI_SAPI</A>) {
				<FONT COLOR="#298C52">while</FONT> (stptr != NULL) {
					<FONT COLOR="#298C52">if</FONT> ((nskb = skb_clone(skb, GFP_ATOMIC)))
						stptr-&gt;l1.l1tei(stptr, <A HREF="hisax.h.shtml#PH_DATA">PH_DATA</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, nskb);
					<FONT COLOR="#298C52">else</FONT>
						printk(KERN_WARNING <FONT COLOR="#FF0000">"HiSax: tei broadcast buffer shortage\n"</FONT>);
					stptr = stptr-&gt;next;
				}
			}
			dev_kfree_skb(skb);
		} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (sapi == <A HREF="hisax.h.shtml#CTRL_SAPI">CTRL_SAPI</A>) {
			found = 0;
			<FONT COLOR="#298C52">while</FONT> (stptr != NULL)
				<FONT COLOR="#298C52">if</FONT> (tei == stptr-&gt;l2.tei) {
					stptr-&gt;l1.l1l2(stptr, <A HREF="hisax.h.shtml#PH_DATA">PH_DATA</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, skb);
					found = !0;
					<FONT COLOR="#298C52">break</FONT>;
				} <FONT COLOR="#298C52">else</FONT>
					stptr = stptr-&gt;next;
			<FONT COLOR="#298C52">if</FONT> (!found) {
				<FONT COLOR=#0000FF>/* BD 10.10.95
				 * Print out D-Channel msg not processed
				 * by isdn4linux
				 */</FONT>

				<FONT COLOR="#298C52">if</FONT> ((!(skb-&gt;data[0] &gt;&gt; 2)) &amp;&amp; (!(skb-&gt;data[2] &amp; 0x01))) {
					sprintf(tmp,
						<FONT COLOR="#FF0000">"Q.931 frame network-&gt;user with tei %d (not for us)"</FONT>,
						skb-&gt;data[1] &gt;&gt; 1);
					<A HREF="q931.c.shtml#LogFrame">LogFrame</A>(cs, skb-&gt;data, skb-&gt;len);
					<A HREF="q931.c.shtml#dlogframe">dlogframe</A>(cs, skb-&gt;data + 4, skb-&gt;len - 4, tmp);
				}
				dev_kfree_skb(skb);
			}
		}
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="BChannel_proc_xmt">BChannel_proc_xmt</A>(<FONT COLOR="#298C52">struct</FONT> BCState *bcs)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = bcs-&gt;st;

	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#BC_FLG_BUSY">BC_FLG_BUSY</A>, &amp;bcs-&gt;Flag))
		<FONT COLOR="#298C52">return</FONT>;

	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_L1_PULL_REQ">FLG_L1_PULL_REQ</A>, &amp;st-&gt;l1.Flags))
		st-&gt;l1.l1l2(st, <A HREF="hisax.h.shtml#PH_PULL">PH_PULL</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, NULL);
	<FONT COLOR="#298C52">if</FONT> (!test_bit(<A HREF="hisax.h.shtml#BC_FLG_ACTIV">BC_FLG_ACTIV</A>, &amp;bcs-&gt;Flag)) {
		<FONT COLOR="#298C52">if</FONT> (!test_bit(<A HREF="hisax.h.shtml#BC_FLG_BUSY">BC_FLG_BUSY</A>, &amp;bcs-&gt;Flag) &amp;&amp; (!skb_queue_len(&amp;bcs-&gt;squeue))) {
			st-&gt;l2.l2l1(st, <A HREF="hisax.h.shtml#PH_DEACTIVATE">PH_DEACTIVATE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, NULL);
		}
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="BChannel_proc_rcv">BChannel_proc_rcv</A>(<FONT COLOR="#298C52">struct</FONT> BCState *bcs)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;

	<FONT COLOR="#298C52">if</FONT> (bcs-&gt;st-&gt;l1.l1m.state == ST_L1_WAIT_ACT) {
		<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;bcs-&gt;st-&gt;l1.timer, 4);
		<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;bcs-&gt;st-&gt;l1.l1m, EV_TIMER_ACT, NULL);
	}
	<FONT COLOR="#298C52">while</FONT> ((skb = skb_dequeue(&amp;bcs-&gt;rqueue))) {
		bcs-&gt;st-&gt;l1.l1l2(bcs-&gt;st, <A HREF="hisax.h.shtml#PH_DATA">PH_DATA</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>, skb);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="BChannel_bh">BChannel_bh</A>(<FONT COLOR="#298C52">struct</FONT> BCState *bcs)
{
	<FONT COLOR="#298C52">if</FONT> (!bcs)
		<FONT COLOR="#298C52">return</FONT>;
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="isdnl1.h.shtml#B_RCVBUFREADY">B_RCVBUFREADY</A>, &amp;bcs-&gt;event))
		<A HREF="#BChannel_proc_rcv">BChannel_proc_rcv</A>(bcs);
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="isdnl1.h.shtml#B_XMTBUFREADY">B_XMTBUFREADY</A>, &amp;bcs-&gt;event))
		<A HREF="#BChannel_proc_xmt">BChannel_proc_xmt</A>(bcs);
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="HiSax_addlist">HiSax_addlist</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs,
	      <FONT COLOR="#298C52">struct</FONT> PStack *st)
{
	st-&gt;next = cs-&gt;stlist;
	cs-&gt;stlist = st;
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="HiSax_rmlist">HiSax_rmlist</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs,
	     <FONT COLOR="#298C52">struct</FONT> PStack *st)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *p;

	<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;st-&gt;l1.timer, 0);
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;stlist == st)
		cs-&gt;stlist = st-&gt;next;
	<FONT COLOR="#298C52">else</FONT> {
		p = cs-&gt;stlist;
		<FONT COLOR="#298C52">while</FONT> (p)
			<FONT COLOR="#298C52">if</FONT> (p-&gt;next == st) {
				p-&gt;next = st-&gt;next;
				<FONT COLOR="#298C52">return</FONT>;
			} <FONT COLOR="#298C52">else</FONT>
				p = p-&gt;next;
	}
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="init_bcstate">init_bcstate</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs,
	     <FONT COLOR="#298C52">int</FONT> bc)
{
	<FONT COLOR="#298C52">struct</FONT> BCState *bcs = cs-&gt;bcs + bc;

	bcs-&gt;cs = cs;
	bcs-&gt;channel = bc;
	bcs-&gt;tqueue.next = 0;
	bcs-&gt;tqueue.sync = 0;
	bcs-&gt;tqueue.routine = (<FONT COLOR="#298C52">void</FONT> *) (<FONT COLOR="#298C52">void</FONT> *) <A HREF="#BChannel_bh">BChannel_bh</A>;
	bcs-&gt;tqueue.data = bcs;
	bcs-&gt;BC_SetStack = NULL;
	bcs-&gt;BC_Close = NULL;
	bcs-&gt;Flag = 0;
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="closecard">closecard</A>(<FONT COLOR="#298C52">int</FONT> cardnr)
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *csta = cards[cardnr].cs;
	
	<FONT COLOR="#298C52">if</FONT> (csta-&gt;bcs-&gt;BC_Close != NULL) { 
		csta-&gt;bcs-&gt;BC_Close(csta-&gt;bcs + 1);
		csta-&gt;bcs-&gt;BC_Close(csta-&gt;bcs);
	}

	<FONT COLOR="#298C52">if</FONT> (csta-&gt;rcvbuf) {
		kfree(csta-&gt;rcvbuf);
		csta-&gt;rcvbuf = NULL;
	}
	<A HREF="callc.c.shtml#discard_queue">discard_queue</A>(&amp;csta-&gt;rq);
	<A HREF="callc.c.shtml#discard_queue">discard_queue</A>(&amp;csta-&gt;sq);
	<FONT COLOR="#298C52">if</FONT> (csta-&gt;tx_skb) {
		dev_kfree_skb(csta-&gt;tx_skb);
		csta-&gt;tx_skb = NULL;
	}
	<FONT COLOR="#298C52">if</FONT> (csta-&gt;mon_rx) {
		kfree(csta-&gt;mon_rx);
		csta-&gt;mon_rx = NULL;
	}
	<FONT COLOR="#298C52">if</FONT> (csta-&gt;mon_tx) {
		kfree(csta-&gt;mon_tx);
		csta-&gt;mon_tx = NULL;
	}
	csta-&gt;cardmsg(csta, <A HREF="hisax.h.shtml#CARD_RELEASE">CARD_RELEASE</A>, NULL);
	del_timer(&amp;csta-&gt;dbusytimer);
	<A HREF="#ll_unload">ll_unload</A>(csta);
}

<A HREF="callc.c.shtml#HISAX_INITFUNC">HISAX_INITFUNC</A>(<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> init_card(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs))
{
	<FONT COLOR="#298C52">int</FONT> irq_cnt, cnt = 3;
	<FONT COLOR="#298C52">long</FONT> flags;

	save_flags(flags);
	cli();
	irq_cnt = <A HREF="#kstat_irqs">kstat_irqs</A>(cs-&gt;irq);
	printk(KERN_INFO <FONT COLOR="#FF0000">"%s: IRQ %d count %d\n"</FONT>, CardType[cs-&gt;typ], cs-&gt;irq,
		irq_cnt);
	<FONT COLOR="#298C52">if</FONT> (cs-&gt;cardmsg(cs, <A HREF="hisax.h.shtml#CARD_SETIRQ">CARD_SETIRQ</A>, NULL)) {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"HiSax: couldn't get interrupt %d\n"</FONT>,
			cs-&gt;irq);
		<FONT COLOR="#298C52">return</FONT>(1);
	}
	<FONT COLOR="#298C52">while</FONT> (cnt) {
		cs-&gt;cardmsg(cs, <A HREF="hisax.h.shtml#CARD_INIT">CARD_INIT</A>, NULL);
		sti();
		current-&gt;state = TASK_INTERRUPTIBLE;
		<FONT COLOR=#0000FF>/* Timeout 10ms */</FONT>
		current-&gt;timeout = jiffies + (10 * HZ) / 1000;
		schedule();
		restore_flags(flags);
		printk(KERN_INFO <FONT COLOR="#FF0000">"%s: IRQ %d count %d\n"</FONT>, CardType[cs-&gt;typ],
			cs-&gt;irq, <A HREF="#kstat_irqs">kstat_irqs</A>(cs-&gt;irq));
		<FONT COLOR="#298C52">if</FONT> (<A HREF="#kstat_irqs">kstat_irqs</A>(cs-&gt;irq) == irq_cnt) {
			printk(KERN_WARNING
			       <FONT COLOR="#FF0000">"%s: IRQ(%d) getting no interrupts during init %d\n"</FONT>,
			       CardType[cs-&gt;typ], cs-&gt;irq, 4 - cnt);
			<FONT COLOR="#298C52">if</FONT> (cnt == 1) {
				free_irq(cs-&gt;irq, cs);
				<FONT COLOR="#298C52">return</FONT> (2);
			} <FONT COLOR="#298C52">else</FONT> {
				cs-&gt;cardmsg(cs, <A HREF="hisax.h.shtml#CARD_RESET">CARD_RESET</A>, NULL);
				cnt--;
			}
		} <FONT COLOR="#298C52">else</FONT> {
			cs-&gt;cardmsg(cs, <A HREF="hisax.h.shtml#CARD_TEST">CARD_TEST</A>, NULL);
			<FONT COLOR="#298C52">return</FONT>(0);
		}
	}
	restore_flags(flags);
	<FONT COLOR="#298C52">return</FONT>(3);
}

<A HREF="callc.c.shtml#HISAX_INITFUNC">HISAX_INITFUNC</A>(<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
checkcard(<FONT COLOR="#298C52">int</FONT> cardnr, <FONT COLOR="#298C52">char</FONT> *id, <FONT COLOR="#298C52">int</FONT> *busy_flag))
{
	<FONT COLOR="#298C52">long</FONT> flags;
	<FONT COLOR="#298C52">int</FONT> ret = 0;
	<FONT COLOR="#298C52">struct</FONT> IsdnCard *card = cards + cardnr;
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs;

	save_flags(flags);
	cli();
	<FONT COLOR="#298C52">if</FONT> (!(cs = (<FONT COLOR="#298C52">struct</FONT> IsdnCardState *)
	      kmalloc(<FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState), GFP_ATOMIC))) {
		printk(KERN_WARNING
		       <FONT COLOR="#FF0000">"HiSax: No memory for IsdnCardState(card %d)\n"</FONT>,
		       cardnr + 1);
		restore_flags(flags);
		<FONT COLOR="#298C52">return</FONT> (0);
	}
	card-&gt;cs = cs;
	cs-&gt;cardnr = cardnr;
	cs-&gt;debug = <A HREF="isdnl1.h.shtml#L1_DEB_WARN">L1_DEB_WARN</A>;
	cs-&gt;HW_Flags = 0;
	cs-&gt;busy_flag = busy_flag;
<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#TEI_PER_CARD">TEI_PER_CARD</A>
<FONT COLOR=#A521F7>#else</FONT>
	test_and_set_bit(<A HREF="hisax.h.shtml#FLG_TWO_DCHAN">FLG_TWO_DCHAN</A>, &amp;cs-&gt;HW_Flags);
<FONT COLOR=#A521F7>#endif</FONT>
	cs-&gt;protocol = card-&gt;protocol;

	<FONT COLOR="#298C52">if</FONT> ((card-&gt;typ &gt; 0) &amp;&amp; (card-&gt;typ &lt; 31)) {
		<FONT COLOR="#298C52">if</FONT> (!((1 &lt;&lt; card-&gt;typ) &amp; <A HREF="hisax.h.shtml#SUPORTED_CARDS">SUPORTED_CARDS</A>)) {
			printk(KERN_WARNING
			     <FONT COLOR="#FF0000">"HiSax: Support for %s Card not selected\n"</FONT>,
			       CardType[card-&gt;typ]);
			restore_flags(flags);
			<FONT COLOR="#298C52">return</FONT> (0);
		}
	} <FONT COLOR="#298C52">else</FONT> {
		printk(KERN_WARNING
		       <FONT COLOR="#FF0000">"HiSax: Card Type %d out of range\n"</FONT>,
		       card-&gt;typ);
		restore_flags(flags);
		<FONT COLOR="#298C52">return</FONT> (0);
	}
	<FONT COLOR="#298C52">if</FONT> (!(cs-&gt;dlogspace = kmalloc(4096, GFP_ATOMIC))) {
		printk(KERN_WARNING
		       <FONT COLOR="#FF0000">"HiSax: No memory for dlogspace(card %d)\n"</FONT>,
		       cardnr + 1);
		restore_flags(flags);
		<FONT COLOR="#298C52">return</FONT> (0);
	}
	<FONT COLOR="#298C52">if</FONT> (!(cs-&gt;status_buf = kmalloc(<A HREF="#HISAX_STATUS_BUFSIZE">HISAX_STATUS_BUFSIZE</A>, GFP_ATOMIC))) {
		printk(KERN_WARNING
		       <FONT COLOR="#FF0000">"HiSax: No memory for status_buf(card %d)\n"</FONT>,
		       cardnr + 1);
		kfree(cs-&gt;dlogspace);
		restore_flags(flags);
		<FONT COLOR="#298C52">return</FONT> (0);
	}
	cs-&gt;stlist = NULL;
	cs-&gt;dlogflag = 0;
	cs-&gt;mon_tx = NULL;
	cs-&gt;mon_rx = NULL;
	cs-&gt;status_read = cs-&gt;status_buf;
	cs-&gt;status_write = cs-&gt;status_buf;
	cs-&gt;status_end = cs-&gt;status_buf + <A HREF="#HISAX_STATUS_BUFSIZE">HISAX_STATUS_BUFSIZE</A> - 1;
	cs-&gt;typ = card-&gt;typ;
	strcpy(cs-&gt;iif.id, id);
	cs-&gt;iif.channels = 2;
	cs-&gt;iif.maxbufsize = <A HREF="hisax.h.shtml#MAX_DATA_SIZE">MAX_DATA_SIZE</A>;
	cs-&gt;iif.hl_hdrlen = <A HREF="hisax.h.shtml#MAX_HEADER_LEN">MAX_HEADER_LEN</A>;
	cs-&gt;iif.features =
	    ISDN_FEATURE_L2_X75I |
	    ISDN_FEATURE_L2_HDLC |
	    ISDN_FEATURE_L2_MODEM |
	    ISDN_FEATURE_L2_TRANS |
	    ISDN_FEATURE_L3_TRANS |
<FONT COLOR=#A521F7>#ifdef</FONT>	CONFIG_HISAX_1TR6
	    ISDN_FEATURE_P_1TR6 |
<FONT COLOR=#A521F7>#endif</FONT>
<FONT COLOR=#A521F7>#ifdef</FONT>	CONFIG_HISAX_EURO
	    ISDN_FEATURE_P_EURO |
<FONT COLOR=#A521F7>#endif</FONT>
<FONT COLOR=#A521F7>#ifdef</FONT>        CONFIG_HISAX_NI1
	    ISDN_FEATURE_P_NI1 |
<FONT COLOR=#A521F7>#endif</FONT>
	    0;

	cs-&gt;iif.command = <A HREF="callc.c.shtml#HiSax_command">HiSax_command</A>;
	cs-&gt;iif.writecmd = NULL;
	cs-&gt;iif.writebuf_skb = <A HREF="callc.c.shtml#HiSax_writebuf_skb">HiSax_writebuf_skb</A>;
	cs-&gt;iif.readstat = <A HREF="#HiSax_readstatus">HiSax_readstatus</A>;
	register_isdn(&amp;cs-&gt;iif);
	cs-&gt;myid = cs-&gt;iif.channels;
	printk(KERN_INFO
	       <FONT COLOR="#FF0000">"HiSax: Card %d Protocol %s Id=%s (%d)\n"</FONT>, cardnr + 1,
	       (card-&gt;protocol == ISDN_PTYPE_1TR6) ? <FONT COLOR="#FF0000">"1TR6"</FONT> :
	       (card-&gt;protocol == ISDN_PTYPE_EURO) ? <FONT COLOR="#FF0000">"EDSS1"</FONT> :
	       (card-&gt;protocol == ISDN_PTYPE_LEASED) ? <FONT COLOR="#FF0000">"LEASED"</FONT> :
	       (card-&gt;protocol == ISDN_PTYPE_NI1) ? <FONT COLOR="#FF0000">"NI1"</FONT> :
	       <FONT COLOR="#FF0000">"NONE"</FONT>, cs-&gt;iif.id, cs-&gt;myid);
	<FONT COLOR="#298C52">switch</FONT> (card-&gt;typ) {
<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_TELES0">CARD_TELES0</A>
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#ISDN_CTYPE_16_0">ISDN_CTYPE_16_0</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#ISDN_CTYPE_8_0">ISDN_CTYPE_8_0</A>:
			ret = setup_teles0(card);
			<FONT COLOR="#298C52">break</FONT>;
<FONT COLOR=#A521F7>#endif</FONT>
<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_TELES3">CARD_TELES3</A>
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#ISDN_CTYPE_16_3">ISDN_CTYPE_16_3</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#ISDN_CTYPE_PNP">ISDN_CTYPE_PNP</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#ISDN_CTYPE_TELESPCMCIA">ISDN_CTYPE_TELESPCMCIA</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#ISDN_CTYPE_COMPAQ_ISA">ISDN_CTYPE_COMPAQ_ISA</A>:
			ret = setup_teles3(card);
			<FONT COLOR="#298C52">break</FONT>;
<FONT COLOR=#A521F7>#endif</FONT>
<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_S0BOX">CARD_S0BOX</A>
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#ISDN_CTYPE_S0BOX">ISDN_CTYPE_S0BOX</A>:
			ret = setup_s0box(card);
			<FONT COLOR="#298C52">break</FONT>;
<FONT COLOR=#A521F7>#endif</FONT>
<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_TELESPCI">CARD_TELESPCI</A>
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#ISDN_CTYPE_TELESPCI">ISDN_CTYPE_TELESPCI</A>:
			ret = setup_telespci(card);
			<FONT COLOR="#298C52">break</FONT>;
<FONT COLOR=#A521F7>#endif</FONT>
<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_AVM_A1">CARD_AVM_A1</A>
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#ISDN_CTYPE_A1">ISDN_CTYPE_A1</A>:
			ret = setup_avm_a1(card);
			<FONT COLOR="#298C52">break</FONT>;
<FONT COLOR=#A521F7>#endif</FONT>
<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_ELSA">CARD_ELSA</A>
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#ISDN_CTYPE_ELSA">ISDN_CTYPE_ELSA</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#ISDN_CTYPE_ELSA_PNP">ISDN_CTYPE_ELSA_PNP</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#ISDN_CTYPE_ELSA_PCMCIA">ISDN_CTYPE_ELSA_PCMCIA</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#ISDN_CTYPE_ELSA_PCI">ISDN_CTYPE_ELSA_PCI</A>:
			ret = setup_elsa(card);
			<FONT COLOR="#298C52">break</FONT>;
<FONT COLOR=#A521F7>#endif</FONT>
<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_IX1MICROR2">CARD_IX1MICROR2</A>
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#ISDN_CTYPE_IX1MICROR2">ISDN_CTYPE_IX1MICROR2</A>:
			ret = setup_ix1micro(card);
			<FONT COLOR="#298C52">break</FONT>;
<FONT COLOR=#A521F7>#endif</FONT>
<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_DIEHLDIVA">CARD_DIEHLDIVA</A>
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#ISDN_CTYPE_DIEHLDIVA">ISDN_CTYPE_DIEHLDIVA</A>:
			ret = setup_diva(card);
			<FONT COLOR="#298C52">break</FONT>;
<FONT COLOR=#A521F7>#endif</FONT>
<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_ASUSCOM">CARD_ASUSCOM</A>
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#ISDN_CTYPE_ASUSCOM">ISDN_CTYPE_ASUSCOM</A>:
			ret = setup_asuscom(card);
			<FONT COLOR="#298C52">break</FONT>;
<FONT COLOR=#A521F7>#endif</FONT>
<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_TELEINT">CARD_TELEINT</A>
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#ISDN_CTYPE_TELEINT">ISDN_CTYPE_TELEINT</A>:
			ret = setup_TeleInt(card);
			<FONT COLOR="#298C52">break</FONT>;
<FONT COLOR=#A521F7>#endif</FONT>
<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_SEDLBAUER">CARD_SEDLBAUER</A>
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#ISDN_CTYPE_SEDLBAUER">ISDN_CTYPE_SEDLBAUER</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#ISDN_CTYPE_SEDLBAUER_PCMCIA">ISDN_CTYPE_SEDLBAUER_PCMCIA</A>:
			ret = setup_sedlbauer(card);
			<FONT COLOR="#298C52">break</FONT>;
<FONT COLOR=#A521F7>#endif</FONT>
<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_SPORTSTER">CARD_SPORTSTER</A>
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#ISDN_CTYPE_SPORTSTER">ISDN_CTYPE_SPORTSTER</A>:
			ret = setup_sportster(card);
			<FONT COLOR="#298C52">break</FONT>;
<FONT COLOR=#A521F7>#endif</FONT>
<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_MIC">CARD_MIC</A>
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#ISDN_CTYPE_MIC">ISDN_CTYPE_MIC</A>:
			ret = setup_mic(card);
			<FONT COLOR="#298C52">break</FONT>;
<FONT COLOR=#A521F7>#endif</FONT>
<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_NETJET">CARD_NETJET</A>
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#ISDN_CTYPE_NETJET">ISDN_CTYPE_NETJET</A>:
			ret = setup_netjet(card);
			<FONT COLOR="#298C52">break</FONT>;
<FONT COLOR=#A521F7>#endif</FONT>
<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_TELES3C">CARD_TELES3C</A>
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#ISDN_CTYPE_TELES3C">ISDN_CTYPE_TELES3C</A>:
			ret = setup_t163c(card);
			<FONT COLOR="#298C52">break</FONT>;
<FONT COLOR=#A521F7>#endif</FONT>
<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_NICCY">CARD_NICCY</A>
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#ISDN_CTYPE_NICCY">ISDN_CTYPE_NICCY</A>:
			ret = setup_niccy(card);
			<FONT COLOR="#298C52">break</FONT>;
<FONT COLOR=#A521F7>#endif</FONT>
<FONT COLOR=#A521F7>#if</FONT> <A HREF="hisax.h.shtml#CARD_AMD7930">CARD_AMD7930</A>
		<FONT COLOR="#298C52">case</FONT> <A HREF="hisax.h.shtml#ISDN_CTYPE_AMD7930">ISDN_CTYPE_AMD7930</A>:
			ret = setup_amd7930(card);
			<FONT COLOR="#298C52">break</FONT>;
<FONT COLOR=#A521F7>#endif</FONT>
		<FONT COLOR="#298C52">default</FONT>:
			printk(KERN_WARNING <FONT COLOR="#FF0000">"HiSax: Unknown Card Typ %d\n"</FONT>,
			       card-&gt;typ);
			<A HREF="#ll_unload">ll_unload</A>(cs);
			restore_flags(flags);
			<FONT COLOR="#298C52">return</FONT> (0);
	}
	<FONT COLOR="#298C52">if</FONT> (!ret) {
		<A HREF="#ll_unload">ll_unload</A>(cs);
		restore_flags(flags);
		<FONT COLOR="#298C52">return</FONT> (0);
	}
	<FONT COLOR="#298C52">if</FONT> (!(cs-&gt;rcvbuf = kmalloc(<A HREF="hisax.h.shtml#MAX_DFRAME_LEN">MAX_DFRAME_LEN</A>, GFP_ATOMIC))) {
		printk(KERN_WARNING
		       <FONT COLOR="#FF0000">"HiSax: No memory for isac rcvbuf\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT> (1);
	}
	cs-&gt;rcvidx = 0;
	cs-&gt;tx_skb = NULL;
	cs-&gt;tx_cnt = 0;
	cs-&gt;event = 0;
	cs-&gt;tqueue.next = 0;
	cs-&gt;tqueue.sync = 0;
	cs-&gt;tqueue.data = cs;

	skb_queue_head_init(&amp;cs-&gt;rq);
	skb_queue_head_init(&amp;cs-&gt;sq);

	<A HREF="#init_bcstate">init_bcstate</A>(cs, 0);
	<A HREF="#init_bcstate">init_bcstate</A>(cs, 1);
	ret = init_card(cs);
	<FONT COLOR="#298C52">if</FONT> (ret) {
		<A HREF="#closecard">closecard</A>(cardnr);
		restore_flags(flags);
		<FONT COLOR="#298C52">return</FONT> (0);
	}
	<A HREF="tei.c.shtml#init_tei">init_tei</A>(cs, cs-&gt;protocol);
	<A HREF="callc.c.shtml#CallcNewChan">CallcNewChan</A>(cs);
	<A HREF="#ll_run">ll_run</A>(cs);
	restore_flags(flags);
	<FONT COLOR="#298C52">return</FONT> (1);
}

<A HREF="callc.c.shtml#HISAX_INITFUNC">HISAX_INITFUNC</A>(<FONT COLOR="#298C52">void</FONT>
HiSax_shiftcards(<FONT COLOR="#298C52">int</FONT> idx))
{
	<FONT COLOR="#298C52">int</FONT> i;

	<FONT COLOR="#298C52">for</FONT> (i = idx; i &lt; (<A HREF="hisax.h.shtml#HISAX_MAX_CARDS">HISAX_MAX_CARDS</A> - 1); i++)
		memcpy(&amp;cards[i], &amp;cards[i + 1], <FONT COLOR="#298C52">sizeof</FONT>(cards[i]));
}

<A HREF="callc.c.shtml#HISAX_INITFUNC">HISAX_INITFUNC</A>(<FONT COLOR="#298C52">int</FONT>
HiSax_inithardware(<FONT COLOR="#298C52">int</FONT> *busy_flag))
{
	<FONT COLOR="#298C52">int</FONT> foundcards = 0;
	<FONT COLOR="#298C52">int</FONT> i = 0;
	<FONT COLOR="#298C52">int</FONT> t = <FONT COLOR="#FF0000">','</FONT>;
	<FONT COLOR="#298C52">int</FONT> flg = 0;
	<FONT COLOR="#298C52">char</FONT> *id;
	<FONT COLOR="#298C52">char</FONT> *next_id = HiSax_id;
	<FONT COLOR="#298C52">char</FONT> ids[20];

	<FONT COLOR="#298C52">if</FONT> (strchr(HiSax_id, <FONT COLOR="#FF0000">','</FONT>))
		t = <FONT COLOR="#FF0000">','</FONT>;
	<FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (strchr(HiSax_id, <FONT COLOR="#FF0000">'%'</FONT>))
		t = <FONT COLOR="#FF0000">'%'</FONT>;

	<FONT COLOR="#298C52">while</FONT> (i &lt; nrcards) {
		<FONT COLOR="#298C52">if</FONT> (cards[i].typ &lt; 1)
			<FONT COLOR="#298C52">break</FONT>;
		id = next_id;
		<FONT COLOR="#298C52">if</FONT> ((next_id = strchr(id, t))) {
			*next_id++ = 0;
			strcpy(ids, id);
			flg = i + 1;
		} <FONT COLOR="#298C52">else</FONT> {
			next_id = id;
			<FONT COLOR="#298C52">if</FONT> (flg &gt;= i)
				strcpy(ids, id);
			<FONT COLOR="#298C52">else</FONT>
				sprintf(ids, <FONT COLOR="#FF0000">"%s%d"</FONT>, id, i);
		}
		<FONT COLOR="#298C52">if</FONT> (checkcard(i, ids, busy_flag)) {
			foundcards++;
			i++;
		} <FONT COLOR="#298C52">else</FONT> {
			printk(KERN_WARNING <FONT COLOR="#FF0000">"HiSax: Card %s not installed !\n"</FONT>,
			       CardType[cards[i].typ]);
			<FONT COLOR="#298C52">if</FONT> (cards[i].cs)
				kfree((<FONT COLOR="#298C52">void</FONT> *) cards[i].cs);
			cards[i].cs = NULL;
			HiSax_shiftcards(i);
		}
	}
	<FONT COLOR="#298C52">return</FONT> foundcards;
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="HiSax_closecard">HiSax_closecard</A>(<FONT COLOR="#298C52">int</FONT> cardnr)
{
	<FONT COLOR="#298C52">int</FONT> 	i,last=nrcards - 1;
	
	<FONT COLOR="#298C52">if</FONT> (cardnr&gt;last)
		<FONT COLOR="#298C52">return</FONT>;
	<FONT COLOR="#298C52">if</FONT> (cards[cardnr].cs) {
		<A HREF="#ll_stop">ll_stop</A>(cards[cardnr].cs);
		<A HREF="tei.c.shtml#release_tei">release_tei</A>(cards[cardnr].cs);
		<A HREF="#closecard">closecard</A>(cardnr);
		free_irq(cards[cardnr].cs-&gt;irq, cards[cardnr].cs);
		kfree((<FONT COLOR="#298C52">void</FONT> *) cards[cardnr].cs);
		cards[cardnr].cs = NULL;
	}
	i = cardnr;
	<FONT COLOR="#298C52">while</FONT> (i!=last) {
		cards[i] = cards[i+1];
		i++;
	}
	nrcards--;
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="HiSax_reportcard">HiSax_reportcard</A>(<FONT COLOR="#298C52">int</FONT> cardnr)
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = cards[cardnr].cs;
	<FONT COLOR="#298C52">struct</FONT> PStack *stptr;
	<FONT COLOR="#298C52">struct</FONT> l3_process *pc;
	<FONT COLOR="#298C52">int</FONT> j, i = 1;

	printk(KERN_DEBUG <FONT COLOR="#FF0000">"HiSax: reportcard No %d\n"</FONT>, cardnr + 1);
	printk(KERN_DEBUG <FONT COLOR="#FF0000">"HiSax: Type %s\n"</FONT>, CardType[cs-&gt;typ]);
	printk(KERN_DEBUG <FONT COLOR="#FF0000">"HiSax: debuglevel %x\n"</FONT>, cs-&gt;debug);
	printk(KERN_DEBUG <FONT COLOR="#FF0000">"HiSax: HiSax_reportcard address 0x%lX\n"</FONT>,
	       (ulong) &amp; <A HREF="#HiSax_reportcard">HiSax_reportcard</A>);
	printk(KERN_DEBUG <FONT COLOR="#FF0000">"HiSax: cs 0x%lX\n"</FONT>, (ulong) cs);
	printk(KERN_DEBUG <FONT COLOR="#FF0000">"HiSax: cs stl 0x%lX\n"</FONT>, (ulong) &amp; (cs-&gt;stlist));
	stptr = cs-&gt;stlist;
	<FONT COLOR="#298C52">while</FONT> (stptr != NULL) {
		printk(KERN_DEBUG <FONT COLOR="#FF0000">"HiSax: dst%d 0x%lX\n"</FONT>, i, (ulong) stptr);
		printk(KERN_DEBUG <FONT COLOR="#FF0000">"HiSax: dst%d stp 0x%lX\n"</FONT>, i, (ulong) stptr-&gt;l1.stlistp);
		printk(KERN_DEBUG <FONT COLOR="#FF0000">"HiSax:   tei %d sapi %d\n"</FONT>,
		       stptr-&gt;l2.tei, stptr-&gt;l2.sap);
		printk(KERN_DEBUG <FONT COLOR="#FF0000">"HiSax:      man 0x%lX\n"</FONT>, (ulong) stptr-&gt;ma.layer);
		pc = stptr-&gt;l3.proc;
		<FONT COLOR="#298C52">while</FONT> (pc) {
			printk(KERN_DEBUG <FONT COLOR="#FF0000">"HiSax: l3proc %x 0x%lX\n"</FONT>, pc-&gt;callref,
			       (ulong) pc);
			printk(KERN_DEBUG <FONT COLOR="#FF0000">"HiSax:    state %d  st 0x%lX chan 0x%lX\n"</FONT>,
			    pc-&gt;state, (ulong) pc-&gt;st, (ulong) pc-&gt;chan);
			pc = pc-&gt;next;
		}
		stptr = stptr-&gt;next;
		i++;
	}
	<FONT COLOR="#298C52">for</FONT> (j = 0; j &lt; 2; j++) {
		printk(KERN_DEBUG <FONT COLOR="#FF0000">"HiSax: ch%d 0x%lX\n"</FONT>, j,
		       (ulong) &amp; cs-&gt;channel[j]);
		stptr = cs-&gt;channel[j].b_st;
		i = 1;
		<FONT COLOR="#298C52">while</FONT> (stptr != NULL) {
			printk(KERN_DEBUG <FONT COLOR="#FF0000">"HiSax:  b_st%d 0x%lX\n"</FONT>, i, (ulong) stptr);
			printk(KERN_DEBUG <FONT COLOR="#FF0000">"HiSax:    man 0x%lX\n"</FONT>, (ulong) stptr-&gt;ma.layer);
			stptr = stptr-&gt;next;
			i++;
		}
	}
}

<FONT COLOR=#A521F7>#ifdef</FONT> <A HREF="isdnl1.h.shtml#L2FRAME_DEBUG">L2FRAME_DEBUG</A>		<FONT COLOR=#0000FF>/* psa */</FONT>

<FONT COLOR="#298C52">char</FONT> *
<A NAME="l2cmd">l2cmd</A>(u_char cmd)
{
	<FONT COLOR="#298C52">switch</FONT> (cmd &amp; ~0x10) {
		<FONT COLOR="#298C52">case</FONT> 1:
			<FONT COLOR="#298C52">return</FONT> <FONT COLOR="#FF0000">"RR"</FONT>;
		<FONT COLOR="#298C52">case</FONT> 5:
			<FONT COLOR="#298C52">return</FONT> <FONT COLOR="#FF0000">"RNR"</FONT>;
		<FONT COLOR="#298C52">case</FONT> 9:
			<FONT COLOR="#298C52">return</FONT> <FONT COLOR="#FF0000">"REJ"</FONT>;
		<FONT COLOR="#298C52">case</FONT> 0x6f:
			<FONT COLOR="#298C52">return</FONT> <FONT COLOR="#FF0000">"SABME"</FONT>;
		<FONT COLOR="#298C52">case</FONT> 0x0f:
			<FONT COLOR="#298C52">return</FONT> <FONT COLOR="#FF0000">"DM"</FONT>;
		<FONT COLOR="#298C52">case</FONT> 3:
			<FONT COLOR="#298C52">return</FONT> <FONT COLOR="#FF0000">"UI"</FONT>;
		<FONT COLOR="#298C52">case</FONT> 0x43:
			<FONT COLOR="#298C52">return</FONT> <FONT COLOR="#FF0000">"DISC"</FONT>;
		<FONT COLOR="#298C52">case</FONT> 0x63:
			<FONT COLOR="#298C52">return</FONT> <FONT COLOR="#FF0000">"UA"</FONT>;
		<FONT COLOR="#298C52">case</FONT> 0x87:
			<FONT COLOR="#298C52">return</FONT> <FONT COLOR="#FF0000">"FRMR"</FONT>;
		<FONT COLOR="#298C52">case</FONT> 0xaf:
			<FONT COLOR="#298C52">return</FONT> <FONT COLOR="#FF0000">"XID"</FONT>;
		<FONT COLOR="#298C52">default</FONT>:
			<FONT COLOR="#298C52">if</FONT> (!(cmd &amp; 1))
				<FONT COLOR="#298C52">return</FONT> <FONT COLOR="#FF0000">"I"</FONT>;
			<FONT COLOR="#298C52">else</FONT>
				<FONT COLOR="#298C52">return</FONT> <FONT COLOR="#FF0000">"invalid command"</FONT>;
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">char</FONT> tmp[24];

<FONT COLOR="#298C52">char</FONT> *
<A NAME="l2frames">l2frames</A>(u_char * ptr)
{
	<FONT COLOR="#298C52">switch</FONT> (ptr[2] &amp; ~0x10) {
		<FONT COLOR="#298C52">case</FONT> 1:
		<FONT COLOR="#298C52">case</FONT> 5:
		<FONT COLOR="#298C52">case</FONT> 9:
			sprintf(tmp, <FONT COLOR="#FF0000">"%s[%d](nr %d)"</FONT>, <A HREF="#l2cmd">l2cmd</A>(ptr[2]), ptr[3] &amp; 1, ptr[3] &gt;&gt; 1);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> 0x6f:
		<FONT COLOR="#298C52">case</FONT> 0x0f:
		<FONT COLOR="#298C52">case</FONT> 3:
		<FONT COLOR="#298C52">case</FONT> 0x43:
		<FONT COLOR="#298C52">case</FONT> 0x63:
		<FONT COLOR="#298C52">case</FONT> 0x87:
		<FONT COLOR="#298C52">case</FONT> 0xaf:
			sprintf(tmp, <FONT COLOR="#FF0000">"%s[%d]"</FONT>, <A HREF="#l2cmd">l2cmd</A>(ptr[2]), (ptr[2] &amp; 0x10) &gt;&gt; 4);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">default</FONT>:
			<FONT COLOR="#298C52">if</FONT> (!(ptr[2] &amp; 1)) {
				sprintf(tmp, <FONT COLOR="#FF0000">"I[%d](ns %d, nr %d)"</FONT>, ptr[3] &amp; 1, ptr[2] &gt;&gt; 1, ptr[3] &gt;&gt; 1);
				<FONT COLOR="#298C52">break</FONT>;
			} <FONT COLOR="#298C52">else</FONT>
				<FONT COLOR="#298C52">return</FONT> <FONT COLOR="#FF0000">"invalid command"</FONT>;
	}


	<FONT COLOR="#298C52">return</FONT> tmp;
}

<FONT COLOR="#298C52">void</FONT>
<A HREF="#Logl2Frame">Logl2Frame</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">struct</FONT> sk_buff *skb, <FONT COLOR="#298C52">char</FONT> *buf, <FONT COLOR="#298C52">int</FONT> dir)
{
	<FONT COLOR="#298C52">char</FONT> tmp[132];
	u_char *ptr;

	ptr = skb-&gt;data;

	<FONT COLOR="#298C52">if</FONT> (ptr[0] &amp; 1 || !(ptr[1] &amp; 1))
		<A HREF="#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"Addres not LAPD"</FONT>);
	<FONT COLOR="#298C52">else</FONT> {
		sprintf(tmp, <FONT COLOR="#FF0000">"%s %s: %s%c (sapi %d, tei %d)"</FONT>,
			(dir ? <FONT COLOR="#FF0000">"&lt;-"</FONT> : <FONT COLOR="#FF0000">"-&gt;"</FONT>), buf, <A HREF="#l2frames">l2frames</A>(ptr),
			((ptr[0] &amp; 2) &gt;&gt; 1) == dir ? <FONT COLOR="#FF0000">'C'</FONT> : <FONT COLOR="#FF0000">'R'</FONT>, ptr[0] &gt;&gt; 2, ptr[1] &gt;&gt; 1);
		<A HREF="#debugl1">debugl1</A>(cs, tmp);
	}
}
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l1_reset">l1_reset</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L1_F3);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l1_deact_cnf">l1_deact_cnf</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;

	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L1_F3);
	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_L1_ACTIVATING">FLG_L1_ACTIVATING</A>, &amp;st-&gt;l1.Flags))
		st-&gt;l1.l1hw(st, <A HREF="hisax.h.shtml#HW_ENABLE">HW_ENABLE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l1_deact_req">l1_deact_req</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;

	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L1_F3);
<FONT COLOR=#0000FF>//	if (!test_bit(FLG_L1_T3RUN, &amp;st-&gt;l1.Flags)) {</FONT>
		<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;st-&gt;l1.timer, 1);
		<A HREF="fsm.c.shtml#FsmAddTimer">FsmAddTimer</A>(&amp;st-&gt;l1.timer, 550, EV_TIMER_DEACT, NULL, 2);
		test_and_set_bit(<A HREF="hisax.h.shtml#FLG_L1_DEACTTIMER">FLG_L1_DEACTTIMER</A>, &amp;st-&gt;l1.Flags);
<FONT COLOR=#0000FF>//	}</FONT>
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l1_power_up">l1_power_up</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;

	<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_L1_ACTIVATING">FLG_L1_ACTIVATING</A>, &amp;st-&gt;l1.Flags)) {
		<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L1_F4);
		st-&gt;l1.l1hw(st, <A HREF="hisax.h.shtml#HW_INFO3">HW_INFO3</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
		<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;st-&gt;l1.timer, 1);
		<A HREF="fsm.c.shtml#FsmAddTimer">FsmAddTimer</A>(&amp;st-&gt;l1.timer, <A HREF="#TIMER3_VALUE">TIMER3_VALUE</A>, EV_TIMER3, NULL, 2);
		test_and_set_bit(<A HREF="hisax.h.shtml#FLG_L1_T3RUN">FLG_L1_T3RUN</A>, &amp;st-&gt;l1.Flags);
	} <FONT COLOR="#298C52">else</FONT>
		<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L1_F3);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l1_go_F5">l1_go_F5</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L1_F5);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l1_go_F8">l1_go_F8</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L1_F8);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l1_info2_ind">l1_info2_ind</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;

	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L1_F6);
	st-&gt;l1.l1hw(st, <A HREF="hisax.h.shtml#HW_INFO3">HW_INFO3</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l1_info4_ind">l1_info4_ind</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;

	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L1_F7);
	st-&gt;l1.l1hw(st, <A HREF="hisax.h.shtml#HW_INFO3">HW_INFO3</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_L1_DEACTTIMER">FLG_L1_DEACTTIMER</A>, &amp;st-&gt;l1.Flags))
		<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;st-&gt;l1.timer, 4);
	<FONT COLOR="#298C52">if</FONT> (!test_bit(<A HREF="hisax.h.shtml#FLG_L1_ACTIVATED">FLG_L1_ACTIVATED</A>, &amp;st-&gt;l1.Flags)) {
		<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_L1_T3RUN">FLG_L1_T3RUN</A>, &amp;st-&gt;l1.Flags))
			<A HREF="fsm.c.shtml#FsmDelTimer">FsmDelTimer</A>(&amp;st-&gt;l1.timer, 3);
		<A HREF="fsm.c.shtml#FsmAddTimer">FsmAddTimer</A>(&amp;st-&gt;l1.timer, 110, EV_TIMER_ACT, NULL, 2);
		test_and_set_bit(<A HREF="hisax.h.shtml#FLG_L1_ACTTIMER">FLG_L1_ACTTIMER</A>, &amp;st-&gt;l1.Flags);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l1_timer3">l1_timer3</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;

	test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_L1_T3RUN">FLG_L1_T3RUN</A>, &amp;st-&gt;l1.Flags);	
	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_L1_ACTIVATING">FLG_L1_ACTIVATING</A>, &amp;st-&gt;l1.Flags))
		<A HREF="#L1deactivated">L1deactivated</A>(st-&gt;l1.hardware);
	<FONT COLOR="#298C52">if</FONT> (st-&gt;l1.l1m.state != ST_L1_F6) {
		<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L1_F3);
		st-&gt;l1.l1hw(st, <A HREF="hisax.h.shtml#HW_ENABLE">HW_ENABLE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
	}
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l1_timer_act">l1_timer_act</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	
	test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_L1_ACTTIMER">FLG_L1_ACTTIMER</A>, &amp;st-&gt;l1.Flags);
	test_and_set_bit(<A HREF="hisax.h.shtml#FLG_L1_ACTIVATED">FLG_L1_ACTIVATED</A>, &amp;st-&gt;l1.Flags);
	<A HREF="#L1activated">L1activated</A>(st-&gt;l1.hardware);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l1_timer_deact">l1_timer_deact</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
	
	test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_L1_DEACTTIMER">FLG_L1_DEACTTIMER</A>, &amp;st-&gt;l1.Flags);
	test_and_clear_bit(<A HREF="hisax.h.shtml#FLG_L1_ACTIVATED">FLG_L1_ACTIVATED</A>, &amp;st-&gt;l1.Flags);
	<A HREF="#L1deactivated">L1deactivated</A>(st-&gt;l1.hardware);
	st-&gt;l1.l1hw(st, <A HREF="hisax.h.shtml#HW_DEACTIVATE">HW_DEACTIVATE</A> | <A HREF="hisax.h.shtml#RESPONSE">RESPONSE</A>, NULL);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l1_activate">l1_activate</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;
                
	st-&gt;l1.l1hw(st, <A HREF="hisax.h.shtml#HW_RESET">HW_RESET</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, NULL);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">struct</FONT> FsmNode L1DFnList[] <A HREF="hisax.h.shtml#HISAX_INITDATA">HISAX_INITDATA</A> =
{
	{ST_L1_F3, EV_PH_ACTIVATE, <A HREF="#l1_activate">l1_activate</A>},
	{ST_L1_F3, EV_RESET_IND, <A HREF="#l1_reset">l1_reset</A>},
	{ST_L1_F4, EV_RESET_IND, <A HREF="#l1_reset">l1_reset</A>},
	{ST_L1_F5, EV_RESET_IND, <A HREF="#l1_reset">l1_reset</A>},
	{ST_L1_F6, EV_RESET_IND, <A HREF="#l1_reset">l1_reset</A>},
	{ST_L1_F7, EV_RESET_IND, <A HREF="#l1_reset">l1_reset</A>},
	{ST_L1_F8, EV_RESET_IND, <A HREF="#l1_reset">l1_reset</A>},
	{ST_L1_F3, EV_DEACT_CNF, <A HREF="#l1_deact_cnf">l1_deact_cnf</A>},
	{ST_L1_F4, EV_DEACT_CNF, <A HREF="#l1_deact_cnf">l1_deact_cnf</A>},
	{ST_L1_F5, EV_DEACT_CNF, <A HREF="#l1_deact_cnf">l1_deact_cnf</A>},
	{ST_L1_F6, EV_DEACT_CNF, <A HREF="#l1_deact_cnf">l1_deact_cnf</A>},
	{ST_L1_F7, EV_DEACT_CNF, <A HREF="#l1_deact_cnf">l1_deact_cnf</A>},
	{ST_L1_F8, EV_DEACT_CNF, <A HREF="#l1_deact_cnf">l1_deact_cnf</A>},
	{ST_L1_F6, EV_DEACT_IND, <A HREF="#l1_deact_req">l1_deact_req</A>},
	{ST_L1_F7, EV_DEACT_IND, <A HREF="#l1_deact_req">l1_deact_req</A>},
	{ST_L1_F8, EV_DEACT_IND, <A HREF="#l1_deact_req">l1_deact_req</A>},
	{ST_L1_F3, EV_POWER_UP, <A HREF="#l1_power_up">l1_power_up</A>},
	{ST_L1_F4, EV_RSYNC_IND, <A HREF="#l1_go_F5">l1_go_F5</A>},
	{ST_L1_F6, EV_RSYNC_IND, <A HREF="#l1_go_F8">l1_go_F8</A>},
	{ST_L1_F7, EV_RSYNC_IND, <A HREF="#l1_go_F8">l1_go_F8</A>},
	{ST_L1_F3, EV_INFO2_IND, <A HREF="#l1_info2_ind">l1_info2_ind</A>},
	{ST_L1_F4, EV_INFO2_IND, <A HREF="#l1_info2_ind">l1_info2_ind</A>},
	{ST_L1_F5, EV_INFO2_IND, <A HREF="#l1_info2_ind">l1_info2_ind</A>},
	{ST_L1_F7, EV_INFO2_IND, <A HREF="#l1_info2_ind">l1_info2_ind</A>},
	{ST_L1_F8, EV_INFO2_IND, <A HREF="#l1_info2_ind">l1_info2_ind</A>},
	{ST_L1_F3, EV_INFO4_IND, <A HREF="#l1_info4_ind">l1_info4_ind</A>},
	{ST_L1_F4, EV_INFO4_IND, <A HREF="#l1_info4_ind">l1_info4_ind</A>},
	{ST_L1_F5, EV_INFO4_IND, <A HREF="#l1_info4_ind">l1_info4_ind</A>},
	{ST_L1_F6, EV_INFO4_IND, <A HREF="#l1_info4_ind">l1_info4_ind</A>},
	{ST_L1_F8, EV_INFO4_IND, <A HREF="#l1_info4_ind">l1_info4_ind</A>},
	{ST_L1_F3, EV_TIMER3, <A HREF="#l1_timer3">l1_timer3</A>},
	{ST_L1_F4, EV_TIMER3, <A HREF="#l1_timer3">l1_timer3</A>},
	{ST_L1_F5, EV_TIMER3, <A HREF="#l1_timer3">l1_timer3</A>},
	{ST_L1_F6, EV_TIMER3, <A HREF="#l1_timer3">l1_timer3</A>},
	{ST_L1_F8, EV_TIMER3, <A HREF="#l1_timer3">l1_timer3</A>},
	{ST_L1_F7, EV_TIMER_ACT, <A HREF="#l1_timer_act">l1_timer_act</A>},
	{ST_L1_F3, EV_TIMER_DEACT, <A HREF="#l1_timer_deact">l1_timer_deact</A>},
	{ST_L1_F4, EV_TIMER_DEACT, <A HREF="#l1_timer_deact">l1_timer_deact</A>},
	{ST_L1_F5, EV_TIMER_DEACT, <A HREF="#l1_timer_deact">l1_timer_deact</A>},
	{ST_L1_F6, EV_TIMER_DEACT, <A HREF="#l1_timer_deact">l1_timer_deact</A>},
	{ST_L1_F7, EV_TIMER_DEACT, <A HREF="#l1_timer_deact">l1_timer_deact</A>},
	{ST_L1_F8, EV_TIMER_DEACT, <A HREF="#l1_timer_deact">l1_timer_deact</A>},
};

<FONT COLOR=#A521F7>#define</FONT> <A NAME="L1D_FN_COUNT">L1D_FN_COUNT</A> (<FONT COLOR="#298C52">sizeof</FONT>(L1DFnList)/<FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> FsmNode))

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l1b_activate">l1b_activate</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;

	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L1_WAIT_ACT);
	<A HREF="fsm.c.shtml#FsmAddTimer">FsmAddTimer</A>(&amp;st-&gt;l1.timer, st-&gt;l1.delay, EV_TIMER_ACT, NULL, 2);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l1b_deactivate">l1b_deactivate</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;

	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L1_WAIT_DEACT);
	<A HREF="fsm.c.shtml#FsmAddTimer">FsmAddTimer</A>(&amp;st-&gt;l1.timer, 10, EV_TIMER_DEACT, NULL, 2);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l1b_timer_act">l1b_timer_act</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;

	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L1_ACTIV);
	st-&gt;l1.l1l2(st, <A HREF="hisax.h.shtml#PH_ACTIVATE">PH_ACTIVATE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, NULL);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#l1b_timer_deact">l1b_timer_deact</A>(<FONT COLOR="#298C52">struct</FONT> FsmInst *fi, <FONT COLOR="#298C52">int</FONT> event, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> PStack *st = fi-&gt;userdata;

	<A HREF="fsm.c.shtml#FsmChangeState">FsmChangeState</A>(fi, ST_L1_NULL);
	st-&gt;l2.l2l1(st, <A HREF="hisax.h.shtml#PH_DEACTIVATE">PH_DEACTIVATE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, NULL);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">struct</FONT> FsmNode L1BFnList[] <A HREF="hisax.h.shtml#HISAX_INITDATA">HISAX_INITDATA</A> =
{
	{ST_L1_NULL, EV_PH_ACTIVATE, <A HREF="#l1b_activate">l1b_activate</A>},
	{ST_L1_WAIT_ACT, EV_TIMER_ACT, <A HREF="#l1b_timer_act">l1b_timer_act</A>},
	{ST_L1_ACTIV, EV_PH_DEACTIVATE, <A HREF="#l1b_deactivate">l1b_deactivate</A>},
	{ST_L1_WAIT_DEACT, EV_TIMER_DEACT, <A HREF="#l1b_timer_deact">l1b_timer_deact</A>},
};

<FONT COLOR=#A521F7>#define</FONT> <A NAME="L1B_FN_COUNT">L1B_FN_COUNT</A> (<FONT COLOR="#298C52">sizeof</FONT>(L1BFnList)/<FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> FsmNode))

<A HREF="callc.c.shtml#HISAX_INITFUNC">HISAX_INITFUNC</A>(<FONT COLOR="#298C52">void</FONT> Isdnl1New(<FONT COLOR="#298C52">void</FONT>))
{
	l1fsm_d.state_count = <A HREF="#L1D_STATE_COUNT">L1D_STATE_COUNT</A>;
	l1fsm_d.event_count = <A HREF="#L1_EVENT_COUNT">L1_EVENT_COUNT</A>;
	l1fsm_d.strEvent = strL1Event;
	l1fsm_d.strState = strL1DState;
	FsmNew(&amp;l1fsm_d, L1DFnList, <A HREF="#L1D_FN_COUNT">L1D_FN_COUNT</A>);
	l1fsm_b.state_count = <A HREF="#L1B_STATE_COUNT">L1B_STATE_COUNT</A>;
	l1fsm_b.event_count = <A HREF="#L1_EVENT_COUNT">L1_EVENT_COUNT</A>;
	l1fsm_b.strEvent = strL1Event;
	l1fsm_b.strState = strL1BState;
	FsmNew(&amp;l1fsm_b, L1BFnList, <A HREF="#L1B_FN_COUNT">L1B_FN_COUNT</A>);
}

<FONT COLOR="#298C52">void</FONT> <A NAME="Isdnl1Free">Isdnl1Free</A>(<FONT COLOR="#298C52">void</FONT>)
{
	<A HREF="fsm.c.shtml#FsmFree">FsmFree</A>(&amp;l1fsm_d);
	<A HREF="fsm.c.shtml#FsmFree">FsmFree</A>(&amp;l1fsm_b);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A NAME="dch_l2l1">dch_l2l1</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> pr, <FONT COLOR="#298C52">void</FONT> *arg)
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = (<FONT COLOR="#298C52">struct</FONT> IsdnCardState *) st-&gt;l1.hardware;
	<FONT COLOR="#298C52">char</FONT> tmp[32];

	<FONT COLOR="#298C52">switch</FONT> (pr) {
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_DATA">PH_DATA</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_PULL">PH_PULL</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_PULL">PH_PULL</A> |<A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
			st-&gt;l1.l1hw(st, pr, arg);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_ACTIVATE">PH_ACTIVATE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug) {
				sprintf(tmp, <FONT COLOR="#FF0000">"PH_ACTIVATE_REQ %s"</FONT>,
					strL1DState[st-&gt;l1.l1m.state]);
				<A HREF="#debugl1">debugl1</A>(cs, tmp);
			}
			<FONT COLOR="#298C52">if</FONT> (test_bit(<A HREF="hisax.h.shtml#FLG_L1_ACTIVATED">FLG_L1_ACTIVATED</A>, &amp;st-&gt;l1.Flags))
				st-&gt;l1.l1l2(st, <A HREF="hisax.h.shtml#PH_ACTIVATE">PH_ACTIVATE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>, NULL);
			<FONT COLOR="#298C52">else</FONT> {
				test_and_set_bit(<A HREF="hisax.h.shtml#FLG_L1_ACTIVATING">FLG_L1_ACTIVATING</A>, &amp;st-&gt;l1.Flags);
				<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l1.l1m, EV_PH_ACTIVATE, arg);
			}
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_TESTLOOP">PH_TESTLOOP</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			<FONT COLOR="#298C52">if</FONT> (1 &amp; (<FONT COLOR="#298C52">long</FONT>) arg)
				<A HREF="#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"PH_TEST_LOOP B1"</FONT>);
			<FONT COLOR="#298C52">if</FONT> (2 &amp; (<FONT COLOR="#298C52">long</FONT>) arg)
				<A HREF="#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"PH_TEST_LOOP B2"</FONT>);
			<FONT COLOR="#298C52">if</FONT> (!(3 &amp; (<FONT COLOR="#298C52">long</FONT>) arg))
				<A HREF="#debugl1">debugl1</A>(cs, <FONT COLOR="#FF0000">"PH_TEST_LOOP DISABLED"</FONT>);
			st-&gt;l1.l1hw(st, <A HREF="hisax.h.shtml#HW_TESTLOOP">HW_TESTLOOP</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>, arg);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">default</FONT>:
			<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug) {
				sprintf(tmp, <FONT COLOR="#FF0000">"dch_l2l1 msg %04X unhandled"</FONT>, pr);
				<A HREF="#debugl1">debugl1</A>(cs, tmp);
			}
			<FONT COLOR="#298C52">break</FONT>;
	}
}

<FONT COLOR="#298C52">void</FONT>
<A HREF="#l1_msg">l1_msg</A>(<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs, <FONT COLOR="#298C52">int</FONT> pr, <FONT COLOR="#298C52">void</FONT> *arg) {
	<FONT COLOR="#298C52">struct</FONT> PStack *st;

	st = cs-&gt;stlist;
	
	<FONT COLOR="#298C52">while</FONT> (st) {
		<FONT COLOR="#298C52">switch</FONT>(pr) {
			<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#HW_RESET">HW_RESET</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
				<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l1.l1m, EV_RESET_IND, arg);
				<FONT COLOR="#298C52">break</FONT>;
			<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#HW_DEACTIVATE">HW_DEACTIVATE</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>):
				<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l1.l1m, EV_DEACT_CNF, arg);
				<FONT COLOR="#298C52">break</FONT>;
			<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#HW_DEACTIVATE">HW_DEACTIVATE</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
				<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l1.l1m, EV_DEACT_IND, arg);
				<FONT COLOR="#298C52">break</FONT>;
			<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#HW_POWERUP">HW_POWERUP</A> | <A HREF="hisax.h.shtml#CONFIRM">CONFIRM</A>):
				<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l1.l1m, EV_POWER_UP, arg);
				<FONT COLOR="#298C52">break</FONT>;
			<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#HW_RSYNC">HW_RSYNC</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
				<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l1.l1m, EV_RSYNC_IND, arg);
				<FONT COLOR="#298C52">break</FONT>;
			<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#HW_INFO2">HW_INFO2</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
				<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l1.l1m, EV_INFO2_IND, arg);
				<FONT COLOR="#298C52">break</FONT>;
			<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#HW_INFO4_P8">HW_INFO4_P8</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
			<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#HW_INFO4_P10">HW_INFO4_P10</A> | <A HREF="hisax.h.shtml#INDICATION">INDICATION</A>):
				<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l1.l1m, EV_INFO4_IND, arg);
				<FONT COLOR="#298C52">break</FONT>;
			<FONT COLOR="#298C52">default</FONT>:
				<FONT COLOR="#298C52">if</FONT> (cs-&gt;debug) {
					sprintf(tmp, <FONT COLOR="#FF0000">"l1msg %04X unhandled"</FONT>, pr);
					<A HREF="#debugl1">debugl1</A>(cs, tmp);
				}
				<FONT COLOR="#298C52">break</FONT>;
		}
		st = st-&gt;next;
	}
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="l1_msg_b">l1_msg_b</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">int</FONT> pr, <FONT COLOR="#298C52">void</FONT> *arg) {
	<FONT COLOR="#298C52">switch</FONT>(pr) {
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_ACTIVATE">PH_ACTIVATE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l1.l1m, EV_PH_ACTIVATE, NULL);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> (<A HREF="hisax.h.shtml#PH_DEACTIVATE">PH_DEACTIVATE</A> | <A HREF="hisax.h.shtml#REQUEST">REQUEST</A>):
			<A HREF="fsm.c.shtml#FsmEvent">FsmEvent</A>(&amp;st-&gt;l1.l1m, EV_PH_DEACTIVATE, NULL);
			<FONT COLOR="#298C52">break</FONT>;
	}
}

<FONT COLOR="#298C52">void</FONT>
<A HREF="#setstack_HiSax">setstack_HiSax</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st, <FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs)
{
	st-&gt;l1.hardware = cs;
	st-&gt;protocol = cs-&gt;protocol;
	st-&gt;l1.l1m.fsm = &amp;l1fsm_d;
	st-&gt;l1.l1m.state = ST_L1_F3;
	st-&gt;l1.l1m.debug = cs-&gt;debug;
	st-&gt;l1.l1m.userdata = st;
	st-&gt;l1.l1m.userint = 0;
	st-&gt;l1.l1m.printdebug = <A HREF="#l1m_debug">l1m_debug</A>;
	<A HREF="fsm.c.shtml#FsmInitTimer">FsmInitTimer</A>(&amp;st-&gt;l1.l1m, &amp;st-&gt;l1.timer);
	<A HREF="tei.c.shtml#setstack_tei">setstack_tei</A>(st);
	<A HREF="lmgr.c.shtml#setstack_manager">setstack_manager</A>(st);
	st-&gt;l1.stlistp = &amp;(cs-&gt;stlist);
	st-&gt;l2.l2l1  = <A HREF="#dch_l2l1">dch_l2l1</A>;
	st-&gt;l1.Flags = 0;
	cs-&gt;setstack_d(st, cs);
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="setstack_l1_B">setstack_l1_B</A>(<FONT COLOR="#298C52">struct</FONT> PStack *st)
{
	<FONT COLOR="#298C52">struct</FONT> IsdnCardState *cs = st-&gt;l1.hardware;

	st-&gt;l1.l1m.fsm = &amp;l1fsm_b;
	st-&gt;l1.l1m.state = ST_L1_NULL;
	st-&gt;l1.l1m.debug = cs-&gt;debug;
	st-&gt;l1.l1m.userdata = st;
	st-&gt;l1.l1m.userint = 0;
	st-&gt;l1.l1m.printdebug = <A HREF="#l1m_debug">l1m_debug</A>;
	<A HREF="fsm.c.shtml#FsmInitTimer">FsmInitTimer</A>(&amp;st-&gt;l1.l1m, &amp;st-&gt;l1.timer);
}
</BODY>

</HTML>
