<HTML>

<!-- Generated by c2html-1.0, Copyright 1998 by Dave Whittington -->
<HEAD>
<TITLE>kdebug.h</TITLE>
<!--#include virtual="/ssi/js.shtml" -->
<!--#include virtual="/ssi/buttondefs.shtml" -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<TABLE WIDTH="100%">
<TR>
<TD ALIGN=LEFT WIDTH="90"><!--#include virtual="/ssi/b_home.shtml" --></TD>
<TD ALIGN=RIGHT WIDTH="90"><!--#include virtual="/ssi/b_index.shtml" --></TD>
</TR>
</TABLE>
<CENTER><H1>kdebug.h</H1></CENTER>

<HR>
<PRE>
<FONT COLOR=#0000FF>/* $Id$

 * Debugging utilities for Linux
 *
 * For debugging, include this file. If included more than once
 * in a multi-module driver, exactly one include-statement should
 * be preceeded by a #define KDBUG_DEF.
 *
 * What does this?:
 *   Main purpose is to realize a way of logging, even if interrupts
 *   are disabled. To work on virtual-screens with a screen-width other
 *   than 80, change the LINEWIDTH below.#
 *
 *   For use with modules, you have to export screen_pos and fg_console
 *   from console.c and selection.h
 *   For recent kernels (e.g. 2.1.86) do this, by adding modifying
 *   kernel/ksyms.c:
 *
 *   At end of other include-lines:
 *     Add an #include &lt;linux/selection.h&gt;
 *   
 *   At section /* tty routines */</FONT> add the following lines:
 *     <A NAME="EXPORT_SYMBOL">EXPORT_SYMBOL</A>(fg_console)
 *     <A HREF="#EXPORT_SYMBOL">EXPORT_SYMBOL</A>(screen_pos)
 *
 *   Finally, rebuild the kernel. Now you can create modules using
 *   kdebug.h
 *
 * Functionality:
 *
 *  -If you have defined CLI_DEBUG
 *   <A HREF="#cli">cli</A>(), <A HREF="#sti">sti</A>() and <A HREF="#restore_flags">restore_flags</A>() are redefined. Every time, <A HREF="#cli">cli</A>()
 *   is called, the filename and linenumber of the caller is printed
 *   on the console, preceeded by a <FONT COLOR="#FF0000">"!"</FONT>. Once interrupts are enabled
 *   again, - either with <A HREF="#sti">sti</A>() or <A HREF="#restore_flags">restore_flags</A>() - the exclamation
 *   mark is replaced by a blank.
 *
 *  -Wrapper-Macro <FONT COLOR="#298C52">for</FONT> function calls. <A HREF="#CTR">CTR</A>(myfunc(a,b,c)) prints
 *   <FONT COLOR="#FF0000">"Enter myfunc(...)"</FONT>, then executes the call, then prints
 *   <FONT COLOR="#FF0000">"Leave myfunc(...)"</FONT>. Screenposition is 40,0.
 *
 *  -Generic counter macros. <A HREF="#DBGCNTDEF">DBGCNTDEF</A>(n,x,y); Defines counter nr. n
 *   to be shown at screen-position x,y. <A HREF="#DBGCNTINC">DBGCNTINC</A>(n); increments
 *   counter n.
 *
 *  -An <FONT COLOR="#FF0000">"i-am-alive"</FONT> rotating bar. <A HREF="#wheel">wheel</A>(x,y) rotates a bar at
 *   position x,y.
 *
 * $Log$
 * Revision 1.4  1998/06/07 00:20:21  fritz
 * abc cleanup.
 *
 * Revision 1.3  1998/02/08 20:47:17  keil
 * Changes <FONT COLOR="#298C52">for</FONT> 2.1 (<FONT COLOR="#298C52">virtual</FONT> address mapping; SMP stuff)
 * New CLI_DEBUG define to enable <A HREF="#cli">cli</A>/<A HREF="#sti">sti</A>/<A HREF="#restore_flags">restore_flags</A> debugging
 *
 * Revision 1.2  1997/02/03 23:33:22  fritz
 * Reformatted according CodingStyle
 *
 * Revision 1.1  1996/04/30 09:22:55  fritz
 * Taken under CVS-control.
 *
 *
 */

<FONT COLOR=#A521F7>#ifndef</FONT> <A HREF="#_kdebug_h_">_kdebug_h_</A>
<FONT COLOR=#A521F7>#define</FONT> <A NAME="_kdebug_h_">_kdebug_h_</A>

<FONT COLOR=#A521F7>#include</FONT> &lt;<FONT COLOR="#298C52">asm</FONT>/system.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;<FONT COLOR="#298C52">asm</FONT>/io.h&gt;

<FONT COLOR=#A521F7>#define</FONT> <A NAME="LINEWIDTH">LINEWIDTH</A> 80

<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">short</FONT> *screen_pos(<FONT COLOR="#298C52">int</FONT>, <FONT COLOR="#298C52">int</FONT>, <FONT COLOR="#298C52">int</FONT>);
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">int</FONT> fg_console;

<FONT COLOR=#A521F7>#ifdef</FONT> KDEBUG_DEF
<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">short</FONT> *scrpos;
<FONT COLOR="#298C52">int</FONT> dbg_cnt_v[10];
<FONT COLOR="#298C52">int</FONT> dbg_cnt_x[10];
<FONT COLOR="#298C52">int</FONT> dbg_cnt_y[10];
<FONT COLOR="#298C52">char</FONT> clibuf[256] = <FONT COLOR="#FF0000">"\0"</FONT>;
<FONT COLOR=#A521F7>#else</FONT>
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">short</FONT> *scrpos;
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">int</FONT> dbg_cnt_v[10];
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">int</FONT> dbg_cnt_x[10];
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">int</FONT> dbg_cnt_y[10];
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">char</FONT> clibuf[256];
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR="#298C52">static</FONT> __inline__ <FONT COLOR="#298C52">void</FONT>
put_ch(<FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> c)
{
	writew(0x0700 + c, scrpos++);
}

<FONT COLOR="#298C52">static</FONT> __inline__ <FONT COLOR="#298C52">void</FONT>
<A NAME="put_str">put_str</A>(<FONT COLOR="#298C52">char</FONT> *s)
{
	<FONT COLOR="#298C52">for</FONT> (; *s; put_ch(*s++));
}

<FONT COLOR="#298C52">static</FONT> __inline__ <FONT COLOR="#298C52">void</FONT>
<A NAME="gotovid">gotovid</A>(<FONT COLOR="#298C52">int</FONT> x, <FONT COLOR="#298C52">int</FONT> y)
{
	scrpos = screen_pos(fg_console, (y * <A HREF="#LINEWIDTH">LINEWIDTH</A>) + x, 1);
}

<FONT COLOR="#298C52">static</FONT> __inline__ <FONT COLOR="#298C52">void</FONT>
<A NAME="gput_str">gput_str</A>(<FONT COLOR="#298C52">char</FONT> *s, <FONT COLOR="#298C52">int</FONT> x, <FONT COLOR="#298C52">int</FONT> y)
{
	<A HREF="#gotovid">gotovid</A>(x, y);
	<A HREF="#put_str">put_str</A>(s);
}

<FONT COLOR="#298C52">static</FONT> __inline__ <FONT COLOR="#298C52">void</FONT>
<A NAME="gput_ch">gput_ch</A>(<FONT COLOR="#298C52">char</FONT> c, <FONT COLOR="#298C52">int</FONT> x, <FONT COLOR="#298C52">int</FONT> y)
{
	<A HREF="#gotovid">gotovid</A>(x, y);
	put_ch(c);
}

<FONT COLOR="#298C52">static</FONT> __inline__ <FONT COLOR="#298C52">void</FONT>
<A NAME="wheel">wheel</A>(<FONT COLOR="#298C52">int</FONT> x, <FONT COLOR="#298C52">int</FONT> y)
{
	<A HREF="#gotovid">gotovid</A>(x, y);
	<FONT COLOR="#298C52">switch</FONT> ((<FONT COLOR="#298C52">char</FONT>) (readw(scrpos) &amp; 0xff)) {
	<FONT COLOR="#298C52">case</FONT> <FONT COLOR="#FF0000">'/'</FONT>:
		writew(0x0700 + <FONT COLOR="#FF0000">'-'</FONT>, scrpos);
		<FONT COLOR="#298C52">break</FONT>;
	<FONT COLOR="#298C52">case</FONT> <FONT COLOR="#FF0000">'-'</FONT>:
		writew(0x0700 + <FONT COLOR="#FF0000">'\\'</FONT>, scrpos);
		<FONT COLOR="#298C52">break</FONT>;
	<FONT COLOR="#298C52">case</FONT> <FONT COLOR="#FF0000">'\\'</FONT>:
		writew(0x0700 + <FONT COLOR="#FF0000">'|'</FONT>, scrpos);
		<FONT COLOR="#298C52">break</FONT>;
	<FONT COLOR="#298C52">default</FONT>:
		writew(0x0700 + <FONT COLOR="#FF0000">'/'</FONT>, scrpos);
	}
}

<FONT COLOR=#A521F7>#ifdef</FONT> CLI_DEBUG

<FONT COLOR=#A521F7>#ifndef</FONT> __ASM_SYSTEM_H
<FONT COLOR=#A521F7>#include</FONT> &lt;<FONT COLOR="#298C52">asm</FONT>/system.h&gt;
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR=#A521F7>#ifdef</FONT> __SMP__

<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">void</FONT> __global_cli(<FONT COLOR="#298C52">void</FONT>);
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">void</FONT> __global_sti(<FONT COLOR="#298C52">void</FONT>);
<FONT COLOR="#298C52">extern</FONT> <FONT COLOR="#298C52">void</FONT> __global_restore_flags(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT>);
<FONT COLOR=#A521F7>#define</FONT> <A NAME="x__cli">x__cli</A>() __global_cli()
<FONT COLOR=#A521F7>#define</FONT> <A NAME="x__sti">x__sti</A>() __global_sti()
<FONT COLOR=#A521F7>#define</FONT> <A HREF="#x__restore_flags">x__restore_flags</A>(x) __global_restore_flags(x)

<FONT COLOR=#A521F7>#else</FONT>

<FONT COLOR=#A521F7>#define</FONT> <A HREF="#x__cli">x__cli</A>() __cli()
<FONT COLOR=#A521F7>#define</FONT> <A HREF="#x__sti">x__sti</A>() __sti()
<FONT COLOR=#A521F7>#define</FONT> <A HREF="#x__restore_flags">x__restore_flags</A>(x) __restore_flags(x)

<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR=#A521F7>#undef</FONT> <A HREF="#cli">cli</A>
<FONT COLOR=#A521F7>#define</FONT> <A HREF="#cli">cli</A>() { \
  <A HREF="#x__cli">x__cli</A>(); \
  sprintf(clibuf,<FONT COLOR="#FF0000">"!%-20s %04d !"</FONT>,__BASE_FILE__,__LINE__); \
  <A HREF="#gput_str">gput_str</A>(clibuf,0,0); \
}

<FONT COLOR=#A521F7>#undef</FONT> <A HREF="#restore_flags">restore_flags</A>
<FONT COLOR=#A521F7>#define</FONT> <A HREF="#restore_flags">restore_flags</A>(x) { \
  <FONT COLOR="#298C52">if</FONT> (x &amp; 0x200) <A HREF="#gput_ch">gput_ch</A>(<FONT COLOR="#FF0000">' '</FONT>,0,0); \
  <A HREF="#x__restore_flags">x__restore_flags</A>(x); \
}

<FONT COLOR=#A521F7>#undef</FONT> <A HREF="#sti">sti</A>
<FONT COLOR=#A521F7>#define</FONT> <A HREF="#sti">sti</A>() { \
  <A HREF="#gput_ch">gput_ch</A>(<FONT COLOR="#FF0000">' '</FONT>,0,0); \
  <A HREF="#x__sti">x__sti</A>(); \
}
<FONT COLOR=#A521F7>#endif</FONT>				<FONT COLOR=#0000FF>/* CLI_DEBUG */</FONT>

<FONT COLOR=#A521F7>#define</FONT> <A HREF="#CTR">CTR</A>(x) { \
  <A HREF="#gput_str">gput_str</A>(<FONT COLOR="#FF0000">"Enter "</FONT> #x <FONT COLOR="#FF0000">" "</FONT>, 40, 0); \
  x; \
  <A HREF="#gput_str">gput_str</A>(<FONT COLOR="#FF0000">"Leave "</FONT> #x <FONT COLOR="#FF0000">" "</FONT>, 40, 0); \
}

<FONT COLOR=#A521F7>#define</FONT> <A HREF="#CTRXY">CTRXY</A>(x, y, fn) { \
  <A HREF="#gput_str">gput_str</A>(<FONT COLOR="#FF0000">"Enter "</FONT> #fn <FONT COLOR="#FF0000">" "</FONT>, x, y); \
  fn; \
  <A HREF="#gput_str">gput_str</A>(<FONT COLOR="#FF0000">"Leave "</FONT> #fn <FONT COLOR="#FF0000">" "</FONT>, x, y); \
}

<FONT COLOR=#A521F7>#define</FONT> <A HREF="#DBGCNTDEF">DBGCNTDEF</A>(n,x,y) { \
  <FONT COLOR="#298C52">char</FONT> tmp[10]; \
  dbg_cnt_v[n] = 0; \
  dbg_cnt_x[n] = x; \
  dbg_cnt_y[n] = y; \
  sprintf(tmp,<FONT COLOR="#FF0000">"%02d"</FONT>,0); \
  <A HREF="#gput_str">gput_str</A>(tmp,x,y); \
}

<FONT COLOR=#A521F7>#define</FONT> <A HREF="#DBGCNTINC">DBGCNTINC</A>(i) { \
  <FONT COLOR="#298C52">char</FONT> tmp[10]; \
  dbg_cnt_v[i]++; \
  sprintf(tmp,<FONT COLOR="#FF0000">"%02d"</FONT>,dbg_cnt_v[i]); \
  <A HREF="#gput_str">gput_str</A>(tmp,dbg_cnt_x[i],dbg_cnt_y[i]); \
}

<FONT COLOR=#A521F7>#endif</FONT>
</BODY>

</HTML>
