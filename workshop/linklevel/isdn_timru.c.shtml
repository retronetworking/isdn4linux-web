<HTML>

<!-- Generated by c2html-1.0, Copyright 1998 by Dave Whittington -->
<HEAD>
<TITLE>isdn_timru.c</TITLE>
<!--#include virtual="/ssi/js.shtml" -->
<!--#include virtual="/ssi/buttondefs.shtml" -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<TABLE WIDTH="100%">
<TR>
<TD ALIGN=LEFT WIDTH="90"><!--#include virtual="/ssi/b_home.shtml" --></TD>
<TD ALIGN=RIGHT WIDTH="90"><!--#include virtual="/ssi/b_index.shtml" --></TD>
</TR>
</TABLE>
<CENTER><H1>isdn_timru.c</H1></CENTER>

<HR>
<PRE>
<FONT COLOR=#0000FF>/* $Id$
 *
 * Linux ISDN subsystem, timeout-rules for network interfaces.
 *
 * Copyright 1997       by Christian Lademann &lt;cal@zls.de&gt;
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. 
 *
 * $Log$
 * Revision 1.2  1998/03/07 23:17:28  fritz
 * Added RCS keywords
 * Bugfix: Did not compile without isdn_dumppkt beeing enabled.
 *
 */</FONT>

<FONT COLOR=#0000FF>/*
02.06.97:cal:
    - ISDN_TIMRU_PACKET_NONE = 0 definiert, die anderen ISDN_TIMRU_PACKET_* -
      Definitionen jeweils inkrementiert

    - isdn_net_recalc_timeout():
      - In der Schleife zum Finden einer passenden Regel wurde in jedem Fall
        die Wildcard-Kette durchsucht. Jetzt nicht mehr.
      - beim Testen einer Bringup-Regel wird der anfaengliche Timeout auf den
        Hangup-Timeout des Devices gesetzt (lp-&gt;onhtime).

10.06.97:cal:
    - isdn_net_recalc_timeout(): rule-&gt;neg-Handling gesaeubert: eine Regel passt
      genau dann, wenn match(rule) XOR rule-&gt;neg und das bei allen Regeltypen.
    - isdn_net_add_rule(): rule-&gt;timeout bei BRINGUP immer 1, sonst &gt; 0.
    - alle return(-1), die zu ioctl-Calls zurueckgehen --&gt; return(-EINVAL).
    - div. Leerzeilen geloescht / eingefuegt; alle return's "geklammert".

12.06.97:cal:
    - isdn_net_recalc_timeout(): Falls IP-Masquerading verwendet wird, kann mit
      der neuen Option CONFIG_TIMRU_USE_MASQ der Regel-Match auf die ursprueng-
      lichen Adressen und nicht auf die der Firewall angewendet werden. Dazu ist
      ein Patch in net/ipv4/ip_masq.c notwendig: ip_masq_in_get_2 muss
      exportiert werden.

26.06.97:cal:
    - isdn_net_add_rule(): rule-&gt;timeout darf bei BRINGUP &gt;= 0 sein. Damit
      laesst sich folgende Systax erreichen: "Falls Paket passt, starte die
      Verbindung NICHT", wie es im Stand 970602 moeglich war.
    - isdn_net_recalc_timeout(): BRINGUP: initial timeout wird auf den in der
      passenden Regel gefundenen Timeout gesetzt. Ist dieser 0, so wird die
      Verbindung nicht aufgebaut.

16.10.97:cal:
    - isdn_net_recalc_timeout(): beachte Fake-Header, der bei ausgehenden
      SyncPPP-Paketen eingesetzt wird;
      TimRu's "recalc timeout:" - Meldungen in einer Zeile

04.11.97:cal:
    - isdn_net.c, isdn_net_new(): Timeout-Rules nicht mehr automatisch
      alloziieren;
    - isdn_net.c, isdn_net_autohup(): AutoHup auch durchfuehren, wenn keine
      Timeout-Rules alloziiert sind.
*/</FONT>
<FONT COLOR=#0000FF>/*
TODO:

- Masq-Adressen statt Paketadresse ausgeben, falls die Masq-Adressen verwendet
  werden.

- Masq-Adressen-Verwendung als Option in den Regeln vorsehen

- TCP-Flags als Regel-Optionen

- weitere Verfeinerungen fuer Nicht-TCP/IP-Pakete
*/</FONT>

<FONT COLOR=#A521F7>#include</FONT> &lt;linux/config.h&gt;
<FONT COLOR=#A521F7>#define</FONT> <A HREF="isdn_audio.c.shtml#__NO_VERSION__">__NO_VERSION__</A>
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/module.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/isdn.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/if_arp.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/in.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;net/icmp.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;net/tcp.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;net/udp.h&gt;
<FONT COLOR=#A521F7>#ifdef</FONT> CONFIG_ISDN_TIMRU_USE_MASQ
<FONT COLOR=#A521F7>#ifdef</FONT> CONFIG_IP_MASQUERADE
<FONT COLOR=#A521F7>#include</FONT> &lt;net/ip_masq.h&gt;
<FONT COLOR=#A521F7>#endif</FONT>
<FONT COLOR=#A521F7>#endif</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isdn_common.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isdn_net.h"</FONT>
<FONT COLOR=#A521F7>#ifdef</FONT> CONFIG_ISDN_PPP
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isdn_ppp.h"</FONT>
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR=#A521F7>#ifdef</FONT> CONFIG_ISDN_TIMEOUT_RULES

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
<A HREF="#isdn_timru_match">isdn_timru_match</A>(<A HREF="../includes/isdn_timru.h.shtml#isdn_timeout_rule">isdn_timeout_rule</A> *<FONT COLOR="#298C52">this</FONT>, <A HREF="../includes/isdn_timru.h.shtml#isdn_timeout_rule">isdn_timeout_rule</A> *rule);


<FONT COLOR=#A521F7>#define</FONT> <A HREF="#printk_ip">printk_ip</A>(a)	 printk(<FONT COLOR="#FF0000">"%ld.%ld.%ld.%ld"</FONT>,(ntohl(a)&gt;&gt;24)&amp;0xFF,\
					      (ntohl(a)&gt;&gt;16)&amp;0xFF,\
					      (ntohl(a)&gt;&gt;8)&amp;0xFF,\
					      (ntohl(a))&amp;0xFF)
<FONT COLOR=#A521F7>#define</FONT> <A NAME="printk_port">printk_port</A>(a)	 printk(<FONT COLOR="#FF0000">"%d"</FONT>,ntohs(a))


<FONT COLOR=#A521F7>#define</FONT>	<A HREF="isdn_budget.c.shtml#VERBOSE_PRINTK">VERBOSE_PRINTK</A>(v, l, p...)	{ \
	<FONT COLOR="#298C52">if</FONT>(dev-&gt;net_verbose &gt;= (v)) { \
		printk(l ## p); \
	} <FONT COLOR="#298C52">else</FONT> { ; } \
}


<FONT COLOR="#298C52">int</FONT>
<A HREF="#isdn_net_recalc_timeout">isdn_net_recalc_timeout</A>(<FONT COLOR="#298C52">int</FONT> type, <FONT COLOR="#298C52">int</FONT> prot, <FONT COLOR="#298C52">struct</FONT> device *ndev, <FONT COLOR="#298C52">void</FONT> *buf, ulong arg) {
	isdn_net_local		*lp = (isdn_net_local *)ndev-&gt;priv;
	<FONT COLOR="#298C52">struct</FONT> sk_buff		*skb;
	<FONT COLOR="#298C52">struct</FONT> iphdr		*ip;
	<FONT COLOR="#298C52">struct</FONT> icmphdr		*icmp;
	<FONT COLOR="#298C52">struct</FONT> tcphdr		*tcp;
	<FONT COLOR="#298C52">struct</FONT> udphdr		*udp;
<FONT COLOR=#A521F7>#ifdef</FONT> CONFIG_ISDN_TIMRU_USE_MASQ
<FONT COLOR=#A521F7>#ifdef</FONT> CONFIG_IP_MASQUERADE
	<FONT COLOR="#298C52">struct</FONT> ip_masq		*masq;
	<FONT COLOR="#298C52">int</FONT>			m_prot;
	__u32			m_saddr, m_daddr;
	__u16			m_sport, m_dport;
	<FONT COLOR="#298C52">int</FONT>			check_for_masq;
<FONT COLOR=#A521F7>#endif</FONT>
<FONT COLOR=#A521F7>#endif</FONT>

	<A HREF="../includes/isdn_timru.h.shtml#isdn_timeout_rule">isdn_timeout_rule</A>	match_rule;

<FONT COLOR=#0000FF>/*
	char			*cbuf;
*/</FONT>
	<FONT COLOR="#298C52">int</FONT>			ppp_proto, ppp_hdrlen = 0, new_timeout;


	match_rule.type = type;
	match_rule.protfam = <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_PROTFAM_WILDCARD">ISDN_TIMRU_PROTFAM_WILDCARD</A>;

	<FONT COLOR="#298C52">if</FONT>(dev-&gt;net_verbose &gt; 4) {
		printk(KERN_DEBUG <FONT COLOR="#FF0000">"recalc_timeout:"</FONT>);
		<FONT COLOR="#298C52">switch</FONT>(type) {
		<FONT COLOR="#298C52">case</FONT> <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_BRINGUP">ISDN_TIMRU_BRINGUP</A>:	printk(<FONT COLOR="#FF0000">"BRINGUP, "</FONT>); <FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_KEEPUP_IN">ISDN_TIMRU_KEEPUP_IN</A>:	printk(<FONT COLOR="#FF0000">"KEEPUP_IN, "</FONT>); <FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_KEEPUP_OUT">ISDN_TIMRU_KEEPUP_OUT</A>:	printk(<FONT COLOR="#FF0000">"KEEPUP_OUT, "</FONT>); <FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">default</FONT>:
			printk(<FONT COLOR="#FF0000">"ERROR\n"</FONT>);
			<FONT COLOR="#298C52">return</FONT>(-1);
			<FONT COLOR="#298C52">break</FONT>;
		}
	}

	<FONT COLOR="#298C52">switch</FONT>(prot) {
	<FONT COLOR="#298C52">case</FONT> <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_PACKET_PPP">ISDN_TIMRU_PACKET_PPP</A>:
	<FONT COLOR="#298C52">case</FONT> <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_PACKET_PPP_NO_HEADER">ISDN_TIMRU_PACKET_PPP_NO_HEADER</A>:
		<FONT COLOR="#298C52">if</FONT>(prot == <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_PACKET_PPP">ISDN_TIMRU_PACKET_PPP</A>) {
			ppp_proto = PPP_PROTOCOL((<FONT COLOR="#298C52">char</FONT> *)buf);
<FONT COLOR=#0000FF>/*
			cbuf = (char *)(buf + PPP_HDRLEN);
*/</FONT>
		} <FONT COLOR="#298C52">else</FONT> {
			ppp_proto = (<FONT COLOR="#298C52">int</FONT>)arg;
<FONT COLOR=#0000FF>/*
			cbuf = (char *)buf;
*/</FONT>
		}

		match_rule.protfam = <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_PROTFAM_PPP">ISDN_TIMRU_PROTFAM_PPP</A>;
		match_rule.rule.ppp.protocol = <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_PPP_WILDCARD">ISDN_TIMRU_PPP_WILDCARD</A>;

		<FONT COLOR="#298C52">switch</FONT>(ppp_proto) {
		<FONT COLOR="#298C52">case</FONT> PPP_IPCP:
			match_rule.rule.ppp.protocol = <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_PPP_IPCP">ISDN_TIMRU_PPP_IPCP</A>;
			<A HREF="isdn_budget.c.shtml#VERBOSE_PRINTK">VERBOSE_PRINTK</A>(5, <FONT COLOR="#FF0000">""</FONT>, <FONT COLOR="#FF0000">"PPP/IPCP\n"</FONT>);
			<FONT COLOR="#298C52">break</FONT>;

		<FONT COLOR="#298C52">case</FONT> PPP_IPXCP:
			match_rule.rule.ppp.protocol = <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_PPP_IPXCP">ISDN_TIMRU_PPP_IPXCP</A>;
			<A HREF="isdn_budget.c.shtml#VERBOSE_PRINTK">VERBOSE_PRINTK</A>(5, <FONT COLOR="#FF0000">""</FONT>, <FONT COLOR="#FF0000">"PPP/IPXCP\n"</FONT>);
			<FONT COLOR="#298C52">break</FONT>;

		<FONT COLOR="#298C52">case</FONT> PPP_CCP:
			match_rule.rule.ppp.protocol = <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_PPP_CCP">ISDN_TIMRU_PPP_CCP</A>;
			<A HREF="isdn_budget.c.shtml#VERBOSE_PRINTK">VERBOSE_PRINTK</A>(5, <FONT COLOR="#FF0000">""</FONT>, <FONT COLOR="#FF0000">"PPP/CCP\n"</FONT>);
			<FONT COLOR="#298C52">break</FONT>;

		<FONT COLOR="#298C52">case</FONT> PPP_LCP:
			match_rule.rule.ppp.protocol = <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_PPP_LCP">ISDN_TIMRU_PPP_LCP</A>;
			<A HREF="isdn_budget.c.shtml#VERBOSE_PRINTK">VERBOSE_PRINTK</A>(5, <FONT COLOR="#FF0000">""</FONT>, <FONT COLOR="#FF0000">"PPP/LCP\n"</FONT>);
			<FONT COLOR="#298C52">break</FONT>;

		<FONT COLOR="#298C52">case</FONT> PPP_PAP:
			match_rule.rule.ppp.protocol = <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_PPP_PAP">ISDN_TIMRU_PPP_PAP</A>;
			<A HREF="isdn_budget.c.shtml#VERBOSE_PRINTK">VERBOSE_PRINTK</A>(5, <FONT COLOR="#FF0000">""</FONT>, <FONT COLOR="#FF0000">"PPP/PAP\n"</FONT>);
			<FONT COLOR="#298C52">break</FONT>;

		<FONT COLOR="#298C52">case</FONT> PPP_LQR:
			match_rule.rule.ppp.protocol = <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_PPP_LQR">ISDN_TIMRU_PPP_LQR</A>;
			<A HREF="isdn_budget.c.shtml#VERBOSE_PRINTK">VERBOSE_PRINTK</A>(5, <FONT COLOR="#FF0000">""</FONT>, <FONT COLOR="#FF0000">"PPP/LQR\n"</FONT>);
			<FONT COLOR="#298C52">break</FONT>;

		<FONT COLOR="#298C52">case</FONT> PPP_CHAP:
			match_rule.rule.ppp.protocol = <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_PPP_CHAP">ISDN_TIMRU_PPP_CHAP</A>;
			<A HREF="isdn_budget.c.shtml#VERBOSE_PRINTK">VERBOSE_PRINTK</A>(5, <FONT COLOR="#FF0000">""</FONT>, <FONT COLOR="#FF0000">"PPP/CHAP\n"</FONT>);
			<FONT COLOR="#298C52">break</FONT>;

		<FONT COLOR="#298C52">default</FONT>:
			match_rule.rule.ppp.protocol = <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_PPP_WILDCARD">ISDN_TIMRU_PPP_WILDCARD</A>;

			<FONT COLOR="#298C52">if</FONT>(dev-&gt;net_verbose &gt;= 5) {
				printk(<FONT COLOR="#FF0000">"PPP/? (%x)\n"</FONT>, ppp_proto);
<FONT COLOR=#A521F7>#ifdef</FONT> ISDN_DEBUG_NET_DUMP
				<A HREF="isdn_common.c.shtml#isdn_dumppkt">isdn_dumppkt</A>(<FONT COLOR="#FF0000">"R:"</FONT>, (u_char *)buf, 40, 40);
<FONT COLOR=#A521F7>#endif</FONT>
			}
			<FONT COLOR="#298C52">break</FONT>;
		}
		<FONT COLOR="#298C52">break</FONT>;

	<FONT COLOR="#298C52">case</FONT> <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_PACKET_SKB">ISDN_TIMRU_PACKET_SKB</A>:
		skb = (<FONT COLOR="#298C52">struct</FONT> sk_buff *)buf;

<FONT COLOR=#A521F7>#ifdef</FONT> CONFIG_ISDN_PPP
		<FONT COLOR="#298C52">if</FONT>((type == <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_BRINGUP">ISDN_TIMRU_BRINGUP</A> ||
		type == <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_KEEPUP_OUT">ISDN_TIMRU_KEEPUP_OUT</A>) &amp;&amp;
		lp-&gt;p_encap == <A HREF="../includes/isdn.h.shtml#ISDN_NET_ENCAP_SYNCPPP">ISDN_NET_ENCAP_SYNCPPP</A>) {
			<FONT COLOR=#0000FF>/* jump over fake header. */</FONT>
			ppp_hdrlen = <A HREF="isdn_ppp.h.shtml#IPPP_MAX_HEADER">IPPP_MAX_HEADER</A>;
		}
<FONT COLOR=#A521F7>#endif</FONT>


		<FONT COLOR="#298C52">switch</FONT>(ntohs(skb-&gt;protocol)) {
		<FONT COLOR="#298C52">case</FONT> ETH_P_IP:
<FONT COLOR=#0000FF>/*
			if(!(ip = skb-&gt;ip_hdr))
*/</FONT>
				ip = (<FONT COLOR="#298C52">struct</FONT> iphdr *)(skb-&gt;data + ppp_hdrlen);

			match_rule.protfam = <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_PROTFAM_IP">ISDN_TIMRU_PROTFAM_IP</A>;
			match_rule.rule.ip.saddr.s_addr = ip-&gt;saddr;
			match_rule.rule.ip.daddr.s_addr = ip-&gt;daddr;
			match_rule.rule.ip.protocol = <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_IP_WILDCARD">ISDN_TIMRU_IP_WILDCARD</A>;

			<FONT COLOR="#298C52">switch</FONT>(ip-&gt;protocol) {
			<FONT COLOR="#298C52">case</FONT> IPPROTO_ICMP:
				<FONT COLOR="#298C52">if</FONT>(!(icmp = (<FONT COLOR="#298C52">struct</FONT> icmphdr *)((<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT> *)ip+ip-&gt;ihl))) {
					<A HREF="isdn_budget.c.shtml#VERBOSE_PRINTK">VERBOSE_PRINTK</A>(5, <FONT COLOR="#FF0000">""</FONT>, <FONT COLOR="#FF0000">"IP/ICMP HDR-ERR\n"</FONT>);
				} <FONT COLOR="#298C52">else</FONT> {
					match_rule.rule.ip.protocol = <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_IP_ICMP">ISDN_TIMRU_IP_ICMP</A>;
					match_rule.rule.ip.pt.type.from = icmp-&gt;type;

					<FONT COLOR="#298C52">if</FONT>(dev-&gt;net_verbose &gt;= 5) {
						printk(<FONT COLOR="#FF0000">"IP/ICMP "</FONT>);
						<A HREF="#printk_ip">printk_ip</A>(ip-&gt;saddr);
						printk(<FONT COLOR="#FF0000">" --&gt; "</FONT>);
						<A HREF="#printk_ip">printk_ip</A>(ip-&gt;daddr);
						printk(<FONT COLOR="#FF0000">"/"</FONT>);
						<A HREF="#printk_port">printk_port</A>(icmp-&gt;type);
						printk(<FONT COLOR="#FF0000">"\n"</FONT>);
					}
				}
				<FONT COLOR="#298C52">break</FONT>;
	
			<FONT COLOR="#298C52">case</FONT> IPPROTO_IGMP:
				match_rule.rule.ip.protocol = <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_IP_WILDCARD">ISDN_TIMRU_IP_WILDCARD</A>;
				<A HREF="isdn_budget.c.shtml#VERBOSE_PRINTK">VERBOSE_PRINTK</A>(5, <FONT COLOR="#FF0000">""</FONT>, <FONT COLOR="#FF0000">"IP/IGMP\n"</FONT>);
				<FONT COLOR="#298C52">break</FONT>;
	
			<FONT COLOR="#298C52">case</FONT> IPPROTO_IPIP:
				match_rule.rule.ip.protocol = <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_IP_WILDCARD">ISDN_TIMRU_IP_WILDCARD</A>;
				<A HREF="isdn_budget.c.shtml#VERBOSE_PRINTK">VERBOSE_PRINTK</A>(5, <FONT COLOR="#FF0000">""</FONT>, <FONT COLOR="#FF0000">"IP/IPIP\n"</FONT>);
				<FONT COLOR="#298C52">break</FONT>;
	
			<FONT COLOR="#298C52">case</FONT> IPPROTO_TCP:
				<FONT COLOR="#298C52">if</FONT>(!(tcp = (<FONT COLOR="#298C52">struct</FONT> tcphdr *)((<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT> *)ip+ip-&gt;ihl))) {
					<A HREF="isdn_budget.c.shtml#VERBOSE_PRINTK">VERBOSE_PRINTK</A>(5, <FONT COLOR="#FF0000">""</FONT>, <FONT COLOR="#FF0000">"IP/TCP HDR-ERR\n"</FONT>);
				} <FONT COLOR="#298C52">else</FONT> {
					match_rule.rule.ip.protocol = <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_IP_TCP">ISDN_TIMRU_IP_TCP</A>;
					match_rule.rule.ip.pt.port.s_from = tcp-&gt;source;
					match_rule.rule.ip.pt.port.d_from = tcp-&gt;dest;

					<FONT COLOR="#298C52">if</FONT>(dev-&gt;net_verbose &gt;= 5) {
						printk(<FONT COLOR="#FF0000">"IP/TCP "</FONT>);
						<A HREF="#printk_ip">printk_ip</A>(ip-&gt;saddr);
						printk(<FONT COLOR="#FF0000">"/"</FONT>);
						<A HREF="#printk_port">printk_port</A>(tcp-&gt;source);
						printk(<FONT COLOR="#FF0000">" --&gt; "</FONT>);
						<A HREF="#printk_ip">printk_ip</A>(ip-&gt;daddr);
						printk(<FONT COLOR="#FF0000">"/"</FONT>);
						<A HREF="#printk_port">printk_port</A>(tcp-&gt;dest);
						printk(<FONT COLOR="#FF0000">"\n"</FONT>);
					}
				}
				<FONT COLOR="#298C52">break</FONT>;
	
			<FONT COLOR="#298C52">case</FONT> IPPROTO_EGP:
				match_rule.rule.ip.protocol = <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_IP_WILDCARD">ISDN_TIMRU_IP_WILDCARD</A>;
				<A HREF="isdn_budget.c.shtml#VERBOSE_PRINTK">VERBOSE_PRINTK</A>(5, <FONT COLOR="#FF0000">""</FONT>, <FONT COLOR="#FF0000">"IP/EGP\n"</FONT>);
				<FONT COLOR="#298C52">break</FONT>;
	
			<FONT COLOR="#298C52">case</FONT> IPPROTO_PUP:
				match_rule.rule.ip.protocol = <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_IP_WILDCARD">ISDN_TIMRU_IP_WILDCARD</A>;
				<A HREF="isdn_budget.c.shtml#VERBOSE_PRINTK">VERBOSE_PRINTK</A>(5, <FONT COLOR="#FF0000">""</FONT> <FONT COLOR="#FF0000">"IP/PUP\n"</FONT>);
				<FONT COLOR="#298C52">break</FONT>;
	
			<FONT COLOR="#298C52">case</FONT> IPPROTO_UDP:
				<FONT COLOR="#298C52">if</FONT>(!(udp=(<FONT COLOR="#298C52">struct</FONT> udphdr *)((<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT> *)ip+ip-&gt;ihl))) {
					<A HREF="isdn_budget.c.shtml#VERBOSE_PRINTK">VERBOSE_PRINTK</A>(5, <FONT COLOR="#FF0000">""</FONT>, <FONT COLOR="#FF0000">"IP/UDP HDR-ERR\n"</FONT>);
				} <FONT COLOR="#298C52">else</FONT> {
					match_rule.rule.ip.protocol = <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_IP_UDP">ISDN_TIMRU_IP_UDP</A>;
					match_rule.rule.ip.pt.port.s_from = udp-&gt;source;
					match_rule.rule.ip.pt.port.d_from = udp-&gt;dest;

					<FONT COLOR="#298C52">if</FONT>(dev-&gt;net_verbose &gt;= 5) {
						printk(<FONT COLOR="#FF0000">"IP/UDP "</FONT>);
						<A HREF="#printk_ip">printk_ip</A>(ip-&gt;saddr);
						printk(<FONT COLOR="#FF0000">"/"</FONT>);
						<A HREF="#printk_port">printk_port</A>(udp-&gt;source);
						printk(<FONT COLOR="#FF0000">" --&gt; "</FONT>);
						<A HREF="#printk_ip">printk_ip</A>(ip-&gt;daddr);
						printk(<FONT COLOR="#FF0000">"/"</FONT>);
						<A HREF="#printk_port">printk_port</A>(udp-&gt;dest);
						printk(<FONT COLOR="#FF0000">"\n"</FONT>);
					}
				}
				<FONT COLOR="#298C52">break</FONT>;

			<FONT COLOR="#298C52">case</FONT> IPPROTO_IDP:
				match_rule.rule.ip.protocol = <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_IP_WILDCARD">ISDN_TIMRU_IP_WILDCARD</A>;
				<A HREF="isdn_budget.c.shtml#VERBOSE_PRINTK">VERBOSE_PRINTK</A>(5, <FONT COLOR="#FF0000">""</FONT>, <FONT COLOR="#FF0000">"IP/IDP\n"</FONT>);
				<FONT COLOR="#298C52">break</FONT>;
	
			<FONT COLOR="#298C52">default</FONT>:
				match_rule.rule.ip.protocol = <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_IP_WILDCARD">ISDN_TIMRU_IP_WILDCARD</A>;
				<FONT COLOR="#298C52">if</FONT>(dev-&gt;net_verbose &gt;= 5) {
					printk(<FONT COLOR="#FF0000">"IP/? (%x)\n"</FONT>, ip-&gt;protocol);
<FONT COLOR=#A521F7>#ifdef</FONT> ISDN_DEBUG_NET_DUMP
					<A HREF="isdn_common.c.shtml#isdn_dumppkt">isdn_dumppkt</A>(<FONT COLOR="#FF0000">"R:"</FONT>, (u_char *)skb, skb-&gt;len, 180);
<FONT COLOR=#A521F7>#endif</FONT>
				}
				<FONT COLOR="#298C52">break</FONT>;
			}
			<FONT COLOR="#298C52">break</FONT>;

		<FONT COLOR="#298C52">case</FONT> ETH_P_ARP:
			<A HREF="isdn_budget.c.shtml#VERBOSE_PRINTK">VERBOSE_PRINTK</A>(5, <FONT COLOR="#FF0000">""</FONT>, <FONT COLOR="#FF0000">"ARP/?\n"</FONT>);
			<FONT COLOR="#298C52">break</FONT>;

		<FONT COLOR="#298C52">case</FONT> ETH_P_IPX:
			<A HREF="isdn_budget.c.shtml#VERBOSE_PRINTK">VERBOSE_PRINTK</A>(5, <FONT COLOR="#FF0000">""</FONT>, <FONT COLOR="#FF0000">"IPX/?\n"</FONT>);
			<FONT COLOR="#298C52">break</FONT>;

		<FONT COLOR="#298C52">case</FONT> ETH_P_802_2:
			<A HREF="isdn_budget.c.shtml#VERBOSE_PRINTK">VERBOSE_PRINTK</A>(5, <FONT COLOR="#FF0000">""</FONT>, <FONT COLOR="#FF0000">"802.2/?\n"</FONT>);
			<FONT COLOR="#298C52">break</FONT>;

		<FONT COLOR="#298C52">case</FONT> ETH_P_802_3:
			<A HREF="isdn_budget.c.shtml#VERBOSE_PRINTK">VERBOSE_PRINTK</A>(5, <FONT COLOR="#FF0000">""</FONT>, <FONT COLOR="#FF0000">"802.3/?\n"</FONT>);
			<FONT COLOR="#298C52">break</FONT>;

		<FONT COLOR="#298C52">default</FONT>:
			<FONT COLOR="#298C52">if</FONT>(dev-&gt;net_verbose &gt;= 5) {
				printk(<FONT COLOR="#FF0000">"?/? (%x)\n"</FONT>, ntohs(skb-&gt;protocol));
<FONT COLOR=#A521F7>#ifdef</FONT> ISDN_DEBUG_NET_DUMP
				<A HREF="isdn_common.c.shtml#isdn_dumppkt">isdn_dumppkt</A>(<FONT COLOR="#FF0000">"R:"</FONT>, (u_char *)skb, skb-&gt;len, 1800);
<FONT COLOR=#A521F7>#endif</FONT>
			}
			<FONT COLOR="#298C52">break</FONT>;
		}

<FONT COLOR=#A521F7>#ifdef</FONT> CONFIG_ISDN_TIMRU_USE_MASQ
<FONT COLOR=#A521F7>#ifdef</FONT> CONFIG_IP_MASQUERADE
		check_for_masq = 0;
		m_saddr = m_daddr = (__u32)0;
		m_sport = m_dport = (__u16)0;
		m_prot = 0;

		<FONT COLOR="#298C52">switch</FONT>(match_rule.protfam) {
		<FONT COLOR="#298C52">case</FONT> <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_PROTFAM_IP">ISDN_TIMRU_PROTFAM_IP</A>:
			m_saddr = match_rule.rule.ip.saddr.s_addr;
			m_daddr = match_rule.rule.ip.daddr.s_addr;

			<FONT COLOR="#298C52">switch</FONT>(match_rule.rule.ip.protocol) {
			<FONT COLOR="#298C52">case</FONT> <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_IP_TCP">ISDN_TIMRU_IP_TCP</A>:
				m_prot = IPPROTO_TCP;
				m_sport = match_rule.rule.ip.pt.port.s_from;
				m_dport = match_rule.rule.ip.pt.port.d_from;
				check_for_masq = 1;
				<FONT COLOR="#298C52">break</FONT>;

			<FONT COLOR="#298C52">case</FONT> <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_IP_UDP">ISDN_TIMRU_IP_UDP</A>:
				m_prot = IPPROTO_UDP;
				m_sport = match_rule.rule.ip.pt.port.s_from;
				m_dport = match_rule.rule.ip.pt.port.d_from;
				check_for_masq = 1;
				<FONT COLOR="#298C52">break</FONT>;

<FONT COLOR=#A521F7>#if</FONT> 0
<FONT COLOR=#A521F7>#ifdef</FONT> CONFIG_IP_MASQUERADE_ICMP
			<FONT COLOR="#298C52">case</FONT> <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_IP_ICMP">ISDN_TIMRU_IP_ICMP</A>:
				m_sport = match_rule.rule.ip.pt.type.from;
				m_dport = 0;
				check_for_masq = 1;
				<FONT COLOR="#298C52">break</FONT>;
<FONT COLOR=#A521F7>#endif</FONT>
<FONT COLOR=#A521F7>#endif</FONT>
			}
			<FONT COLOR="#298C52">break</FONT>;
		}

		<FONT COLOR="#298C52">if</FONT>(check_for_masq) {
			masq = NULL;

			<FONT COLOR="#298C52">switch</FONT>(type) {
			<FONT COLOR="#298C52">case</FONT> <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_BRINGUP">ISDN_TIMRU_BRINGUP</A>:
			<FONT COLOR="#298C52">case</FONT> <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_KEEPUP_OUT">ISDN_TIMRU_KEEPUP_OUT</A>:
				<FONT COLOR="#298C52">if</FONT>((masq = ip_masq_in_get_2(m_prot, m_daddr, m_dport, m_saddr, m_sport))) {
					match_rule.rule.ip.saddr.s_addr = m_saddr;
					match_rule.rule.ip.daddr.s_addr = m_daddr;
					<FONT COLOR="#298C52">switch</FONT>(m_prot) {
					<FONT COLOR="#298C52">case</FONT> IPPROTO_TCP:
					<FONT COLOR="#298C52">case</FONT> IPPROTO_UDP:
						match_rule.rule.ip.pt.port.s_from = m_sport;
						match_rule.rule.ip.pt.port.d_from = m_dport;
						<FONT COLOR="#298C52">break</FONT>;
					}
				}
				<FONT COLOR="#298C52">break</FONT>;

			<FONT COLOR="#298C52">case</FONT> <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_KEEPUP_IN">ISDN_TIMRU_KEEPUP_IN</A>:
				<FONT COLOR="#298C52">if</FONT>((masq = ip_masq_in_get_2(m_prot, m_saddr, m_sport, m_daddr, m_dport))) {
					match_rule.rule.ip.saddr.s_addr = m_daddr;
					match_rule.rule.ip.daddr.s_addr = m_saddr;
					<FONT COLOR="#298C52">switch</FONT>(m_prot) {
					<FONT COLOR="#298C52">case</FONT> IPPROTO_TCP:
					<FONT COLOR="#298C52">case</FONT> IPPROTO_UDP:
						match_rule.rule.ip.pt.port.s_from = m_sport;
						match_rule.rule.ip.pt.port.d_from = m_dport;
						<FONT COLOR="#298C52">break</FONT>;
					}
				}
				<FONT COLOR="#298C52">break</FONT>;
			}

			<FONT COLOR="#298C52">if</FONT>(masq &amp;&amp; dev-&gt;net_verbose &gt;= 5) {
				printk(KERN_DEBUG <FONT COLOR="#FF0000">"MASQ-TIMRU: "</FONT>);
				<A HREF="#printk_ip">printk_ip</A>(masq-&gt;maddr);
				printk(<FONT COLOR="#FF0000">"/"</FONT>);
				<A HREF="#printk_port">printk_port</A>(masq-&gt;mport);
				printk(<FONT COLOR="#FF0000">": "</FONT>);
				<A HREF="#printk_ip">printk_ip</A>(masq-&gt;saddr);
				printk(<FONT COLOR="#FF0000">"/"</FONT>);
				<A HREF="#printk_port">printk_port</A>(masq-&gt;sport);
				printk(<FONT COLOR="#FF0000">" --&gt; "</FONT>);
				<A HREF="#printk_ip">printk_ip</A>(masq-&gt;daddr);
				printk(<FONT COLOR="#FF0000">"/"</FONT>);
				<A HREF="#printk_port">printk_port</A>(masq-&gt;dport);
				printk(<FONT COLOR="#FF0000">"\n"</FONT>);
			}
		}
<FONT COLOR=#A521F7>#endif</FONT>
<FONT COLOR=#A521F7>#endif</FONT>
		<FONT COLOR="#298C52">break</FONT>;
	}

	new_timeout = lp-&gt;onhtime;

	<FONT COLOR="#298C52">if</FONT>(prot &amp;&amp; lp-&gt;timeout_rules) {
		<A HREF="../includes/isdn_timru.h.shtml#isdn_timeout_rule">isdn_timeout_rule</A>	*head, *tor;
		<FONT COLOR="#298C52">int</FONT>			pf, found_match, i;

		pf = match_rule.protfam;
		found_match = 0;

		<FONT COLOR="#298C52">while</FONT>(1) {
			head = tor = lp-&gt;timeout_rules-&gt;<A HREF="isdn_common.c.shtml#timru">timru</A>[type][pf];
			i = 0;
			<FONT COLOR="#298C52">while</FONT>(tor) {
				<FONT COLOR="#298C52">if</FONT>((<A HREF="#isdn_timru_match">isdn_timru_match</A>(&amp;match_rule, tor) &gt; 0) ^ (tor-&gt;neg &gt; 0)) {
					found_match = 1;
					new_timeout = tor-&gt;timeout;
				}

				<FONT COLOR="#298C52">if</FONT>(found_match) {
<FONT COLOR=#A521F7>#ifdef</FONT> DEBUG_RULES
					printk(KERN_DEBUG <FONT COLOR="#FF0000">"Rule %d-%d-%d matches\n"</FONT>, type, pf, i);
<FONT COLOR=#A521F7>#endif</FONT>
					<FONT COLOR="#298C52">break</FONT>;
				}

				<FONT COLOR="#298C52">if</FONT>(tor-&gt;next == head)
					tor = NULL;
				<FONT COLOR="#298C52">else</FONT> {
					tor = tor-&gt;next;
					i++;
				}
			}

			<FONT COLOR="#298C52">if</FONT>(! found_match &amp;&amp; pf != <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_PROTFAM_WILDCARD">ISDN_TIMRU_PROTFAM_WILDCARD</A>)
				pf = <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_PROTFAM_WILDCARD">ISDN_TIMRU_PROTFAM_WILDCARD</A>;
			<FONT COLOR="#298C52">else</FONT>
				<FONT COLOR="#298C52">break</FONT>;
		}

		<FONT COLOR="#298C52">if</FONT>(! found_match) {
			new_timeout = lp-&gt;timeout_rules-&gt;defaults[type];
<FONT COLOR=#A521F7>#ifdef</FONT> DEBUG_RULES
			printk(<FONT COLOR="#FF0000">"No rule matches: using default\n"</FONT>);
<FONT COLOR=#A521F7>#endif</FONT>
		}
	}

	<FONT COLOR="#298C52">if</FONT>(type == <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_BRINGUP">ISDN_TIMRU_BRINGUP</A>) {
		<FONT COLOR="#298C52">if</FONT>(new_timeout &gt; 0) {
			lp-&gt;huptimeout = new_timeout;
			lp-&gt;huptimer = 0;
		}
	} <FONT COLOR="#298C52">else</FONT> {
		<FONT COLOR="#298C52">if</FONT>(new_timeout &gt; lp-&gt;huptimeout
		|| lp-&gt;huptimeout - lp-&gt;huptimer &lt; new_timeout) {
			lp-&gt;huptimeout = new_timeout;
			lp-&gt;huptimer = 0;
		}
	}

	<FONT COLOR="#298C52">return</FONT>(new_timeout);
}


<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
<A HREF="#isdn_timru_match">isdn_timru_match</A>(<A HREF="../includes/isdn_timru.h.shtml#isdn_timeout_rule">isdn_timeout_rule</A> *<FONT COLOR="#298C52">this</FONT>, <A HREF="../includes/isdn_timru.h.shtml#isdn_timeout_rule">isdn_timeout_rule</A> *rule) {
	<FONT COLOR="#298C52">if</FONT>(<FONT COLOR="#298C52">this</FONT>-&gt;protfam != rule-&gt;protfam)
		<FONT COLOR="#298C52">return</FONT>(0);

	<FONT COLOR="#298C52">switch</FONT>(rule-&gt;protfam) {
	<FONT COLOR="#298C52">case</FONT> <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_PROTFAM_WILDCARD">ISDN_TIMRU_PROTFAM_WILDCARD</A>:
		<FONT COLOR="#298C52">return</FONT>(1);
		<FONT COLOR="#298C52">break</FONT>;

	<FONT COLOR="#298C52">case</FONT> <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_PROTFAM_PPP">ISDN_TIMRU_PROTFAM_PPP</A>:
		<FONT COLOR="#298C52">if</FONT>(rule-&gt;rule.ppp.protocol == <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_PPP_WILDCARD">ISDN_TIMRU_PPP_WILDCARD</A>
		|| rule-&gt;rule.ppp.protocol == <FONT COLOR="#298C52">this</FONT>-&gt;rule.ppp.protocol)
			<FONT COLOR="#298C52">return</FONT>(1);
		<FONT COLOR="#298C52">break</FONT>;

	<FONT COLOR="#298C52">case</FONT> <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_PROTFAM_IP">ISDN_TIMRU_PROTFAM_IP</A>:
		<FONT COLOR="#298C52">if</FONT>((<FONT COLOR="#298C52">this</FONT>-&gt;rule.ip.saddr.s_addr &amp; rule-&gt;rule.ip.smask.s_addr) != rule-&gt;rule.ip.saddr.s_addr
		|| (<FONT COLOR="#298C52">this</FONT>-&gt;rule.ip.daddr.s_addr &amp; rule-&gt;rule.ip.dmask.s_addr) != rule-&gt;rule.ip.daddr.s_addr)
			<FONT COLOR="#298C52">return</FONT>(0);

		<FONT COLOR="#298C52">if</FONT>(rule-&gt;rule.ip.protocol == <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_IP_WILDCARD">ISDN_TIMRU_IP_WILDCARD</A>)
			<FONT COLOR="#298C52">return</FONT>(1);

		<FONT COLOR="#298C52">if</FONT>(rule-&gt;rule.ip.protocol != <FONT COLOR="#298C52">this</FONT>-&gt;rule.ip.protocol)
			<FONT COLOR="#298C52">return</FONT>(0);

		<FONT COLOR="#298C52">switch</FONT>(rule-&gt;rule.ip.protocol) {
		<FONT COLOR="#298C52">case</FONT> <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_IP_ICMP">ISDN_TIMRU_IP_ICMP</A>:
			<FONT COLOR="#298C52">if</FONT>(<FONT COLOR="#298C52">this</FONT>-&gt;rule.ip.pt.type.from &lt; rule-&gt;rule.ip.pt.type.from
			|| <FONT COLOR="#298C52">this</FONT>-&gt;rule.ip.pt.type.from &gt; rule-&gt;rule.ip.pt.type.to)
				<FONT COLOR="#298C52">return</FONT>(0);
			<FONT COLOR="#298C52">break</FONT>;

		<FONT COLOR="#298C52">case</FONT> <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_IP_TCP">ISDN_TIMRU_IP_TCP</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_IP_UDP">ISDN_TIMRU_IP_UDP</A>:
			<FONT COLOR="#298C52">if</FONT>(<FONT COLOR="#298C52">this</FONT>-&gt;rule.ip.pt.port.s_from &lt; rule-&gt;rule.ip.pt.port.s_from
			|| <FONT COLOR="#298C52">this</FONT>-&gt;rule.ip.pt.port.s_from &gt; rule-&gt;rule.ip.pt.port.s_to)
				<FONT COLOR="#298C52">return</FONT>(0);

			<FONT COLOR="#298C52">if</FONT>(<FONT COLOR="#298C52">this</FONT>-&gt;rule.ip.pt.port.d_from &lt; rule-&gt;rule.ip.pt.port.d_from
			|| <FONT COLOR="#298C52">this</FONT>-&gt;rule.ip.pt.port.d_from &gt; rule-&gt;rule.ip.pt.port.d_to)
				<FONT COLOR="#298C52">return</FONT>(0);

			<FONT COLOR="#298C52">break</FONT>;
		}
		<FONT COLOR="#298C52">break</FONT>;
	}

	<FONT COLOR="#298C52">return</FONT>(1);
}


<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
<A HREF="#isdn_timru_rule_equals">isdn_timru_rule_equals</A>(<A HREF="../includes/isdn_timru.h.shtml#isdn_timeout_rule">isdn_timeout_rule</A> *<FONT COLOR="#298C52">this</FONT>, <A HREF="../includes/isdn_timru.h.shtml#isdn_timeout_rule">isdn_timeout_rule</A> *rule) {
	<FONT COLOR="#298C52">if</FONT>(<FONT COLOR="#298C52">this</FONT>-&gt;neg != rule-&gt;neg
	|| <FONT COLOR="#298C52">this</FONT>-&gt;protfam != rule-&gt;protfam)
		<FONT COLOR="#298C52">return</FONT>(0);

	<FONT COLOR="#298C52">switch</FONT>(rule-&gt;protfam) {
	<FONT COLOR="#298C52">case</FONT> <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_PROTFAM_PPP">ISDN_TIMRU_PROTFAM_PPP</A>:
		<FONT COLOR="#298C52">if</FONT>(<FONT COLOR="#298C52">this</FONT>-&gt;rule.ppp.protocol != rule-&gt;rule.ppp.protocol)
			<FONT COLOR="#298C52">return</FONT>(0);
		<FONT COLOR="#298C52">break</FONT>;

	<FONT COLOR="#298C52">case</FONT> <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_PROTFAM_IP">ISDN_TIMRU_PROTFAM_IP</A>:
		<FONT COLOR="#298C52">if</FONT>(<FONT COLOR="#298C52">this</FONT>-&gt;rule.ip.protocol != rule-&gt;rule.ip.protocol
		|| <FONT COLOR="#298C52">this</FONT>-&gt;rule.ip.saddr.s_addr != rule-&gt;rule.ip.saddr.s_addr
		|| <FONT COLOR="#298C52">this</FONT>-&gt;rule.ip.smask.s_addr != rule-&gt;rule.ip.smask.s_addr
		|| <FONT COLOR="#298C52">this</FONT>-&gt;rule.ip.daddr.s_addr != rule-&gt;rule.ip.daddr.s_addr
		|| <FONT COLOR="#298C52">this</FONT>-&gt;rule.ip.dmask.s_addr != rule-&gt;rule.ip.dmask.s_addr)
			<FONT COLOR="#298C52">return</FONT>(0);

		<FONT COLOR="#298C52">switch</FONT>(rule-&gt;rule.ip.protocol) {
		<FONT COLOR="#298C52">case</FONT> <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_IP_ICMP">ISDN_TIMRU_IP_ICMP</A>:
			<FONT COLOR="#298C52">if</FONT>(<FONT COLOR="#298C52">this</FONT>-&gt;rule.ip.pt.type.from != rule-&gt;rule.ip.pt.type.from
			|| <FONT COLOR="#298C52">this</FONT>-&gt;rule.ip.pt.type.to != rule-&gt;rule.ip.pt.type.to)
				<FONT COLOR="#298C52">return</FONT>(0);
			<FONT COLOR="#298C52">break</FONT>;

		<FONT COLOR="#298C52">case</FONT> <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_IP_TCP">ISDN_TIMRU_IP_TCP</A>:
		<FONT COLOR="#298C52">case</FONT> <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_IP_UDP">ISDN_TIMRU_IP_UDP</A>:
			<FONT COLOR="#298C52">if</FONT>(<FONT COLOR="#298C52">this</FONT>-&gt;rule.ip.pt.port.s_from != rule-&gt;rule.ip.pt.port.s_from
			|| <FONT COLOR="#298C52">this</FONT>-&gt;rule.ip.pt.port.s_to != rule-&gt;rule.ip.pt.port.s_to
			|| <FONT COLOR="#298C52">this</FONT>-&gt;rule.ip.pt.port.d_from != rule-&gt;rule.ip.pt.port.d_from
			|| <FONT COLOR="#298C52">this</FONT>-&gt;rule.ip.pt.port.d_to != rule-&gt;rule.ip.pt.port.d_to)
				<FONT COLOR="#298C52">return</FONT>(0);

			<FONT COLOR="#298C52">break</FONT>;
		}
		<FONT COLOR="#298C52">break</FONT>;
	}

	<FONT COLOR="#298C52">return</FONT>(1);
}


<FONT COLOR="#298C52">int</FONT>
<A HREF="#isdn_timru_alloc_timeout_rules">isdn_timru_alloc_timeout_rules</A>(<FONT COLOR="#298C52">struct</FONT> device *ndev) {
	isdn_net_local	*lp = (isdn_net_local *)ndev-&gt;priv;
	<FONT COLOR="#298C52">int</FONT>		i, j;
	ulong		flags;

	save_flags(flags);
	<A HREF="kdebug.h.shtml#cli">cli</A>();
	<FONT COLOR="#298C52">if</FONT>(!(lp-&gt;timeout_rules = (<FONT COLOR="#298C52">struct</FONT> isdn_timeout_rules *)kmalloc(<FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> isdn_timeout_rules), GFP_KERNEL))) {
		<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
		printk(KERN_WARNING <FONT COLOR="#FF0000">"isdn_timru: failed to allocate memory.\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT>(-ENOMEM);
	}

	memset((<FONT COLOR="#298C52">char</FONT> *)lp-&gt;timeout_rules, 0, <FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> isdn_timeout_rules));

	<FONT COLOR="#298C52">for</FONT>(i = 0; i &lt; <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_NUM_CHECK">ISDN_TIMRU_NUM_CHECK</A>; i++) {
		lp-&gt;timeout_rules-&gt;defaults[i] = lp-&gt;onhtime;
		<FONT COLOR="#298C52">for</FONT>(j = 0; j &lt; <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_NUM_PROTFAM">ISDN_TIMRU_NUM_PROTFAM</A>; j++)
			lp-&gt;timeout_rules-&gt;<A HREF="isdn_common.c.shtml#timru">timru</A>[i][j] = NULL;
	}

	<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
	<FONT COLOR="#298C52">return</FONT>(0);
}


<FONT COLOR="#298C52">int</FONT>
<A HREF="#isdn_timru_free_timeout_rules">isdn_timru_free_timeout_rules</A>(<FONT COLOR="#298C52">struct</FONT> device *ndev) {
	isdn_net_local		*lp = (isdn_net_local *)ndev-&gt;priv;
	<A HREF="../includes/isdn_timru.h.shtml#isdn_timeout_rule">isdn_timeout_rule</A>	*head, *<FONT COLOR="#298C52">this</FONT>, *next;
	<FONT COLOR="#298C52">int</FONT>			i, j;
	ulong			flags;

	<FONT COLOR="#298C52">if</FONT>(!lp-&gt;timeout_rules)
		<FONT COLOR="#298C52">return</FONT>(-1);

	save_flags(flags);
	<A HREF="kdebug.h.shtml#cli">cli</A>();
	<FONT COLOR="#298C52">for</FONT>(i = 0; i &lt; <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_NUM_CHECK">ISDN_TIMRU_NUM_CHECK</A>; i++)
		<FONT COLOR="#298C52">for</FONT>(j = 0; j &lt; <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_NUM_CHECK">ISDN_TIMRU_NUM_CHECK</A>; j++)
			<FONT COLOR="#298C52">if</FONT>((head = lp-&gt;timeout_rules-&gt;<A HREF="isdn_common.c.shtml#timru">timru</A>[i][j])) {
				<FONT COLOR="#298C52">this</FONT> = head;
				<FONT COLOR="#298C52">do</FONT> {
					next = <FONT COLOR="#298C52">this</FONT>-&gt;next;
					kfree(<FONT COLOR="#298C52">this</FONT>);
				} <FONT COLOR="#298C52">while</FONT>(next == head);
			}

	kfree(lp-&gt;timeout_rules);
	lp-&gt;timeout_rules = NULL;

	<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
	<FONT COLOR="#298C52">return</FONT>(0);
}


<FONT COLOR="#298C52">int</FONT>
<A HREF="#isdn_timru_add_rule">isdn_timru_add_rule</A>(<FONT COLOR="#298C52">int</FONT> where, <FONT COLOR="#298C52">struct</FONT> device *ndev, <A HREF="../includes/isdn_timru.h.shtml#isdn_timeout_rule">isdn_timeout_rule</A> *rule) {
	isdn_net_local		*lp = (isdn_net_local *)ndev-&gt;priv;
	<A HREF="../includes/isdn_timru.h.shtml#isdn_timeout_rule">isdn_timeout_rule</A>	**head;
	ulong			flags;
	<FONT COLOR="#298C52">int</FONT>			ret;

	<FONT COLOR="#298C52">if</FONT>(!lp-&gt;timeout_rules)
		<FONT COLOR="#298C52">if</FONT>((ret = <A HREF="#isdn_timru_alloc_timeout_rules">isdn_timru_alloc_timeout_rules</A>(ndev)))
			<FONT COLOR="#298C52">return</FONT>(ret);

	<FONT COLOR="#298C52">if</FONT>(rule-&gt;timeout &lt; 0)
		<FONT COLOR="#298C52">return</FONT>(-EINVAL);

	save_flags(flags);
	<A HREF="kdebug.h.shtml#cli">cli</A>();

	head = &amp;(lp-&gt;timeout_rules-&gt;<A HREF="isdn_common.c.shtml#timru">timru</A>[rule-&gt;type][rule-&gt;protfam]);

	<FONT COLOR="#298C52">if</FONT>(! *head)
		rule-&gt;next = rule-&gt;prev = *head = rule;
	<FONT COLOR="#298C52">else</FONT> {
		rule-&gt;next = *head;
		rule-&gt;prev = (*head)-&gt;prev;
		(*head)-&gt;prev-&gt;next = rule;
		(*head)-&gt;prev = rule;

		<FONT COLOR="#298C52">if</FONT>(where == 0)	<FONT COLOR=#0000FF>/* add to head of chain */</FONT>
			*head = rule;
	}

	<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
	<FONT COLOR="#298C52">return</FONT>(0);
}


<FONT COLOR="#298C52">int</FONT>
<A HREF="#isdn_timru_del_rule">isdn_timru_del_rule</A>(<FONT COLOR="#298C52">struct</FONT> device *ndev, <A HREF="../includes/isdn_timru.h.shtml#isdn_timeout_rule">isdn_timeout_rule</A> *rule) {
	isdn_net_local			*lp = (isdn_net_local *)ndev-&gt;priv;
	<A HREF="../includes/isdn_timru.h.shtml#isdn_timeout_rule">isdn_timeout_rule</A>	**head, *<FONT COLOR="#298C52">this</FONT>;
	ulong				flags;

	<FONT COLOR="#298C52">if</FONT>(!lp-&gt;timeout_rules)
		<FONT COLOR="#298C52">return</FONT>(-EINVAL);

	save_flags(flags);
	<A HREF="kdebug.h.shtml#cli">cli</A>();

	head = &amp;(lp-&gt;timeout_rules-&gt;<A HREF="isdn_common.c.shtml#timru">timru</A>[rule-&gt;type][rule-&gt;protfam]);

	<FONT COLOR="#298C52">if</FONT>(! *head) {
		<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
		<FONT COLOR="#298C52">return</FONT>(-EINVAL);
	}

	<FONT COLOR="#298C52">this</FONT> = *head;
	<FONT COLOR="#298C52">do</FONT> {
		<FONT COLOR="#298C52">if</FONT>(<A HREF="#isdn_timru_rule_equals">isdn_timru_rule_equals</A>(<FONT COLOR="#298C52">this</FONT>, rule)) {
			<FONT COLOR="#298C52">if</FONT>(<FONT COLOR="#298C52">this</FONT>-&gt;next != <FONT COLOR="#298C52">this</FONT>) {	<FONT COLOR=#0000FF>/* more than one rule */</FONT>
				<FONT COLOR="#298C52">this</FONT>-&gt;prev-&gt;next = <FONT COLOR="#298C52">this</FONT>-&gt;next;
				<FONT COLOR="#298C52">this</FONT>-&gt;next-&gt;prev = <FONT COLOR="#298C52">this</FONT>-&gt;prev;

				<FONT COLOR="#298C52">if</FONT>(<FONT COLOR="#298C52">this</FONT> == *head)
					*head = <FONT COLOR="#298C52">this</FONT>-&gt;next;
			} <FONT COLOR="#298C52">else</FONT>
				*head = NULL;

			kfree(<FONT COLOR="#298C52">this</FONT>);
			<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
			<FONT COLOR="#298C52">return</FONT>(0);
		} <FONT COLOR="#298C52">else</FONT>
			<FONT COLOR="#298C52">this</FONT> = <FONT COLOR="#298C52">this</FONT>-&gt;next;
	} <FONT COLOR="#298C52">while</FONT>(<FONT COLOR="#298C52">this</FONT> == *head);

	<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
	<FONT COLOR="#298C52">return</FONT>(-EINVAL);
}


<FONT COLOR="#298C52">int</FONT>
<A HREF="#isdn_timru_set_default">isdn_timru_set_default</A>(<FONT COLOR="#298C52">int</FONT> type, <FONT COLOR="#298C52">struct</FONT> device *ndev, <FONT COLOR="#298C52">int</FONT> def) {
	isdn_net_local	*lp = (isdn_net_local *)ndev-&gt;priv;
	ulong		flags;
	<FONT COLOR="#298C52">int</FONT>		ret;

	<FONT COLOR="#298C52">if</FONT>(!lp-&gt;timeout_rules)
		<FONT COLOR="#298C52">if</FONT>((ret = <A HREF="#isdn_timru_alloc_timeout_rules">isdn_timru_alloc_timeout_rules</A>(ndev)))
			<FONT COLOR="#298C52">return</FONT>(ret);

	<FONT COLOR="#298C52">if</FONT>(def &lt; 0)
		<FONT COLOR="#298C52">return</FONT>(-EINVAL);

	save_flags(flags);
	<A HREF="kdebug.h.shtml#cli">cli</A>();

	lp-&gt;timeout_rules-&gt;defaults[type] = def;

	<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
	<FONT COLOR="#298C52">return</FONT>(0);
}


<FONT COLOR="#298C52">int</FONT>
<A HREF="#isdn_timru_get_rule">isdn_timru_get_rule</A>(<FONT COLOR="#298C52">struct</FONT> device *ndev, <A HREF="../includes/isdn_timru.h.shtml#isdn_timeout_rule">isdn_timeout_rule</A> **rule, <FONT COLOR="#298C52">int</FONT> i, <FONT COLOR="#298C52">int</FONT> j, <FONT COLOR="#298C52">int</FONT> k) {
	isdn_net_local			*lp = (isdn_net_local *)ndev-&gt;priv;
	<A HREF="../includes/isdn_timru.h.shtml#isdn_timeout_rule">isdn_timeout_rule</A>	*head, *<FONT COLOR="#298C52">this</FONT>;
	<FONT COLOR="#298C52">int</FONT>				l;
	ulong				flags;

	<FONT COLOR="#298C52">if</FONT>(!lp-&gt;timeout_rules
	|| i &lt; 0 || i &gt; <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_NUM_CHECK">ISDN_TIMRU_NUM_CHECK</A>
	|| j &lt; 0 || j &gt; <A HREF="../includes/isdn_timru.h.shtml#ISDN_TIMRU_NUM_PROTFAM">ISDN_TIMRU_NUM_PROTFAM</A>
	|| k &lt; 0)
		<FONT COLOR="#298C52">return</FONT>(-EINVAL);

	save_flags(flags);
	<A HREF="kdebug.h.shtml#cli">cli</A>();

	<FONT COLOR="#298C52">if</FONT>(!(<FONT COLOR="#298C52">this</FONT> = head = lp-&gt;timeout_rules-&gt;<A HREF="isdn_common.c.shtml#timru">timru</A>[i][j])) {
		<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
		<FONT COLOR="#298C52">return</FONT>(-EINVAL);
	}

	<FONT COLOR="#298C52">for</FONT>(l = 0; l &lt; k; l++) {
		<FONT COLOR="#298C52">if</FONT>(<FONT COLOR="#298C52">this</FONT>-&gt;next == head) {
			<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
			<FONT COLOR="#298C52">return</FONT>(-EINVAL);
		}
		<FONT COLOR="#298C52">this</FONT> = <FONT COLOR="#298C52">this</FONT>-&gt;next;
	}

	*rule = <FONT COLOR="#298C52">this</FONT>;
	<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
	<FONT COLOR="#298C52">return</FONT>(0);
}


<FONT COLOR="#298C52">int</FONT>
<A HREF="#isdn_timru_get_default">isdn_timru_get_default</A>(<FONT COLOR="#298C52">int</FONT> type, <FONT COLOR="#298C52">struct</FONT> device *ndev, <FONT COLOR="#298C52">int</FONT> *ret) {
	isdn_net_local	*lp = (isdn_net_local *)ndev-&gt;priv;
	ulong		flags;

	<FONT COLOR="#298C52">if</FONT>(!lp-&gt;timeout_rules)
		<FONT COLOR="#298C52">return</FONT>(-EINVAL);

	save_flags(flags);
	<A HREF="kdebug.h.shtml#cli">cli</A>();

	*ret = lp-&gt;timeout_rules-&gt;defaults[type];

	<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
	<FONT COLOR="#298C52">return</FONT>(0);
}


<FONT COLOR="#298C52">int</FONT>
<A HREF="#isdn_timru_ioctl_add_rule">isdn_timru_ioctl_add_rule</A>(<A HREF="../includes/isdn_timru.h.shtml#isdn_ioctl_timeout_rule">isdn_ioctl_timeout_rule</A> *iorule)
{
	<A HREF="../includes/isdn.h.shtml#isdn_net_dev">isdn_net_dev</A>		*p = <A HREF="isdn_net.c.shtml#isdn_net_findif">isdn_net_findif</A>(iorule-&gt;<A HREF="isdn_common.c.shtml#name">name</A>);
	<A HREF="../includes/isdn_timru.h.shtml#isdn_timeout_rule">isdn_timeout_rule</A>	*r;

	<FONT COLOR="#298C52">if</FONT>(p) {
		<FONT COLOR="#298C52">if</FONT>(iorule-&gt;where &lt; 0) {	<FONT COLOR=#0000FF>/* set default */</FONT>
			<FONT COLOR="#298C52">return</FONT>(<A HREF="#isdn_timru_set_default">isdn_timru_set_default</A>(iorule-&gt;type, &amp;p-&gt;dev, iorule-&gt;defval));
		} <FONT COLOR="#298C52">else</FONT> {
			<FONT COLOR="#298C52">if</FONT>(!(r = (<A HREF="../includes/isdn_timru.h.shtml#isdn_timeout_rule">isdn_timeout_rule</A> *) kmalloc(<FONT COLOR="#298C52">sizeof</FONT>(<A HREF="../includes/isdn_timru.h.shtml#isdn_timeout_rule">isdn_timeout_rule</A>), GFP_KERNEL)))
				<FONT COLOR="#298C52">return</FONT>(-ENOMEM);
			memcpy((<FONT COLOR="#298C52">char</FONT> *)r, (<FONT COLOR="#298C52">char</FONT> *)&amp;iorule-&gt;rule, <FONT COLOR="#298C52">sizeof</FONT>(<A HREF="../includes/isdn_timru.h.shtml#isdn_timeout_rule">isdn_timeout_rule</A>));
			<FONT COLOR="#298C52">return</FONT>(<A HREF="#isdn_timru_add_rule">isdn_timru_add_rule</A>(iorule-&gt;where, &amp;p-&gt;dev, r));
		}
	}
	<FONT COLOR="#298C52">return</FONT>(-ENODEV);
}


<FONT COLOR="#298C52">int</FONT>
<A HREF="#isdn_timru_ioctl_del_rule">isdn_timru_ioctl_del_rule</A>(<A HREF="../includes/isdn_timru.h.shtml#isdn_ioctl_timeout_rule">isdn_ioctl_timeout_rule</A> *iorule)
{
	<A HREF="../includes/isdn.h.shtml#isdn_net_dev">isdn_net_dev</A>		*p = <A HREF="isdn_net.c.shtml#isdn_net_findif">isdn_net_findif</A>(iorule-&gt;<A HREF="isdn_common.c.shtml#name">name</A>);
	<A HREF="../includes/isdn_timru.h.shtml#isdn_timeout_rule">isdn_timeout_rule</A>	*r;

	<FONT COLOR="#298C52">if</FONT>(p) {
		<FONT COLOR="#298C52">if</FONT>(!(r = (<A HREF="../includes/isdn_timru.h.shtml#isdn_timeout_rule">isdn_timeout_rule</A> *) kmalloc(<FONT COLOR="#298C52">sizeof</FONT>(<A HREF="../includes/isdn_timru.h.shtml#isdn_timeout_rule">isdn_timeout_rule</A>), GFP_KERNEL)))
			<FONT COLOR="#298C52">return</FONT>(-ENOMEM);
		memcpy((<FONT COLOR="#298C52">char</FONT> *)r, (<FONT COLOR="#298C52">char</FONT> *)&amp;iorule-&gt;rule, <FONT COLOR="#298C52">sizeof</FONT>(<A HREF="../includes/isdn_timru.h.shtml#isdn_timeout_rule">isdn_timeout_rule</A>));
		<FONT COLOR="#298C52">return</FONT>(<A HREF="#isdn_timru_del_rule">isdn_timru_del_rule</A>(&amp;p-&gt;dev, r));
	}
	<FONT COLOR="#298C52">return</FONT>(-ENODEV);
}


<FONT COLOR="#298C52">int</FONT>
<A HREF="#isdn_timru_ioctl_get_rule">isdn_timru_ioctl_get_rule</A>(<A HREF="../includes/isdn_timru.h.shtml#isdn_ioctl_timeout_rule">isdn_ioctl_timeout_rule</A> *iorule)
{
	<FONT COLOR="#298C52">int</FONT>			ret, def;
	<A HREF="../includes/isdn.h.shtml#isdn_net_dev">isdn_net_dev</A>		*p = <A HREF="isdn_net.c.shtml#isdn_net_findif">isdn_net_findif</A>(iorule-&gt;<A HREF="isdn_common.c.shtml#name">name</A>);
	<A HREF="../includes/isdn_timru.h.shtml#isdn_timeout_rule">isdn_timeout_rule</A>	*r;

	<FONT COLOR="#298C52">if</FONT>(p) {
		<FONT COLOR="#298C52">if</FONT>(iorule-&gt;where &lt; 0) {	<FONT COLOR=#0000FF>/* get default */</FONT>
			<FONT COLOR="#298C52">if</FONT>((ret = <A HREF="#isdn_timru_get_default">isdn_timru_get_default</A>(iorule-&gt;type, &amp;p-&gt;dev, &amp;def)) &lt; 0)
				<FONT COLOR="#298C52">return</FONT>(ret);

			iorule-&gt;protfam = p-&gt;local-&gt;huptimer;
			iorule-&gt;index = p-&gt;local-&gt;huptimeout;
			iorule-&gt;defval = def;
		} <FONT COLOR="#298C52">else</FONT> {
			<FONT COLOR="#298C52">if</FONT>(<A HREF="#isdn_timru_get_rule">isdn_timru_get_rule</A>(&amp;p-&gt;dev, &amp;r, iorule-&gt;type, iorule-&gt;protfam, iorule-&gt;index))
				<FONT COLOR="#298C52">return</FONT>(-ENOMEM);

			memcpy((<FONT COLOR="#298C52">char</FONT> *)&amp;iorule-&gt;rule, (<FONT COLOR="#298C52">char</FONT> *)r, <FONT COLOR="#298C52">sizeof</FONT>(<A HREF="../includes/isdn_timru.h.shtml#isdn_timeout_rule">isdn_timeout_rule</A>));
		}
		<FONT COLOR="#298C52">return</FONT>(0);
	}
	<FONT COLOR="#298C52">return</FONT>(-ENODEV);
}

<FONT COLOR=#A521F7>#endif</FONT>
</BODY>

</HTML>
