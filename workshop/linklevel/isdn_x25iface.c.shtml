<HTML>

<!-- Generated by c2html-1.0, Copyright 1998 by Dave Whittington -->
<HEAD>
<TITLE>isdn_x25iface.c</TITLE>
<!--#include virtual="/ssi/js.shtml" -->
<!--#include virtual="/ssi/buttondefs.shtml" -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<TABLE WIDTH="100%">
<TR>
<TD ALIGN=LEFT WIDTH="90"><!--#include virtual="/ssi/b_home.shtml" --></TD>
<TD ALIGN=RIGHT WIDTH="90"><!--#include virtual="/ssi/b_index.shtml" --></TD>
</TR>
</TABLE>
<CENTER><H1>isdn_x25iface.c</H1></CENTER>

<HR>
<PRE>
<FONT COLOR=#0000FF>/* $Id$
 * stuff needed to support the Linux X.25 PLP code on top of devices that
 * can provide a lab_b service using the concap_proto mechanism.
 * This module supports a network interface wich provides lapb_sematics
 * -- as defined in ../../Documentation/networking/x25-iface.txt -- to
 * the upper layer and assumes that the lower layer provides a reliable
 * data link service by means of the concap_device_ops callbacks.
 *
 * Only protocol specific stuff goes here. Device specific stuff
 * goes to another -- device related -- concap_proto support source file.
 *
 * $Log$
 * Revision 1.4  1998/06/17 19:51:00  he
 * merged with 2.1.10[34] (cosmetics and udelay() -&gt; mdelay())
 * brute force fix to avoid Ugh's in isdn_tty_write()
 * cleaned up some dead code
 *
 * Revision 1.3  1998/02/20 17:25:20  fritz
 * Changes for recent kernels.
 *
 * Revision 1.2  1998/01/31 22:49:22  keil
 * correct comments
 *
 * Revision 1.1  1998/01/31 22:27:58  keil
 * New files from Henner Eisen for X.25 support
 *
 */</FONT>

<FONT COLOR=#0000FF>/* #include &lt;linux/isdn.h&gt; */</FONT>
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/netdevice.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/concap.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/wanrouter.h&gt;
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isdn_x25iface.h"</FONT>

<FONT COLOR=#0000FF>/* for debugging messages not to cause an oops when device pointer is NULL*/</FONT>
<FONT COLOR=#A521F7>#define</FONT> <A HREF="#MY_DEVNAME">MY_DEVNAME</A>(dev)  ( (dev) ? (dev)-&gt;<A HREF="isdn_common.c.shtml#name">name</A> : <FONT COLOR="#FF0000">"DEVICE UNSPECIFIED"</FONT> )


<FONT COLOR="#298C52">typedef</FONT> <FONT COLOR="#298C52">struct</FONT> <A NAME="isdn_x25iface_proto_data">isdn_x25iface_proto_data</A> {
	<FONT COLOR="#298C52">int</FONT> magic;
	<FONT COLOR="#298C52">enum</FONT> wan_states state;
	<FONT COLOR=#0000FF>/* Private stuff, not to be accessed via proto_data. We provide the
	   other storage for the concap_proto instance here as well,
	   enabling us to allocate both with just one kmalloc(): */</FONT> 
	<FONT COLOR="#298C52">struct</FONT> concap_proto priv;
} <A NAME="ix25_pdata_t">ix25_pdata_t</A>;



<FONT COLOR=#0000FF>/* is now in header file (extern): struct concap_proto * isdn_x25iface_proto_new(void); */</FONT>
<FONT COLOR="#298C52">void</FONT> <A HREF="#isdn_x25iface_proto_del">isdn_x25iface_proto_del</A>( <FONT COLOR="#298C52">struct</FONT> concap_proto * );
<FONT COLOR="#298C52">int</FONT> <A HREF="#isdn_x25iface_proto_close">isdn_x25iface_proto_close</A>( <FONT COLOR="#298C52">struct</FONT> concap_proto * );
<FONT COLOR="#298C52">int</FONT> <A HREF="#isdn_x25iface_proto_restart">isdn_x25iface_proto_restart</A>( <FONT COLOR="#298C52">struct</FONT> concap_proto *,
				 <FONT COLOR="#298C52">struct</FONT> device *,
				 <FONT COLOR="#298C52">struct</FONT> concap_device_ops *);
<FONT COLOR="#298C52">int</FONT> <A HREF="#isdn_x25iface_xmit">isdn_x25iface_xmit</A>( <FONT COLOR="#298C52">struct</FONT> concap_proto *, <FONT COLOR="#298C52">struct</FONT> sk_buff * );
<FONT COLOR="#298C52">int</FONT> <A HREF="#isdn_x25iface_receive">isdn_x25iface_receive</A>( <FONT COLOR="#298C52">struct</FONT> concap_proto *, <FONT COLOR="#298C52">struct</FONT> sk_buff * );
<FONT COLOR="#298C52">int</FONT> <A HREF="#isdn_x25iface_connect_ind">isdn_x25iface_connect_ind</A>( <FONT COLOR="#298C52">struct</FONT> concap_proto * );
<FONT COLOR="#298C52">int</FONT> <A HREF="#isdn_x25iface_disconn_ind">isdn_x25iface_disconn_ind</A>( <FONT COLOR="#298C52">struct</FONT> concap_proto * );


<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">struct</FONT> concap_proto_ops ix25_pops = {
	&amp;<A HREF="#isdn_x25iface_proto_new">isdn_x25iface_proto_new</A>,
	&amp;<A HREF="#isdn_x25iface_proto_del">isdn_x25iface_proto_del</A>,
	&amp;<A HREF="#isdn_x25iface_proto_restart">isdn_x25iface_proto_restart</A>,
	&amp;<A HREF="#isdn_x25iface_proto_close">isdn_x25iface_proto_close</A>,
	&amp;<A HREF="#isdn_x25iface_xmit">isdn_x25iface_xmit</A>,
	&amp;<A HREF="#isdn_x25iface_receive">isdn_x25iface_receive</A>,
	&amp;<A HREF="#isdn_x25iface_connect_ind">isdn_x25iface_connect_ind</A>,
	&amp;<A HREF="#isdn_x25iface_disconn_ind">isdn_x25iface_disconn_ind</A>
};

<FONT COLOR=#0000FF>/* error message helper fuction */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> <A HREF="#illegal_state_warn">illegal_state_warn</A>( <FONT COLOR="#298C52">unsigned</FONT> state, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">char</FONT> firstbyte) 
{
	printk( KERN_WARNING <FONT COLOR="#FF0000">"isdn_x25iface: firstbyte %x illegal in"</FONT>
		<FONT COLOR="#FF0000">"current state %d\n"</FONT>,firstbyte, state );
}

<FONT COLOR=#0000FF>/* check protocol data field for consistency */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> <A NAME="pdata_is_bad">pdata_is_bad</A>( <A HREF="#ix25_pdata_t">ix25_pdata_t</A> * pda ){

	<FONT COLOR="#298C52">if</FONT>( pda  &amp;&amp;  pda -&gt; magic == <A HREF="isdn_x25iface.h.shtml#ISDN_X25IFACE_MAGIC">ISDN_X25IFACE_MAGIC</A> ) <FONT COLOR="#298C52">return</FONT> 0;
	printk( KERN_WARNING
		<FONT COLOR="#FF0000">"isdn_x25iface_xxx: illegal pointer to proto data\n"</FONT> );
	<FONT COLOR="#298C52">return</FONT> 1;
}

<FONT COLOR=#0000FF>/* create a new x25 interface protocol instance
 */</FONT>
<FONT COLOR="#298C52">struct</FONT> concap_proto * <A NAME="isdn_x25iface_proto_new">isdn_x25iface_proto_new</A>()
{
	<A HREF="#ix25_pdata_t">ix25_pdata_t</A> * tmp = kmalloc(<FONT COLOR="#298C52">sizeof</FONT>(<A HREF="#ix25_pdata_t">ix25_pdata_t</A>),GFP_KERNEL);
	<A HREF="isdn_x25iface.h.shtml#IX25DEBUG">IX25DEBUG</A>(<FONT COLOR="#FF0000">"isdn_x25iface_proto_new\n"</FONT>);
	<FONT COLOR="#298C52">if</FONT>( tmp ){
		tmp -&gt; magic = <A HREF="isdn_x25iface.h.shtml#ISDN_X25IFACE_MAGIC">ISDN_X25IFACE_MAGIC</A>;
		tmp -&gt; state = WAN_UNCONFIGURED;
		<FONT COLOR=#0000FF>/* private data space used to hold the concap_proto data.
		   Only to be accessed via the returned pointer */</FONT>
		tmp -&gt; priv.dops       = NULL;
		tmp -&gt; priv.net_dev    = NULL;
		tmp -&gt; priv.pops       = &amp;ix25_pops;
		tmp -&gt; priv.flags      = 0;
		tmp -&gt; priv.proto_data = tmp;
		<FONT COLOR="#298C52">return</FONT>( &amp;(tmp -&gt; priv) );
	}
	<FONT COLOR="#298C52">return</FONT> NULL;
};

<FONT COLOR=#0000FF>/* close the x25iface encapsulation protocol 
 */</FONT>
<FONT COLOR="#298C52">int</FONT> <A HREF="#isdn_x25iface_proto_close">isdn_x25iface_proto_close</A>(<FONT COLOR="#298C52">struct</FONT> concap_proto *cprot){

	<A HREF="#ix25_pdata_t">ix25_pdata_t</A> *tmp;
        <FONT COLOR="#298C52">int</FONT> ret = 0;
	ulong flags;

	<FONT COLOR="#298C52">if</FONT>( ! cprot ){
		printk( KERN_ERR <FONT COLOR="#FF0000">"isdn_x25iface_proto_close: "</FONT>
			<FONT COLOR="#FF0000">"invalid concap_proto pointer\n"</FONT> );
		<FONT COLOR="#298C52">return</FONT> -1;
	}
	<A HREF="isdn_x25iface.h.shtml#IX25DEBUG">IX25DEBUG</A>( <FONT COLOR="#FF0000">"isdn_x25iface_proto_close %s \n"</FONT>, <A HREF="#MY_DEVNAME">MY_DEVNAME</A>(cprot -&gt; net_dev) );
	save_flags(flags);
	<A HREF="kdebug.h.shtml#cli">cli</A>();  <FONT COLOR=#0000FF>/* avoid races with incoming events calling pops methods while
		 cprot members are inconsistent */</FONT>  
	cprot -&gt; dops    = NULL;
	cprot -&gt; net_dev = NULL;
	tmp = cprot -&gt; proto_data;
	<FONT COLOR="#298C52">if</FONT>( <A HREF="#pdata_is_bad">pdata_is_bad</A>( tmp ) ){
		ret = -1;
	} <FONT COLOR="#298C52">else</FONT> {
		tmp -&gt; state = WAN_UNCONFIGURED;
	}
	<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);

	<FONT COLOR="#298C52">return</FONT> ret;
}

<FONT COLOR=#0000FF>/* Delete the x25iface encapsulation protocol instance
 */</FONT>
<FONT COLOR="#298C52">void</FONT> <A HREF="#isdn_x25iface_proto_del">isdn_x25iface_proto_del</A>(<FONT COLOR="#298C52">struct</FONT> concap_proto *cprot){

	<A HREF="#ix25_pdata_t">ix25_pdata_t</A> * tmp;
 
	<A HREF="isdn_x25iface.h.shtml#IX25DEBUG">IX25DEBUG</A>( <FONT COLOR="#FF0000">"isdn_x25iface_proto_del \n"</FONT> );
	<FONT COLOR="#298C52">if</FONT>( ! cprot ){
		printk( KERN_ERR <FONT COLOR="#FF0000">"isdn_x25iface_proto_del: "</FONT>
			<FONT COLOR="#FF0000">"concap_proto pointer is NULL\n"</FONT> );
		<FONT COLOR="#298C52">return</FONT>;
	}
	tmp = cprot -&gt; proto_data;
	<FONT COLOR="#298C52">if</FONT>( tmp == NULL ){ 
		printk( KERN_ERR <FONT COLOR="#FF0000">"isdn_x25iface_proto_del: inconsistent "</FONT>
			<FONT COLOR="#FF0000">"proto_data pointer (maybe already deleted?)\n"</FONT>); 
		<FONT COLOR="#298C52">return</FONT>;
	}
	<FONT COLOR=#0000FF>/* close if the protocol is still open */</FONT>
	<FONT COLOR="#298C52">if</FONT>( cprot -&gt; dops ) <A HREF="#isdn_x25iface_proto_close">isdn_x25iface_proto_close</A>(cprot);
	<FONT COLOR=#0000FF>/* freeing the storage should be sufficient now. But some additional
	   settings might help to catch wild pointer bugs */</FONT>
	tmp -&gt; magic = 0;
	cprot -&gt; proto_data = NULL;

	kfree( tmp );
	<FONT COLOR="#298C52">return</FONT>;
}

<FONT COLOR=#0000FF>/* (re-)initialize the data structures for x25iface encapsulation
 */</FONT>
<FONT COLOR="#298C52">int</FONT> <A HREF="#isdn_x25iface_proto_restart">isdn_x25iface_proto_restart</A>(<FONT COLOR="#298C52">struct</FONT> concap_proto *cprot,
				<FONT COLOR="#298C52">struct</FONT> device *ndev, 
				<FONT COLOR="#298C52">struct</FONT> concap_device_ops *dops)
{
	<A HREF="#ix25_pdata_t">ix25_pdata_t</A> * pda = cprot -&gt; proto_data ;
	ulong flags;

	<A HREF="isdn_x25iface.h.shtml#IX25DEBUG">IX25DEBUG</A>( <FONT COLOR="#FF0000">"isdn_x25iface_proto_restart %s \n"</FONT>, <A HREF="#MY_DEVNAME">MY_DEVNAME</A>(ndev) );

	<FONT COLOR="#298C52">if</FONT> ( <A HREF="#pdata_is_bad">pdata_is_bad</A>( pda ) ) <FONT COLOR="#298C52">return</FONT> -1;

	<FONT COLOR="#298C52">if</FONT>( !( dops  &amp;&amp; dops -&gt; data_req &amp;&amp; dops -&gt; connect_req 
	       &amp;&amp; dops -&gt; disconn_req )  ){
		printk( KERN_WARNING <FONT COLOR="#FF0000">"isdn_x25iface_restart: required dops"</FONT>
			<FONT COLOR="#FF0000">" missing\n"</FONT> );
		<A HREF="#isdn_x25iface_proto_close">isdn_x25iface_proto_close</A>(cprot);
		<FONT COLOR="#298C52">return</FONT> -1;
	}
	save_flags(flags);
	<A HREF="kdebug.h.shtml#cli">cli</A>();  <FONT COLOR=#0000FF>/* avoid races with incoming events calling pops methods while
		 cprot members are inconsistent */</FONT>  
	cprot -&gt; net_dev = ndev;
	cprot -&gt; pops = &amp;ix25_pops;
	cprot -&gt; dops = dops;
	pda -&gt; state = WAN_DISCONNECTED;
	<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
	<FONT COLOR="#298C52">return</FONT> 0;
}

<FONT COLOR=#0000FF>/* deliver a dl_data frame received from i4l HL driver to the network layer 
 */</FONT>
<FONT COLOR="#298C52">int</FONT> <A HREF="#isdn_x25iface_receive">isdn_x25iface_receive</A>(<FONT COLOR="#298C52">struct</FONT> concap_proto *cprot, <FONT COLOR="#298C52">struct</FONT> sk_buff *skb)
{
  	<A HREF="isdn_x25iface.h.shtml#IX25DEBUG">IX25DEBUG</A>( <FONT COLOR="#FF0000">"isdn_x25iface_receive %s \n"</FONT>, <A HREF="#MY_DEVNAME">MY_DEVNAME</A>(cprot-&gt;net_dev) );
	<FONT COLOR="#298C52">if</FONT> ( ( (<A HREF="#ix25_pdata_t">ix25_pdata_t</A>*) (cprot-&gt;proto_data) ) 
	     -&gt; state == WAN_CONNECTED ){
		skb -&gt; dev = cprot -&gt; net_dev;
		skb -&gt; protocol = htons(ETH_P_X25);
		skb -&gt; pkt_type = PACKET_HOST;
		<FONT COLOR="#298C52">if</FONT>( skb_push(skb, 1)){
			skb -&gt; data[0]=0x00;
			skb -&gt; mac.raw = skb -&gt; data;
			netif_rx(skb);
			<FONT COLOR="#298C52">return</FONT> 0;
		}
	}
	printk(KERN_WARNING <FONT COLOR="#FF0000">"isdn_x25iface_receive %s: not connected, skb dropped\n"</FONT>, <A HREF="#MY_DEVNAME">MY_DEVNAME</A>(cprot-&gt;net_dev) );
	dev_kfree_skb(skb);
	<FONT COLOR="#298C52">return</FONT> -1;
}

<FONT COLOR=#0000FF>/* a connection set up is indicated by lower layer 
 */</FONT>
<FONT COLOR="#298C52">int</FONT> <A HREF="#isdn_x25iface_connect_ind">isdn_x25iface_connect_ind</A>(<FONT COLOR="#298C52">struct</FONT> concap_proto *cprot)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff * skb = dev_alloc_skb(1);
	<FONT COLOR="#298C52">enum</FONT> wan_states *state_p 
	  = &amp;( ( (<A HREF="#ix25_pdata_t">ix25_pdata_t</A>*) (cprot-&gt;proto_data) ) -&gt; state);
	<A HREF="isdn_x25iface.h.shtml#IX25DEBUG">IX25DEBUG</A>( <FONT COLOR="#FF0000">"isdn_x25iface_connect_ind %s \n"</FONT>
		   , <A HREF="#MY_DEVNAME">MY_DEVNAME</A>(cprot-&gt;net_dev) );
	<FONT COLOR="#298C52">if</FONT>( *state_p == WAN_UNCONFIGURED ){ 
		printk(KERN_WARNING 
		       <FONT COLOR="#FF0000">"isdn_x25iface_connect_ind while unconfigured %s\n"</FONT>
		       , <A HREF="#MY_DEVNAME">MY_DEVNAME</A>(cprot-&gt;net_dev) );
		<FONT COLOR="#298C52">return</FONT> -1;
	}
	*state_p = WAN_CONNECTED;
	<FONT COLOR="#298C52">if</FONT>( skb ){
		*( skb_put(skb, 1) ) = 0x01;
		skb -&gt; mac.raw = skb -&gt; data;
		skb -&gt; dev  = cprot -&gt; net_dev;
		skb -&gt; protocol = htons(ETH_P_X25);
		skb -&gt; pkt_type = PACKET_HOST;
		netif_rx(skb);
		<FONT COLOR="#298C52">return</FONT> 0;
	} <FONT COLOR="#298C52">else</FONT> {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"isdn_x25iface_connect_ind: "</FONT>
		       <FONT COLOR="#FF0000">" out of memory -- disconnecting\n"</FONT>);
		cprot -&gt; dops -&gt; disconn_req(cprot);
		<FONT COLOR="#298C52">return</FONT> -1;
	}
}
	
<FONT COLOR=#0000FF>/* a disconnect is indicated by lower layer 
 */</FONT>
<FONT COLOR="#298C52">int</FONT> <A HREF="#isdn_x25iface_disconn_ind">isdn_x25iface_disconn_ind</A>(<FONT COLOR="#298C52">struct</FONT> concap_proto *cprot)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;
	<FONT COLOR="#298C52">enum</FONT> wan_states *state_p 
	  = &amp;( ( (<A HREF="#ix25_pdata_t">ix25_pdata_t</A>*) (cprot-&gt;proto_data) ) -&gt; state);
	<A HREF="isdn_x25iface.h.shtml#IX25DEBUG">IX25DEBUG</A>( <FONT COLOR="#FF0000">"isdn_x25iface_disconn_ind %s \n"</FONT>, <A HREF="#MY_DEVNAME">MY_DEVNAME</A>(cprot -&gt; net_dev) );
	<FONT COLOR="#298C52">if</FONT>( *state_p == WAN_UNCONFIGURED ){ 
		printk(KERN_WARNING 
		       <FONT COLOR="#FF0000">"isdn_x25iface_disconn_ind while unconfigured\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT> -1;
	}
	<FONT COLOR="#298C52">if</FONT>(! cprot -&gt; net_dev) <FONT COLOR="#298C52">return</FONT> -1;
	*state_p = WAN_DISCONNECTED;
	skb = dev_alloc_skb(1);
	<FONT COLOR="#298C52">if</FONT>( skb ){
		*( skb_put(skb, 1) ) = 0x02;
		skb -&gt; mac.raw = skb -&gt; data;
		skb -&gt; dev  = cprot -&gt; net_dev;
		skb -&gt; protocol = htons(ETH_P_X25);
		skb -&gt; pkt_type = PACKET_HOST;
		netif_rx(skb);
		<FONT COLOR="#298C52">return</FONT> 0;
	} <FONT COLOR="#298C52">else</FONT> {
		printk(KERN_WARNING <FONT COLOR="#FF0000">"isdn_x25iface_disconn_ind:"</FONT>
		       <FONT COLOR="#FF0000">" out of memory\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT> -1;
	}
}

<FONT COLOR=#0000FF>/* process a frame handed over to us from linux network layer. First byte
   semantics as defined in ../../Documentation/networking/x25-iface.txt 
   */</FONT>
<FONT COLOR="#298C52">int</FONT> <A HREF="#isdn_x25iface_xmit">isdn_x25iface_xmit</A>(<FONT COLOR="#298C52">struct</FONT> concap_proto *cprot, <FONT COLOR="#298C52">struct</FONT> sk_buff *skb)
{
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">char</FONT> firstbyte = skb-&gt;data[0];
	<FONT COLOR="#298C52">unsigned</FONT> *state = 
		&amp;( ( (<A HREF="#ix25_pdata_t">ix25_pdata_t</A>*) (cprot -&gt; proto_data) ) -&gt; state  );
	<FONT COLOR="#298C52">int</FONT> ret = 0;
	<A HREF="isdn_x25iface.h.shtml#IX25DEBUG">IX25DEBUG</A>( <FONT COLOR="#FF0000">"isdn_x25iface_xmit: %s first=%x state=%d \n"</FONT>, <A HREF="#MY_DEVNAME">MY_DEVNAME</A>(cprot -&gt; net_dev), firstbyte, *state );
	<FONT COLOR="#298C52">switch</FONT> ( firstbyte ){
	<FONT COLOR="#298C52">case</FONT> 0x00: <FONT COLOR=#0000FF>/* dl_data request */</FONT>
		<FONT COLOR="#298C52">if</FONT>( *state == WAN_CONNECTED ){
			skb_pull(skb, 1);
			cprot -&gt; net_dev -&gt; trans_start = jiffies;
			ret = ( cprot -&gt; dops -&gt; data_req(cprot, skb) );
			<FONT COLOR=#0000FF>/* prepare for future retransmissions */</FONT>
			<FONT COLOR="#298C52">if</FONT>( ret ) skb_push(skb,1);
			<FONT COLOR="#298C52">return</FONT> ret;
		}
		<A HREF="#illegal_state_warn">illegal_state_warn</A>( *state, firstbyte ); 
		<FONT COLOR="#298C52">break</FONT>;
	<FONT COLOR="#298C52">case</FONT> 0x01: <FONT COLOR=#0000FF>/* dl_connect request */</FONT>
		<FONT COLOR="#298C52">if</FONT>( *state == WAN_DISCONNECTED ){
			*state = WAN_CONNECTING;
		        cprot -&gt; dops -&gt; connect_req(cprot);
		} <FONT COLOR="#298C52">else</FONT> {
			<A HREF="#illegal_state_warn">illegal_state_warn</A>( *state, firstbyte );
		}
		<FONT COLOR="#298C52">break</FONT>;
	<FONT COLOR="#298C52">case</FONT> 0x02: <FONT COLOR=#0000FF>/* dl_disconnect request */</FONT>
		<FONT COLOR="#298C52">switch</FONT> ( *state ){
		<FONT COLOR="#298C52">case</FONT> WAN_DISCONNECTED: 
			<FONT COLOR=#0000FF>/* Should not happen. However, give upper layer a
			   chance to recover from inconstistency  but don't
			   trust the lower layer sending the disconn_confirm
			   when already disconnected */</FONT>
			printk(KERN_WARNING <FONT COLOR="#FF0000">"isdn_x25iface_xmit: disconnect "</FONT>
			       <FONT COLOR="#FF0000">" requested while disconnected\n"</FONT> );
			<A HREF="#isdn_x25iface_disconn_ind">isdn_x25iface_disconn_ind</A>(cprot);
			<FONT COLOR="#298C52">break</FONT>; <FONT COLOR=#0000FF>/* prevent infinite loops */</FONT>
		<FONT COLOR="#298C52">case</FONT> WAN_CONNECTING:
		<FONT COLOR="#298C52">case</FONT> WAN_CONNECTED:
			*state = WAN_DISCONNECTED;
			cprot -&gt; dops -&gt; disconn_req(cprot);
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">default</FONT>:
			<A HREF="#illegal_state_warn">illegal_state_warn</A>( *state, firstbyte );
		}
		<FONT COLOR="#298C52">break</FONT>;
	<FONT COLOR="#298C52">case</FONT> 0x03: <FONT COLOR=#0000FF>/* changing lapb parameters requested */</FONT>
		printk(KERN_WARNING <FONT COLOR="#FF0000">"isdn_x25iface_xmit: setting of lapb"</FONT>
		       <FONT COLOR="#FF0000">" options not yet supported\n"</FONT>);
		<FONT COLOR="#298C52">break</FONT>;
	<FONT COLOR="#298C52">default</FONT>:
		printk(KERN_WARNING <FONT COLOR="#FF0000">"isdn_x25iface_xmit: frame with illegal"</FONT>
		       <FONT COLOR="#FF0000">" first byte %x ignored:\n"</FONT>, firstbyte);
	}
	dev_kfree_skb(skb);
	<FONT COLOR="#298C52">return</FONT> 0;
}
</BODY>

</HTML>
