<HTML>

<!-- Generated by c2html-1.0, Copyright 1998 by Dave Whittington -->
<HEAD>
<TITLE>isdn_audio.c</TITLE>
<!--#include virtual="/ssi/js.shtml" -->
<!--#include virtual="/ssi/buttondefs.shtml" -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<TABLE WIDTH="100%">
<TR>
<TD ALIGN=LEFT WIDTH="90"><!--#include virtual="/ssi/b_home.shtml" --></TD>
<TD ALIGN=RIGHT WIDTH="90"><!--#include virtual="/ssi/b_index.shtml" --></TD>
</TR>
</TABLE>
<CENTER><H1>isdn_audio.c</H1></CENTER>

<HR>
<PRE>
<FONT COLOR=#0000FF>/* $Id$

 * Linux ISDN subsystem, audio conversion and compression (linklevel).
 *
 * Copyright 1994,95,96 by Fritz Elfert (fritz@wuemaus.franken.de)
 * DTMF code (c) 1996 by Christian Mock (cm@kukuruz.ping.at)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 * $Log$
 * Revision 1.11  1998/04/10 10:35:10  paul
 * fixed (silly?) warnings from egcs on Alpha.
 *
 * Revision 1.10  1998/02/20 17:09:40  fritz
 * Changes for recent kernels.
 *
 * Revision 1.9  1997/10/01 09:20:25  fritz
 * Removed old compatibility stuff for 2.0.X kernels.
 * From now on, this code is for 2.1.X ONLY!
 * Old stuff is still in the separate branch.
 *
 * Revision 1.8  1997/03/02 14:29:16  fritz
 * More ttyI related cleanup.
 *
 * Revision 1.7  1997/02/03 22:44:11  fritz
 * Reformatted according CodingStyle
 *
 * Revision 1.6  1996/06/06 14:43:31  fritz
 * Changed to support DTMF decoding on audio playback also.
 *
 * Revision 1.5  1996/06/05 02:24:08  fritz
 * Added DTMF decoder for audio mode.
 *
 * Revision 1.4  1996/05/17 03:48:01  fritz
 * Removed some test statements.
 * Added revision string.
 *
 * Revision 1.3  1996/05/10 08:48:11  fritz
 * Corrected adpcm bugs.
 *
 * Revision 1.2  1996/04/30 09:31:17  fritz
 * General rewrite.
 *
 * Revision 1.1.1.1  1996/04/28 12:25:40  fritz
 * Taken under CVS control
 *
 */</FONT>

<FONT COLOR=#A521F7>#define</FONT> <A NAME="__NO_VERSION__">__NO_VERSION__</A>
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/module.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/isdn.h&gt;
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isdn_audio.h"</FONT>
<FONT COLOR=#A521F7>#include</FONT> <FONT COLOR="#FF0000">"isdn_common.h"</FONT>

<FONT COLOR="#298C52">char</FONT> *isdn_audio_revision = <FONT COLOR="#FF0000">"$Revision$"</FONT>;

<FONT COLOR=#0000FF>/*
 * Misc. lookup-tables.
 */</FONT>

<FONT COLOR=#0000FF>/* ulaw -&gt; signed 16-bit */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">short</FONT> isdn_audio_ulaw_to_s16[] =
{
	0x8284, 0x8684, 0x8a84, 0x8e84, 0x9284, 0x9684, 0x9a84, 0x9e84,
	0xa284, 0xa684, 0xaa84, 0xae84, 0xb284, 0xb684, 0xba84, 0xbe84,
	0xc184, 0xc384, 0xc584, 0xc784, 0xc984, 0xcb84, 0xcd84, 0xcf84,
	0xd184, 0xd384, 0xd584, 0xd784, 0xd984, 0xdb84, 0xdd84, 0xdf84,
	0xe104, 0xe204, 0xe304, 0xe404, 0xe504, 0xe604, 0xe704, 0xe804,
	0xe904, 0xea04, 0xeb04, 0xec04, 0xed04, 0xee04, 0xef04, 0xf004,
	0xf0c4, 0xf144, 0xf1c4, 0xf244, 0xf2c4, 0xf344, 0xf3c4, 0xf444,
	0xf4c4, 0xf544, 0xf5c4, 0xf644, 0xf6c4, 0xf744, 0xf7c4, 0xf844,
	0xf8a4, 0xf8e4, 0xf924, 0xf964, 0xf9a4, 0xf9e4, 0xfa24, 0xfa64,
	0xfaa4, 0xfae4, 0xfb24, 0xfb64, 0xfba4, 0xfbe4, 0xfc24, 0xfc64,
	0xfc94, 0xfcb4, 0xfcd4, 0xfcf4, 0xfd14, 0xfd34, 0xfd54, 0xfd74,
	0xfd94, 0xfdb4, 0xfdd4, 0xfdf4, 0xfe14, 0xfe34, 0xfe54, 0xfe74,
	0xfe8c, 0xfe9c, 0xfeac, 0xfebc, 0xfecc, 0xfedc, 0xfeec, 0xfefc,
	0xff0c, 0xff1c, 0xff2c, 0xff3c, 0xff4c, 0xff5c, 0xff6c, 0xff7c,
	0xff88, 0xff90, 0xff98, 0xffa0, 0xffa8, 0xffb0, 0xffb8, 0xffc0,
	0xffc8, 0xffd0, 0xffd8, 0xffe0, 0xffe8, 0xfff0, 0xfff8, 0x0000,
	0x7d7c, 0x797c, 0x757c, 0x717c, 0x6d7c, 0x697c, 0x657c, 0x617c,
	0x5d7c, 0x597c, 0x557c, 0x517c, 0x4d7c, 0x497c, 0x457c, 0x417c,
	0x3e7c, 0x3c7c, 0x3a7c, 0x387c, 0x367c, 0x347c, 0x327c, 0x307c,
	0x2e7c, 0x2c7c, 0x2a7c, 0x287c, 0x267c, 0x247c, 0x227c, 0x207c,
	0x1efc, 0x1dfc, 0x1cfc, 0x1bfc, 0x1afc, 0x19fc, 0x18fc, 0x17fc,
	0x16fc, 0x15fc, 0x14fc, 0x13fc, 0x12fc, 0x11fc, 0x10fc, 0x0ffc,
	0x0f3c, 0x0ebc, 0x0e3c, 0x0dbc, 0x0d3c, 0x0cbc, 0x0c3c, 0x0bbc,
	0x0b3c, 0x0abc, 0x0a3c, 0x09bc, 0x093c, 0x08bc, 0x083c, 0x07bc,
	0x075c, 0x071c, 0x06dc, 0x069c, 0x065c, 0x061c, 0x05dc, 0x059c,
	0x055c, 0x051c, 0x04dc, 0x049c, 0x045c, 0x041c, 0x03dc, 0x039c,
	0x036c, 0x034c, 0x032c, 0x030c, 0x02ec, 0x02cc, 0x02ac, 0x028c,
	0x026c, 0x024c, 0x022c, 0x020c, 0x01ec, 0x01cc, 0x01ac, 0x018c,
	0x0174, 0x0164, 0x0154, 0x0144, 0x0134, 0x0124, 0x0114, 0x0104,
	0x00f4, 0x00e4, 0x00d4, 0x00c4, 0x00b4, 0x00a4, 0x0094, 0x0084,
	0x0078, 0x0070, 0x0068, 0x0060, 0x0058, 0x0050, 0x0048, 0x0040,
	0x0038, 0x0030, 0x0028, 0x0020, 0x0018, 0x0010, 0x0008, 0x0000
};

<FONT COLOR=#0000FF>/* alaw -&gt; signed 16-bit */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">short</FONT> isdn_audio_alaw_to_s16[] =
{
	0x13fc, 0xec04, 0x0144, 0xfebc, 0x517c, 0xae84, 0x051c, 0xfae4,
	0x0a3c, 0xf5c4, 0x0048, 0xffb8, 0x287c, 0xd784, 0x028c, 0xfd74,
	0x1bfc, 0xe404, 0x01cc, 0xfe34, 0x717c, 0x8e84, 0x071c, 0xf8e4,
	0x0e3c, 0xf1c4, 0x00c4, 0xff3c, 0x387c, 0xc784, 0x039c, 0xfc64,
	0x0ffc, 0xf004, 0x0104, 0xfefc, 0x417c, 0xbe84, 0x041c, 0xfbe4,
	0x083c, 0xf7c4, 0x0008, 0xfff8, 0x207c, 0xdf84, 0x020c, 0xfdf4,
	0x17fc, 0xe804, 0x018c, 0xfe74, 0x617c, 0x9e84, 0x061c, 0xf9e4,
	0x0c3c, 0xf3c4, 0x0084, 0xff7c, 0x307c, 0xcf84, 0x030c, 0xfcf4,
	0x15fc, 0xea04, 0x0164, 0xfe9c, 0x597c, 0xa684, 0x059c, 0xfa64,
	0x0b3c, 0xf4c4, 0x0068, 0xff98, 0x2c7c, 0xd384, 0x02cc, 0xfd34,
	0x1dfc, 0xe204, 0x01ec, 0xfe14, 0x797c, 0x8684, 0x07bc, 0xf844,
	0x0f3c, 0xf0c4, 0x00e4, 0xff1c, 0x3c7c, 0xc384, 0x03dc, 0xfc24,
	0x11fc, 0xee04, 0x0124, 0xfedc, 0x497c, 0xb684, 0x049c, 0xfb64,
	0x093c, 0xf6c4, 0x0028, 0xffd8, 0x247c, 0xdb84, 0x024c, 0xfdb4,
	0x19fc, 0xe604, 0x01ac, 0xfe54, 0x697c, 0x9684, 0x069c, 0xf964,
	0x0d3c, 0xf2c4, 0x00a4, 0xff5c, 0x347c, 0xcb84, 0x034c, 0xfcb4,
	0x12fc, 0xed04, 0x0134, 0xfecc, 0x4d7c, 0xb284, 0x04dc, 0xfb24,
	0x09bc, 0xf644, 0x0038, 0xffc8, 0x267c, 0xd984, 0x026c, 0xfd94,
	0x1afc, 0xe504, 0x01ac, 0xfe54, 0x6d7c, 0x9284, 0x06dc, 0xf924,
	0x0dbc, 0xf244, 0x00b4, 0xff4c, 0x367c, 0xc984, 0x036c, 0xfc94,
	0x0f3c, 0xf0c4, 0x00f4, 0xff0c, 0x3e7c, 0xc184, 0x03dc, 0xfc24,
	0x07bc, 0xf844, 0x0008, 0xfff8, 0x1efc, 0xe104, 0x01ec, 0xfe14,
	0x16fc, 0xe904, 0x0174, 0xfe8c, 0x5d7c, 0xa284, 0x05dc, 0xfa24,
	0x0bbc, 0xf444, 0x0078, 0xff88, 0x2e7c, 0xd184, 0x02ec, 0xfd14,
	0x14fc, 0xeb04, 0x0154, 0xfeac, 0x557c, 0xaa84, 0x055c, 0xfaa4,
	0x0abc, 0xf544, 0x0058, 0xffa8, 0x2a7c, 0xd584, 0x02ac, 0xfd54,
	0x1cfc, 0xe304, 0x01cc, 0xfe34, 0x757c, 0x8a84, 0x075c, 0xf8a4,
	0x0ebc, 0xf144, 0x00d4, 0xff2c, 0x3a7c, 0xc584, 0x039c, 0xfc64,
	0x10fc, 0xef04, 0x0114, 0xfeec, 0x457c, 0xba84, 0x045c, 0xfba4,
	0x08bc, 0xf744, 0x0018, 0xffe8, 0x227c, 0xdd84, 0x022c, 0xfdd4,
	0x18fc, 0xe704, 0x018c, 0xfe74, 0x657c, 0x9a84, 0x065c, 0xf9a4,
	0x0cbc, 0xf344, 0x0094, 0xff6c, 0x327c, 0xcd84, 0x032c, 0xfcd4
};

<FONT COLOR=#0000FF>/* alaw -&gt; ulaw */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">char</FONT> isdn_audio_alaw_to_ulaw[] =
{
	0xab, 0x2b, 0xe3, 0x63, 0x8b, 0x0b, 0xc9, 0x49,
	0xba, 0x3a, 0xf6, 0x76, 0x9b, 0x1b, 0xd7, 0x57,
	0xa3, 0x23, 0xdd, 0x5d, 0x83, 0x03, 0xc1, 0x41,
	0xb2, 0x32, 0xeb, 0x6b, 0x93, 0x13, 0xcf, 0x4f,
	0xaf, 0x2f, 0xe7, 0x67, 0x8f, 0x0f, 0xcd, 0x4d,
	0xbe, 0x3e, 0xfe, 0x7e, 0x9f, 0x1f, 0xdb, 0x5b,
	0xa7, 0x27, 0xdf, 0x5f, 0x87, 0x07, 0xc5, 0x45,
	0xb6, 0x36, 0xef, 0x6f, 0x97, 0x17, 0xd3, 0x53,
	0xa9, 0x29, 0xe1, 0x61, 0x89, 0x09, 0xc7, 0x47,
	0xb8, 0x38, 0xf2, 0x72, 0x99, 0x19, 0xd5, 0x55,
	0xa1, 0x21, 0xdc, 0x5c, 0x81, 0x01, 0xbf, 0x3f,
	0xb0, 0x30, 0xe9, 0x69, 0x91, 0x11, 0xce, 0x4e,
	0xad, 0x2d, 0xe5, 0x65, 0x8d, 0x0d, 0xcb, 0x4b,
	0xbc, 0x3c, 0xfa, 0x7a, 0x9d, 0x1d, 0xd9, 0x59,
	0xa5, 0x25, 0xde, 0x5e, 0x85, 0x05, 0xc3, 0x43,
	0xb4, 0x34, 0xed, 0x6d, 0x95, 0x15, 0xd1, 0x51,
	0xac, 0x2c, 0xe4, 0x64, 0x8c, 0x0c, 0xca, 0x4a,
	0xbb, 0x3b, 0xf8, 0x78, 0x9c, 0x1c, 0xd8, 0x58,
	0xa4, 0x24, 0xde, 0x5e, 0x84, 0x04, 0xc2, 0x42,
	0xb3, 0x33, 0xec, 0x6c, 0x94, 0x14, 0xd0, 0x50,
	0xb0, 0x30, 0xe8, 0x68, 0x90, 0x10, 0xce, 0x4e,
	0xbf, 0x3f, 0xfe, 0x7e, 0xa0, 0x20, 0xdc, 0x5c,
	0xa8, 0x28, 0xe0, 0x60, 0x88, 0x08, 0xc6, 0x46,
	0xb7, 0x37, 0xf0, 0x70, 0x98, 0x18, 0xd4, 0x54,
	0xaa, 0x2a, 0xe2, 0x62, 0x8a, 0x0a, 0xc8, 0x48,
	0xb9, 0x39, 0xf4, 0x74, 0x9a, 0x1a, 0xd6, 0x56,
	0xa2, 0x22, 0xdd, 0x5d, 0x82, 0x02, 0xc0, 0x40,
	0xb1, 0x31, 0xea, 0x6a, 0x92, 0x12, 0xcf, 0x4f,
	0xae, 0x2e, 0xe6, 0x66, 0x8e, 0x0e, 0xcc, 0x4c,
	0xbd, 0x3d, 0xfc, 0x7c, 0x9e, 0x1e, 0xda, 0x5a,
	0xa6, 0x26, 0xdf, 0x5f, 0x86, 0x06, 0xc4, 0x44,
	0xb5, 0x35, 0xee, 0x6e, 0x96, 0x16, 0xd2, 0x52
};

<FONT COLOR=#0000FF>/* ulaw -&gt; alaw */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">char</FONT> isdn_audio_ulaw_to_alaw[] =
{
	0xab, 0x55, 0xd5, 0x15, 0x95, 0x75, 0xf5, 0x35,
	0xb5, 0x45, 0xc5, 0x05, 0x85, 0x65, 0xe5, 0x25,
	0xa5, 0x5d, 0xdd, 0x1d, 0x9d, 0x7d, 0xfd, 0x3d,
	0xbd, 0x4d, 0xcd, 0x0d, 0x8d, 0x6d, 0xed, 0x2d,
	0xad, 0x51, 0xd1, 0x11, 0x91, 0x71, 0xf1, 0x31,
	0xb1, 0x41, 0xc1, 0x01, 0x81, 0x61, 0xe1, 0x21,
	0x59, 0xd9, 0x19, 0x99, 0x79, 0xf9, 0x39, 0xb9,
	0x49, 0xc9, 0x09, 0x89, 0x69, 0xe9, 0x29, 0xa9,
	0xd7, 0x17, 0x97, 0x77, 0xf7, 0x37, 0xb7, 0x47,
	0xc7, 0x07, 0x87, 0x67, 0xe7, 0x27, 0xa7, 0xdf,
	0x9f, 0x7f, 0xff, 0x3f, 0xbf, 0x4f, 0xcf, 0x0f,
	0x8f, 0x6f, 0xef, 0x2f, 0x53, 0x13, 0x73, 0x33,
	0xb3, 0x43, 0xc3, 0x03, 0x83, 0x63, 0xe3, 0x23,
	0xa3, 0x5b, 0xdb, 0x1b, 0x9b, 0x7b, 0xfb, 0x3b,
	0xbb, 0xbb, 0x4b, 0x4b, 0xcb, 0xcb, 0x0b, 0x0b,
	0x8b, 0x8b, 0x6b, 0x6b, 0xeb, 0xeb, 0x2b, 0x2b,
	0xab, 0x54, 0xd4, 0x14, 0x94, 0x74, 0xf4, 0x34,
	0xb4, 0x44, 0xc4, 0x04, 0x84, 0x64, 0xe4, 0x24,
	0xa4, 0x5c, 0xdc, 0x1c, 0x9c, 0x7c, 0xfc, 0x3c,
	0xbc, 0x4c, 0xcc, 0x0c, 0x8c, 0x6c, 0xec, 0x2c,
	0xac, 0x50, 0xd0, 0x10, 0x90, 0x70, 0xf0, 0x30,
	0xb0, 0x40, 0xc0, 0x00, 0x80, 0x60, 0xe0, 0x20,
	0x58, 0xd8, 0x18, 0x98, 0x78, 0xf8, 0x38, 0xb8,
	0x48, 0xc8, 0x08, 0x88, 0x68, 0xe8, 0x28, 0xa8,
	0xd6, 0x16, 0x96, 0x76, 0xf6, 0x36, 0xb6, 0x46,
	0xc6, 0x06, 0x86, 0x66, 0xe6, 0x26, 0xa6, 0xde,
	0x9e, 0x7e, 0xfe, 0x3e, 0xbe, 0x4e, 0xce, 0x0e,
	0x8e, 0x6e, 0xee, 0x2e, 0x52, 0x12, 0x72, 0x32,
	0xb2, 0x42, 0xc2, 0x02, 0x82, 0x62, 0xe2, 0x22,
	0xa2, 0x5a, 0xda, 0x1a, 0x9a, 0x7a, 0xfa, 0x3a,
	0xba, 0xba, 0x4a, 0x4a, 0xca, 0xca, 0x0a, 0x0a,
	0x8a, 0x8a, 0x6a, 0x6a, 0xea, 0xea, 0x2a, 0x2a
};

<FONT COLOR=#A521F7>#define</FONT> <A NAME="NCOEFF">NCOEFF</A>           16     <FONT COLOR=#0000FF>/* number of frequencies to be analyzed       */</FONT>
<FONT COLOR=#A521F7>#define</FONT> <A NAME="DTMF_TRESH">DTMF_TRESH</A>    50000     <FONT COLOR=#0000FF>/* above this is dtmf                         */</FONT>
<FONT COLOR=#A521F7>#define</FONT> <A NAME="SILENCE_TRESH">SILENCE_TRESH</A>   100     <FONT COLOR=#0000FF>/* below this is silence                      */</FONT>
<FONT COLOR=#A521F7>#define</FONT> <A NAME="H2_TRESH">H2_TRESH</A>      10000     <FONT COLOR=#0000FF>/* 2nd harmonic                               */</FONT>
<FONT COLOR=#A521F7>#define</FONT> <A NAME="AMP_BITS">AMP_BITS</A>          9     <FONT COLOR=#0000FF>/* bits per sample, reduced to avoid overflow */</FONT>
<FONT COLOR=#A521F7>#define</FONT> <A NAME="LOGRP">LOGRP</A>             0
<FONT COLOR=#A521F7>#define</FONT> <A NAME="HIGRP">HIGRP</A>             1

<FONT COLOR="#298C52">typedef</FONT> <FONT COLOR="#298C52">struct</FONT> {
	<FONT COLOR="#298C52">int</FONT> grp;                <FONT COLOR=#0000FF>/* low/high group     */</FONT>
	<FONT COLOR="#298C52">int</FONT> k;                  <FONT COLOR=#0000FF>/* k                  */</FONT>
	<FONT COLOR="#298C52">int</FONT> k2;                 <FONT COLOR=#0000FF>/* k fuer 2. harmonic */</FONT>
} <A NAME="dtmf_t">dtmf_t</A>;

<FONT COLOR=#0000FF>/* For DTMF recognition:
 * 2 * cos(2 * PI * k / N) precalculated for all k
 */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> cos2pik[<A HREF="#NCOEFF">NCOEFF</A>] =
{
	55812, 29528, 53603, 24032, 51193, 14443, 48590, 6517,
	38113, -21204, 33057, -32186, 25889, -45081, 18332, -55279
};

<FONT COLOR="#298C52">static</FONT> <A HREF="#dtmf_t">dtmf_t</A> dtmf_tones[8] =
{
	{<A HREF="#LOGRP">LOGRP</A>, 0, 1},          <FONT COLOR=#0000FF>/*  697 Hz */</FONT>
	{<A HREF="#LOGRP">LOGRP</A>, 2, 3},          <FONT COLOR=#0000FF>/*  770 Hz */</FONT>
	{<A HREF="#LOGRP">LOGRP</A>, 4, 5},          <FONT COLOR=#0000FF>/*  852 Hz */</FONT>
	{<A HREF="#LOGRP">LOGRP</A>, 6, 7},          <FONT COLOR=#0000FF>/*  941 Hz */</FONT>
	{<A HREF="#HIGRP">HIGRP</A>, 8, 9},          <FONT COLOR=#0000FF>/* 1209 Hz */</FONT>
	{<A HREF="#HIGRP">HIGRP</A>, 10, 11},        <FONT COLOR=#0000FF>/* 1336 Hz */</FONT>
	{<A HREF="#HIGRP">HIGRP</A>, 12, 13},        <FONT COLOR=#0000FF>/* 1477 Hz */</FONT>
	{<A HREF="#HIGRP">HIGRP</A>, 14, 15}         <FONT COLOR=#0000FF>/* 1633 Hz */</FONT>
};

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">char</FONT> dtmf_matrix[4][4] =
{
	{<FONT COLOR="#FF0000">'1'</FONT>, <FONT COLOR="#FF0000">'2'</FONT>, <FONT COLOR="#FF0000">'3'</FONT>, <FONT COLOR="#FF0000">'A'</FONT>},
	{<FONT COLOR="#FF0000">'4'</FONT>, <FONT COLOR="#FF0000">'5'</FONT>, <FONT COLOR="#FF0000">'6'</FONT>, <FONT COLOR="#FF0000">'B'</FONT>},
	{<FONT COLOR="#FF0000">'7'</FONT>, <FONT COLOR="#FF0000">'8'</FONT>, <FONT COLOR="#FF0000">'9'</FONT>, <FONT COLOR="#FF0000">'C'</FONT>},
	{<FONT COLOR="#FF0000">'*'</FONT>, <FONT COLOR="#FF0000">'0'</FONT>, <FONT COLOR="#FF0000">'#'</FONT>, <FONT COLOR="#FF0000">'D'</FONT>}
};

<FONT COLOR=#A521F7>#if</FONT> ((CPU == 386) || (CPU == 486) || (CPU == 586))
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#isdn_audio_tlookup">isdn_audio_tlookup</A>(<FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">void</FONT> *table, <FONT COLOR="#298C52">void</FONT> *buff, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT> n)
{
	__asm__(<FONT COLOR="#FF0000">"cld\n"</FONT>
		<FONT COLOR="#FF0000">"1:\tlodsb\n\t"</FONT>
		<FONT COLOR="#FF0000">"xlatb\n\t"</FONT>
		<FONT COLOR="#FF0000">"stosb\n\t"</FONT>
		<FONT COLOR="#FF0000">"loop 1b\n\t"</FONT>
      : :  <FONT COLOR="#FF0000">"b"</FONT>((<FONT COLOR="#298C52">long</FONT>) table), <FONT COLOR="#FF0000">"c"</FONT>(n), <FONT COLOR="#FF0000">"D"</FONT>((<FONT COLOR="#298C52">long</FONT>) buff), <FONT COLOR="#FF0000">"S"</FONT>((<FONT COLOR="#298C52">long</FONT>) buff)
      :        <FONT COLOR="#FF0000">"bx"</FONT>, <FONT COLOR="#FF0000">"cx"</FONT>, <FONT COLOR="#FF0000">"di"</FONT>, <FONT COLOR="#FF0000">"si"</FONT>, <FONT COLOR="#FF0000">"ax"</FONT>);
}

<FONT COLOR=#A521F7>#else</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#isdn_audio_tlookup">isdn_audio_tlookup</A>(<FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *table, <FONT COLOR="#298C52">char</FONT> *buff, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT> n)
{
	<FONT COLOR="#298C52">while</FONT> (n--)
		*buff++ = table[*(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">char</FONT> *)buff];
}
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR="#298C52">void</FONT>
<A HREF="#isdn_audio_ulaw2alaw">isdn_audio_ulaw2alaw</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">char</FONT> *buff, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT> len)
{
	<A HREF="#isdn_audio_tlookup">isdn_audio_tlookup</A>(isdn_audio_ulaw_to_alaw, buff, len);
}

<FONT COLOR="#298C52">void</FONT>
<A HREF="#isdn_audio_alaw2ulaw">isdn_audio_alaw2ulaw</A>(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">char</FONT> *buff, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT> len)
{
	<A HREF="#isdn_audio_tlookup">isdn_audio_tlookup</A>(isdn_audio_alaw_to_ulaw, buff, len);
}

<FONT COLOR=#0000FF>/*
 * linear &lt;-&gt; adpcm conversion stuff
 * Most parts from the mgetty-package.
 * (C) by Gert Doering and Klaus Weidner
 * Used by permission of Gert Doering
 */</FONT>


<FONT COLOR=#A521F7>#define</FONT> <A NAME="ZEROTRAP">ZEROTRAP</A>                <FONT COLOR=#0000FF>/* turn on the trap as per the MIL-STD */</FONT>
<FONT COLOR=#A521F7>#undef</FONT> <A HREF="#ZEROTRAP">ZEROTRAP</A>
<FONT COLOR=#A521F7>#define</FONT> <A NAME="BIAS">BIAS</A> 0x84               <FONT COLOR=#0000FF>/* define the add-in bias for 16 bit samples */</FONT>
<FONT COLOR=#A521F7>#define</FONT> <A NAME="CLIP">CLIP</A> 32635

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">char</FONT>
<A NAME="isdn_audio_linear2ulaw">isdn_audio_linear2ulaw</A>(<FONT COLOR="#298C52">int</FONT> sample)
{
	<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> exp_lut[256] =
	{
		0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
		4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
		5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
		5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
		6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
		6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
		6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
		6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
	};
	<FONT COLOR="#298C52">int</FONT> sign,
	 exponent,
	 mantissa;
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">char</FONT> ulawbyte;

	<FONT COLOR=#0000FF>/* Get the sample into sign-magnitude. */</FONT>
	sign = (sample &gt;&gt; 8) &amp; 0x80;	<FONT COLOR=#0000FF>/* set aside the sign  */</FONT>
	<FONT COLOR="#298C52">if</FONT> (sign != 0)
		sample = -sample;	<FONT COLOR=#0000FF>/* get magnitude       */</FONT>
	<FONT COLOR="#298C52">if</FONT> (sample &gt; <A HREF="#CLIP">CLIP</A>)
		sample = <A HREF="#CLIP">CLIP</A>;  <FONT COLOR=#0000FF>/* clip the magnitude  */</FONT>

	<FONT COLOR=#0000FF>/* Convert from 16 bit linear to ulaw. */</FONT>
	sample = sample + <A HREF="#BIAS">BIAS</A>;
	exponent = exp_lut[(sample &gt;&gt; 7) &amp; 0xFF];
	mantissa = (sample &gt;&gt; (exponent + 3)) &amp; 0x0F;
	ulawbyte = ~(sign | (exponent &lt;&lt; 4) | mantissa);
<FONT COLOR=#A521F7>#ifdef</FONT> <A HREF="#ZEROTRAP">ZEROTRAP</A>
	<FONT COLOR=#0000FF>/* optional CCITT trap */</FONT>
	<FONT COLOR="#298C52">if</FONT> (ulawbyte == 0)
		ulawbyte = 0x02;
<FONT COLOR=#A521F7>#endif</FONT>
	<FONT COLOR="#298C52">return</FONT> (ulawbyte);
}


<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> Mx[3][8] =
{
	{0x3800, 0x5600, 0, 0, 0, 0, 0, 0},
	{0x399a, 0x3a9f, 0x4d14, 0x6607, 0, 0, 0, 0},
	{0x3556, 0x3556, 0x399A, 0x3A9F, 0x4200, 0x4D14, 0x6607, 0x6607},
};

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> bitmask[9] =
{
	0, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff
};

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT>
<A HREF="#isdn_audio_get_bits">isdn_audio_get_bits</A>(<A HREF="isdn_audio.h.shtml#adpcm_state">adpcm_state</A> * s, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">char</FONT> **in, <FONT COLOR="#298C52">int</FONT> *len)
{
	<FONT COLOR="#298C52">while</FONT> (s-&gt;nleft &lt; s-&gt;nbits) {
		<FONT COLOR="#298C52">int</FONT> d = *((*in)++);
		(*len)--;
		s-&gt;word = (s-&gt;word &lt;&lt; 8) | d;
		s-&gt;nleft += 8;
	}
	s-&gt;nleft -= s-&gt;nbits;
	<FONT COLOR="#298C52">return</FONT> (s-&gt;word &gt;&gt; s-&gt;nleft) &amp; bitmask[s-&gt;nbits];
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#isdn_audio_put_bits">isdn_audio_put_bits</A>(<FONT COLOR="#298C52">int</FONT> data, <FONT COLOR="#298C52">int</FONT> nbits, <A HREF="isdn_audio.h.shtml#adpcm_state">adpcm_state</A> * s,
		    <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">char</FONT> **out, <FONT COLOR="#298C52">int</FONT> *len)
{
	s-&gt;word = (s-&gt;word &lt;&lt; nbits) | (data &amp; bitmask[nbits]);
	s-&gt;nleft += nbits;
	<FONT COLOR="#298C52">while</FONT> (s-&gt;nleft &gt;= 8) {
		<FONT COLOR="#298C52">int</FONT> d = (s-&gt;word &gt;&gt; (s-&gt;nleft - 8));
		*(out[0]++) = d &amp; 255;
		(*len)++;
		s-&gt;nleft -= 8;
	}
}

<A HREF="isdn_audio.h.shtml#adpcm_state">adpcm_state</A> *
<A NAME="isdn_audio_adpcm_init">isdn_audio_adpcm_init</A>(<A HREF="isdn_audio.h.shtml#adpcm_state">adpcm_state</A> * s, <FONT COLOR="#298C52">int</FONT> nbits)
{
	<FONT COLOR="#298C52">if</FONT> (!s)
		s = (<A HREF="isdn_audio.h.shtml#adpcm_state">adpcm_state</A> *) kmalloc(<FONT COLOR="#298C52">sizeof</FONT>(<A HREF="isdn_audio.h.shtml#adpcm_state">adpcm_state</A>), GFP_ATOMIC);
	<FONT COLOR="#298C52">if</FONT> (s) {
		s-&gt;a = 0;
		s-&gt;d = 5;
		s-&gt;word = 0;
		s-&gt;nleft = 0;
		s-&gt;nbits = nbits;
	}
	<FONT COLOR="#298C52">return</FONT> s;
}

<A HREF="isdn_audio.h.shtml#dtmf_state">dtmf_state</A> *
<A NAME="isdn_audio_dtmf_init">isdn_audio_dtmf_init</A>(<A HREF="isdn_audio.h.shtml#dtmf_state">dtmf_state</A> * s)
{
	<FONT COLOR="#298C52">if</FONT> (!s)
		s = (<A HREF="isdn_audio.h.shtml#dtmf_state">dtmf_state</A> *) kmalloc(<FONT COLOR="#298C52">sizeof</FONT>(<A HREF="isdn_audio.h.shtml#dtmf_state">dtmf_state</A>), GFP_ATOMIC);
	<FONT COLOR="#298C52">if</FONT> (s) {
		s-&gt;idx = 0;
		s-&gt;last = <FONT COLOR="#FF0000">' '</FONT>;
	}
	<FONT COLOR="#298C52">return</FONT> s;
}

<FONT COLOR=#0000FF>/*
 * Decompression of adpcm data to a/u-law
 *
 */</FONT>

<FONT COLOR="#298C52">int</FONT>
<A HREF="#isdn_audio_adpcm2xlaw">isdn_audio_adpcm2xlaw</A>(<A HREF="isdn_audio.h.shtml#adpcm_state">adpcm_state</A> * s, <FONT COLOR="#298C52">int</FONT> fmt, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">char</FONT> *in,
		      <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">char</FONT> *out, <FONT COLOR="#298C52">int</FONT> len)
{
	<FONT COLOR="#298C52">int</FONT> a = s-&gt;a;
	<FONT COLOR="#298C52">int</FONT> d = s-&gt;d;
	<FONT COLOR="#298C52">int</FONT> nbits = s-&gt;nbits;
	<FONT COLOR="#298C52">int</FONT> olen = 0;

	<FONT COLOR="#298C52">while</FONT> (len) {
		<FONT COLOR="#298C52">int</FONT> e = <A HREF="#isdn_audio_get_bits">isdn_audio_get_bits</A>(s, &amp;in, &amp;len);
		<FONT COLOR="#298C52">int</FONT> sign;

		<FONT COLOR="#298C52">if</FONT> (nbits == 4 &amp;&amp; e == 0)
			d = 4;
		sign = (e &gt;&gt; (nbits - 1)) ? -1 : 1;
		e &amp;= bitmask[nbits - 1];
		a += sign * ((e &lt;&lt; 1) + 1) * d &gt;&gt; 1;
		<FONT COLOR="#298C52">if</FONT> (d &amp; 1)
			a++;
		<FONT COLOR="#298C52">if</FONT> (fmt)
			*out++ = isdn_audio_ulaw_to_alaw[
					 <A HREF="#isdn_audio_linear2ulaw">isdn_audio_linear2ulaw</A>(a &lt;&lt; 2)];
		<FONT COLOR="#298C52">else</FONT>
			*out++ = <A HREF="#isdn_audio_linear2ulaw">isdn_audio_linear2ulaw</A>(a &lt;&lt; 2);
		olen++;
		d = (d * Mx[nbits - 2][e] + 0x2000) &gt;&gt; 14;
		<FONT COLOR="#298C52">if</FONT> (d &lt; 5)
			d = 5;
	}
	s-&gt;a = a;
	s-&gt;d = d;
	<FONT COLOR="#298C52">return</FONT> olen;
}

<FONT COLOR="#298C52">int</FONT>
<A HREF="#isdn_audio_2adpcm_flush">isdn_audio_2adpcm_flush</A>(<A HREF="isdn_audio.h.shtml#adpcm_state">adpcm_state</A> * s, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">char</FONT> *out)
{
	<FONT COLOR="#298C52">int</FONT> olen = 0;

	<FONT COLOR="#298C52">if</FONT> (s-&gt;nleft)
		<A HREF="#isdn_audio_put_bits">isdn_audio_put_bits</A>(0, 8 - s-&gt;nleft, s, &amp;out, &amp;olen);
	<FONT COLOR="#298C52">return</FONT> olen;
}

<FONT COLOR="#298C52">int</FONT>
<A HREF="#isdn_audio_xlaw2adpcm">isdn_audio_xlaw2adpcm</A>(<A HREF="isdn_audio.h.shtml#adpcm_state">adpcm_state</A> * s, <FONT COLOR="#298C52">int</FONT> fmt, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">char</FONT> *in,
		      <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">char</FONT> *out, <FONT COLOR="#298C52">int</FONT> len)
{
	<FONT COLOR="#298C52">int</FONT> a = s-&gt;a;
	<FONT COLOR="#298C52">int</FONT> d = s-&gt;d;
	<FONT COLOR="#298C52">int</FONT> nbits = s-&gt;nbits;
	<FONT COLOR="#298C52">int</FONT> olen = 0;

	<FONT COLOR="#298C52">while</FONT> (len--) {
		<FONT COLOR="#298C52">int</FONT> e = 0,
		 nmax = 1 &lt;&lt; (nbits - 1);
		<FONT COLOR="#298C52">int</FONT> sign,
		 delta;

		<FONT COLOR="#298C52">if</FONT> (fmt)
			delta = (isdn_audio_alaw_to_s16[*in++] &gt;&gt; 2) - a;
		<FONT COLOR="#298C52">else</FONT>
			delta = (isdn_audio_ulaw_to_s16[*in++] &gt;&gt; 2) - a;
		<FONT COLOR="#298C52">if</FONT> (delta &lt; 0) {
			e = nmax;
			delta = -delta;
		}
		<FONT COLOR="#298C52">while</FONT> (--nmax &amp;&amp; delta &gt; d) {
			delta -= d;
			e++;
		}
		<FONT COLOR="#298C52">if</FONT> (nbits == 4 &amp;&amp; ((e &amp; 0x0f) == 0))
			e = 8;
		<A HREF="#isdn_audio_put_bits">isdn_audio_put_bits</A>(e, nbits, s, &amp;out, &amp;olen);
		sign = (e &gt;&gt; (nbits - 1)) ? -1 : 1;
		e &amp;= bitmask[nbits - 1];

		a += sign * ((e &lt;&lt; 1) + 1) * d &gt;&gt; 1;
		<FONT COLOR="#298C52">if</FONT> (d &amp; 1)
			a++;
		d = (d * Mx[nbits - 2][e] + 0x2000) &gt;&gt; 14;
		<FONT COLOR="#298C52">if</FONT> (d &lt; 5)
			d = 5;
	}
	s-&gt;a = a;
	s-&gt;d = d;
	<FONT COLOR="#298C52">return</FONT> olen;
}

<FONT COLOR=#0000FF>/*
 * Goertzel algorithm.
 * See http://ptolemy.eecs.berkeley.edu/~pino/Ptolemy/papers/96/dtmf_ict/
 * for more info.
 * Result is stored into an sk_buff and queued up for later
 * evaluation.
 */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT>
<A HREF="#isdn_audio_goertzel">isdn_audio_goertzel</A>(<FONT COLOR="#298C52">int</FONT> *sample, <A HREF="../includes/isdn.h.shtml#modem_info">modem_info</A> * info)
{
	<FONT COLOR="#298C52">int</FONT> sk,
	 sk1,
	 sk2;
	<FONT COLOR="#298C52">int</FONT> k,
	 n;
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;
	<FONT COLOR="#298C52">int</FONT> *result;

	skb = dev_alloc_skb(<FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">int</FONT>) * <A HREF="#NCOEFF">NCOEFF</A>);
	<FONT COLOR="#298C52">if</FONT> (!skb) {
		printk(KERN_WARNING
		  <FONT COLOR="#FF0000">"isdn_audio: Could not alloc DTMF result for ttyI%d\n"</FONT>,
		       info-&gt;line);
		<FONT COLOR="#298C52">return</FONT>;
	}
	result = (<FONT COLOR="#298C52">int</FONT> *) skb_put(skb, <FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">int</FONT>) * <A HREF="#NCOEFF">NCOEFF</A>);
	<FONT COLOR="#298C52">for</FONT> (k = 0; k &lt; <A HREF="#NCOEFF">NCOEFF</A>; k++) {
		sk = sk1 = sk2 = 0;
		<FONT COLOR="#298C52">for</FONT> (n = 0; n &lt; <A HREF="isdn_audio.h.shtml#DTMF_NPOINTS">DTMF_NPOINTS</A>; n++) {
			sk = sample[n] + ((cos2pik[k] * sk1) &gt;&gt; 15) - sk2;
			sk2 = sk1;
			sk1 = sk;
		}
		result[k] =
		    ((sk * sk) &gt;&gt; <A HREF="#AMP_BITS">AMP_BITS</A>) -
		    ((((cos2pik[k] * sk) &gt;&gt; 15) * sk2) &gt;&gt; <A HREF="#AMP_BITS">AMP_BITS</A>) +
		    ((sk2 * sk2) &gt;&gt; <A HREF="#AMP_BITS">AMP_BITS</A>);
	}
	skb_queue_tail(&amp;info-&gt;dtmf_queue, skb);
	<A HREF="isdn_common.c.shtml#isdn_timer_ctrl">isdn_timer_ctrl</A>(<A HREF="../includes/isdn.h.shtml#ISDN_TIMER_MODEMREAD">ISDN_TIMER_MODEMREAD</A>, 1);
}

<FONT COLOR="#298C52">void</FONT>
<A NAME="isdn_audio_eval_dtmf">isdn_audio_eval_dtmf</A>(<A HREF="../includes/isdn.h.shtml#modem_info">modem_info</A> * info)
{
	<FONT COLOR="#298C52">struct</FONT> sk_buff *skb;
	<FONT COLOR="#298C52">int</FONT> *result;
	<A HREF="isdn_audio.h.shtml#dtmf_state">dtmf_state</A> *s;
	<FONT COLOR="#298C52">int</FONT> silence;
	<FONT COLOR="#298C52">int</FONT> i;
	<FONT COLOR="#298C52">int</FONT> di;
	<FONT COLOR="#298C52">int</FONT> ch;
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT> flags;
	<FONT COLOR="#298C52">int</FONT> grp[2];
	<FONT COLOR="#298C52">char</FONT> what;
	<FONT COLOR="#298C52">char</FONT> *p;

	<FONT COLOR="#298C52">while</FONT> ((skb = skb_dequeue(&amp;info-&gt;dtmf_queue))) {
		result = (<FONT COLOR="#298C52">int</FONT> *) skb-&gt;data;
		s = info-&gt;<A HREF="isdn_audio.h.shtml#dtmf_state">dtmf_state</A>;
		grp[<A HREF="#LOGRP">LOGRP</A>] = grp[<A HREF="#HIGRP">HIGRP</A>] = -2;
		silence = 0;
		<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; 8; i++) {
			<FONT COLOR="#298C52">if</FONT> ((result[dtmf_tones[i].k] &gt; <A HREF="#DTMF_TRESH">DTMF_TRESH</A>) &amp;&amp;
			    (result[dtmf_tones[i].k2] &lt; <A HREF="#H2_TRESH">H2_TRESH</A>))
				grp[dtmf_tones[i].grp] = (grp[dtmf_tones[i].grp] == -2) ? i : -1;
			<FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> ((result[dtmf_tones[i].k] &lt; <A HREF="#SILENCE_TRESH">SILENCE_TRESH</A>) &amp;&amp;
			      (result[dtmf_tones[i].k2] &lt; <A HREF="#SILENCE_TRESH">SILENCE_TRESH</A>))
				silence++;
		}
		<FONT COLOR="#298C52">if</FONT> (silence == 8)
			what = <FONT COLOR="#FF0000">' '</FONT>;
		<FONT COLOR="#298C52">else</FONT> {
			<FONT COLOR="#298C52">if</FONT> ((grp[<A HREF="#LOGRP">LOGRP</A>] &gt;= 0) &amp;&amp; (grp[<A HREF="#HIGRP">HIGRP</A>] &gt;= 0)) {
				what = dtmf_matrix[grp[<A HREF="#LOGRP">LOGRP</A>]][grp[<A HREF="#HIGRP">HIGRP</A>] - 4];
				<FONT COLOR="#298C52">if</FONT> (s-&gt;last != <FONT COLOR="#FF0000">' '</FONT> &amp;&amp; s-&gt;last != <FONT COLOR="#FF0000">'.'</FONT>)
					s-&gt;last = what;	<FONT COLOR=#0000FF>/* min. 1 non-DTMF between DTMF */</FONT>
			} <FONT COLOR="#298C52">else</FONT>
				what = <FONT COLOR="#FF0000">'.'</FONT>;
		}
		<FONT COLOR="#298C52">if</FONT> ((what != s-&gt;last) &amp;&amp; (what != <FONT COLOR="#FF0000">' '</FONT>) &amp;&amp; (what != <FONT COLOR="#FF0000">'.'</FONT>)) {
			printk(KERN_DEBUG <FONT COLOR="#FF0000">"dtmf: tt='%c'\n"</FONT>, what);
			p = skb-&gt;data;
			*p++ = 0x10;
			*p = what;
			skb_trim(skb, 2);
			<FONT COLOR="#298C52">if</FONT> (skb_headroom(skb) &lt; <FONT COLOR="#298C52">sizeof</FONT>(<A HREF="../includes/isdn.h.shtml#isdn_audio_skb">isdn_audio_skb</A>)) {
				printk(KERN_WARNING
				       <FONT COLOR="#FF0000">"isdn_audio: insufficient skb_headroom, dropping\n"</FONT>);
				kfree_skb(skb);
				<FONT COLOR="#298C52">return</FONT>;
			}
			<A HREF="../includes/isdn.h.shtml#ISDN_AUDIO_SKB_DLECOUNT">ISDN_AUDIO_SKB_DLECOUNT</A>(skb) = 0;
			<A HREF="../includes/isdn.h.shtml#ISDN_AUDIO_SKB_LOCK">ISDN_AUDIO_SKB_LOCK</A>(skb) = 0;
			save_flags(flags);
			<A HREF="kdebug.h.shtml#cli">cli</A>();
			di = info-&gt;isdn_driver;
			ch = info-&gt;isdn_channel;
			__skb_queue_tail(&amp;dev-&gt;drv[di]-&gt;rpqueue[ch], skb);
			dev-&gt;drv[di]-&gt;rcvcount[ch] += 2;
			<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
			<FONT COLOR=#0000FF>/* Schedule dequeuing */</FONT>
			<FONT COLOR="#298C52">if</FONT> ((dev-&gt;modempoll) &amp;&amp; (info-&gt;rcvsched))
				<A HREF="isdn_common.c.shtml#isdn_timer_ctrl">isdn_timer_ctrl</A>(<A HREF="../includes/isdn.h.shtml#ISDN_TIMER_MODEMREAD">ISDN_TIMER_MODEMREAD</A>, 1);
			wake_up_interruptible(&amp;dev-&gt;drv[di]-&gt;rcv_waitq[ch]);
		} <FONT COLOR="#298C52">else</FONT>
			kfree_skb(skb);
		s-&gt;last = what;
	}
}

<FONT COLOR=#0000FF>/*
 * Decode DTMF tones, queue result in separate sk_buf for
 * later examination.
 * Parameters:
 *   s    = pointer to state-struct.
 *   buf  = input audio data
 *   len  = size of audio data.
 *   fmt  = audio data format (0 = ulaw, 1 = alaw)
 */</FONT>
<FONT COLOR="#298C52">void</FONT>
<A HREF="#isdn_audio_calc_dtmf">isdn_audio_calc_dtmf</A>(<A HREF="../includes/isdn.h.shtml#modem_info">modem_info</A> * info, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">char</FONT> *buf, <FONT COLOR="#298C52">int</FONT> len, <FONT COLOR="#298C52">int</FONT> fmt)
{
	<A HREF="isdn_audio.h.shtml#dtmf_state">dtmf_state</A> *s = info-&gt;<A HREF="isdn_audio.h.shtml#dtmf_state">dtmf_state</A>;
	<FONT COLOR="#298C52">int</FONT> i;
	<FONT COLOR="#298C52">int</FONT> c;

	<FONT COLOR="#298C52">while</FONT> (len) {
		c = <A HREF="isdn_hybrid.c.shtml#MIN">MIN</A>(len, (<A HREF="isdn_audio.h.shtml#DTMF_NPOINTS">DTMF_NPOINTS</A> - s-&gt;idx));
		<FONT COLOR="#298C52">if</FONT> (c &lt;= 0)
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; c; i++) {
			<FONT COLOR="#298C52">if</FONT> (fmt)
				s-&gt;buf[s-&gt;idx++] =
				    isdn_audio_alaw_to_s16[*buf++] &gt;&gt; (15 - <A HREF="#AMP_BITS">AMP_BITS</A>);
			<FONT COLOR="#298C52">else</FONT>
				s-&gt;buf[s-&gt;idx++] =
				    isdn_audio_ulaw_to_s16[*buf++] &gt;&gt; (15 - <A HREF="#AMP_BITS">AMP_BITS</A>);
		}
		<FONT COLOR="#298C52">if</FONT> (s-&gt;idx == <A HREF="isdn_audio.h.shtml#DTMF_NPOINTS">DTMF_NPOINTS</A>) {
			<A HREF="#isdn_audio_goertzel">isdn_audio_goertzel</A>(s-&gt;buf, info);
			s-&gt;idx = 0;
		}
		len -= c;
	}
}
</BODY>

</HTML>
