<HTML>

<!-- Generated by c2html-1.0, Copyright 1998 by Dave Whittington -->
<HEAD>
<TITLE>isdn_hybrid.c</TITLE>
<!--#include virtual="/ssi/js.shtml" -->
<!--#include virtual="/ssi/buttondefs.shtml" -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<TABLE WIDTH="100%">
<TR>
<TD ALIGN=LEFT WIDTH="90"><!--#include virtual="/ssi/b_home.shtml" --></TD>
<TD ALIGN=RIGHT WIDTH="90"><!--#include virtual="/ssi/b_index.shtml" --></TD>
</TR>
</TABLE>
<CENTER><H1>isdn_hybrid.c</H1></CENTER>

<HR>
<PRE>
<FONT COLOR=#0000FF>/*
 *  linux/drivers/char/serial.c
 *
 *  Copyright (C) 1991, 1992  Linus Torvalds
 *
 *  Extensively rewritten by Theodore Ts'o, 8/16/92 -- 9/14/92.  Now
 *  much more extensible to support other serial cards based on the
 *  16450/16550A UART's.  Added support for the AST FourPort and the
 *  Accent Async board.  
 *
 *  set_serial_info fixed to set the flags, custom divisor, and uart
 * 	type fields.  Fix suggested by Michael K. Johnson 12/12/92.
 *
 *  11/95: TIOCMIWAIT, TIOCGICOUNT by Angelo Haritsis &lt;ah@doc.ic.ac.uk&gt;
 *
 *  03/96: Modularised by Angelo Haritsis &lt;ah@doc.ic.ac.uk&gt;
 *
 *  rs_set_termios fixed to look also for changes of the input
 *      flags INPCK, BRKINT, PARMRK, IGNPAR and IGNBRK.
 *                                            Bernd Anhäupl 05/17/96.
 *
 *  1/97:  Extended dumb serial ports are a config option now.  
 *         Saves 4k.   Michael A. Griffith &lt;grif@acm.org&gt;
 * 
 *  8/97: Fix bug in rs_set_termios with RTS
 *        Stanislav V. Voronyi &lt;stas@uanet.kharkov.ua&gt;
 *
 * This module exports the following rs232 io functions:
 *
 *	int rs_init(void);
 */</FONT>

<FONT COLOR=#A521F7>#include</FONT> &lt;linux/config.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/module.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/errno.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/signal.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/sched.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/timer.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/interrupt.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/tty.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/tty_flip.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/serial.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/serial_reg.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/major.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/string.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/fcntl.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/ptrace.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/ioport.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/mm.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/malloc.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;linux/init.h&gt;

<FONT COLOR=#A521F7>#include</FONT> &lt;<FONT COLOR="#298C52">asm</FONT>/system.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;<FONT COLOR="#298C52">asm</FONT>/io.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;<FONT COLOR="#298C52">asm</FONT>/uaccess.h&gt;
<FONT COLOR=#A521F7>#include</FONT> &lt;<FONT COLOR="#298C52">asm</FONT>/bitops.h&gt;

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">char</FONT> *serial_name = <FONT COLOR="#FF0000">"Serial driver"</FONT>;
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">char</FONT> *serial_version = <FONT COLOR="#FF0000">"4.24"</FONT>;

<FONT COLOR="#298C52">static</FONT> DECLARE_TASK_QUEUE(tq_serial);

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">struct</FONT> tty_driver serial_driver, callout_driver;
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> serial_refcount;

<FONT COLOR=#0000FF>/* number of characters left in xmit buffer before we ask for more */</FONT>
<FONT COLOR=#A521F7>#define</FONT> <A NAME="WAKEUP_CHARS">WAKEUP_CHARS</A> 256

<FONT COLOR=#A521F7>#define</FONT> <A NAME="SERIAL_PARANOIA_CHECK">SERIAL_PARANOIA_CHECK</A>
<FONT COLOR=#A521F7>#define</FONT> <A NAME="CONFIG_SERIAL_NOPAUSE_IO">CONFIG_SERIAL_NOPAUSE_IO</A>
<FONT COLOR=#A521F7>#define</FONT> <A NAME="SERIAL_DO_RESTART">SERIAL_DO_RESTART</A>

<FONT COLOR=#0000FF>/* Sanity checks */</FONT>

<FONT COLOR=#0000FF>/* Set of debugging defines */</FONT>

<FONT COLOR=#A521F7>#undef</FONT> SERIAL_DEBUG_INTR
<FONT COLOR=#A521F7>#undef</FONT> SERIAL_DEBUG_OPEN
<FONT COLOR=#A521F7>#undef</FONT> SERIAL_DEBUG_FLOW
<FONT COLOR=#A521F7>#undef</FONT> SERIAL_DEBUG_RS_WAIT_UNTIL_SENT

<FONT COLOR=#A521F7>#define</FONT> <A NAME="RS_STROBE_TIME">RS_STROBE_TIME</A> (10*HZ)
<FONT COLOR=#A521F7>#define</FONT> <A NAME="RS_ISR_PASS_LIMIT">RS_ISR_PASS_LIMIT</A> 256

<FONT COLOR=#A521F7>#define</FONT> <A HREF="#IRQ_T">IRQ_T</A>(info) ((info-&gt;flags &amp; ASYNC_SHARE_IRQ) ? SA_SHIRQ : SA_INTERRUPT)

<FONT COLOR=#A521F7>#define</FONT> <A NAME="_INLINE_">_INLINE_</A> <FONT COLOR="#298C52">inline</FONT>
  
<FONT COLOR=#A521F7>#if</FONT> defined(MODULE) &amp;&amp; defined(SERIAL_DEBUG_MCOUNT)
<FONT COLOR=#A521F7>#define</FONT> <A HREF="#DBG_CNT">DBG_CNT</A>(s) printk(<FONT COLOR="#FF0000">"(%s): [%x] refc=%d, serc=%d, ttyc=%d -&gt; %s\n"</FONT>, \
 kdevname(tty-&gt;device), (info-&gt;flags), serial_refcount,info-&gt;count,tty-&gt;count,s)
<FONT COLOR=#A521F7>#else</FONT>
<FONT COLOR=#A521F7>#define</FONT> <A HREF="#DBG_CNT">DBG_CNT</A>(s)
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR=#0000FF>/*
 * IRQ_timeout		- How long the timeout should be for each IRQ
 * 				should be after the IRQ has been active.
 */</FONT>

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">struct</FONT> async_struct *IRQ_ports[16];
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> IRQ_timeout[16];
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">volatile</FONT> <FONT COLOR="#298C52">int</FONT> rs_irq_triggered;
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">volatile</FONT> <FONT COLOR="#298C52">int</FONT> rs_triggered;
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> rs_wild_int_mask;

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> <A HREF="#autoconfig">autoconfig</A>(<FONT COLOR="#298C52">struct</FONT> serial_state * info);
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> <A HREF="#change_speed">change_speed</A>(<FONT COLOR="#298C52">struct</FONT> async_struct *info);
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> <A HREF="#rs_wait_until_sent">rs_wait_until_sent</A>(<FONT COLOR="#298C52">struct</FONT> tty_struct *tty, <FONT COLOR="#298C52">int</FONT> timeout);

<FONT COLOR=#0000FF>/*
 * Here we define the default xmit fifo size used for each type of
 * UART
 */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">struct</FONT> serial_uart_config uart_config[] = {
	{ <FONT COLOR="#FF0000">"unknown"</FONT>, 1, 0 }, 
	{ <FONT COLOR="#FF0000">"8250"</FONT>, 1, 0 }, 
	{ <FONT COLOR="#FF0000">"16450"</FONT>, 1, 0 }, 
	{ <FONT COLOR="#FF0000">"16550"</FONT>, 1, 0 }, 
	{ <FONT COLOR="#FF0000">"16550A"</FONT>, 16, UART_CLEAR_FIFO | UART_USE_FIFO }, 
	{ <FONT COLOR="#FF0000">"cirrus"</FONT>, 1, 0 }, 
	{ <FONT COLOR="#FF0000">"ST16650"</FONT>, 1, UART_CLEAR_FIFO |UART_STARTECH }, 
	{ <FONT COLOR="#FF0000">"ST16650V2"</FONT>, 32, UART_CLEAR_FIFO | UART_USE_FIFO |
		  UART_STARTECH }, 
	{ <FONT COLOR="#FF0000">"TI16750"</FONT>, 64, UART_CLEAR_FIFO | UART_USE_FIFO},
	{ 0, 0}
};
	
<FONT COLOR=#0000FF>/*
 * This assumes you have a 1.8432 MHz clock for your UART.
 *
 * It'd be nice if someone built a serial card with a 24.576 MHz
 * clock, since the 16550A is capable of handling a top speed of 1.5
 * megabits/second; but this requires the faster clock.
 */</FONT>
<FONT COLOR=#A521F7>#define</FONT> <A NAME="BASE_BAUD">BASE_BAUD</A> ( 1843200 / 16 )

<FONT COLOR=#0000FF>/* Standard COM flags (except for COM4, because of the 8514 problem) */</FONT>
<FONT COLOR=#A521F7>#define</FONT> <A NAME="STD_COM_FLAGS">STD_COM_FLAGS</A> (ASYNC_BOOT_AUTOCONF | ASYNC_SKIP_TEST )
<FONT COLOR=#A521F7>#define</FONT> <A NAME="STD_COM4_FLAGS">STD_COM4_FLAGS</A> ASYNC_BOOT_AUTOCONF


<FONT COLOR=#A521F7>#define</FONT> <A HREF="#C_P">C_P</A>(card,port) (((card)&lt;&lt;6|(port)&lt;&lt;3) + 1)

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">struct</FONT> serial_state rs_table[] = {
	<FONT COLOR=#0000FF>/* UART CLK   PORT IRQ     FLAGS        */</FONT>
	{ 0, <A HREF="#BASE_BAUD">BASE_BAUD</A>, 0x3F8, 4, <A HREF="#STD_COM_FLAGS">STD_COM_FLAGS</A> },	<FONT COLOR=#0000FF>/* ttyS0 */</FONT>
	{ 0, <A HREF="#BASE_BAUD">BASE_BAUD</A>, 0x2F8, 3, <A HREF="#STD_COM_FLAGS">STD_COM_FLAGS</A> },	<FONT COLOR=#0000FF>/* ttyS1 */</FONT>
	{ 0, <A HREF="#BASE_BAUD">BASE_BAUD</A>, 0x3E8, 4, <A HREF="#STD_COM_FLAGS">STD_COM_FLAGS</A> },	<FONT COLOR=#0000FF>/* ttyS2 */</FONT>
	{ 0, <A HREF="#BASE_BAUD">BASE_BAUD</A>, 0x2E8, 3, <A HREF="#STD_COM4_FLAGS">STD_COM4_FLAGS</A> },	<FONT COLOR=#0000FF>/* ttyS3 */</FONT>
};

<FONT COLOR=#A521F7>#define</FONT> <A NAME="NR_PORTS">NR_PORTS</A>	(<FONT COLOR="#298C52">sizeof</FONT>(rs_table)/<FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> serial_state))

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">struct</FONT> tty_struct *serial_table[<A HREF="#NR_PORTS">NR_PORTS</A>];
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">struct</FONT> termios *serial_termios[<A HREF="#NR_PORTS">NR_PORTS</A>];
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">struct</FONT> termios *serial_termios_locked[<A HREF="#NR_PORTS">NR_PORTS</A>];

<FONT COLOR=#A521F7>#ifndef</FONT> <A HREF="#MIN">MIN</A>
<FONT COLOR=#A521F7>#define</FONT> <A NAME="MIN">MIN</A>(a,b)	((a) &lt; (b) ? (a) : (b))
<FONT COLOR=#A521F7>#endif</FONT>

<FONT COLOR=#0000FF>/*
 * tmp_buf is used as a temporary buffer by serial_write.  We need to
 * lock it in case the copy_from_user blocks while swapping in a page,
 * and some other program tries to do a serial write at the same time.
 * Since the lock will only come under contention when the system is
 * swapping and available memory is low, it makes sense to share one
 * buffer across all the serial ports, since it significantly saves
 * memory if large numbers of serial ports are open.
 */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">char</FONT> *tmp_buf = 0;
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">struct</FONT> semaphore tmp_buf_sem = MUTEX;

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">int</FONT> <A HREF="#serial_paranoia_check">serial_paranoia_check</A>(<FONT COLOR="#298C52">struct</FONT> async_struct *info,
					kdev_t device, <FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *routine)
{
<FONT COLOR=#A521F7>#ifdef</FONT> <A HREF="#SERIAL_PARANOIA_CHECK">SERIAL_PARANOIA_CHECK</A>
	<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *badmagic =
		<FONT COLOR="#FF0000">"Warning: bad magic number for serial struct (%s) in %s\n"</FONT>;
	<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">char</FONT> *badinfo =
		<FONT COLOR="#FF0000">"Warning: null async_struct for (%s) in %s\n"</FONT>;

	<FONT COLOR="#298C52">if</FONT> (!info) {
		printk(badinfo, kdevname(device), routine);
		<FONT COLOR="#298C52">return</FONT> 1;
	}
	<FONT COLOR="#298C52">if</FONT> (info-&gt;magic != SERIAL_MAGIC) {
		printk(badmagic, kdevname(device), routine);
		<FONT COLOR="#298C52">return</FONT> 1;
	}
<FONT COLOR=#A521F7>#endif</FONT>
	<FONT COLOR="#298C52">return</FONT> 0;
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> <A HREF="#serial_in">serial_in</A>(<FONT COLOR="#298C52">struct</FONT> async_struct *info, <FONT COLOR="#298C52">int</FONT> offset)
{
	<FONT COLOR="#298C52">return</FONT> inb(info-&gt;port + offset);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> <A HREF="#serial_inp">serial_inp</A>(<FONT COLOR="#298C52">struct</FONT> async_struct *info, <FONT COLOR="#298C52">int</FONT> offset)
{
<FONT COLOR=#A521F7>#ifdef</FONT> <A HREF="#CONFIG_SERIAL_NOPAUSE_IO">CONFIG_SERIAL_NOPAUSE_IO</A>
	<FONT COLOR="#298C52">return</FONT> inb(info-&gt;port + offset);
<FONT COLOR=#A521F7>#else</FONT>
	<FONT COLOR="#298C52">return</FONT> inb_p(info-&gt;port + offset);
<FONT COLOR=#A521F7>#endif</FONT>
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT> <A HREF="#serial_out">serial_out</A>(<FONT COLOR="#298C52">struct</FONT> async_struct *info, <FONT COLOR="#298C52">int</FONT> offset, <FONT COLOR="#298C52">int</FONT> value)
{
	outb(value, info-&gt;port+offset);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">inline</FONT> <FONT COLOR="#298C52">void</FONT> <A HREF="#serial_outp">serial_outp</A>(<FONT COLOR="#298C52">struct</FONT> async_struct *info, <FONT COLOR="#298C52">int</FONT> offset,
			       <FONT COLOR="#298C52">int</FONT> value)
{
<FONT COLOR=#A521F7>#ifdef</FONT> <A HREF="#CONFIG_SERIAL_NOPAUSE_IO">CONFIG_SERIAL_NOPAUSE_IO</A>
	outb(value, info-&gt;port+offset);
<FONT COLOR=#A521F7>#else</FONT>
    	outb_p(value, info-&gt;port+offset);
<FONT COLOR=#A521F7>#endif</FONT>
}

<FONT COLOR=#0000FF>/*
 * ------------------------------------------------------------
 * rs_stop() and rs_start()
 *
 * This routines are called before setting or resetting tty-&gt;stopped.
 * They enable or disable transmitter interrupts, as necessary.
 * ------------------------------------------------------------
 */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> <A NAME="rs_stop">rs_stop</A>(<FONT COLOR="#298C52">struct</FONT> tty_struct *tty)
{
	<FONT COLOR="#298C52">struct</FONT> async_struct *info = (<FONT COLOR="#298C52">struct</FONT> async_struct *)tty-&gt;driver_data;
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT> flags;

	<FONT COLOR="#298C52">if</FONT> (<A HREF="#serial_paranoia_check">serial_paranoia_check</A>(info, tty-&gt;device, <FONT COLOR="#FF0000">"rs_stop"</FONT>))
		<FONT COLOR="#298C52">return</FONT>;
	
	save_flags(flags); <A HREF="kdebug.h.shtml#cli">cli</A>();
	<FONT COLOR="#298C52">if</FONT> (info-&gt;IER &amp; UART_IER_THRI) {
		info-&gt;IER &amp;= ~UART_IER_THRI;
		<A HREF="#serial_out">serial_out</A>(info, UART_IER, info-&gt;IER);
	}
	<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> <A NAME="rs_start">rs_start</A>(<FONT COLOR="#298C52">struct</FONT> tty_struct *tty)
{
	<FONT COLOR="#298C52">struct</FONT> async_struct *info = (<FONT COLOR="#298C52">struct</FONT> async_struct *)tty-&gt;driver_data;
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT> flags;
	
	<FONT COLOR="#298C52">if</FONT> (<A HREF="#serial_paranoia_check">serial_paranoia_check</A>(info, tty-&gt;device, <FONT COLOR="#FF0000">"rs_start"</FONT>))
		<FONT COLOR="#298C52">return</FONT>;
	
	save_flags(flags); <A HREF="kdebug.h.shtml#cli">cli</A>();
	<FONT COLOR="#298C52">if</FONT> (info-&gt;xmit_cnt &amp;&amp; info-&gt;xmit_buf &amp;&amp; !(info-&gt;IER &amp; UART_IER_THRI)) {
		info-&gt;IER |= UART_IER_THRI;
		<A HREF="#serial_out">serial_out</A>(info, UART_IER, info-&gt;IER);
	}
	<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
}

<FONT COLOR=#0000FF>/*
 * ----------------------------------------------------------------------
 *
 * Here starts the interrupt handling routines.  All of the following
 * subroutines are declared as inline and are folded into
 * rs_interrupt().  They were separated out for readability's sake.
 *
 * Note: rs_interrupt() is a "fast" interrupt, which means that it
 * runs with interrupts turned off.  People who may want to modify
 * rs_interrupt() should try to keep the interrupt handler as fast as
 * possible.  After you are done making modifications, it is not a bad
 * idea to do:
 * 
 * gcc -S -DKERNEL -Wall -Wstrict-prototypes -O6 -fomit-frame-pointer serial.c
 *
 * and look at the resulting assemble code in serial.s.
 *
 * 				- Ted Ts'o (tytso@mit.edu), 7-Mar-93
 * -----------------------------------------------------------------------
 */</FONT>

<FONT COLOR=#0000FF>/*
 * This routine is used by the interrupt handler to schedule
 * processing in the software interrupt portion of the driver.
 */</FONT>
<FONT COLOR="#298C52">static</FONT> <A HREF="#_INLINE_">_INLINE_</A> <FONT COLOR="#298C52">void</FONT> <A HREF="#rs_sched_event">rs_sched_event</A>(<FONT COLOR="#298C52">struct</FONT> async_struct *info,
				  <FONT COLOR="#298C52">int</FONT> event)
{
	info-&gt;event |= 1 &lt;&lt; event;
	queue_task(&amp;info-&gt;tqueue, &amp;tq_serial);
	mark_bh(SERIAL_BH);
}

<FONT COLOR="#298C52">static</FONT> <A HREF="#_INLINE_">_INLINE_</A> <FONT COLOR="#298C52">void</FONT> <A HREF="#receive_chars">receive_chars</A>(<FONT COLOR="#298C52">struct</FONT> async_struct *info,
				 <FONT COLOR="#298C52">int</FONT> *status)
{
	<FONT COLOR="#298C52">struct</FONT> tty_struct *tty = info-&gt;tty;
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">char</FONT> ch;
	<FONT COLOR="#298C52">int</FONT> ignored = 0;
	<FONT COLOR="#298C52">struct</FONT>	async_icount *icount;

	icount = &amp;info-&gt;state-&gt;icount;
	<FONT COLOR="#298C52">do</FONT> {
		ch = <A HREF="#serial_inp">serial_inp</A>(info, UART_RX);
		<FONT COLOR="#298C52">if</FONT> (tty-&gt;flip.count &gt;= TTY_FLIPBUF_SIZE)
			<FONT COLOR="#298C52">break</FONT>;
		*tty-&gt;flip.char_buf_ptr = ch;
		icount-&gt;rx++;
		
<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_INTR
		printk(<FONT COLOR="#FF0000">"DR%02x:%02x..."</FONT>, ch, *status);
<FONT COLOR=#A521F7>#endif</FONT>
		*tty-&gt;flip.flag_buf_ptr = 0;
		<FONT COLOR="#298C52">if</FONT> (*status &amp; (UART_LSR_BI | UART_LSR_PE |
			       UART_LSR_FE | UART_LSR_OE)) {
			<FONT COLOR=#0000FF>/*
			 * For statistics only
			 */</FONT>
			<FONT COLOR="#298C52">if</FONT> (*status &amp; UART_LSR_BI) {
				*status &amp;= ~(UART_LSR_FE | UART_LSR_PE);
				icount-&gt;brk++;
			} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (*status &amp; UART_LSR_PE)
				icount-&gt;parity++;
			<FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (*status &amp; UART_LSR_FE)
				icount-&gt;frame++;
			<FONT COLOR="#298C52">if</FONT> (*status &amp; UART_LSR_OE)
				icount-&gt;overrun++;

			<FONT COLOR=#0000FF>/*
			 * Now check to see if character should be
			 * ignored, and mask off conditions which
			 * should be ignored.
			 */</FONT>
			<FONT COLOR="#298C52">if</FONT> (*status &amp; info-&gt;ignore_status_mask) {
				<FONT COLOR="#298C52">if</FONT> (++ignored &gt; 100)
					<FONT COLOR="#298C52">break</FONT>;
				<FONT COLOR="#298C52">goto</FONT> ignore_char;
			}
			*status &amp;= info-&gt;read_status_mask;
		
			<FONT COLOR="#298C52">if</FONT> (*status &amp; (UART_LSR_BI)) {
<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_INTR
				printk(<FONT COLOR="#FF0000">"handling break...."</FONT>);
<FONT COLOR=#A521F7>#endif</FONT>
				*tty-&gt;flip.flag_buf_ptr = TTY_BREAK;
				<FONT COLOR="#298C52">if</FONT> (info-&gt;flags &amp; ASYNC_SAK)
					do_SAK(tty);
			} <FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (*status &amp; UART_LSR_PE)
				*tty-&gt;flip.flag_buf_ptr = TTY_PARITY;
			<FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (*status &amp; UART_LSR_FE)
				*tty-&gt;flip.flag_buf_ptr = TTY_FRAME;
			<FONT COLOR="#298C52">if</FONT> (*status &amp; UART_LSR_OE) {
				<FONT COLOR=#0000FF>/*
				 * Overrun is special, since it's
				 * reported immediately, and doesn't
				 * affect the current character
				 */</FONT>
				<FONT COLOR="#298C52">if</FONT> (tty-&gt;flip.count &lt; TTY_FLIPBUF_SIZE) {
					tty-&gt;flip.count++;
					tty-&gt;flip.flag_buf_ptr++;
					tty-&gt;flip.char_buf_ptr++;
					*tty-&gt;flip.flag_buf_ptr = TTY_OVERRUN;
				}
			}
		}
		tty-&gt;flip.flag_buf_ptr++;
		tty-&gt;flip.char_buf_ptr++;
		tty-&gt;flip.count++;
	ignore_char:
		*status = <A HREF="#serial_inp">serial_inp</A>(info, UART_LSR);
	} <FONT COLOR="#298C52">while</FONT> (*status &amp; UART_LSR_DR);
	isdn_hybrid_flip_buffer_push(tty);
}

<FONT COLOR="#298C52">static</FONT> <A HREF="#_INLINE_">_INLINE_</A> <FONT COLOR="#298C52">void</FONT> <A HREF="#transmit_chars">transmit_chars</A>(<FONT COLOR="#298C52">struct</FONT> async_struct *info, <FONT COLOR="#298C52">int</FONT> *intr_done)
{
	<FONT COLOR="#298C52">int</FONT> count;
	
	<FONT COLOR="#298C52">if</FONT> (info-&gt;x_char) {
		<A HREF="#serial_outp">serial_outp</A>(info, UART_TX, info-&gt;x_char);
		info-&gt;state-&gt;icount.tx++;
		info-&gt;x_char = 0;
		<FONT COLOR="#298C52">if</FONT> (intr_done)
			*intr_done = 0;
		<FONT COLOR="#298C52">return</FONT>;
	}
	<FONT COLOR="#298C52">if</FONT> ((info-&gt;xmit_cnt &lt;= 0) || info-&gt;tty-&gt;stopped ||
	    info-&gt;tty-&gt;hw_stopped) {
		info-&gt;IER &amp;= ~UART_IER_THRI;
		<A HREF="#serial_out">serial_out</A>(info, UART_IER, info-&gt;IER);
		<FONT COLOR="#298C52">return</FONT>;
	}
	
	count = info-&gt;xmit_fifo_size;
	<FONT COLOR="#298C52">do</FONT> {
		<A HREF="#serial_out">serial_out</A>(info, UART_TX, info-&gt;xmit_buf[info-&gt;xmit_tail++]);
		info-&gt;xmit_tail = info-&gt;xmit_tail &amp; (SERIAL_XMIT_SIZE-1);
		info-&gt;state-&gt;icount.tx++;
		<FONT COLOR="#298C52">if</FONT> (--info-&gt;xmit_cnt &lt;= 0)
			<FONT COLOR="#298C52">break</FONT>;
	} <FONT COLOR="#298C52">while</FONT> (--count &gt; 0);
	
	<FONT COLOR="#298C52">if</FONT> (info-&gt;xmit_cnt &lt; <A HREF="#WAKEUP_CHARS">WAKEUP_CHARS</A>)
		<A HREF="#rs_sched_event">rs_sched_event</A>(info, RS_EVENT_WRITE_WAKEUP);

<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_INTR
	printk(<FONT COLOR="#FF0000">"THRE..."</FONT>);
<FONT COLOR=#A521F7>#endif</FONT>
	<FONT COLOR="#298C52">if</FONT> (intr_done)
		*intr_done = 0;

	<FONT COLOR="#298C52">if</FONT> (info-&gt;xmit_cnt &lt;= 0) {
		info-&gt;IER &amp;= ~UART_IER_THRI;
		<A HREF="#serial_out">serial_out</A>(info, UART_IER, info-&gt;IER);
	}
}

<FONT COLOR="#298C52">static</FONT> <A HREF="#_INLINE_">_INLINE_</A> <FONT COLOR="#298C52">void</FONT> <A HREF="#check_modem_status">check_modem_status</A>(<FONT COLOR="#298C52">struct</FONT> async_struct *info)
{
	<FONT COLOR="#298C52">int</FONT>	status;
	<FONT COLOR="#298C52">struct</FONT>	async_icount *icount;
	
	status = <A HREF="#serial_in">serial_in</A>(info, UART_MSR);

	<FONT COLOR="#298C52">if</FONT> (status &amp; UART_MSR_ANY_DELTA) {
		icount = &amp;info-&gt;state-&gt;icount;
		<FONT COLOR=#0000FF>/* update input line counters */</FONT>
		<FONT COLOR="#298C52">if</FONT> (status &amp; UART_MSR_TERI)
			icount-&gt;rng++;
		<FONT COLOR="#298C52">if</FONT> (status &amp; UART_MSR_DDSR)
			icount-&gt;dsr++;
		<FONT COLOR="#298C52">if</FONT> (status &amp; UART_MSR_DDCD) {
			icount-&gt;dcd++;
<FONT COLOR=#A521F7>#ifdef</FONT> CONFIG_HARD_PPS
			<FONT COLOR="#298C52">if</FONT> ((info-&gt;flags &amp; ASYNC_HARDPPS_CD) &amp;&amp;
			    (status &amp; UART_MSR_DCD))
				hardpps();
<FONT COLOR=#A521F7>#endif</FONT>
		}
		<FONT COLOR="#298C52">if</FONT> (status &amp; UART_MSR_DCTS)
			icount-&gt;cts++;
		wake_up_interruptible(&amp;info-&gt;delta_msr_wait);
	}

	<FONT COLOR="#298C52">if</FONT> ((info-&gt;flags &amp; ASYNC_CHECK_CD) &amp;&amp; (status &amp; UART_MSR_DDCD)) {
<FONT COLOR=#A521F7>#if</FONT> (defined(SERIAL_DEBUG_OPEN) || defined(SERIAL_DEBUG_INTR))
		printk(<FONT COLOR="#FF0000">"ttys%d CD now %s..."</FONT>, info-&gt;line,
		       (status &amp; UART_MSR_DCD) ? <FONT COLOR="#FF0000">"on"</FONT> : <FONT COLOR="#FF0000">"off"</FONT>);
<FONT COLOR=#A521F7>#endif</FONT>		
		<FONT COLOR="#298C52">if</FONT> (status &amp; UART_MSR_DCD)
			wake_up_interruptible(&amp;info-&gt;open_wait);
		<FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (!((info-&gt;flags &amp; ASYNC_CALLOUT_ACTIVE) &amp;&amp;
			   (info-&gt;flags &amp; ASYNC_CALLOUT_NOHUP))) {
<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_OPEN
			printk(<FONT COLOR="#FF0000">"doing serial hangup..."</FONT>);
<FONT COLOR=#A521F7>#endif</FONT>
			<FONT COLOR="#298C52">if</FONT> (info-&gt;tty)
				tty_hangup(info-&gt;tty);
		}
	}
	<FONT COLOR="#298C52">if</FONT> (info-&gt;flags &amp; ASYNC_CTS_FLOW) {
		<FONT COLOR="#298C52">if</FONT> (info-&gt;tty-&gt;hw_stopped) {
			<FONT COLOR="#298C52">if</FONT> (status &amp; UART_MSR_CTS) {
<FONT COLOR=#A521F7>#if</FONT> (defined(SERIAL_DEBUG_INTR) || defined(SERIAL_DEBUG_FLOW))
				printk(<FONT COLOR="#FF0000">"CTS tx start..."</FONT>);
<FONT COLOR=#A521F7>#endif</FONT>
				info-&gt;tty-&gt;hw_stopped = 0;
				info-&gt;IER |= UART_IER_THRI;
				<A HREF="#serial_out">serial_out</A>(info, UART_IER, info-&gt;IER);
				<A HREF="#rs_sched_event">rs_sched_event</A>(info, RS_EVENT_WRITE_WAKEUP);
				<FONT COLOR="#298C52">return</FONT>;
			}
		} <FONT COLOR="#298C52">else</FONT> {
			<FONT COLOR="#298C52">if</FONT> (!(status &amp; UART_MSR_CTS)) {
<FONT COLOR=#A521F7>#if</FONT> (defined(SERIAL_DEBUG_INTR) || defined(SERIAL_DEBUG_FLOW))
				printk(<FONT COLOR="#FF0000">"CTS tx stop..."</FONT>);
<FONT COLOR=#A521F7>#endif</FONT>
				info-&gt;tty-&gt;hw_stopped = 1;
				info-&gt;IER &amp;= ~UART_IER_THRI;
				<A HREF="#serial_out">serial_out</A>(info, UART_IER, info-&gt;IER);
			}
		}
	}
}

<FONT COLOR=#0000FF>/*
 * This is the serial driver's interrupt routine for a single port
 */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> <A HREF="#rs_interrupt_single">rs_interrupt_single</A>(<FONT COLOR="#298C52">int</FONT> irq, <FONT COLOR="#298C52">void</FONT> *dev_id, <FONT COLOR="#298C52">struct</FONT> pt_regs * regs)
{
	<FONT COLOR="#298C52">int</FONT> status;
	<FONT COLOR="#298C52">int</FONT> pass_counter = 0;
	<FONT COLOR="#298C52">struct</FONT> async_struct * info;
	
<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_INTR
	printk(<FONT COLOR="#FF0000">"rs_interrupt_single(%d)..."</FONT>, irq);
<FONT COLOR=#A521F7>#endif</FONT>
	
	info = IRQ_ports[irq];
	<FONT COLOR="#298C52">if</FONT> (!info || !info-&gt;tty)
		<FONT COLOR="#298C52">return</FONT>;


	<FONT COLOR="#298C52">do</FONT> {
		status = <A HREF="#serial_inp">serial_inp</A>(info, UART_LSR);
<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_INTR
		printk(<FONT COLOR="#FF0000">"status = %x..."</FONT>, status);
<FONT COLOR=#A521F7>#endif</FONT>
		<FONT COLOR="#298C52">if</FONT> (status &amp; UART_LSR_DR)
			<A HREF="#receive_chars">receive_chars</A>(info, &amp;status);
		<A HREF="#check_modem_status">check_modem_status</A>(info);
		<FONT COLOR="#298C52">if</FONT> (status &amp; UART_LSR_THRE)
			<A HREF="#transmit_chars">transmit_chars</A>(info, 0);
		<FONT COLOR="#298C52">if</FONT> (pass_counter++ &gt; <A HREF="#RS_ISR_PASS_LIMIT">RS_ISR_PASS_LIMIT</A>) {
<FONT COLOR=#A521F7>#if</FONT> 0
			printk(<FONT COLOR="#FF0000">"rs_single loop break.\n"</FONT>);
<FONT COLOR=#A521F7>#endif</FONT>
			<FONT COLOR="#298C52">break</FONT>;
		}
	} <FONT COLOR="#298C52">while</FONT> (!(<A HREF="#serial_in">serial_in</A>(info, UART_IIR) &amp; UART_IIR_NO_INT));
	info-&gt;last_active = jiffies;
<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_INTR
	printk(<FONT COLOR="#FF0000">"end.\n"</FONT>);
<FONT COLOR=#A521F7>#endif</FONT>
}


<FONT COLOR=#0000FF>/*
 * -------------------------------------------------------------------
 * Here ends the serial interrupt routines.
 * -------------------------------------------------------------------
 */</FONT>

<FONT COLOR=#0000FF>/*
 * This routine is used to handle the "bottom half" processing for the
 * serial driver, known also the "software interrupt" processing.
 * This processing is done at the kernel interrupt level, after the
 * rs_interrupt() has returned, BUT WITH INTERRUPTS TURNED ON.  This
 * is where time-consuming activities which can not be done in the
 * interrupt driver proper are done; the interrupt driver schedules
 * them using rs_sched_event(), and they get done here.
 */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> <A NAME="do_serial_bh">do_serial_bh</A>(<FONT COLOR="#298C52">void</FONT>)
{
	run_task_queue(&amp;tq_serial);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> <A NAME="do_softint">do_softint</A>(<FONT COLOR="#298C52">void</FONT> *private_)
{
	<FONT COLOR="#298C52">struct</FONT> async_struct	*info = (<FONT COLOR="#298C52">struct</FONT> async_struct *) private_;
	<FONT COLOR="#298C52">struct</FONT> tty_struct	*tty;
	
	tty = info-&gt;tty;
	<FONT COLOR="#298C52">if</FONT> (!tty)
		<FONT COLOR="#298C52">return</FONT>;

	<FONT COLOR="#298C52">if</FONT> (test_and_clear_bit(RS_EVENT_WRITE_WAKEUP, &amp;info-&gt;event)) {
		<FONT COLOR="#298C52">if</FONT> ((tty-&gt;flags &amp; (1 &lt;&lt; TTY_DO_WRITE_WAKEUP)) &amp;&amp;
		    tty-&gt;ldisc.write_wakeup)
			(tty-&gt;ldisc.write_wakeup)(tty);
		wake_up_interruptible(&amp;tty-&gt;write_wait);
	}
}

<FONT COLOR=#0000FF>/*
 * This subroutine is called when the RS_TIMER goes off.  It is used
 * by the serial driver to handle ports that do not have an interrupt
 * (irq=0).  This doesn't work very well for 16450's, but gives barely
 * passable results for a 16550A.  (Although at the expense of much
 * CPU overhead).
 */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> <A NAME="rs_timer">rs_timer</A>(<FONT COLOR="#298C52">void</FONT>)
{
	<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT> last_strobe = 0;
	<FONT COLOR="#298C52">struct</FONT> async_struct *info;
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT>	i;

	<FONT COLOR="#298C52">if</FONT> ((jiffies - last_strobe) &gt;= <A HREF="#RS_STROBE_TIME">RS_STROBE_TIME</A>) {
		<FONT COLOR="#298C52">for</FONT> (i=1; i &lt; 16; i++) {
			info = IRQ_ports[i];
			<FONT COLOR="#298C52">if</FONT> (!info)
				<FONT COLOR="#298C52">continue</FONT>;
			<A HREF="kdebug.h.shtml#cli">cli</A>();
<FONT COLOR=#A521F7>#ifdef</FONT> CONFIG_SERIAL_SHARE_IRQ
			<FONT COLOR="#298C52">if</FONT> (info-&gt;next_port) {
				<FONT COLOR="#298C52">do</FONT> {
					<A HREF="#serial_out">serial_out</A>(info, UART_IER, 0);
					info-&gt;IER |= UART_IER_THRI;
					<A HREF="#serial_out">serial_out</A>(info, UART_IER, info-&gt;IER);
					info = info-&gt;next_port;
				} <FONT COLOR="#298C52">while</FONT> (info);
<FONT COLOR=#A521F7>#ifdef</FONT> CONFIG_SERIAL_MULTIPORT					
				<FONT COLOR="#298C52">if</FONT> (rs_multiport[i].port1)
					rs_interrupt_multi(i, NULL, NULL);
				<FONT COLOR="#298C52">else</FONT>
<FONT COLOR=#A521F7>#endif</FONT>
					rs_interrupt(i, NULL, NULL);
			} <FONT COLOR="#298C52">else</FONT>
<FONT COLOR=#A521F7>#endif</FONT> <FONT COLOR=#0000FF>/* CONFIG_SERIAL_SHARE_IRQ */</FONT>
				<A HREF="#rs_interrupt_single">rs_interrupt_single</A>(i, NULL, NULL);
			<A HREF="kdebug.h.shtml#sti">sti</A>();
		}
	}
	last_strobe = jiffies;
	timer_table[RS_TIMER].expires = jiffies + <A HREF="#RS_STROBE_TIME">RS_STROBE_TIME</A>;
	timer_active |= 1 &lt;&lt; RS_TIMER;

	<FONT COLOR="#298C52">if</FONT> (IRQ_ports[0]) {
		<A HREF="kdebug.h.shtml#cli">cli</A>();
<FONT COLOR=#A521F7>#ifdef</FONT> CONFIG_SERIAL_SHARE_IRQ
		rs_interrupt(0, NULL, NULL);
<FONT COLOR=#A521F7>#else</FONT>
		<A HREF="#rs_interrupt_single">rs_interrupt_single</A>(0, NULL, NULL);
<FONT COLOR=#A521F7>#endif</FONT>
		<A HREF="kdebug.h.shtml#sti">sti</A>();

		timer_table[RS_TIMER].expires = jiffies + IRQ_timeout[0] - 2;
	}
}

<FONT COLOR=#0000FF>/*
 * ---------------------------------------------------------------
 * Low level utility subroutines for the serial driver:  routines to
 * figure out the appropriate timeout for an interrupt chain, routines
 * to initialize and startup a serial port, and routines to shutdown a
 * serial port.  Useful stuff like that.
 * ---------------------------------------------------------------
 */</FONT>

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> <A NAME="startup">startup</A>(<FONT COLOR="#298C52">struct</FONT> async_struct * info)
{
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT> flags;
	<FONT COLOR="#298C52">int</FONT>	retval=0;
	<FONT COLOR="#298C52">void</FONT> (*handler)(<FONT COLOR="#298C52">int</FONT>, <FONT COLOR="#298C52">void</FONT> *, <FONT COLOR="#298C52">struct</FONT> pt_regs *);
	<FONT COLOR="#298C52">struct</FONT> serial_state *state= info-&gt;state;
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT> page;

	page = get_free_page(GFP_KERNEL);
	<FONT COLOR="#298C52">if</FONT> (!page)
		<FONT COLOR="#298C52">return</FONT> -ENOMEM;

	save_flags(flags); <A HREF="kdebug.h.shtml#cli">cli</A>();

	<FONT COLOR="#298C52">if</FONT> (info-&gt;flags &amp; ASYNC_INITIALIZED) {
		free_page(page);
		<FONT COLOR="#298C52">goto</FONT> errout;
	}

	<FONT COLOR="#298C52">if</FONT> (!state-&gt;port || !state-&gt;type) {
		<FONT COLOR="#298C52">if</FONT> (info-&gt;tty)
			set_bit(TTY_IO_ERROR, &amp;info-&gt;tty-&gt;flags);
		free_page(page);
		<FONT COLOR="#298C52">goto</FONT> errout;
	}
	<FONT COLOR="#298C52">if</FONT> (info-&gt;xmit_buf)
		free_page(page);
	<FONT COLOR="#298C52">else</FONT>
		info-&gt;xmit_buf = (<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">char</FONT> *) page;

<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_OPEN
	printk(<FONT COLOR="#FF0000">"starting up ttys%d (irq %d)..."</FONT>, info-&gt;line, state-&gt;irq);
<FONT COLOR=#A521F7>#endif</FONT>

	<FONT COLOR="#298C52">if</FONT> (uart_config[info-&gt;state-&gt;type].flags &amp; UART_STARTECH) {
		<FONT COLOR=#0000FF>/* Wake up UART */</FONT>
		<A HREF="#serial_outp">serial_outp</A>(info, UART_LCR, 0xBF);
		<A HREF="#serial_outp">serial_outp</A>(info, UART_EFR, UART_EFR_ECB);
		<A HREF="#serial_outp">serial_outp</A>(info, UART_IER, 0);
		<A HREF="#serial_outp">serial_outp</A>(info, UART_EFR, 0);
		<A HREF="#serial_outp">serial_outp</A>(info, UART_LCR, 0);
	}

	<FONT COLOR="#298C52">if</FONT> (info-&gt;state-&gt;type == PORT_16750) {
		<FONT COLOR=#0000FF>/* Wake up UART */</FONT>
		<A HREF="#serial_outp">serial_outp</A>(info, UART_IER, 0);
	}

	<FONT COLOR=#0000FF>/*
	 * Clear the FIFO buffers and disable them
	 * (they will be reenabled in change_speed())
	 */</FONT>
	<FONT COLOR="#298C52">if</FONT> (uart_config[state-&gt;type].flags &amp; UART_CLEAR_FIFO)
		<A HREF="#serial_outp">serial_outp</A>(info, UART_FCR, (UART_FCR_CLEAR_RCVR |
					     UART_FCR_CLEAR_XMIT));

	<FONT COLOR=#0000FF>/*
	 * At this point there's no way the LSR could still be 0xFF;
	 * if it is, then bail out, because there's likely no UART
	 * here.
	 */</FONT>
	<FONT COLOR="#298C52">if</FONT> (<A HREF="#serial_inp">serial_inp</A>(info, UART_LSR) == 0xff) {
		<FONT COLOR="#298C52">if</FONT> (suser()) {
			<FONT COLOR="#298C52">if</FONT> (info-&gt;tty)
				set_bit(TTY_IO_ERROR, &amp;info-&gt;tty-&gt;flags);
		} <FONT COLOR="#298C52">else</FONT>
			retval = -ENODEV;
		<FONT COLOR="#298C52">goto</FONT> errout;
	}
	
	<FONT COLOR=#0000FF>/*
	 * Allocate the IRQ if necessary
	 */</FONT>
	<FONT COLOR="#298C52">if</FONT> (state-&gt;irq &amp;&amp; (!IRQ_ports[state-&gt;irq] ||
			  !IRQ_ports[state-&gt;irq]-&gt;next_port)) {
		<FONT COLOR="#298C52">if</FONT> (IRQ_ports[state-&gt;irq]) {
			retval = -EBUSY;
			<FONT COLOR="#298C52">goto</FONT> errout;
		} <FONT COLOR="#298C52">else</FONT> 
			handler = <A HREF="#rs_interrupt_single">rs_interrupt_single</A>;

		retval = request_irq(state-&gt;irq, handler, <A HREF="#IRQ_T">IRQ_T</A>(info),
				     <FONT COLOR="#FF0000">"serial"</FONT>, NULL);
		<FONT COLOR="#298C52">if</FONT> (retval) {
			<FONT COLOR="#298C52">if</FONT> (suser()) {
				<FONT COLOR="#298C52">if</FONT> (info-&gt;tty)
					set_bit(TTY_IO_ERROR,
						&amp;info-&gt;tty-&gt;flags);
				retval = 0;
			}
			<FONT COLOR="#298C52">goto</FONT> errout;
		}
	}

	<FONT COLOR=#0000FF>/*
	 * Insert serial port into IRQ chain.
	 */</FONT>
	info-&gt;prev_port = 0;
	info-&gt;next_port = IRQ_ports[state-&gt;irq];
	<FONT COLOR="#298C52">if</FONT> (info-&gt;next_port)
		info-&gt;next_port-&gt;prev_port = info;
	IRQ_ports[state-&gt;irq] = info;
	figure_IRQ_timeout(state-&gt;irq);

	<FONT COLOR=#0000FF>/*
	 * Clear the interrupt registers.
	 */</FONT>
     <FONT COLOR=#0000FF>/* (void) serial_inp(info, UART_LSR); */</FONT>   <FONT COLOR=#0000FF>/* (see above) */</FONT>
	(<FONT COLOR="#298C52">void</FONT>) <A HREF="#serial_inp">serial_inp</A>(info, UART_RX);
	(<FONT COLOR="#298C52">void</FONT>) <A HREF="#serial_inp">serial_inp</A>(info, UART_IIR);
	(<FONT COLOR="#298C52">void</FONT>) <A HREF="#serial_inp">serial_inp</A>(info, UART_MSR);

	<FONT COLOR=#0000FF>/*
	 * Now, initialize the UART 
	 */</FONT>
	<A HREF="#serial_outp">serial_outp</A>(info, UART_LCR, UART_LCR_WLEN8);	<FONT COLOR=#0000FF>/* reset DLAB */</FONT>

	info-&gt;MCR = 0;
	<FONT COLOR="#298C52">if</FONT> (info-&gt;tty-&gt;termios-&gt;c_cflag &amp; CBAUD)
		info-&gt;MCR = UART_MCR_DTR | UART_MCR_RTS;
	{
		<FONT COLOR="#298C52">if</FONT> (state-&gt;irq != 0)
			info-&gt;MCR |= UART_MCR_OUT2;
	}
<FONT COLOR=#A521F7>#if</FONT> defined(__alpha__) &amp;&amp; !defined(CONFIG_PCI)
	<FONT COLOR=#0000FF>/*
	 * DEC did something gratutiously wrong....
	 */</FONT>
	info-&gt;MCR |= UART_MCR_OUT1 | UART_MCR_OUT2;
<FONT COLOR=#A521F7>#endif</FONT>
	<A HREF="#serial_outp">serial_outp</A>(info, UART_MCR, info-&gt;MCR);
	
	<FONT COLOR=#0000FF>/*
	 * Finally, enable interrupts
	 */</FONT>
	info-&gt;IER = UART_IER_MSI | UART_IER_RLSI | UART_IER_RDI;
	<A HREF="#serial_outp">serial_outp</A>(info, UART_IER, info-&gt;IER);	<FONT COLOR=#0000FF>/* enable interrupts */</FONT>
	

	<FONT COLOR=#0000FF>/*
	 * And clear the interrupt registers again for luck.
	 */</FONT>
	(<FONT COLOR="#298C52">void</FONT>)<A HREF="#serial_inp">serial_inp</A>(info, UART_LSR);
	(<FONT COLOR="#298C52">void</FONT>)<A HREF="#serial_inp">serial_inp</A>(info, UART_RX);
	(<FONT COLOR="#298C52">void</FONT>)<A HREF="#serial_inp">serial_inp</A>(info, UART_IIR);
	(<FONT COLOR="#298C52">void</FONT>)<A HREF="#serial_inp">serial_inp</A>(info, UART_MSR);

	<FONT COLOR="#298C52">if</FONT> (info-&gt;tty)
		clear_bit(TTY_IO_ERROR, &amp;info-&gt;tty-&gt;flags);
	info-&gt;xmit_cnt = info-&gt;xmit_head = info-&gt;xmit_tail = 0;

	<FONT COLOR=#0000FF>/*
	 * Set up serial timers...
	 */</FONT>
	timer_table[RS_TIMER].expires = jiffies + 2*HZ/100;
	timer_active |= 1 &lt;&lt; RS_TIMER;

	<FONT COLOR=#0000FF>/*
	 * Set up the tty-&gt;alt_speed kludge
	 */</FONT>
	<FONT COLOR="#298C52">if</FONT> (info-&gt;tty) {
		<FONT COLOR="#298C52">if</FONT> ((info-&gt;flags &amp; ASYNC_SPD_MASK) == ASYNC_SPD_HI)
			info-&gt;tty-&gt;alt_speed = 57600;
		<FONT COLOR="#298C52">if</FONT> ((info-&gt;flags &amp; ASYNC_SPD_MASK) == ASYNC_SPD_VHI)
			info-&gt;tty-&gt;alt_speed = 115200;
		<FONT COLOR="#298C52">if</FONT> ((info-&gt;flags &amp; ASYNC_SPD_MASK) == ASYNC_SPD_SHI)
			info-&gt;tty-&gt;alt_speed = 230400;
		<FONT COLOR="#298C52">if</FONT> ((info-&gt;flags &amp; ASYNC_SPD_MASK) == ASYNC_SPD_WARP)
			info-&gt;tty-&gt;alt_speed = 460800;
	}
	
	<FONT COLOR=#0000FF>/*
	 * and set the speed of the serial port
	 */</FONT>
	<A HREF="#change_speed">change_speed</A>(info);

	info-&gt;flags |= ASYNC_INITIALIZED;
	<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
	<FONT COLOR="#298C52">return</FONT> 0;
	
errout:
	<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
	<FONT COLOR="#298C52">return</FONT> retval;
}

<FONT COLOR=#0000FF>/*
 * This routine will shutdown a serial port; interrupts are disabled, and
 * DTR is dropped if the hangup on close termio flag is on.
 */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> <A NAME="shutdown">shutdown</A>(<FONT COLOR="#298C52">struct</FONT> async_struct * info)
{
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT>	flags;
	<FONT COLOR="#298C52">struct</FONT> serial_state *state;
	<FONT COLOR="#298C52">int</FONT>		retval;

	<FONT COLOR="#298C52">if</FONT> (!(info-&gt;flags &amp; ASYNC_INITIALIZED))
		<FONT COLOR="#298C52">return</FONT>;

	state = info-&gt;state;

<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_OPEN
	printk(<FONT COLOR="#FF0000">"Shutting down serial port %d (irq %d)...."</FONT>, info-&gt;line,
	       state-&gt;irq);
<FONT COLOR=#A521F7>#endif</FONT>
	
	save_flags(flags); <A HREF="kdebug.h.shtml#cli">cli</A>(); <FONT COLOR=#0000FF>/* Disable interrupts */</FONT>

	<FONT COLOR=#0000FF>/*
	 * clear delta_msr_wait queue to avoid mem leaks: we may free the irq
	 * here so the queue might never be waken up
	 */</FONT>
	wake_up_interruptible(&amp;info-&gt;delta_msr_wait);
	
	<FONT COLOR=#0000FF>/*
	 * First unlink the serial port from the IRQ chain...
	 */</FONT>
	<FONT COLOR="#298C52">if</FONT> (info-&gt;next_port)
		info-&gt;next_port-&gt;prev_port = info-&gt;prev_port;
	<FONT COLOR="#298C52">if</FONT> (info-&gt;prev_port)
		info-&gt;prev_port-&gt;next_port = info-&gt;next_port;
	<FONT COLOR="#298C52">else</FONT>
		IRQ_ports[state-&gt;irq] = info-&gt;next_port;
	figure_IRQ_timeout(state-&gt;irq);
	
	<FONT COLOR="#298C52">if</FONT> (info-&gt;xmit_buf) {
		free_page((<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT>) info-&gt;xmit_buf);
		info-&gt;xmit_buf = 0;
	}

	info-&gt;IER = 0;
	<A HREF="#serial_outp">serial_outp</A>(info, UART_IER, 0x00);	<FONT COLOR=#0000FF>/* disable all intrs */</FONT>
		info-&gt;MCR &amp;= ~UART_MCR_OUT2;
<FONT COLOR=#A521F7>#if</FONT> defined(__alpha__) &amp;&amp; !defined(CONFIG_PCI)
	<FONT COLOR=#0000FF>/*
	 * DEC did something gratutiously wrong....
	 */</FONT>
	info-&gt;MCR |= UART_MCR_OUT1 | UART_MCR_OUT2;
<FONT COLOR=#A521F7>#endif</FONT>
	
	<FONT COLOR=#0000FF>/* disable break condition */</FONT>
	<A HREF="#serial_out">serial_out</A>(info, UART_LCR, <A HREF="#serial_inp">serial_inp</A>(info, UART_LCR) &amp; ~UART_LCR_SBC);
	
	<FONT COLOR="#298C52">if</FONT> (!info-&gt;tty || (info-&gt;tty-&gt;termios-&gt;c_cflag &amp; HUPCL))
		info-&gt;MCR &amp;= ~(UART_MCR_DTR|UART_MCR_RTS);
	<A HREF="#serial_outp">serial_outp</A>(info, UART_MCR, info-&gt;MCR);

	<FONT COLOR=#0000FF>/* disable FIFO's */</FONT>	
	<A HREF="#serial_outp">serial_outp</A>(info, UART_FCR, (UART_FCR_CLEAR_RCVR |
				     UART_FCR_CLEAR_XMIT));
	(<FONT COLOR="#298C52">void</FONT>)<A HREF="#serial_in">serial_in</A>(info, UART_RX);    <FONT COLOR=#0000FF>/* read data port to reset things */</FONT>
	
	<FONT COLOR="#298C52">if</FONT> (info-&gt;tty)
		set_bit(TTY_IO_ERROR, &amp;info-&gt;tty-&gt;flags);

	<FONT COLOR="#298C52">if</FONT> (uart_config[info-&gt;state-&gt;type].flags &amp; UART_STARTECH) {
		<FONT COLOR=#0000FF>/* Arrange to enter sleep mode */</FONT>
		<A HREF="#serial_outp">serial_outp</A>(info, UART_LCR, 0xBF);
		<A HREF="#serial_outp">serial_outp</A>(info, UART_EFR, UART_EFR_ECB);
		<A HREF="#serial_outp">serial_outp</A>(info, UART_IER, UART_IERX_SLEEP);
		<A HREF="#serial_outp">serial_outp</A>(info, UART_LCR, 0);
	}
	<FONT COLOR="#298C52">if</FONT> (info-&gt;state-&gt;type == PORT_16750) {
		<FONT COLOR=#0000FF>/* Arrange to enter sleep mode */</FONT>
		<A HREF="#serial_outp">serial_outp</A>(info, UART_IER, UART_IERX_SLEEP);
	}
	info-&gt;flags &amp;= ~ASYNC_INITIALIZED;
	<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
}

<FONT COLOR=#0000FF>/*
 * This routine is called to set the UART divisor registers to match
 * the specified baud rate for a serial port.
 */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> <A HREF="#change_speed">change_speed</A>(<FONT COLOR="#298C52">struct</FONT> async_struct *info)
{
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">short</FONT> port;
	<FONT COLOR="#298C52">int</FONT>	quot = 0, baud_base, baud;
	<FONT COLOR="#298C52">unsigned</FONT> cflag, cval, fcr = 0;
	<FONT COLOR="#298C52">int</FONT>	bits;
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT>	flags;

	<FONT COLOR="#298C52">if</FONT> (!info-&gt;tty || !info-&gt;tty-&gt;termios)
		<FONT COLOR="#298C52">return</FONT>;
	cflag = info-&gt;tty-&gt;termios-&gt;c_cflag;
	<FONT COLOR="#298C52">if</FONT> (!(port = info-&gt;port))
		<FONT COLOR="#298C52">return</FONT>;

	<FONT COLOR=#0000FF>/* byte size and parity */</FONT>
	<FONT COLOR="#298C52">switch</FONT> (cflag &amp; CSIZE) {
	      <FONT COLOR="#298C52">case</FONT> CS5: cval = 0x00; bits = 7; <FONT COLOR="#298C52">break</FONT>;
	      <FONT COLOR="#298C52">case</FONT> CS6: cval = 0x01; bits = 8; <FONT COLOR="#298C52">break</FONT>;
	      <FONT COLOR="#298C52">case</FONT> CS7: cval = 0x02; bits = 9; <FONT COLOR="#298C52">break</FONT>;
	      <FONT COLOR="#298C52">case</FONT> CS8: cval = 0x03; bits = 10; <FONT COLOR="#298C52">break</FONT>;
	      <FONT COLOR=#0000FF>/* Never happens, but GCC is too dumb to figure it out */</FONT>
	      <FONT COLOR="#298C52">default</FONT>:  cval = 0x00; bits = 7; <FONT COLOR="#298C52">break</FONT>;
	      }
	<FONT COLOR="#298C52">if</FONT> (cflag &amp; CSTOPB) {
		cval |= 0x04;
		bits++;
	}
	<FONT COLOR="#298C52">if</FONT> (cflag &amp; PARENB) {
		cval |= UART_LCR_PARITY;
		bits++;
	}
	<FONT COLOR="#298C52">if</FONT> (!(cflag &amp; PARODD))
		cval |= UART_LCR_EPAR;
<FONT COLOR=#A521F7>#ifdef</FONT> CMSPAR
	<FONT COLOR="#298C52">if</FONT> (cflag &amp; CMSPAR)
		cval |= UART_LCR_SPAR;
<FONT COLOR=#A521F7>#endif</FONT>

	<FONT COLOR=#0000FF>/* Determine divisor based on baud rate */</FONT>
	baud = tty_get_baud_rate(info-&gt;tty);
	baud_base = info-&gt;state-&gt;baud_base;
	<FONT COLOR="#298C52">if</FONT> (baud == 38400 &amp;&amp;
	    ((info-&gt;flags &amp; ASYNC_SPD_MASK) == ASYNC_SPD_CUST))
		quot = info-&gt;state-&gt;custom_divisor;
	<FONT COLOR="#298C52">else</FONT> {
		<FONT COLOR="#298C52">if</FONT> (baud == 134)
			<FONT COLOR=#0000FF>/* Special case since 134 is really 134.5 */</FONT>
			quot = (2*baud_base / 269);
		<FONT COLOR="#298C52">else</FONT> <FONT COLOR="#298C52">if</FONT> (baud)
			quot = baud_base / baud;
	}
	<FONT COLOR=#0000FF>/* If the quotient is ever zero, default to 9600 bps */</FONT>
	<FONT COLOR="#298C52">if</FONT> (!quot)
		quot = baud_base / 9600;
	info-&gt;quot = quot;
	info-&gt;timeout = ((info-&gt;xmit_fifo_size*HZ*bits*quot) / baud_base);
	info-&gt;timeout += HZ/50;		<FONT COLOR=#0000FF>/* Add .02 seconds of slop */</FONT>

	<FONT COLOR=#0000FF>/* Set up FIFO's */</FONT>
	<FONT COLOR="#298C52">if</FONT> (uart_config[info-&gt;state-&gt;type].flags &amp; UART_USE_FIFO) {
		<FONT COLOR="#298C52">if</FONT> ((info-&gt;state-&gt;baud_base / quot) &lt; 2400)
			fcr = UART_FCR_ENABLE_FIFO | UART_FCR_TRIGGER_1;
		<FONT COLOR="#298C52">else</FONT>
			fcr = UART_FCR_ENABLE_FIFO | UART_FCR_TRIGGER_8;
	}
	<FONT COLOR="#298C52">if</FONT> (info-&gt;state-&gt;type == PORT_16750)
		fcr |= UART_FCR7_64BYTE;
	
	<FONT COLOR=#0000FF>/* CTS flow control flag and modem status interrupts */</FONT>
	info-&gt;IER &amp;= ~UART_IER_MSI;
	<FONT COLOR="#298C52">if</FONT> (info-&gt;flags &amp; ASYNC_HARDPPS_CD)
		info-&gt;IER |= UART_IER_MSI;
	<FONT COLOR="#298C52">if</FONT> (cflag &amp; CRTSCTS) {
		info-&gt;flags |= ASYNC_CTS_FLOW;
		info-&gt;IER |= UART_IER_MSI;
	} <FONT COLOR="#298C52">else</FONT>
		info-&gt;flags &amp;= ~ASYNC_CTS_FLOW;
	<FONT COLOR="#298C52">if</FONT> (cflag &amp; CLOCAL)
		info-&gt;flags &amp;= ~ASYNC_CHECK_CD;
	<FONT COLOR="#298C52">else</FONT> {
		info-&gt;flags |= ASYNC_CHECK_CD;
		info-&gt;IER |= UART_IER_MSI;
	}
	<A HREF="#serial_out">serial_out</A>(info, UART_IER, info-&gt;IER);

	<FONT COLOR=#0000FF>/*
	 * Set up parity check flag
	 */</FONT>
<FONT COLOR=#A521F7>#define</FONT> <A HREF="#RELEVANT_IFLAG">RELEVANT_IFLAG</A>(iflag) (iflag &amp; (IGNBRK|BRKINT|IGNPAR|PARMRK|INPCK))

	info-&gt;read_status_mask = UART_LSR_OE | UART_LSR_THRE | UART_LSR_DR;
	<FONT COLOR="#298C52">if</FONT> (I_INPCK(info-&gt;tty))
		info-&gt;read_status_mask |= UART_LSR_FE | UART_LSR_PE;
	<FONT COLOR="#298C52">if</FONT> (I_BRKINT(info-&gt;tty) || I_PARMRK(info-&gt;tty))
		info-&gt;read_status_mask |= UART_LSR_BI;
	
	<FONT COLOR=#0000FF>/*
	 * Characters to ignore
	 */</FONT>
	info-&gt;ignore_status_mask = 0;
	<FONT COLOR="#298C52">if</FONT> (I_IGNPAR(info-&gt;tty))
		info-&gt;ignore_status_mask |= UART_LSR_PE | UART_LSR_FE;
	<FONT COLOR="#298C52">if</FONT> (I_IGNBRK(info-&gt;tty)) {
		info-&gt;ignore_status_mask |= UART_LSR_BI;
		<FONT COLOR=#0000FF>/*
		 * If we're ignore parity and break indicators, ignore 
		 * overruns too.  (For real raw support).
		 */</FONT>
		<FONT COLOR="#298C52">if</FONT> (I_IGNPAR(info-&gt;tty))
			info-&gt;ignore_status_mask |= UART_LSR_OE;
	}
	<FONT COLOR=#0000FF>/*
	 * !!! ignore all characters if CREAD is not set
	 */</FONT>
	<FONT COLOR="#298C52">if</FONT> ((cflag &amp; CREAD) == 0)
		info-&gt;ignore_status_mask |= UART_LSR_DR;
	save_flags(flags); <A HREF="kdebug.h.shtml#cli">cli</A>();
	<FONT COLOR="#298C52">if</FONT> (uart_config[info-&gt;state-&gt;type].flags &amp; UART_STARTECH) {
		<A HREF="#serial_outp">serial_outp</A>(info, UART_LCR, 0xBF);
		<A HREF="#serial_outp">serial_outp</A>(info, UART_EFR,
			    (cflag &amp; CRTSCTS) ? UART_EFR_CTS : 0);
	}
	<A HREF="#serial_outp">serial_outp</A>(info, UART_LCR, cval | UART_LCR_DLAB);	<FONT COLOR=#0000FF>/* set DLAB */</FONT>
	<A HREF="#serial_outp">serial_outp</A>(info, UART_DLL, quot &amp; 0xff);	<FONT COLOR=#0000FF>/* LS of divisor */</FONT>
	<A HREF="#serial_outp">serial_outp</A>(info, UART_DLM, quot &gt;&gt; 8);		<FONT COLOR=#0000FF>/* MS of divisor */</FONT>
	<FONT COLOR="#298C52">if</FONT> (info-&gt;state-&gt;type == PORT_16750)
		<A HREF="#serial_outp">serial_outp</A>(info, UART_FCR, fcr); 	<FONT COLOR=#0000FF>/* set fcr */</FONT>
	<A HREF="#serial_outp">serial_outp</A>(info, UART_LCR, cval);		<FONT COLOR=#0000FF>/* reset DLAB */</FONT>
	<FONT COLOR="#298C52">if</FONT> (info-&gt;state-&gt;type != PORT_16750)
		<A HREF="#serial_outp">serial_outp</A>(info, UART_FCR, fcr); 	<FONT COLOR=#0000FF>/* set fcr */</FONT>
	<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> <A HREF="#rs_put_char">rs_put_char</A>(<FONT COLOR="#298C52">struct</FONT> tty_struct *tty, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">char</FONT> ch)
{
	<FONT COLOR="#298C52">struct</FONT> async_struct *info = (<FONT COLOR="#298C52">struct</FONT> async_struct *)tty-&gt;driver_data;
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT> flags;

	<FONT COLOR="#298C52">if</FONT> (<A HREF="#serial_paranoia_check">serial_paranoia_check</A>(info, tty-&gt;device, <FONT COLOR="#FF0000">"rs_put_char"</FONT>))
		<FONT COLOR="#298C52">return</FONT>;

	<FONT COLOR="#298C52">if</FONT> (!tty || !info-&gt;xmit_buf)
		<FONT COLOR="#298C52">return</FONT>;

	save_flags(flags); <A HREF="kdebug.h.shtml#cli">cli</A>();
	<FONT COLOR="#298C52">if</FONT> (info-&gt;xmit_cnt &gt;= SERIAL_XMIT_SIZE - 1) {
		<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
		<FONT COLOR="#298C52">return</FONT>;
	}

	info-&gt;xmit_buf[info-&gt;xmit_head++] = ch;
	info-&gt;xmit_head &amp;= SERIAL_XMIT_SIZE-1;
	info-&gt;xmit_cnt++;
	<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> <A HREF="#rs_flush_chars">rs_flush_chars</A>(<FONT COLOR="#298C52">struct</FONT> tty_struct *tty)
{
	<FONT COLOR="#298C52">struct</FONT> async_struct *info = (<FONT COLOR="#298C52">struct</FONT> async_struct *)tty-&gt;driver_data;
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT> flags;
				
	<FONT COLOR="#298C52">if</FONT> (<A HREF="#serial_paranoia_check">serial_paranoia_check</A>(info, tty-&gt;device, <FONT COLOR="#FF0000">"rs_flush_chars"</FONT>))
		<FONT COLOR="#298C52">return</FONT>;

	<FONT COLOR="#298C52">if</FONT> (info-&gt;xmit_cnt &lt;= 0 || tty-&gt;stopped || tty-&gt;hw_stopped ||
	    !info-&gt;xmit_buf)
		<FONT COLOR="#298C52">return</FONT>;

	save_flags(flags); <A HREF="kdebug.h.shtml#cli">cli</A>();
	info-&gt;IER |= UART_IER_THRI;
	<A HREF="#serial_out">serial_out</A>(info, UART_IER, info-&gt;IER);
	<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> <A HREF="#rs_write">rs_write</A>(<FONT COLOR="#298C52">struct</FONT> tty_struct * tty, <FONT COLOR="#298C52">int</FONT> from_user,
		    <FONT COLOR="#298C52">const</FONT> <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">char</FONT> *buf, <FONT COLOR="#298C52">int</FONT> count)
{
	<FONT COLOR="#298C52">int</FONT>	c, ret = 0;
	<FONT COLOR="#298C52">struct</FONT> async_struct *info = (<FONT COLOR="#298C52">struct</FONT> async_struct *)tty-&gt;driver_data;
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT> flags;
				
	<FONT COLOR="#298C52">if</FONT> (<A HREF="#serial_paranoia_check">serial_paranoia_check</A>(info, tty-&gt;device, <FONT COLOR="#FF0000">"rs_write"</FONT>))
		<FONT COLOR="#298C52">return</FONT> 0;

	<FONT COLOR="#298C52">if</FONT> (!tty || !info-&gt;xmit_buf || !tmp_buf)
		<FONT COLOR="#298C52">return</FONT> 0;
	    
	<FONT COLOR="#298C52">if</FONT> (from_user)
		down(&amp;tmp_buf_sem);
	save_flags(flags);
	<FONT COLOR="#298C52">while</FONT> (1) {
		<A HREF="kdebug.h.shtml#cli">cli</A>();		
		c = <A HREF="#MIN">MIN</A>(count, <A HREF="#MIN">MIN</A>(SERIAL_XMIT_SIZE - info-&gt;xmit_cnt - 1,
				   SERIAL_XMIT_SIZE - info-&gt;xmit_head));
		<FONT COLOR="#298C52">if</FONT> (c &lt;= 0)
			<FONT COLOR="#298C52">break</FONT>;

		<FONT COLOR="#298C52">if</FONT> (from_user) {
			c -= copy_from_user(tmp_buf, buf, c);
			<FONT COLOR="#298C52">if</FONT> (!c) {
				<FONT COLOR="#298C52">if</FONT> (!ret)
					ret = -EFAULT;
				<FONT COLOR="#298C52">break</FONT>;
			}
			c = <A HREF="#MIN">MIN</A>(c, <A HREF="#MIN">MIN</A>(SERIAL_XMIT_SIZE - info-&gt;xmit_cnt - 1,
				       SERIAL_XMIT_SIZE - info-&gt;xmit_head));
			memcpy(info-&gt;xmit_buf + info-&gt;xmit_head, tmp_buf, c);
		} <FONT COLOR="#298C52">else</FONT>
			memcpy(info-&gt;xmit_buf + info-&gt;xmit_head, buf, c);
		info-&gt;xmit_head = (info-&gt;xmit_head + c) &amp; (SERIAL_XMIT_SIZE-1);
		info-&gt;xmit_cnt += c;
		<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
		buf += c;
		count -= c;
		ret += c;
	}
	<FONT COLOR="#298C52">if</FONT> (from_user)
		up(&amp;tmp_buf_sem);
	<FONT COLOR="#298C52">if</FONT> (info-&gt;xmit_cnt &amp;&amp; !tty-&gt;stopped &amp;&amp; !tty-&gt;hw_stopped &amp;&amp;
	    !(info-&gt;IER &amp; UART_IER_THRI)) {
		info-&gt;IER |= UART_IER_THRI;
		<A HREF="#serial_out">serial_out</A>(info, UART_IER, info-&gt;IER);
	}
	<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
	<FONT COLOR="#298C52">return</FONT> ret;
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> <A NAME="rs_write_room">rs_write_room</A>(<FONT COLOR="#298C52">struct</FONT> tty_struct *tty)
{
	<FONT COLOR="#298C52">struct</FONT> async_struct *info = (<FONT COLOR="#298C52">struct</FONT> async_struct *)tty-&gt;driver_data;
	<FONT COLOR="#298C52">int</FONT>	ret;
				
	<FONT COLOR="#298C52">if</FONT> (<A HREF="#serial_paranoia_check">serial_paranoia_check</A>(info, tty-&gt;device, <FONT COLOR="#FF0000">"rs_write_room"</FONT>))
		<FONT COLOR="#298C52">return</FONT> 0;
	ret = SERIAL_XMIT_SIZE - info-&gt;xmit_cnt - 1;
	<FONT COLOR="#298C52">if</FONT> (ret &lt; 0)
		ret = 0;
	<FONT COLOR="#298C52">return</FONT> ret;
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> <A HREF="#rs_chars_in_buffer">rs_chars_in_buffer</A>(<FONT COLOR="#298C52">struct</FONT> tty_struct *tty)
{
	<FONT COLOR="#298C52">struct</FONT> async_struct *info = (<FONT COLOR="#298C52">struct</FONT> async_struct *)tty-&gt;driver_data;
				
	<FONT COLOR="#298C52">if</FONT> (<A HREF="#serial_paranoia_check">serial_paranoia_check</A>(info, tty-&gt;device, <FONT COLOR="#FF0000">"rs_chars_in_buffer"</FONT>))
		<FONT COLOR="#298C52">return</FONT> 0;
	<FONT COLOR="#298C52">return</FONT> info-&gt;xmit_cnt;
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> <A HREF="#rs_flush_buffer">rs_flush_buffer</A>(<FONT COLOR="#298C52">struct</FONT> tty_struct *tty)
{
	<FONT COLOR="#298C52">struct</FONT> async_struct *info = (<FONT COLOR="#298C52">struct</FONT> async_struct *)tty-&gt;driver_data;
				
	<FONT COLOR="#298C52">if</FONT> (<A HREF="#serial_paranoia_check">serial_paranoia_check</A>(info, tty-&gt;device, <FONT COLOR="#FF0000">"rs_flush_buffer"</FONT>))
		<FONT COLOR="#298C52">return</FONT>;
	<A HREF="kdebug.h.shtml#cli">cli</A>();
	info-&gt;xmit_cnt = info-&gt;xmit_head = info-&gt;xmit_tail = 0;
	<A HREF="kdebug.h.shtml#sti">sti</A>();
	wake_up_interruptible(&amp;tty-&gt;write_wait);
	<FONT COLOR="#298C52">if</FONT> ((tty-&gt;flags &amp; (1 &lt;&lt; TTY_DO_WRITE_WAKEUP)) &amp;&amp;
	    tty-&gt;ldisc.write_wakeup)
		(tty-&gt;ldisc.write_wakeup)(tty);
}

<FONT COLOR=#0000FF>/*
 * This function is used to send a high-priority XON/XOFF character to
 * the device
 */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> <A HREF="#rs_send_xchar">rs_send_xchar</A>(<FONT COLOR="#298C52">struct</FONT> tty_struct *tty, <FONT COLOR="#298C52">char</FONT> ch)
{
	<FONT COLOR="#298C52">struct</FONT> async_struct *info = (<FONT COLOR="#298C52">struct</FONT> async_struct *)tty-&gt;driver_data;

	<FONT COLOR="#298C52">if</FONT> (<A HREF="#serial_paranoia_check">serial_paranoia_check</A>(info, tty-&gt;device, <FONT COLOR="#FF0000">"rs_send_char"</FONT>))
		<FONT COLOR="#298C52">return</FONT>;

	info-&gt;x_char = ch;
	<FONT COLOR="#298C52">if</FONT> (ch) {
		<FONT COLOR=#0000FF>/* Make sure transmit interrupts are on */</FONT>
		info-&gt;IER |= UART_IER_THRI;
		<A HREF="#serial_out">serial_out</A>(info, UART_IER, info-&gt;IER);
	}
}

<FONT COLOR=#0000FF>/*
 * ------------------------------------------------------------
 * rs_throttle()
 * 
 * This routine is called by the upper-layer tty layer to signal that
 * incoming characters should be throttled.
 * ------------------------------------------------------------
 */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> <A NAME="rs_throttle">rs_throttle</A>(<FONT COLOR="#298C52">struct</FONT> tty_struct * tty)
{
	<FONT COLOR="#298C52">struct</FONT> async_struct *info = (<FONT COLOR="#298C52">struct</FONT> async_struct *)tty-&gt;driver_data;
<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_THROTTLE
	<FONT COLOR="#298C52">char</FONT>	buf[64];
	
	printk(<FONT COLOR="#FF0000">"throttle %s: %d....\n"</FONT>, _tty_name(tty, buf),
	       tty-&gt;ldisc.chars_in_buffer(tty));
<FONT COLOR=#A521F7>#endif</FONT>

	<FONT COLOR="#298C52">if</FONT> (<A HREF="#serial_paranoia_check">serial_paranoia_check</A>(info, tty-&gt;device, <FONT COLOR="#FF0000">"rs_throttle"</FONT>))
		<FONT COLOR="#298C52">return</FONT>;
	
	<FONT COLOR="#298C52">if</FONT> (I_IXOFF(tty))
		<A HREF="#rs_send_xchar">rs_send_xchar</A>(tty, STOP_CHAR(tty));

	<FONT COLOR="#298C52">if</FONT> (tty-&gt;termios-&gt;c_cflag &amp; CRTSCTS)
		info-&gt;MCR &amp;= ~UART_MCR_RTS;

	<A HREF="kdebug.h.shtml#cli">cli</A>();
	<A HREF="#serial_out">serial_out</A>(info, UART_MCR, info-&gt;MCR);
	<A HREF="kdebug.h.shtml#sti">sti</A>();
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> <A HREF="#rs_unthrottle">rs_unthrottle</A>(<FONT COLOR="#298C52">struct</FONT> tty_struct * tty)
{
	<FONT COLOR="#298C52">struct</FONT> async_struct *info = (<FONT COLOR="#298C52">struct</FONT> async_struct *)tty-&gt;driver_data;
<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_THROTTLE
	<FONT COLOR="#298C52">char</FONT>	buf[64];
	
	printk(<FONT COLOR="#FF0000">"unthrottle %s: %d....\n"</FONT>, _tty_name(tty, buf),
	       tty-&gt;ldisc.chars_in_buffer(tty));
<FONT COLOR=#A521F7>#endif</FONT>

	<FONT COLOR="#298C52">if</FONT> (<A HREF="#serial_paranoia_check">serial_paranoia_check</A>(info, tty-&gt;device, <FONT COLOR="#FF0000">"rs_unthrottle"</FONT>))
		<FONT COLOR="#298C52">return</FONT>;
	
	<FONT COLOR="#298C52">if</FONT> (I_IXOFF(tty)) {
		<FONT COLOR="#298C52">if</FONT> (info-&gt;x_char)
			info-&gt;x_char = 0;
		<FONT COLOR="#298C52">else</FONT>
			<A HREF="#rs_send_xchar">rs_send_xchar</A>(tty, START_CHAR(tty));
	}
	<FONT COLOR="#298C52">if</FONT> (tty-&gt;termios-&gt;c_cflag &amp; CRTSCTS)
		info-&gt;MCR |= UART_MCR_RTS;
	<A HREF="kdebug.h.shtml#cli">cli</A>();
	<A HREF="#serial_out">serial_out</A>(info, UART_MCR, info-&gt;MCR);
	<A HREF="kdebug.h.shtml#sti">sti</A>();
}

<FONT COLOR=#0000FF>/*
 * ------------------------------------------------------------
 * rs_ioctl() and friends
 * ------------------------------------------------------------
 */</FONT>

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> <A HREF="#get_serial_info">get_serial_info</A>(<FONT COLOR="#298C52">struct</FONT> async_struct * info,
			   <FONT COLOR="#298C52">struct</FONT> serial_struct * retinfo)
{
	<FONT COLOR="#298C52">struct</FONT> serial_struct tmp;
	<FONT COLOR="#298C52">struct</FONT> serial_state *state = info-&gt;state;
   
	<FONT COLOR="#298C52">if</FONT> (!retinfo)
		<FONT COLOR="#298C52">return</FONT> -EFAULT;
	memset(&amp;tmp, 0, <FONT COLOR="#298C52">sizeof</FONT>(tmp));
	tmp.type = state-&gt;type;
	tmp.line = state-&gt;line;
	tmp.port = state-&gt;port;
	tmp.irq = state-&gt;irq;
	tmp.flags = state-&gt;flags;
	tmp.xmit_fifo_size = state-&gt;xmit_fifo_size;
	tmp.baud_base = state-&gt;baud_base;
	tmp.close_delay = state-&gt;close_delay;
	tmp.closing_wait = state-&gt;closing_wait;
	tmp.custom_divisor = state-&gt;custom_divisor;
	tmp.hub6 = state-&gt;hub6;
	<FONT COLOR="#298C52">if</FONT> (copy_to_user(retinfo,&amp;tmp,<FONT COLOR="#298C52">sizeof</FONT>(*retinfo)))
		<FONT COLOR="#298C52">return</FONT> -EFAULT;
	<FONT COLOR="#298C52">return</FONT> 0;
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> <A HREF="#set_serial_info">set_serial_info</A>(<FONT COLOR="#298C52">struct</FONT> async_struct * info,
			   <FONT COLOR="#298C52">struct</FONT> serial_struct * new_info)
{
	<FONT COLOR="#298C52">struct</FONT> serial_struct new_serial;
 	<FONT COLOR="#298C52">struct</FONT> serial_state old_state, *state;
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT>		i,change_irq,change_port;
	<FONT COLOR="#298C52">int</FONT> 			retval = 0;

	<FONT COLOR="#298C52">if</FONT> (copy_from_user(&amp;new_serial,new_info,<FONT COLOR="#298C52">sizeof</FONT>(new_serial)))
		<FONT COLOR="#298C52">return</FONT> -EFAULT;
	state = info-&gt;state;
	old_state = *state;
  
	change_irq = new_serial.irq != state-&gt;irq;
	change_port = (new_serial.port != state-&gt;port) ||
		(new_serial.hub6 != state-&gt;hub6);
  
	<FONT COLOR="#298C52">if</FONT> (!suser()) {
		<FONT COLOR="#298C52">if</FONT> (change_irq || change_port ||
		    (new_serial.baud_base != state-&gt;baud_base) ||
		    (new_serial.type != state-&gt;type) ||
		    (new_serial.close_delay != state-&gt;close_delay) ||
		    (new_serial.xmit_fifo_size != state-&gt;xmit_fifo_size) ||
		    ((new_serial.flags &amp; ~ASYNC_USR_MASK) !=
		     (state-&gt;flags &amp; ~ASYNC_USR_MASK)))
			<FONT COLOR="#298C52">return</FONT> -EPERM;
		state-&gt;flags = ((state-&gt;flags &amp; ~ASYNC_USR_MASK) |
			       (new_serial.flags &amp; ASYNC_USR_MASK));
		state-&gt;custom_divisor = new_serial.custom_divisor;
		<FONT COLOR="#298C52">goto</FONT> check_and_exit;
	}

	<FONT COLOR="#298C52">if</FONT> (new_serial.irq == 2)
		new_serial.irq = 9;

	<FONT COLOR="#298C52">if</FONT> ((new_serial.irq &gt; 15) || (new_serial.port &gt; 0xffff) ||
	    (new_serial.type &lt; PORT_UNKNOWN) || (new_serial.type &gt; PORT_MAX)) {
		<FONT COLOR="#298C52">return</FONT> -EINVAL;
	}

	<FONT COLOR=#0000FF>/* Make sure address is not already in use */</FONT>
	<FONT COLOR="#298C52">if</FONT> (new_serial.type) {
		<FONT COLOR="#298C52">for</FONT> (i = 0 ; i &lt; <A HREF="#NR_PORTS">NR_PORTS</A>; i++)
			<FONT COLOR="#298C52">if</FONT> ((state != &amp;rs_table[i]) &amp;&amp;
			    (rs_table[i].port == new_serial.port) &amp;&amp;
			    rs_table[i].type)
				<FONT COLOR="#298C52">return</FONT> -EADDRINUSE;
	}

	<FONT COLOR="#298C52">if</FONT> ((change_port || change_irq) &amp;&amp; (state-&gt;count &gt; 1))
		<FONT COLOR="#298C52">return</FONT> -EBUSY;

	<FONT COLOR=#0000FF>/*
	 * OK, past this point, all the error checking has been done.
	 * At this point, we start making changes.....
	 */</FONT>

	state-&gt;baud_base = new_serial.baud_base;
	state-&gt;flags = ((state-&gt;flags &amp; ~ASYNC_FLAGS) |
			(new_serial.flags &amp; ASYNC_FLAGS));
	info-&gt;flags = ((state-&gt;flags &amp; ~ASYNC_INTERNAL_FLAGS) |
		       (info-&gt;flags &amp; ASYNC_INTERNAL_FLAGS));
	state-&gt;custom_divisor = new_serial.custom_divisor;
	state-&gt;type = new_serial.type;
	state-&gt;close_delay = new_serial.close_delay * HZ/100;
	state-&gt;closing_wait = new_serial.closing_wait * HZ/100;
	info-&gt;xmit_fifo_size = state-&gt;xmit_fifo_size =
		new_serial.xmit_fifo_size;

	release_region(state-&gt;port,8);
	<FONT COLOR="#298C52">if</FONT> (change_port || change_irq) {
		<FONT COLOR=#0000FF>/*
		 * We need to shutdown the serial port at the old
		 * port/irq combination.
		 */</FONT>
		<A HREF="#shutdown">shutdown</A>(info);
		state-&gt;irq = new_serial.irq;
		info-&gt;port = state-&gt;port = new_serial.port;
		info-&gt;hub6 = state-&gt;hub6 = new_serial.hub6;
	}
	<FONT COLOR="#298C52">if</FONT> (state-&gt;type != PORT_UNKNOWN)
		request_region(state-&gt;port,8,<FONT COLOR="#FF0000">"serial(set)"</FONT>);

	
check_and_exit:
	<FONT COLOR="#298C52">if</FONT> (!state-&gt;port || !state-&gt;type)
		<FONT COLOR="#298C52">return</FONT> 0;
	<FONT COLOR="#298C52">if</FONT> (state-&gt;type != old_state.type)
		info-&gt;xmit_fifo_size = state-&gt;xmit_fifo_size =
			uart_config[state-&gt;type].dfl_xmit_fifo_size;
	<FONT COLOR="#298C52">if</FONT> (state-&gt;flags &amp; ASYNC_INITIALIZED) {
		<FONT COLOR="#298C52">if</FONT> (((old_state.flags &amp; ASYNC_SPD_MASK) !=
		     (state-&gt;flags &amp; ASYNC_SPD_MASK)) ||
		    (old_state.custom_divisor != state-&gt;custom_divisor)) {
			<FONT COLOR="#298C52">if</FONT> ((state-&gt;flags &amp; ASYNC_SPD_MASK) == ASYNC_SPD_HI)
				info-&gt;tty-&gt;alt_speed = 57600;
			<FONT COLOR="#298C52">if</FONT> ((state-&gt;flags &amp; ASYNC_SPD_MASK) == ASYNC_SPD_VHI)
				info-&gt;tty-&gt;alt_speed = 115200;
			<FONT COLOR="#298C52">if</FONT> ((state-&gt;flags &amp; ASYNC_SPD_MASK) == ASYNC_SPD_SHI)
				info-&gt;tty-&gt;alt_speed = 230400;
			<FONT COLOR="#298C52">if</FONT> ((state-&gt;flags &amp; ASYNC_SPD_MASK) == ASYNC_SPD_WARP)
				info-&gt;tty-&gt;alt_speed = 460800;
			<A HREF="#change_speed">change_speed</A>(info);
		}
	} <FONT COLOR="#298C52">else</FONT>
		retval = <A HREF="#startup">startup</A>(info);
	<FONT COLOR="#298C52">return</FONT> retval;
}


<FONT COLOR=#0000FF>/*
 * get_lsr_info - get line status register info
 *
 * Purpose: Let user call ioctl() to get info when the UART physically
 * 	    is emptied.  On bus types like RS485, the transmitter must
 * 	    release the bus after transmitting. This must be done when
 * 	    the transmit shift register is empty, not be done when the
 * 	    transmit holding register is empty.  This functionality
 * 	    allows an RS485 driver to be written in user space. 
 */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> <A HREF="#get_lsr_info">get_lsr_info</A>(<FONT COLOR="#298C52">struct</FONT> async_struct * info, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> *value)
{
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">char</FONT> status;
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> result;

	<A HREF="kdebug.h.shtml#cli">cli</A>();
	status = <A HREF="#serial_in">serial_in</A>(info, UART_LSR);
	<A HREF="kdebug.h.shtml#sti">sti</A>();
	result = ((status &amp; UART_LSR_TEMT) ? TIOCSER_TEMT : 0);
	<FONT COLOR="#298C52">return</FONT> put_user(result,value);
}


<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> <A HREF="#get_modem_info">get_modem_info</A>(<FONT COLOR="#298C52">struct</FONT> async_struct * info, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> *value)
{
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">char</FONT> control, status;
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> result;

	control = info-&gt;MCR;
	<A HREF="kdebug.h.shtml#cli">cli</A>();
	status = <A HREF="#serial_in">serial_in</A>(info, UART_MSR);
	<A HREF="kdebug.h.shtml#sti">sti</A>();
	result =  ((control &amp; UART_MCR_RTS) ? TIOCM_RTS : 0)
		| ((control &amp; UART_MCR_DTR) ? TIOCM_DTR : 0)
<FONT COLOR=#A521F7>#ifdef</FONT> TIOCM_OUT1
		| ((control &amp; UART_MCR_OUT1) ? TIOCM_OUT1 : 0)
		| ((control &amp; UART_MCR_OUT2) ? TIOCM_OUT2 : 0)
<FONT COLOR=#A521F7>#endif</FONT>
		| ((status  &amp; UART_MSR_DCD) ? TIOCM_CAR : 0)
		| ((status  &amp; UART_MSR_RI) ? TIOCM_RNG : 0)
		| ((status  &amp; UART_MSR_DSR) ? TIOCM_DSR : 0)
		| ((status  &amp; UART_MSR_CTS) ? TIOCM_CTS : 0);
	<FONT COLOR="#298C52">return</FONT> put_user(result,value);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> <A HREF="#set_modem_info">set_modem_info</A>(<FONT COLOR="#298C52">struct</FONT> async_struct * info, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> cmd,
			  <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> *value)
{
	<FONT COLOR="#298C52">int</FONT> error;
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> arg;

	error = get_user(arg, value);
	<FONT COLOR="#298C52">if</FONT> (error)
		<FONT COLOR="#298C52">return</FONT> error;
	<FONT COLOR="#298C52">switch</FONT> (cmd) {
	<FONT COLOR="#298C52">case</FONT> TIOCMBIS: 
		<FONT COLOR="#298C52">if</FONT> (arg &amp; TIOCM_RTS)
			info-&gt;MCR |= UART_MCR_RTS;
		<FONT COLOR="#298C52">if</FONT> (arg &amp; TIOCM_DTR)
			info-&gt;MCR |= UART_MCR_DTR;
<FONT COLOR=#A521F7>#ifdef</FONT> TIOCM_OUT1
		<FONT COLOR="#298C52">if</FONT> (arg &amp; TIOCM_OUT1)
			info-&gt;MCR |= UART_MCR_OUT1;
		<FONT COLOR="#298C52">if</FONT> (arg &amp; TIOCM_OUT2)
			info-&gt;MCR |= UART_MCR_OUT2;
<FONT COLOR=#A521F7>#endif</FONT>
		<FONT COLOR="#298C52">break</FONT>;
	<FONT COLOR="#298C52">case</FONT> TIOCMBIC:
		<FONT COLOR="#298C52">if</FONT> (arg &amp; TIOCM_RTS)
			info-&gt;MCR &amp;= ~UART_MCR_RTS;
		<FONT COLOR="#298C52">if</FONT> (arg &amp; TIOCM_DTR)
			info-&gt;MCR &amp;= ~UART_MCR_DTR;
<FONT COLOR=#A521F7>#ifdef</FONT> TIOCM_OUT1
		<FONT COLOR="#298C52">if</FONT> (arg &amp; TIOCM_OUT1)
			info-&gt;MCR &amp;= ~UART_MCR_OUT1;
		<FONT COLOR="#298C52">if</FONT> (arg &amp; TIOCM_OUT2)
			info-&gt;MCR &amp;= ~UART_MCR_OUT2;
<FONT COLOR=#A521F7>#endif</FONT>
		<FONT COLOR="#298C52">break</FONT>;
	<FONT COLOR="#298C52">case</FONT> TIOCMSET:
		info-&gt;MCR = ((info-&gt;MCR &amp; ~(UART_MCR_RTS |
<FONT COLOR=#A521F7>#ifdef</FONT> TIOCM_OUT1
					    UART_MCR_OUT1 |
					    UART_MCR_OUT2 |
<FONT COLOR=#A521F7>#endif</FONT>
					    UART_MCR_DTR))
			     | ((arg &amp; TIOCM_RTS) ? UART_MCR_RTS : 0)
<FONT COLOR=#A521F7>#ifdef</FONT> TIOCM_OUT1
			     | ((arg &amp; TIOCM_OUT1) ? UART_MCR_OUT1 : 0)
			     | ((arg &amp; TIOCM_OUT2) ? UART_MCR_OUT2 : 0)
<FONT COLOR=#A521F7>#endif</FONT>
			     | ((arg &amp; TIOCM_DTR) ? UART_MCR_DTR : 0));
		<FONT COLOR="#298C52">break</FONT>;
	<FONT COLOR="#298C52">default</FONT>:
		<FONT COLOR="#298C52">return</FONT> -EINVAL;
	}
	<A HREF="kdebug.h.shtml#cli">cli</A>();
	<A HREF="#serial_out">serial_out</A>(info, UART_MCR, info-&gt;MCR);
	<A HREF="kdebug.h.shtml#sti">sti</A>();
	<FONT COLOR="#298C52">return</FONT> 0;
}

<FONT COLOR=#0000FF>/*
 * rs_break() --- routine which turns the break handling on or off
 */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> <A HREF="#rs_break">rs_break</A>(<FONT COLOR="#298C52">struct</FONT> tty_struct *tty, <FONT COLOR="#298C52">int</FONT> break_state)
{
	<FONT COLOR="#298C52">struct</FONT> async_struct * info = (<FONT COLOR="#298C52">struct</FONT> async_struct *)tty-&gt;driver_data;
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT> flags;
	
	<FONT COLOR="#298C52">if</FONT> (<A HREF="#serial_paranoia_check">serial_paranoia_check</A>(info, tty-&gt;device, <FONT COLOR="#FF0000">"rs_break"</FONT>))
		<FONT COLOR="#298C52">return</FONT>;

	<FONT COLOR="#298C52">if</FONT> (!info-&gt;port)
		<FONT COLOR="#298C52">return</FONT>;
	save_flags(flags); <A HREF="kdebug.h.shtml#cli">cli</A>();
	<FONT COLOR="#298C52">if</FONT> (break_state == -1)
		<A HREF="#serial_out">serial_out</A>(info, UART_LCR,
			   <A HREF="#serial_inp">serial_inp</A>(info, UART_LCR) | UART_LCR_SBC);
	<FONT COLOR="#298C52">else</FONT>
		<A HREF="#serial_out">serial_out</A>(info, UART_LCR,
			   <A HREF="#serial_inp">serial_inp</A>(info, UART_LCR) &amp; ~UART_LCR_SBC);
	<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> <A HREF="#rs_ioctl">rs_ioctl</A>(<FONT COLOR="#298C52">struct</FONT> tty_struct *tty, <FONT COLOR="#298C52">struct</FONT> file * file,
		    <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> cmd, <FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT> arg)
{
	<FONT COLOR="#298C52">int</FONT> error;
	<FONT COLOR="#298C52">struct</FONT> async_struct * info = (<FONT COLOR="#298C52">struct</FONT> async_struct *)tty-&gt;driver_data;
	<FONT COLOR="#298C52">struct</FONT> async_icount cprev, cnow;	<FONT COLOR=#0000FF>/* kernel counter temps */</FONT>
	<FONT COLOR="#298C52">struct</FONT> serial_icounter_struct *p_cuser;	<FONT COLOR=#0000FF>/* user space */</FONT>

	<FONT COLOR="#298C52">if</FONT> (<A HREF="#serial_paranoia_check">serial_paranoia_check</A>(info, tty-&gt;device, <FONT COLOR="#FF0000">"rs_ioctl"</FONT>))
		<FONT COLOR="#298C52">return</FONT> -ENODEV;

	<FONT COLOR="#298C52">if</FONT> ((cmd != TIOCGSERIAL) &amp;&amp; (cmd != TIOCSSERIAL) &amp;&amp;
	    (cmd != TIOCSERCONFIG) &amp;&amp; (cmd != TIOCSERGWILD)  &amp;&amp;
	    (cmd != TIOCSERSWILD) &amp;&amp; (cmd != TIOCSERGSTRUCT) &amp;&amp;
	    (cmd != TIOCMIWAIT) &amp;&amp; (cmd != TIOCGICOUNT)) {
		<FONT COLOR="#298C52">if</FONT> (tty-&gt;flags &amp; (1 &lt;&lt; TTY_IO_ERROR))
		    <FONT COLOR="#298C52">return</FONT> -EIO;
	}
	
	<FONT COLOR="#298C52">switch</FONT> (cmd) {
		<FONT COLOR="#298C52">case</FONT> TIOCMGET:
			<FONT COLOR="#298C52">return</FONT> <A HREF="#get_modem_info">get_modem_info</A>(info, (<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> *) arg);
		<FONT COLOR="#298C52">case</FONT> TIOCMBIS:
		<FONT COLOR="#298C52">case</FONT> TIOCMBIC:
		<FONT COLOR="#298C52">case</FONT> TIOCMSET:
			<FONT COLOR="#298C52">return</FONT> <A HREF="#set_modem_info">set_modem_info</A>(info, cmd, (<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> *) arg);
		<FONT COLOR="#298C52">case</FONT> TIOCGSERIAL:
			<FONT COLOR="#298C52">return</FONT> <A HREF="#get_serial_info">get_serial_info</A>(info,
					       (<FONT COLOR="#298C52">struct</FONT> serial_struct *) arg);
		<FONT COLOR="#298C52">case</FONT> TIOCSSERIAL:
			<FONT COLOR="#298C52">return</FONT> <A HREF="#set_serial_info">set_serial_info</A>(info,
					       (<FONT COLOR="#298C52">struct</FONT> serial_struct *) arg);
		<FONT COLOR="#298C52">case</FONT> TIOCSERCONFIG:
			<FONT COLOR="#298C52">return</FONT> do_autoconfig(info);

		<FONT COLOR="#298C52">case</FONT> TIOCSERGWILD:
			<FONT COLOR="#298C52">return</FONT> put_user(rs_wild_int_mask,
					(<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> *) arg);
		<FONT COLOR="#298C52">case</FONT> TIOCSERGETLSR: <FONT COLOR=#0000FF>/* Get line status register */</FONT>
			<FONT COLOR="#298C52">return</FONT> <A HREF="#get_lsr_info">get_lsr_info</A>(info, (<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> *) arg);

		<FONT COLOR="#298C52">case</FONT> TIOCSERSWILD:
			<FONT COLOR="#298C52">if</FONT> (!suser())
				<FONT COLOR="#298C52">return</FONT> -EPERM;
			error = get_user(rs_wild_int_mask,
					 (<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">int</FONT> *) arg);
			<FONT COLOR="#298C52">if</FONT> (error)
				<FONT COLOR="#298C52">return</FONT> error;
			<FONT COLOR="#298C52">if</FONT> (rs_wild_int_mask &lt; 0)
				rs_wild_int_mask = check_wild_interrupts(0);
			<FONT COLOR="#298C52">return</FONT> 0;

		<FONT COLOR="#298C52">case</FONT> TIOCSERGSTRUCT:
			<FONT COLOR="#298C52">if</FONT> (copy_to_user((<FONT COLOR="#298C52">struct</FONT> async_struct *) arg,
					 info, <FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> async_struct)))
				<FONT COLOR="#298C52">return</FONT> -EFAULT;
			<FONT COLOR="#298C52">return</FONT> 0;
							
		<FONT COLOR=#0000FF>/*
		 * Wait for any of the 4 modem inputs (DCD,RI,DSR,CTS) to change
		 * - mask passed in arg for lines of interest
 		 *   (use |'ed TIOCM_RNG/DSR/CD/CTS for masking)
		 * Caller should use TIOCGICOUNT to see which one it was
		 */</FONT>
		 <FONT COLOR="#298C52">case</FONT> TIOCMIWAIT:
			<A HREF="kdebug.h.shtml#cli">cli</A>();
			<FONT COLOR=#0000FF>/* note the counters on entry */</FONT>
			cprev = info-&gt;state-&gt;icount;
			<A HREF="kdebug.h.shtml#sti">sti</A>();
			<FONT COLOR="#298C52">while</FONT> (1) {
				interruptible_sleep_on(&amp;info-&gt;delta_msr_wait);
				<FONT COLOR=#0000FF>/* see if a signal did it */</FONT>
				<FONT COLOR="#298C52">if</FONT> (signal_pending(current))
					<FONT COLOR="#298C52">return</FONT> -ERESTARTSYS;
				<A HREF="kdebug.h.shtml#cli">cli</A>();
				cnow = info-&gt;state-&gt;icount; <FONT COLOR=#0000FF>/* atomic copy */</FONT>
				<A HREF="kdebug.h.shtml#sti">sti</A>();
				<FONT COLOR="#298C52">if</FONT> (cnow.rng == cprev.rng &amp;&amp; cnow.dsr == cprev.dsr &amp;&amp; 
				    cnow.dcd == cprev.dcd &amp;&amp; cnow.cts == cprev.cts)
					<FONT COLOR="#298C52">return</FONT> -EIO; <FONT COLOR=#0000FF>/* no change =&gt; error */</FONT>
				<FONT COLOR="#298C52">if</FONT> ( ((arg &amp; TIOCM_RNG) &amp;&amp; (cnow.rng != cprev.rng)) ||
				     ((arg &amp; TIOCM_DSR) &amp;&amp; (cnow.dsr != cprev.dsr)) ||
				     ((arg &amp; TIOCM_CD)  &amp;&amp; (cnow.dcd != cprev.dcd)) ||
				     ((arg &amp; TIOCM_CTS) &amp;&amp; (cnow.cts != cprev.cts)) ) {
					<FONT COLOR="#298C52">return</FONT> 0;
				}
				cprev = cnow;
			}
			<FONT COLOR=#0000FF>/* NOTREACHED */</FONT>

		<FONT COLOR=#0000FF>/* 
		 * Get counter of input serial line interrupts (DCD,RI,DSR,CTS)
		 * Return: write counters to the user passed counter struct
		 * NB: both 1-&gt;0 and 0-&gt;1 transitions are counted except for
		 *     RI where only 0-&gt;1 is counted.
		 */</FONT>
		<FONT COLOR="#298C52">case</FONT> TIOCGICOUNT:
			<A HREF="kdebug.h.shtml#cli">cli</A>();
			cnow = info-&gt;state-&gt;icount;
			<A HREF="kdebug.h.shtml#sti">sti</A>();
			p_cuser = (<FONT COLOR="#298C52">struct</FONT> serial_icounter_struct *) arg;
			error = put_user(cnow.cts, &amp;p_cuser-&gt;cts);
			<FONT COLOR="#298C52">if</FONT> (error) <FONT COLOR="#298C52">return</FONT> error;
			error = put_user(cnow.dsr, &amp;p_cuser-&gt;dsr);
			<FONT COLOR="#298C52">if</FONT> (error) <FONT COLOR="#298C52">return</FONT> error;
			error = put_user(cnow.rng, &amp;p_cuser-&gt;rng);
			<FONT COLOR="#298C52">if</FONT> (error) <FONT COLOR="#298C52">return</FONT> error;
			error = put_user(cnow.dcd, &amp;p_cuser-&gt;dcd);
			<FONT COLOR="#298C52">if</FONT> (error) <FONT COLOR="#298C52">return</FONT> error;
			<FONT COLOR="#298C52">return</FONT> 0;

		<FONT COLOR="#298C52">default</FONT>:
			<FONT COLOR="#298C52">return</FONT> -ENOIOCTLCMD;
		}
	<FONT COLOR="#298C52">return</FONT> 0;
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> <A HREF="#rs_set_termios">rs_set_termios</A>(<FONT COLOR="#298C52">struct</FONT> tty_struct *tty, <FONT COLOR="#298C52">struct</FONT> termios *old_termios)
{
	<FONT COLOR="#298C52">struct</FONT> async_struct *info = (<FONT COLOR="#298C52">struct</FONT> async_struct *)tty-&gt;driver_data;

	<FONT COLOR="#298C52">if</FONT> (   (tty-&gt;termios-&gt;c_cflag == old_termios-&gt;c_cflag)
	    &amp;&amp; (   <A HREF="#RELEVANT_IFLAG">RELEVANT_IFLAG</A>(tty-&gt;termios-&gt;c_iflag) 
		== <A HREF="#RELEVANT_IFLAG">RELEVANT_IFLAG</A>(old_termios-&gt;c_iflag)))
	  <FONT COLOR="#298C52">return</FONT>;

	<A HREF="#change_speed">change_speed</A>(info);

	<FONT COLOR=#0000FF>/* Handle transition to B0 status */</FONT>
	<FONT COLOR="#298C52">if</FONT> ((old_termios-&gt;c_cflag &amp; CBAUD) &amp;&amp;
	    !(tty-&gt;termios-&gt;c_cflag &amp; CBAUD)) {
		info-&gt;MCR &amp;= ~(UART_MCR_DTR|UART_MCR_RTS);
		<A HREF="kdebug.h.shtml#cli">cli</A>();
		<A HREF="#serial_out">serial_out</A>(info, UART_MCR, info-&gt;MCR);
		<A HREF="kdebug.h.shtml#sti">sti</A>();
	}
	
	<FONT COLOR=#0000FF>/* Handle transition away from B0 status */</FONT>
	<FONT COLOR="#298C52">if</FONT> (!(old_termios-&gt;c_cflag &amp; CBAUD) &amp;&amp;
	    (tty-&gt;termios-&gt;c_cflag &amp; CBAUD)) {
		info-&gt;MCR |= UART_MCR_DTR;
		<FONT COLOR="#298C52">if</FONT> (!(tty-&gt;termios-&gt;c_cflag &amp; CRTSCTS) || 
		    !test_bit(TTY_THROTTLED, &amp;tty-&gt;flags)) {
			info-&gt;MCR |= UART_MCR_RTS;
		}
		<A HREF="kdebug.h.shtml#cli">cli</A>();
		<A HREF="#serial_out">serial_out</A>(info, UART_MCR, info-&gt;MCR);
		<A HREF="kdebug.h.shtml#sti">sti</A>();
	}
	
	<FONT COLOR=#0000FF>/* Handle turning off CRTSCTS */</FONT>
	<FONT COLOR="#298C52">if</FONT> ((old_termios-&gt;c_cflag &amp; CRTSCTS) &amp;&amp;
	    !(tty-&gt;termios-&gt;c_cflag &amp; CRTSCTS)) {
		tty-&gt;hw_stopped = 0;
		<A HREF="#rs_start">rs_start</A>(tty);
	}

<FONT COLOR=#A521F7>#if</FONT> 0
	<FONT COLOR=#0000FF>/*
	 * No need to wake up processes in open wait, since they
	 * sample the CLOCAL flag once, and don't recheck it.
	 * XXX  It's not clear whether the current behavior is correct
	 * or not.  Hence, this may change.....
	 */</FONT>
	<FONT COLOR="#298C52">if</FONT> (!(old_termios-&gt;c_cflag &amp; CLOCAL) &amp;&amp;
	    (tty-&gt;termios-&gt;c_cflag &amp; CLOCAL))
		wake_up_interruptible(&amp;info-&gt;open_wait);
<FONT COLOR=#A521F7>#endif</FONT>
}

<FONT COLOR=#0000FF>/*
 * ------------------------------------------------------------
 * rs_close()
 * 
 * This routine is called when the serial port gets closed.  First, we
 * wait for the last remaining data to be sent.  Then, we unlink its
 * async structure from the interrupt chain if necessary, and we free
 * that IRQ if nothing is left in the chain.
 * ------------------------------------------------------------
 */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> <A HREF="#rs_close">rs_close</A>(<FONT COLOR="#298C52">struct</FONT> tty_struct *tty, <FONT COLOR="#298C52">struct</FONT> file * filp)
{
	<FONT COLOR="#298C52">struct</FONT> async_struct * info = (<FONT COLOR="#298C52">struct</FONT> async_struct *)tty-&gt;driver_data;
	<FONT COLOR="#298C52">struct</FONT> serial_state *state;
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT> flags;

	<FONT COLOR="#298C52">if</FONT> (!info || <A HREF="#serial_paranoia_check">serial_paranoia_check</A>(info, tty-&gt;device, <FONT COLOR="#FF0000">"rs_close"</FONT>))
		<FONT COLOR="#298C52">return</FONT>;

	state = info-&gt;state;
	
	save_flags(flags); <A HREF="kdebug.h.shtml#cli">cli</A>();
	
	<FONT COLOR="#298C52">if</FONT> (tty_hung_up_p(filp)) {
		<A HREF="#DBG_CNT">DBG_CNT</A>(<FONT COLOR="#FF0000">"before DEC-hung"</FONT>);
		MOD_DEC_USE_COUNT;
		<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
		<FONT COLOR="#298C52">return</FONT>;
	}
	
<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_OPEN
	printk(<FONT COLOR="#FF0000">"rs_close ttys%d, count = %d\n"</FONT>, info-&gt;line, state-&gt;count);
<FONT COLOR=#A521F7>#endif</FONT>
	<FONT COLOR="#298C52">if</FONT> ((tty-&gt;count == 1) &amp;&amp; (state-&gt;count != 1)) {
		<FONT COLOR=#0000FF>/*
		 * Uh, oh.  tty-&gt;count is 1, which means that the tty
		 * structure will be freed.  state-&gt;count should always
		 * be one in these conditions.  If it's greater than
		 * one, we've got real problems, since it means the
		 * serial port won't be shutdown.
		 */</FONT>
		printk(<FONT COLOR="#FF0000">"rs_close: bad serial port count; tty-&gt;count is 1, "</FONT>
		       <FONT COLOR="#FF0000">"state-&gt;count is %d\n"</FONT>, state-&gt;count);
		state-&gt;count = 1;
	}
	<FONT COLOR="#298C52">if</FONT> (--state-&gt;count &lt; 0) {
		printk(<FONT COLOR="#FF0000">"rs_close: bad serial port count for ttys%d: %d\n"</FONT>,
		       info-&gt;line, state-&gt;count);
		state-&gt;count = 0;
	}
	<FONT COLOR="#298C52">if</FONT> (state-&gt;count) {
		<A HREF="#DBG_CNT">DBG_CNT</A>(<FONT COLOR="#FF0000">"before DEC-2"</FONT>);
		MOD_DEC_USE_COUNT;
		<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
		<FONT COLOR="#298C52">return</FONT>;
	}
	info-&gt;flags |= ASYNC_CLOSING;
	<FONT COLOR=#0000FF>/*
	 * Save the termios structure, since this port may have
	 * separate termios for callout and dialin.
	 */</FONT>
	<FONT COLOR="#298C52">if</FONT> (info-&gt;flags &amp; ASYNC_NORMAL_ACTIVE)
		info-&gt;state-&gt;normal_termios = *tty-&gt;termios;
	<FONT COLOR="#298C52">if</FONT> (info-&gt;flags &amp; ASYNC_CALLOUT_ACTIVE)
		info-&gt;state-&gt;callout_termios = *tty-&gt;termios;
	<FONT COLOR=#0000FF>/*
	 * Now we wait for the transmit buffer to clear; and we notify 
	 * the line discipline to only process XON/XOFF characters.
	 */</FONT>
	tty-&gt;closing = 1;
	<FONT COLOR="#298C52">if</FONT> (info-&gt;closing_wait != ASYNC_CLOSING_WAIT_NONE)
		tty_wait_until_sent(tty, info-&gt;closing_wait);
	<FONT COLOR=#0000FF>/*
	 * At this point we stop accepting input.  To do this, we
	 * disable the receive line status interrupts, and tell the
	 * interrupt driver to stop checking the data ready bit in the
	 * line status register.
	 */</FONT>
	info-&gt;IER &amp;= ~UART_IER_RLSI;
	info-&gt;read_status_mask &amp;= ~UART_LSR_DR;
	<FONT COLOR="#298C52">if</FONT> (info-&gt;flags &amp; ASYNC_INITIALIZED) {
		<A HREF="#serial_out">serial_out</A>(info, UART_IER, info-&gt;IER);
		<FONT COLOR=#0000FF>/*
		 * Before we drop DTR, make sure the UART transmitter
		 * has completely drained; this is especially
		 * important if there is a transmit FIFO!
		 */</FONT>
		<A HREF="#rs_wait_until_sent">rs_wait_until_sent</A>(tty, info-&gt;timeout);
	}
	<A HREF="#shutdown">shutdown</A>(info);
	<FONT COLOR="#298C52">if</FONT> (tty-&gt;<A HREF="../includes/isdn.h.shtml#driver">driver</A>.flush_buffer)
		tty-&gt;<A HREF="../includes/isdn.h.shtml#driver">driver</A>.flush_buffer(tty);
	<FONT COLOR="#298C52">if</FONT> (tty-&gt;ldisc.flush_buffer)
		tty-&gt;ldisc.flush_buffer(tty);
	tty-&gt;closing = 0;
	info-&gt;event = 0;
	info-&gt;tty = 0;
	<FONT COLOR="#298C52">if</FONT> (info-&gt;blocked_open) {
		<FONT COLOR="#298C52">if</FONT> (info-&gt;close_delay) {
			current-&gt;state = TASK_INTERRUPTIBLE;
			current-&gt;timeout = jiffies + info-&gt;close_delay;
			schedule();
		}
		wake_up_interruptible(&amp;info-&gt;open_wait);
	}
	info-&gt;flags &amp;= ~(ASYNC_NORMAL_ACTIVE|ASYNC_CALLOUT_ACTIVE|
			 ASYNC_CLOSING);
	wake_up_interruptible(&amp;info-&gt;close_wait);
	MOD_DEC_USE_COUNT;
	<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
}

<FONT COLOR=#0000FF>/*
 * rs_wait_until_sent() --- wait until the transmitter is empty
 */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> <A HREF="#rs_wait_until_sent">rs_wait_until_sent</A>(<FONT COLOR="#298C52">struct</FONT> tty_struct *tty, <FONT COLOR="#298C52">int</FONT> timeout)
{
	<FONT COLOR="#298C52">struct</FONT> async_struct * info = (<FONT COLOR="#298C52">struct</FONT> async_struct *)tty-&gt;driver_data;
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT> orig_jiffies, char_time;
	<FONT COLOR="#298C52">int</FONT> lsr;
	
	<FONT COLOR="#298C52">if</FONT> (<A HREF="#serial_paranoia_check">serial_paranoia_check</A>(info, tty-&gt;device, <FONT COLOR="#FF0000">"rs_wait_until_sent"</FONT>))
		<FONT COLOR="#298C52">return</FONT>;

	<FONT COLOR="#298C52">if</FONT> (info-&gt;state-&gt;type == PORT_UNKNOWN)
		<FONT COLOR="#298C52">return</FONT>;

	orig_jiffies = jiffies;
	<FONT COLOR=#0000FF>/*
	 * Set the check interval to be 1/5 of the estimated time to
	 * send a single character, and make it at least 1.  The check
	 * interval should also be less than the timeout.
	 * 
	 * Note: we have to use pretty tight timings here to satisfy
	 * the NIST-PCTS.
	 */</FONT>
	char_time = (info-&gt;timeout - HZ/50) / info-&gt;xmit_fifo_size;
	char_time = char_time / 5;
	<FONT COLOR="#298C52">if</FONT> (char_time == 0)
		char_time = 1;
	<FONT COLOR="#298C52">if</FONT> (timeout)
	  char_time = <A HREF="#MIN">MIN</A>(char_time, timeout);
<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_RS_WAIT_UNTIL_SENT
	printk(<FONT COLOR="#FF0000">"In rs_wait_until_sent(%d) check=%lu..."</FONT>, timeout, char_time);
	printk(<FONT COLOR="#FF0000">"jiff=%lu..."</FONT>, jiffies);
<FONT COLOR=#A521F7>#endif</FONT>
	<FONT COLOR="#298C52">while</FONT> (!((lsr = <A HREF="#serial_inp">serial_inp</A>(info, UART_LSR)) &amp; UART_LSR_TEMT)) {
<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_RS_WAIT_UNTIL_SENT
		printk(<FONT COLOR="#FF0000">"lsr = %d (jiff=%lu)..."</FONT>, lsr, jiffies);
<FONT COLOR=#A521F7>#endif</FONT>
		current-&gt;state = TASK_INTERRUPTIBLE;
		current-&gt;counter = 0;	<FONT COLOR=#0000FF>/* make us low-priority */</FONT>
		current-&gt;timeout = jiffies + char_time;
		schedule();
		<FONT COLOR="#298C52">if</FONT> (signal_pending(current))
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">if</FONT> (timeout &amp;&amp; ((orig_jiffies + timeout) &lt; jiffies))
			<FONT COLOR="#298C52">break</FONT>;
	}
	current-&gt;state = TASK_RUNNING;
<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_RS_WAIT_UNTIL_SENT
	printk(<FONT COLOR="#FF0000">"lsr = %d (jiff=%lu)...done\n"</FONT>, lsr, jiffies);
<FONT COLOR=#A521F7>#endif</FONT>
}

<FONT COLOR=#0000FF>/*
 * rs_hangup() --- called by tty_hangup() when a hangup is signaled.
 */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> <A NAME="rs_hangup">rs_hangup</A>(<FONT COLOR="#298C52">struct</FONT> tty_struct *tty)
{
	<FONT COLOR="#298C52">struct</FONT> async_struct * info = (<FONT COLOR="#298C52">struct</FONT> async_struct *)tty-&gt;driver_data;
	<FONT COLOR="#298C52">struct</FONT> serial_state *state = info-&gt;state;
	
	<FONT COLOR="#298C52">if</FONT> (<A HREF="#serial_paranoia_check">serial_paranoia_check</A>(info, tty-&gt;device, <FONT COLOR="#FF0000">"rs_hangup"</FONT>))
		<FONT COLOR="#298C52">return</FONT>;

	state = info-&gt;state;
	
	<A HREF="#rs_flush_buffer">rs_flush_buffer</A>(tty);
	<A HREF="#shutdown">shutdown</A>(info);
	info-&gt;event = 0;
	state-&gt;count = 0;
	info-&gt;flags &amp;= ~(ASYNC_NORMAL_ACTIVE|ASYNC_CALLOUT_ACTIVE);
	info-&gt;tty = 0;
	wake_up_interruptible(&amp;info-&gt;open_wait);
}

<FONT COLOR=#0000FF>/*
 * ------------------------------------------------------------
 * rs_open() and friends
 * ------------------------------------------------------------
 */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> <A HREF="#block_til_ready">block_til_ready</A>(<FONT COLOR="#298C52">struct</FONT> tty_struct *tty, <FONT COLOR="#298C52">struct</FONT> file * filp,
			   <FONT COLOR="#298C52">struct</FONT> async_struct *info)
{
	<FONT COLOR="#298C52">struct</FONT> wait_queue wait = { current, NULL };
	<FONT COLOR="#298C52">struct</FONT> serial_state *state = info-&gt;state;
	<FONT COLOR="#298C52">int</FONT>		retval;
	<FONT COLOR="#298C52">int</FONT>		do_clocal = 0;

	<FONT COLOR=#0000FF>/*
	 * If the device is in the middle of being closed, then block
	 * until it's done, and then try again.
	 */</FONT>
	<FONT COLOR="#298C52">if</FONT> (tty_hung_up_p(filp) ||
	    (info-&gt;flags &amp; ASYNC_CLOSING)) {
		<FONT COLOR="#298C52">if</FONT> (info-&gt;flags &amp; ASYNC_CLOSING)
			interruptible_sleep_on(&amp;info-&gt;close_wait);
<FONT COLOR=#A521F7>#ifdef</FONT> <A HREF="#SERIAL_DO_RESTART">SERIAL_DO_RESTART</A>
		<FONT COLOR="#298C52">return</FONT> ((info-&gt;flags &amp; ASYNC_HUP_NOTIFY) ?
			-EAGAIN : -ERESTARTSYS);
<FONT COLOR=#A521F7>#else</FONT>
		<FONT COLOR="#298C52">return</FONT> -EAGAIN;
<FONT COLOR=#A521F7>#endif</FONT>
	}

	<FONT COLOR=#0000FF>/*
	 * If this is a callout device, then just make sure the normal
	 * device isn't being used.
	 */</FONT>
	<FONT COLOR="#298C52">if</FONT> (tty-&gt;<A HREF="../includes/isdn.h.shtml#driver">driver</A>.subtype == SERIAL_TYPE_CALLOUT) {
		<FONT COLOR="#298C52">if</FONT> (info-&gt;flags &amp; ASYNC_NORMAL_ACTIVE)
			<FONT COLOR="#298C52">return</FONT> -EBUSY;
		<FONT COLOR="#298C52">if</FONT> ((info-&gt;flags &amp; ASYNC_CALLOUT_ACTIVE) &amp;&amp;
		    (info-&gt;flags &amp; ASYNC_SESSION_LOCKOUT) &amp;&amp;
		    (info-&gt;session != current-&gt;session))
		    <FONT COLOR="#298C52">return</FONT> -EBUSY;
		<FONT COLOR="#298C52">if</FONT> ((info-&gt;flags &amp; ASYNC_CALLOUT_ACTIVE) &amp;&amp;
		    (info-&gt;flags &amp; ASYNC_PGRP_LOCKOUT) &amp;&amp;
		    (info-&gt;pgrp != current-&gt;pgrp))
		    <FONT COLOR="#298C52">return</FONT> -EBUSY;
		info-&gt;flags |= ASYNC_CALLOUT_ACTIVE;
		<FONT COLOR="#298C52">return</FONT> 0;
	}
	
	<FONT COLOR=#0000FF>/*
	 * If non-blocking mode is set, or the port is not enabled,
	 * then make the check up front and then exit.
	 */</FONT>
	<FONT COLOR="#298C52">if</FONT> ((filp-&gt;f_flags &amp; O_NONBLOCK) ||
	    (tty-&gt;flags &amp; (1 &lt;&lt; TTY_IO_ERROR))) {
		<FONT COLOR="#298C52">if</FONT> (info-&gt;flags &amp; ASYNC_CALLOUT_ACTIVE)
			<FONT COLOR="#298C52">return</FONT> -EBUSY;
		info-&gt;flags |= ASYNC_NORMAL_ACTIVE;
		<FONT COLOR="#298C52">return</FONT> 0;
	}

	<FONT COLOR="#298C52">if</FONT> (info-&gt;flags &amp; ASYNC_CALLOUT_ACTIVE) {
		<FONT COLOR="#298C52">if</FONT> (state-&gt;normal_termios.c_cflag &amp; CLOCAL)
			do_clocal = 1;
	} <FONT COLOR="#298C52">else</FONT> {
		<FONT COLOR="#298C52">if</FONT> (tty-&gt;termios-&gt;c_cflag &amp; CLOCAL)
			do_clocal = 1;
	}
	
	<FONT COLOR=#0000FF>/*
	 * Block waiting for the carrier detect and the line to become
	 * free (i.e., not in use by the callout).  While we are in
	 * this loop, state-&gt;count is dropped by one, so that
	 * rs_close() knows when to free things.  We restore it upon
	 * exit, either normal or abnormal.
	 */</FONT>
	retval = 0;
	add_wait_queue(&amp;info-&gt;open_wait, &amp;wait);
<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_OPEN
	printk(<FONT COLOR="#FF0000">"block_til_ready before block: ttys%d, count = %d\n"</FONT>,
	       state-&gt;line, state-&gt;count);
<FONT COLOR=#A521F7>#endif</FONT>
	<A HREF="kdebug.h.shtml#cli">cli</A>();
	<FONT COLOR="#298C52">if</FONT> (!tty_hung_up_p(filp)) 
		state-&gt;count--;
	<A HREF="kdebug.h.shtml#sti">sti</A>();
	info-&gt;blocked_open++;
	<FONT COLOR="#298C52">while</FONT> (1) {
		<A HREF="kdebug.h.shtml#cli">cli</A>();
		<FONT COLOR="#298C52">if</FONT> (!(info-&gt;flags &amp; ASYNC_CALLOUT_ACTIVE) &amp;&amp;
		    (tty-&gt;termios-&gt;c_cflag &amp; CBAUD))
			<A HREF="#serial_out">serial_out</A>(info, UART_MCR,
				   <A HREF="#serial_inp">serial_inp</A>(info, UART_MCR) |
				   (UART_MCR_DTR | UART_MCR_RTS));
		<A HREF="kdebug.h.shtml#sti">sti</A>();
		current-&gt;state = TASK_INTERRUPTIBLE;
		<FONT COLOR="#298C52">if</FONT> (tty_hung_up_p(filp) ||
		    !(info-&gt;flags &amp; ASYNC_INITIALIZED)) {
<FONT COLOR=#A521F7>#ifdef</FONT> <A HREF="#SERIAL_DO_RESTART">SERIAL_DO_RESTART</A>
			<FONT COLOR="#298C52">if</FONT> (info-&gt;flags &amp; ASYNC_HUP_NOTIFY)
				retval = -EAGAIN;
			<FONT COLOR="#298C52">else</FONT>
				retval = -ERESTARTSYS;	
<FONT COLOR=#A521F7>#else</FONT>
			retval = -EAGAIN;
<FONT COLOR=#A521F7>#endif</FONT>
			<FONT COLOR="#298C52">break</FONT>;
		}
		<FONT COLOR="#298C52">if</FONT> (!(info-&gt;flags &amp; ASYNC_CALLOUT_ACTIVE) &amp;&amp;
		    !(info-&gt;flags &amp; ASYNC_CLOSING) &amp;&amp;
		    (do_clocal || (<A HREF="#serial_in">serial_in</A>(info, UART_MSR) &amp;
				   UART_MSR_DCD)))
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">if</FONT> (signal_pending(current)) {
			retval = -ERESTARTSYS;
			<FONT COLOR="#298C52">break</FONT>;
		}
<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_OPEN
		printk(<FONT COLOR="#FF0000">"block_til_ready blocking: ttys%d, count = %d\n"</FONT>,
		       info-&gt;line, state-&gt;count);
<FONT COLOR=#A521F7>#endif</FONT>
		schedule();
	}
	current-&gt;state = TASK_RUNNING;
	remove_wait_queue(&amp;info-&gt;open_wait, &amp;wait);
	<FONT COLOR="#298C52">if</FONT> (!tty_hung_up_p(filp))
		state-&gt;count++;
	info-&gt;blocked_open--;
<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_OPEN
	printk(<FONT COLOR="#FF0000">"block_til_ready after blocking: ttys%d, count = %d\n"</FONT>,
	       info-&gt;line, state-&gt;count);
<FONT COLOR=#A521F7>#endif</FONT>
	<FONT COLOR="#298C52">if</FONT> (retval)
		<FONT COLOR="#298C52">return</FONT> retval;
	info-&gt;flags |= ASYNC_NORMAL_ACTIVE;
	<FONT COLOR="#298C52">return</FONT> 0;
}

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> <A HREF="#get_async_struct">get_async_struct</A>(<FONT COLOR="#298C52">int</FONT> line, <FONT COLOR="#298C52">struct</FONT> async_struct **ret_info)
{
	<FONT COLOR="#298C52">struct</FONT> async_struct *info;
	<FONT COLOR="#298C52">struct</FONT> serial_state *sstate;

	sstate = rs_table + line;
	sstate-&gt;count++;
	<FONT COLOR="#298C52">if</FONT> (sstate-&gt;info) {
		*ret_info = sstate-&gt;info;
		<FONT COLOR="#298C52">return</FONT> 0;
	}
	info = kmalloc(<FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> async_struct), GFP_KERNEL);
	<FONT COLOR="#298C52">if</FONT> (!info) {
		sstate-&gt;count--;
		<FONT COLOR="#298C52">return</FONT> -ENOMEM;
	}
	memset(info, 0, <FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> async_struct));
	info-&gt;magic = SERIAL_MAGIC;
	info-&gt;port = sstate-&gt;port;
	info-&gt;flags = sstate-&gt;flags;
	info-&gt;xmit_fifo_size = sstate-&gt;xmit_fifo_size;
	info-&gt;line = line;
	info-&gt;tqueue.routine = <A HREF="#do_softint">do_softint</A>;
	info-&gt;tqueue.data = info;
	info-&gt;state = sstate;
	<FONT COLOR="#298C52">if</FONT> (sstate-&gt;info) {
		kfree_s(info, <FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> async_struct));
		*ret_info = sstate-&gt;info;
		<FONT COLOR="#298C52">return</FONT> 0;
	}
	*ret_info = sstate-&gt;info = info;
	<FONT COLOR="#298C52">return</FONT> 0;
}

<FONT COLOR=#0000FF>/*
 * This routine is called whenever a serial port is opened.  It
 * enables interrupts for a serial port, linking in its async structure into
 * the IRQ chain.   It also performs the serial-specific
 * initialization for the tty structure.
 */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> <A HREF="#rs_open">rs_open</A>(<FONT COLOR="#298C52">struct</FONT> tty_struct *tty, <FONT COLOR="#298C52">struct</FONT> file * filp)
{
	<FONT COLOR="#298C52">struct</FONT> async_struct	*info;
	<FONT COLOR="#298C52">int</FONT> 			retval, line;
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT>		page;

	line = MINOR(tty-&gt;device) - tty-&gt;<A HREF="../includes/isdn.h.shtml#driver">driver</A>.minor_start;
	<FONT COLOR="#298C52">if</FONT> ((line &lt; 0) || (line &gt;= <A HREF="#NR_PORTS">NR_PORTS</A>))
		<FONT COLOR="#298C52">return</FONT> -ENODEV;
	retval = <A HREF="#get_async_struct">get_async_struct</A>(line, &amp;info);
	<FONT COLOR="#298C52">if</FONT> (retval)
		<FONT COLOR="#298C52">return</FONT> retval;
	<FONT COLOR="#298C52">if</FONT> (<A HREF="#serial_paranoia_check">serial_paranoia_check</A>(info, tty-&gt;device, <FONT COLOR="#FF0000">"rs_open"</FONT>))
		<FONT COLOR="#298C52">return</FONT> -ENODEV;

<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_OPEN
	printk(<FONT COLOR="#FF0000">"rs_open %s%d, count = %d\n"</FONT>, tty-&gt;<A HREF="../includes/isdn.h.shtml#driver">driver</A>.<A HREF="isdn_common.c.shtml#name">name</A>, info-&gt;line,
	       info-&gt;state-&gt;count);
<FONT COLOR=#A521F7>#endif</FONT>
	tty-&gt;driver_data = info;
	info-&gt;tty = tty;

	<FONT COLOR="#298C52">if</FONT> (!tmp_buf) {
		page = get_free_page(GFP_KERNEL);
		<FONT COLOR="#298C52">if</FONT> (!page)
			<FONT COLOR="#298C52">return</FONT> -ENOMEM;
		<FONT COLOR="#298C52">if</FONT> (tmp_buf)
			free_page(page);
		<FONT COLOR="#298C52">else</FONT>
			tmp_buf = (<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">char</FONT> *) page;
	}

	<FONT COLOR=#0000FF>/*
	 * If the port is the middle of closing, bail out now
	 */</FONT>
	<FONT COLOR="#298C52">if</FONT> (tty_hung_up_p(filp) ||
	    (info-&gt;flags &amp; ASYNC_CLOSING)) {
		<FONT COLOR="#298C52">if</FONT> (info-&gt;flags &amp; ASYNC_CLOSING)
			interruptible_sleep_on(&amp;info-&gt;close_wait);
<FONT COLOR=#A521F7>#ifdef</FONT> <A HREF="#SERIAL_DO_RESTART">SERIAL_DO_RESTART</A>
		<FONT COLOR="#298C52">return</FONT> ((info-&gt;flags &amp; ASYNC_HUP_NOTIFY) ?
			-EAGAIN : -ERESTARTSYS);
<FONT COLOR=#A521F7>#else</FONT>
		<FONT COLOR="#298C52">return</FONT> -EAGAIN;
<FONT COLOR=#A521F7>#endif</FONT>
	}

	<FONT COLOR=#0000FF>/*
	 * Start up serial port
	 */</FONT>
	retval = <A HREF="#startup">startup</A>(info);
	<FONT COLOR="#298C52">if</FONT> (retval)
		<FONT COLOR="#298C52">return</FONT> retval;

	MOD_INC_USE_COUNT;
	retval = <A HREF="#block_til_ready">block_til_ready</A>(tty, filp, info);
	<FONT COLOR="#298C52">if</FONT> (retval) {
<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_OPEN
		printk(<FONT COLOR="#FF0000">"rs_open returning after block_til_ready with %d\n"</FONT>,
		       retval);
<FONT COLOR=#A521F7>#endif</FONT>
		<FONT COLOR="#298C52">return</FONT> retval;
	}

	<FONT COLOR="#298C52">if</FONT> ((info-&gt;state-&gt;count == 1) &amp;&amp;
	    (info-&gt;flags &amp; ASYNC_SPLIT_TERMIOS)) {
		<FONT COLOR="#298C52">if</FONT> (tty-&gt;<A HREF="../includes/isdn.h.shtml#driver">driver</A>.subtype == SERIAL_TYPE_NORMAL)
			*tty-&gt;termios = info-&gt;state-&gt;normal_termios;
		<FONT COLOR="#298C52">else</FONT> 
			*tty-&gt;termios = info-&gt;state-&gt;callout_termios;
		<A HREF="#change_speed">change_speed</A>(info);
	}
	info-&gt;session = current-&gt;session;
	info-&gt;pgrp = current-&gt;pgrp;

<FONT COLOR=#A521F7>#ifdef</FONT> SERIAL_DEBUG_OPEN
	printk(<FONT COLOR="#FF0000">"rs_open ttys%d successful..."</FONT>, info-&gt;line);
<FONT COLOR=#A521F7>#endif</FONT>
	<FONT COLOR="#298C52">return</FONT> 0;
}

<FONT COLOR=#0000FF>/*
 * /proc fs routines....
 */</FONT>

<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">int</FONT> <FONT COLOR="#298C52">inline</FONT> <A HREF="#line_info">line_info</A>(<FONT COLOR="#298C52">char</FONT> *buf, <FONT COLOR="#298C52">struct</FONT> serial_state *state)
{
	<FONT COLOR="#298C52">struct</FONT> async_struct *info = state-&gt;info, scr_info;
	<FONT COLOR="#298C52">char</FONT>	stat_buf[30], control, status;
	<FONT COLOR="#298C52">int</FONT>	ret;

	ret = sprintf(buf, <FONT COLOR="#FF0000">"%d: uart:%s port:%X irq:%d"</FONT>,
		      state-&gt;line, uart_config[state-&gt;type].<A HREF="isdn_common.c.shtml#name">name</A>, 
		      state-&gt;port, state-&gt;irq);

	<FONT COLOR="#298C52">if</FONT> (!state-&gt;port || (state-&gt;type == PORT_UNKNOWN)) {
		ret += sprintf(buf+ret, <FONT COLOR="#FF0000">"\n"</FONT>);
		<FONT COLOR="#298C52">return</FONT> ret;
	}

	<FONT COLOR=#0000FF>/*
	 * Figure out the current RS-232 lines
	 */</FONT>
	<FONT COLOR="#298C52">if</FONT> (!info) {
		info = &amp;scr_info;	<FONT COLOR=#0000FF>/* This is just for serial_{in,out} */</FONT>

		info-&gt;magic = SERIAL_MAGIC;
		info-&gt;port = state-&gt;port;
		info-&gt;flags = state-&gt;flags;
		info-&gt;quot = 0;
		info-&gt;tty = 0;
	}
	<A HREF="kdebug.h.shtml#cli">cli</A>();
	status = <A HREF="#serial_in">serial_in</A>(info, UART_MSR);
	control = info ? info-&gt;MCR : <A HREF="#serial_in">serial_in</A>(info, UART_MCR);
	<A HREF="kdebug.h.shtml#sti">sti</A>();
	
	stat_buf[0] = 0;
	stat_buf[1] = 0;
	<FONT COLOR="#298C52">if</FONT> (control &amp; UART_MCR_RTS)
		strcat(stat_buf, <FONT COLOR="#FF0000">"|RTS"</FONT>);
	<FONT COLOR="#298C52">if</FONT> (status &amp; UART_MSR_CTS)
		strcat(stat_buf, <FONT COLOR="#FF0000">"|CTS"</FONT>);
	<FONT COLOR="#298C52">if</FONT> (control &amp; UART_MCR_DTR)
		strcat(stat_buf, <FONT COLOR="#FF0000">"|DTR"</FONT>);
	<FONT COLOR="#298C52">if</FONT> (status &amp; UART_MSR_DSR)
		strcat(stat_buf, <FONT COLOR="#FF0000">"|DSR"</FONT>);
	<FONT COLOR="#298C52">if</FONT> (status &amp; UART_MSR_DCD)
		strcat(stat_buf, <FONT COLOR="#FF0000">"|CD"</FONT>);
	<FONT COLOR="#298C52">if</FONT> (status &amp; UART_MSR_RI)
		strcat(stat_buf, <FONT COLOR="#FF0000">"|RI"</FONT>);

	<FONT COLOR="#298C52">if</FONT> (info-&gt;quot) {
		ret += sprintf(buf+ret, <FONT COLOR="#FF0000">" baud:%d"</FONT>,
			       state-&gt;baud_base / info-&gt;quot);
	}

	ret += sprintf(buf+ret, <FONT COLOR="#FF0000">" tx:%d rx:%d"</FONT>,
		      state-&gt;icount.tx, state-&gt;icount.rx);

	<FONT COLOR="#298C52">if</FONT> (state-&gt;icount.frame)
		ret += sprintf(buf+ret, <FONT COLOR="#FF0000">" fe:%d"</FONT>, state-&gt;icount.frame);
	
	<FONT COLOR="#298C52">if</FONT> (state-&gt;icount.parity)
		ret += sprintf(buf+ret, <FONT COLOR="#FF0000">" pe:%d"</FONT>, state-&gt;icount.parity);
	
	<FONT COLOR="#298C52">if</FONT> (state-&gt;icount.brk)
		ret += sprintf(buf+ret, <FONT COLOR="#FF0000">" brk:%d"</FONT>, state-&gt;icount.brk);	

	<FONT COLOR="#298C52">if</FONT> (state-&gt;icount.overrun)
		ret += sprintf(buf+ret, <FONT COLOR="#FF0000">" oe:%d"</FONT>, state-&gt;icount.overrun);

	<FONT COLOR=#0000FF>/*
	 * Last thing is the RS-232 status lines
	 */</FONT>
	ret += sprintf(buf+ret, <FONT COLOR="#FF0000">" %s\n"</FONT>, stat_buf+1);
	<FONT COLOR="#298C52">return</FONT> ret;
}

<FONT COLOR="#298C52">int</FONT> <A HREF="#rs_read_proc">rs_read_proc</A>(<FONT COLOR="#298C52">char</FONT> *page, <FONT COLOR="#298C52">char</FONT> **start, off_t off, <FONT COLOR="#298C52">int</FONT> count,
		 <FONT COLOR="#298C52">int</FONT> *eof, <FONT COLOR="#298C52">void</FONT> *data)
{
	<FONT COLOR="#298C52">int</FONT> i, len = 0;
	off_t	begin = 0;

	len += sprintf(page, <FONT COLOR="#FF0000">"serinfo:1.0 driver:%s\n"</FONT>, serial_version);
	<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; <A HREF="#NR_PORTS">NR_PORTS</A> &amp;&amp; len &lt; 4000; i++) {
		len += <A HREF="#line_info">line_info</A>(page + len, &amp;rs_table[i]);
		<FONT COLOR="#298C52">if</FONT> (len+begin &gt; off+count)
			<FONT COLOR="#298C52">goto</FONT> done;
		<FONT COLOR="#298C52">if</FONT> (len+begin &lt; off) {
			begin += len;
			len = 0;
		}
	}
	*eof = 1;
done:
	<FONT COLOR="#298C52">if</FONT> (off &gt;= len+begin)
		<FONT COLOR="#298C52">return</FONT> 0;
	*start = page + (begin-off);
	<FONT COLOR="#298C52">return</FONT> ((count &lt; begin+len-off) ? count : begin+len-off);
}

<FONT COLOR=#0000FF>/*
 * ---------------------------------------------------------------------
 * rs_init() and friends
 *
 * rs_init() is called at boot-time to initialize the serial driver.
 * ---------------------------------------------------------------------
 */</FONT>

<FONT COLOR=#0000FF>/*
 * This routine prints out the appropriate serial driver version
 * number, and identifies which options were configured into this
 * driver.
 */</FONT>
<FONT COLOR="#298C52">static</FONT> <A HREF="#_INLINE_">_INLINE_</A> <FONT COLOR="#298C52">void</FONT> <A NAME="show_serial_version">show_serial_version</A>(<FONT COLOR="#298C52">void</FONT>)
{
 	printk(KERN_INFO <FONT COLOR="#FF0000">"ISDN %s version %s enabled"</FONT>, serial_name, serial_version);
}

<FONT COLOR=#0000FF>/*
 * This routine is called by rs_init() to initialize a specific serial
 * port.  It determines what type of UART chip this serial port is
 * using: 8250, 16450, 16550, 16550A.  The important question is
 * whether or not this UART is a 16550A or not, since this will
 * determine whether or not we can use its FIFO features or not.
 */</FONT>
<FONT COLOR="#298C52">static</FONT> <FONT COLOR="#298C52">void</FONT> <A HREF="#autoconfig">autoconfig</A>(<FONT COLOR="#298C52">struct</FONT> serial_state * state)
{
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">char</FONT> status1, status2, scratch, scratch2;
	<FONT COLOR="#298C52">struct</FONT> async_struct *info, scr_info;
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT> flags;

	state-&gt;type = PORT_UNKNOWN;
	
	<FONT COLOR="#298C52">if</FONT> (!state-&gt;port)
		<FONT COLOR="#298C52">return</FONT>;
		
	info = &amp;scr_info;	<FONT COLOR=#0000FF>/* This is just for serial_{in,out} */</FONT>

	info-&gt;magic = SERIAL_MAGIC;
	info-&gt;port = state-&gt;port;
	info-&gt;flags = state-&gt;flags;

	save_flags(flags); <A HREF="kdebug.h.shtml#cli">cli</A>();
	
	<FONT COLOR=#0000FF>/*
	 * Do a simple existence test first; if we fail this, there's
	 * no point trying anything else.
	 *
	 * 0x80 is used as a nonsense port to prevent against false
	 * positives due to ISA bus float.  The assumption is that
	 * 0x80 is a non-existent port; which should be safe since
	 * include/asm/io.h also makes this assumption.
	 */</FONT>
	scratch = <A HREF="#serial_inp">serial_inp</A>(info, UART_IER);
	<A HREF="#serial_outp">serial_outp</A>(info, UART_IER, 0);
	outb(0xff, 0x080);
	scratch2 = <A HREF="#serial_inp">serial_inp</A>(info, UART_IER);
	<A HREF="#serial_outp">serial_outp</A>(info, UART_IER, scratch);
	<FONT COLOR="#298C52">if</FONT> (scratch2) {
		<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
		<FONT COLOR="#298C52">return</FONT>;		<FONT COLOR=#0000FF>/* We failed; there's nothing here */</FONT>
	}

	<FONT COLOR=#0000FF>/* 
	 * Check to see if a UART is really there.  Certain broken
	 * internal modems based on the Rockwell chipset fail this
	 * test, because they apparently don't implement the loopback
	 * test mode.  So this test is skipped on the COM 1 through
	 * COM 4 ports.  This *should* be safe, since no board
	 * manufacturer would be stupid enough to design a board
	 * that conflicts with COM 1-4 --- we hope!
	 */</FONT>
	<FONT COLOR="#298C52">if</FONT> (!(state-&gt;flags &amp; ASYNC_SKIP_TEST)) {
		scratch = <A HREF="#serial_inp">serial_inp</A>(info, UART_MCR);
		<A HREF="#serial_outp">serial_outp</A>(info, UART_MCR, UART_MCR_LOOP | scratch);
		scratch2 = <A HREF="#serial_inp">serial_inp</A>(info, UART_MSR);
		<A HREF="#serial_outp">serial_outp</A>(info, UART_MCR, UART_MCR_LOOP | 0x0A);
		status1 = <A HREF="#serial_inp">serial_inp</A>(info, UART_MSR) &amp; 0xF0;
		<A HREF="#serial_outp">serial_outp</A>(info, UART_MCR, scratch);
		<A HREF="#serial_outp">serial_outp</A>(info, UART_MSR, scratch2);
		<FONT COLOR="#298C52">if</FONT> (status1 != 0x90) {
			<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
			<FONT COLOR="#298C52">return</FONT>;
		}
	} 
	
	<FONT COLOR=#0000FF>/*
	 * If the AUTO_IRQ flag is set, try to do the automatic IRQ
	 * detection.
	 */</FONT>
	<FONT COLOR="#298C52">if</FONT> (state-&gt;flags &amp; ASYNC_AUTO_IRQ)
		state-&gt;irq = do_auto_irq(info);
		
	scratch2 = <A HREF="#serial_in">serial_in</A>(info, UART_LCR);
	<A HREF="#serial_outp">serial_outp</A>(info, UART_LCR, 0xBF); <FONT COLOR=#0000FF>/* set up for StarTech test */</FONT>
	<A HREF="#serial_outp">serial_outp</A>(info, UART_EFR, 0);	<FONT COLOR=#0000FF>/* EFR is the same as FCR */</FONT>
	<A HREF="#serial_outp">serial_outp</A>(info, UART_LCR, 0);
	<A HREF="#serial_outp">serial_outp</A>(info, UART_FCR, UART_FCR_ENABLE_FIFO);
	scratch = <A HREF="#serial_in">serial_in</A>(info, UART_IIR) &gt;&gt; 6;
	<FONT COLOR="#298C52">switch</FONT> (scratch) {
		<FONT COLOR="#298C52">case</FONT> 0:
			state-&gt;type = PORT_16450;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> 1:
			state-&gt;type = PORT_UNKNOWN;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> 2:
			state-&gt;type = PORT_16550;
			<FONT COLOR="#298C52">break</FONT>;
		<FONT COLOR="#298C52">case</FONT> 3:
			state-&gt;type = PORT_16550A;
			<FONT COLOR="#298C52">break</FONT>;
	}
	<FONT COLOR="#298C52">if</FONT> (state-&gt;type == PORT_16550A) {
		<FONT COLOR=#0000FF>/* Check for Startech UART's */</FONT>
		<A HREF="#serial_outp">serial_outp</A>(info, UART_LCR, scratch2 | UART_LCR_DLAB);
		<FONT COLOR="#298C52">if</FONT> (<A HREF="#serial_in">serial_in</A>(info, UART_EFR) == 0) {
			state-&gt;type = PORT_16650;
		} <FONT COLOR="#298C52">else</FONT> {
			<A HREF="#serial_outp">serial_outp</A>(info, UART_LCR, 0xBF);
			<FONT COLOR="#298C52">if</FONT> (<A HREF="#serial_in">serial_in</A>(info, UART_EFR) == 0)
				state-&gt;type = PORT_16650V2;
		}
	}
	<FONT COLOR="#298C52">if</FONT> (state-&gt;type == PORT_16550A) {
		<FONT COLOR=#0000FF>/* Check for TI 16750 */</FONT>
		<A HREF="#serial_outp">serial_outp</A>(info, UART_LCR, scratch2 | UART_LCR_DLAB);
		<A HREF="#serial_outp">serial_outp</A>(info, UART_FCR,
			    UART_FCR_ENABLE_FIFO | UART_FCR7_64BYTE);
		scratch = <A HREF="#serial_in">serial_in</A>(info, UART_IIR) &gt;&gt; 5;
		<FONT COLOR="#298C52">if</FONT> (scratch == 7) {
			<A HREF="#serial_outp">serial_outp</A>(info, UART_LCR, 0);
			scratch = <A HREF="#serial_in">serial_in</A>(info, UART_IIR) &gt;&gt; 5;
			<FONT COLOR="#298C52">if</FONT> (scratch == 6)
				state-&gt;type = PORT_16750;
		}
		<A HREF="#serial_outp">serial_outp</A>(info, UART_FCR, UART_FCR_ENABLE_FIFO);
	}
	<A HREF="#serial_outp">serial_outp</A>(info, UART_LCR, scratch2);
	<FONT COLOR="#298C52">if</FONT> (state-&gt;type == PORT_16450) {
		scratch = <A HREF="#serial_in">serial_in</A>(info, UART_SCR);
		<A HREF="#serial_outp">serial_outp</A>(info, UART_SCR, 0xa5);
		status1 = <A HREF="#serial_in">serial_in</A>(info, UART_SCR);
		<A HREF="#serial_outp">serial_outp</A>(info, UART_SCR, 0x5a);
		status2 = <A HREF="#serial_in">serial_in</A>(info, UART_SCR);
		<A HREF="#serial_outp">serial_outp</A>(info, UART_SCR, scratch);

		<FONT COLOR="#298C52">if</FONT> ((status1 != 0xa5) || (status2 != 0x5a))
			state-&gt;type = PORT_8250;
	}
	state-&gt;xmit_fifo_size =	uart_config[state-&gt;type].dfl_xmit_fifo_size;

	<FONT COLOR="#298C52">if</FONT> (state-&gt;type == PORT_UNKNOWN) {
		<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
		<FONT COLOR="#298C52">return</FONT>;
	}

	request_region(info-&gt;port,8,<FONT COLOR="#FF0000">"serial(auto)"</FONT>);

	<FONT COLOR=#0000FF>/*
	 * Reset the UART.
	 */</FONT>
<FONT COLOR=#A521F7>#if</FONT> defined(__alpha__) &amp;&amp; !defined(CONFIG_PCI)
	<FONT COLOR=#0000FF>/*
	 * I wonder what DEC did to the OUT1 and OUT2 lines?
	 * clearing them results in endless interrupts.
	 */</FONT>
	<A HREF="#serial_outp">serial_outp</A>(info, UART_MCR, 0x0c);
<FONT COLOR=#A521F7>#else</FONT>
	<A HREF="#serial_outp">serial_outp</A>(info, UART_MCR, 0x00);
<FONT COLOR=#A521F7>#endif</FONT>
	<A HREF="#serial_outp">serial_outp</A>(info, UART_FCR, (UART_FCR_CLEAR_RCVR |
				     UART_FCR_CLEAR_XMIT));
	(<FONT COLOR="#298C52">void</FONT>)<A HREF="#serial_in">serial_in</A>(info, UART_RX);
	
	<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);
}

<FONT COLOR=#0000FF>/*
 * The serial driver boot-time initialization code!
 */</FONT>
<A NAME="__initfunc">__initfunc</A>(<FONT COLOR="#298C52">int</FONT> rs_init(<FONT COLOR="#298C52">void</FONT>))
{
	<FONT COLOR="#298C52">int</FONT> i;
	<FONT COLOR="#298C52">struct</FONT> serial_state * state;
	
	init_bh(SERIAL_BH, <A HREF="#do_serial_bh">do_serial_bh</A>);
	timer_table[RS_TIMER].fn = <A HREF="#rs_timer">rs_timer</A>;
	timer_table[RS_TIMER].expires = 0;
<FONT COLOR=#A521F7>#ifdef</FONT> CONFIG_AUTO_IRQ
	rs_wild_int_mask = check_wild_interrupts(1);
<FONT COLOR=#A521F7>#endif</FONT>

	<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; 16; i++) {
		IRQ_ports[i] = 0;
		IRQ_timeout[i] = 0;
<FONT COLOR=#A521F7>#ifdef</FONT> CONFIG_SERIAL_MULTIPORT
		memset(&amp;rs_multiport[i], 0,
		       <FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> rs_multiport_struct));
<FONT COLOR=#A521F7>#endif</FONT>
	}
<FONT COLOR=#A521F7>#ifdef</FONT> CONFIG_SERIAL_CONSOLE
	<FONT COLOR=#0000FF>/*
	 *	The interrupt of the serial console port
	 *	can't be shared.
	 */</FONT>
	<FONT COLOR="#298C52">if</FONT> (sercons.flags &amp; CON_FIRST) {
		<FONT COLOR="#298C52">for</FONT>(i = 0; i &lt; <A HREF="#NR_PORTS">NR_PORTS</A>; i++)
			<FONT COLOR="#298C52">if</FONT> (i != sercons.index &amp;&amp;
			    rs_table[i].irq == rs_table[sercons.index].irq)
				rs_table[i].irq = 0;
	}
<FONT COLOR=#A521F7>#endif</FONT>
	<A HREF="#show_serial_version">show_serial_version</A>();

	<FONT COLOR=#0000FF>/* Initialize the tty_driver structure */</FONT>
	
	memset(&amp;serial_driver, 0, <FONT COLOR="#298C52">sizeof</FONT>(<FONT COLOR="#298C52">struct</FONT> tty_driver));
	serial_driver.magic = TTY_DRIVER_MAGIC;
	serial_driver.driver_name = <FONT COLOR="#FF0000">"serial"</FONT>;
	serial_driver.<A HREF="isdn_common.c.shtml#name">name</A> = <FONT COLOR="#FF0000">"ttyS"</FONT>;
	serial_driver.major = TTY_MAJOR;
	serial_driver.minor_start = 64;
	serial_driver.num = <A HREF="#NR_PORTS">NR_PORTS</A>;
	serial_driver.type = TTY_DRIVER_TYPE_SERIAL;
	serial_driver.subtype = SERIAL_TYPE_NORMAL;
	serial_driver.init_termios = tty_std_termios;
	serial_driver.init_termios.c_cflag =
		B9600 | CS8 | CREAD | HUPCL | CLOCAL;
	serial_driver.flags = TTY_DRIVER_REAL_RAW;
	serial_driver.refcount = &amp;serial_refcount;
	serial_driver.table = serial_table;
	serial_driver.termios = serial_termios;
	serial_driver.termios_locked = serial_termios_locked;

	serial_driver.open = <A HREF="#rs_open">rs_open</A>;
	serial_driver.close = <A HREF="#rs_close">rs_close</A>;
	serial_driver.write = <A HREF="#rs_write">rs_write</A>;
	serial_driver.put_char = <A HREF="#rs_put_char">rs_put_char</A>;
	serial_driver.flush_chars = <A HREF="#rs_flush_chars">rs_flush_chars</A>;
	serial_driver.write_room = <A HREF="#rs_write_room">rs_write_room</A>;
	serial_driver.chars_in_buffer = <A HREF="#rs_chars_in_buffer">rs_chars_in_buffer</A>;
	serial_driver.flush_buffer = <A HREF="#rs_flush_buffer">rs_flush_buffer</A>;
	serial_driver.ioctl = <A HREF="#rs_ioctl">rs_ioctl</A>;
	serial_driver.throttle = <A HREF="#rs_throttle">rs_throttle</A>;
	serial_driver.unthrottle = <A HREF="#rs_unthrottle">rs_unthrottle</A>;
	serial_driver.send_xchar = <A HREF="#rs_send_xchar">rs_send_xchar</A>;
	serial_driver.set_termios = <A HREF="#rs_set_termios">rs_set_termios</A>;
	serial_driver.stop = <A HREF="#rs_stop">rs_stop</A>;
	serial_driver.start = <A HREF="#rs_start">rs_start</A>;
	serial_driver.hangup = <A HREF="#rs_hangup">rs_hangup</A>;
	serial_driver.break_ctl = <A HREF="#rs_break">rs_break</A>;
	serial_driver.wait_until_sent = <A HREF="#rs_wait_until_sent">rs_wait_until_sent</A>;
	serial_driver.read_proc = <A HREF="#rs_read_proc">rs_read_proc</A>;
	
	<FONT COLOR=#0000FF>/*
	 * The callout device is just like normal device except for
	 * major number and the subtype code.
	 */</FONT>
	callout_driver = serial_driver;
	callout_driver.<A HREF="isdn_common.c.shtml#name">name</A> = <FONT COLOR="#FF0000">"cua"</FONT>;
	callout_driver.major = TTYAUX_MAJOR;
	callout_driver.subtype = SERIAL_TYPE_CALLOUT;
	callout_driver.read_proc = 0;
	callout_driver.proc_entry = 0;

	<FONT COLOR="#298C52">if</FONT> (tty_register_driver(&amp;serial_driver))
		panic(<FONT COLOR="#FF0000">"Couldn't register serial driver\n"</FONT>);
	<FONT COLOR="#298C52">if</FONT> (tty_register_driver(&amp;callout_driver))
		panic(<FONT COLOR="#FF0000">"Couldn't register callout driver\n"</FONT>);
	
	<FONT COLOR="#298C52">for</FONT> (i = 0, state = rs_table; i &lt; <A HREF="#NR_PORTS">NR_PORTS</A>; i++,state++) {
		state-&gt;magic = SSTATE_MAGIC;
		state-&gt;line = i;
		state-&gt;type = PORT_UNKNOWN;
		state-&gt;custom_divisor = 0;
		state-&gt;close_delay = 5*HZ/10;
		state-&gt;closing_wait = 30*HZ;
		state-&gt;callout_termios = callout_driver.init_termios;
		state-&gt;normal_termios = serial_driver.init_termios;
		state-&gt;icount.cts = state-&gt;icount.dsr = 
			state-&gt;icount.rng = state-&gt;icount.dcd = 0;
		state-&gt;icount.rx = state-&gt;icount.tx = 0;
		state-&gt;icount.frame = state-&gt;icount.parity = 0;
		state-&gt;icount.overrun = state-&gt;icount.brk = 0;
		<FONT COLOR="#298C52">if</FONT> (state-&gt;irq == 2)
			state-&gt;irq = 9;
		<FONT COLOR="#298C52">if</FONT> (state-&gt;type == PORT_UNKNOWN) {
			<FONT COLOR="#298C52">if</FONT> (!(state-&gt;flags &amp; ASYNC_BOOT_AUTOCONF))
				<FONT COLOR="#298C52">continue</FONT>;
			<FONT COLOR="#298C52">if</FONT> (check_region(state-&gt;port,8))
				<FONT COLOR="#298C52">continue</FONT>;
			<A HREF="#autoconfig">autoconfig</A>(state);
			<FONT COLOR="#298C52">if</FONT> (state-&gt;type == PORT_UNKNOWN)
				<FONT COLOR="#298C52">continue</FONT>;
		}
		printk(KERN_INFO <FONT COLOR="#FF0000">"ttyS%02d%s at 0x%04x (irq = %d) is a %s\n"</FONT>,
		       state-&gt;line,
		       (state-&gt;flags &amp; ASYNC_FOURPORT) ? <FONT COLOR="#FF0000">" FourPort"</FONT> : <FONT COLOR="#FF0000">""</FONT>,
		       state-&gt;port, state-&gt;irq,
		       uart_config[state-&gt;type].<A HREF="isdn_common.c.shtml#name">name</A>);
	}
	<FONT COLOR="#298C52">return</FONT> 0;
}

<FONT COLOR=#A521F7>#ifdef</FONT> MODULE
<FONT COLOR="#298C52">int</FONT> <A HREF="isdn_bsdcomp.c.shtml#init_module">init_module</A>(<FONT COLOR="#298C52">void</FONT>)
{
	<FONT COLOR="#298C52">return</FONT> rs_init();
}

<FONT COLOR="#298C52">void</FONT> <A HREF="isdn_bsdcomp.c.shtml#cleanup_module">cleanup_module</A>(<FONT COLOR="#298C52">void</FONT>) 
{
	<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT> flags;
	<FONT COLOR="#298C52">int</FONT> e1, e2;
	<FONT COLOR="#298C52">int</FONT> i;

	<FONT COLOR=#0000FF>/* printk("Unloading %s: version %s\n", serial_name, serial_version); */</FONT>
	save_flags(flags);
	<A HREF="kdebug.h.shtml#cli">cli</A>();
	timer_active &amp;= ~(1 &lt;&lt; RS_TIMER);
	timer_table[RS_TIMER].fn = NULL;
	timer_table[RS_TIMER].expires = 0;
        remove_bh(SERIAL_BH);
	<FONT COLOR="#298C52">if</FONT> ((e1 = tty_unregister_driver(&amp;serial_driver)))
		printk(<FONT COLOR="#FF0000">"SERIAL: failed to unregister serial driver (%d)\n"</FONT>,
		       e1);
	<FONT COLOR="#298C52">if</FONT> ((e2 = tty_unregister_driver(&amp;callout_driver)))
		printk(<FONT COLOR="#FF0000">"SERIAL: failed to unregister callout driver (%d)\n"</FONT>, 
		       e2);
	<A HREF="kdebug.h.shtml#restore_flags">restore_flags</A>(flags);

	<FONT COLOR="#298C52">for</FONT> (i = 0; i &lt; <A HREF="#NR_PORTS">NR_PORTS</A>; i++) {
		<FONT COLOR="#298C52">if</FONT> (rs_table[i].type != PORT_UNKNOWN)
			release_region(rs_table[i].port, 8);
	}
	<FONT COLOR="#298C52">if</FONT> (tmp_buf) {
		free_page((<FONT COLOR="#298C52">unsigned</FONT> <FONT COLOR="#298C52">long</FONT>) tmp_buf);
		tmp_buf = NULL;
	}
}
<FONT COLOR=#A521F7>#endif</FONT> <FONT COLOR=#0000FF>/* MODULE */</FONT>
</BODY>

</HTML>
